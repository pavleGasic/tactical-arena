shadow$provide.module$node_modules$$pixi$utils$lib$color$premultiply = function(global, require, module, exports) {
  var color = require("module$node_modules$$pixi$color$lib$index"), constants = require("module$node_modules$$pixi$constants$lib$index"), deprecation = require("module$node_modules$$pixi$utils$lib$logging$deprecation");
  const premultiplyBlendMode = function() {
    const pm = [], npm = [];
    for (var i = 0; 32 > i; i++) {
      pm[i] = i, npm[i] = i;
    }
    pm[constants.BLEND_MODES.NORMAL_NPM] = constants.BLEND_MODES.NORMAL;
    pm[constants.BLEND_MODES.ADD_NPM] = constants.BLEND_MODES.ADD;
    pm[constants.BLEND_MODES.SCREEN_NPM] = constants.BLEND_MODES.SCREEN;
    npm[constants.BLEND_MODES.NORMAL] = constants.BLEND_MODES.NORMAL_NPM;
    npm[constants.BLEND_MODES.ADD] = constants.BLEND_MODES.ADD_NPM;
    npm[constants.BLEND_MODES.SCREEN] = constants.BLEND_MODES.SCREEN_NPM;
    i = [];
    return i.push(npm), i.push(pm), i;
  }();
  exports.correctBlendMode = function(blendMode, premultiplied) {
    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];
  };
  exports.premultiplyBlendMode = premultiplyBlendMode;
  exports.premultiplyRgba = function(rgb, alpha, out, premultiply = !0) {
    return deprecation.deprecation("7.2.0", "utils.premultiplyRgba has moved to Color.premultiply"), color.Color.shared.setValue(rgb).premultiply(alpha, premultiply).toArray(out ?? new Float32Array(4));
  };
  exports.premultiplyTint = function(tint, alpha) {
    return deprecation.deprecation("7.2.0", "utils.premultiplyTint has moved to Color.toPremultiplied"), color.Color.shared.setValue(tint).toPremultiplied(alpha);
  };
  exports.premultiplyTintToRgba = function(tint, alpha, out, premultiply = !0) {
    return deprecation.deprecation("7.2.0", "utils.premultiplyTintToRgba has moved to Color.premultiply"), color.Color.shared.setValue(tint).premultiply(alpha, premultiply).toArray(out ?? new Float32Array(4));
  };
};

//# sourceMappingURL=module$node_modules$$pixi$utils$lib$color$premultiply.js.map
