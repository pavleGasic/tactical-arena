{
"version":3,
"file":"module$node_modules$$pixi$core$lib$geometry$ViewableBuffer.js",
"lineCount":48,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,GAA+E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEvH,OAAMC,eAAN;AACEC,eAAW,CAACC,YAAD,CAAe;AACD,cAAvB,IAAA,MAAOA,aAAP,GAAkC,IAAKC,CAAAA,aAAvC,GAAuD,IAAIC,WAAJ,CAAgBF,YAAhB,CAAvD,GAAuFA,YAAA,YAAwBG,UAAxB,GAAqC,IAAKF,CAAAA,aAA1C,GAA0DD,YAAaI,CAAAA,MAAvE,GAAgF,IAAKH,CAAAA,aAArF,GAAqGD,YAA5L;AAA0M,UAAKK,CAAAA,UAAL,GAAkB,IAAIC,WAAJ,CAAgB,IAAKL,CAAAA,aAArB,CAAlB;AAAuD,UAAKM,CAAAA,WAAL,GAAmB,IAAIC,YAAJ,CAAiB,IAAKP,CAAAA,aAAtB,CAAnB;AADzO;AAItB,gBAAW,EAAA;AACb,aAAO,IAAKQ,CAAAA,SAAL,KAAmB,IAAKA,CAAAA,SAAxB,GAAoC,IAAIC,SAAJ,CAAc,IAAKT,CAAAA,aAAnB,CAApC,GAAwE,IAAKQ,CAAAA,SAApF;AADa;AAIX,iBAAY,EAAA;AACd,aAAO,IAAKE,CAAAA,UAAL,KAAoB,IAAKA,CAAAA,UAAzB,GAAsC,IAAIR,UAAJ,CAAe,IAAKF,CAAAA,aAApB,CAAtC,GAA2E,IAAKU,CAAAA,UAAvF;AADc;AAIZ,iBAAY,EAAA;AACd,aAAO,IAAKC,CAAAA,UAAL,KAAoB,IAAKA,CAAAA,UAAzB,GAAsC,IAAIC,UAAJ,CAAe,IAAKZ,CAAAA,aAApB,CAAtC,GAA2E,IAAKW,CAAAA,UAAvF;AADc;AAIZ,kBAAa,EAAA;AACf,aAAO,IAAKE,CAAAA,WAAL,KAAqB,IAAKA,CAAAA,WAA1B,GAAwC,IAAIC,WAAJ,CAAgB,IAAKd,CAAAA,aAArB,CAAxC,GAA8E,IAAKa,CAAAA,WAA1F;AADe;AAIb,iBAAY,EAAA;AACd,aAAO,IAAKE,CAAAA,UAAL,KAAoB,IAAKA,CAAAA,UAAzB,GAAsC,IAAIC,UAAJ,CAAe,IAAKhB,CAAAA,aAApB,CAAtC,GAA2E,IAAKe,CAAAA,UAAvF;AADc;AAShBE,QAAI,CAACC,IAAD,CAAO;AACT,aAAO,IAAA,CAAM,GAAEA,IAAF,MAAN,CAAP;AADS;AAIXC,WAAO,EAAG;AACmK,UAAKb,CAAAA,WAAL,GAAxB,IAAKF,CAAAA,UAAmB,GAAhD,IAAKW,CAAAA,UAA2C,GAAzE,IAAKF,CAAAA,WAAoE,GAAjG,IAAKF,CAAAA,UAA4F,GAAzH,IAAKD,CAAAA,UAAoH,GAAhJ,IAAKF,CAAAA,SAA2I,GAA3K,IAAKR,CAAAA,aAAsK,GAAtJ,IAAsJ;AADnK;AAGHoB,iBAAM,CAACF,IAAD,CAAO;AAClB,aAAQA,IAAR;AACE,aAAK,MAAL;AACA,aAAK,OAAL;AACE,iBAAO,CAAP;AACF,aAAK,OAAL;AACA,aAAK,QAAL;AACE,iBAAO,CAAP;AACF,aAAK,OAAL;AACA,aAAK,QAAL;AACA,aAAK,SAAL;AACE,iBAAO,CAAP;AACF;AACE,gBAAUG,KAAJ,CAAW,GAAEH,IAAF,0BAAX,CAAN;AAZJ;AADkB;AArCtB;AAsDAtB,SAAQC,CAAAA,cAAR,GAAyBA,cAAzB;AAxDuH,CAAvH;;",
"sources":["node_modules/@pixi/core/lib/geometry/ViewableBuffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$geometry$ViewableBuffer\"] = function(global,require,module,exports) {\n\"use strict\";\nclass ViewableBuffer {\n  constructor(sizeOrBuffer) {\n    typeof sizeOrBuffer == \"number\" ? this.rawBinaryData = new ArrayBuffer(sizeOrBuffer) : sizeOrBuffer instanceof Uint8Array ? this.rawBinaryData = sizeOrBuffer.buffer : this.rawBinaryData = sizeOrBuffer, this.uint32View = new Uint32Array(this.rawBinaryData), this.float32View = new Float32Array(this.rawBinaryData);\n  }\n  /** View on the raw binary data as a `Int8Array`. */\n  get int8View() {\n    return this._int8View || (this._int8View = new Int8Array(this.rawBinaryData)), this._int8View;\n  }\n  /** View on the raw binary data as a `Uint8Array`. */\n  get uint8View() {\n    return this._uint8View || (this._uint8View = new Uint8Array(this.rawBinaryData)), this._uint8View;\n  }\n  /**  View on the raw binary data as a `Int16Array`. */\n  get int16View() {\n    return this._int16View || (this._int16View = new Int16Array(this.rawBinaryData)), this._int16View;\n  }\n  /** View on the raw binary data as a `Uint16Array`. */\n  get uint16View() {\n    return this._uint16View || (this._uint16View = new Uint16Array(this.rawBinaryData)), this._uint16View;\n  }\n  /** View on the raw binary data as a `Int32Array`. */\n  get int32View() {\n    return this._int32View || (this._int32View = new Int32Array(this.rawBinaryData)), this._int32View;\n  }\n  /**\n   * Returns the view of the given type.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *    `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - typed array of given type\n   */\n  view(type) {\n    return this[`${type}View`];\n  }\n  /** Destroys all buffer references. Do not use after calling this. */\n  destroy() {\n    this.rawBinaryData = null, this._int8View = null, this._uint8View = null, this._int16View = null, this._uint16View = null, this._int32View = null, this.uint32View = null, this.float32View = null;\n  }\n  static sizeOf(type) {\n    switch (type) {\n      case \"int8\":\n      case \"uint8\":\n        return 1;\n      case \"int16\":\n      case \"uint16\":\n        return 2;\n      case \"int32\":\n      case \"uint32\":\n      case \"float32\":\n        return 4;\n      default:\n        throw new Error(`${type} isn't a valid view type`);\n    }\n  }\n}\nexports.ViewableBuffer = ViewableBuffer;\n//# sourceMappingURL=ViewableBuffer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ViewableBuffer","constructor","sizeOrBuffer","rawBinaryData","ArrayBuffer","Uint8Array","buffer","uint32View","Uint32Array","float32View","Float32Array","_int8View","Int8Array","_uint8View","_int16View","Int16Array","_uint16View","Uint16Array","_int32View","Int32Array","view","type","destroy","sizeOf","Error"]
}
