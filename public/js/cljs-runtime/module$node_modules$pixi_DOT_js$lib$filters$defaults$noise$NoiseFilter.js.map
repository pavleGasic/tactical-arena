{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$filters$defaults$noise$NoiseFilter.js",
"lineCount":31,
"mappings":"AAAAA,cAAA,CAAA,sEAAA,GAA2F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGnI,MAAIC,YAAYH,OAAA,CAAQ,6EAAR,CAAhB,EACII,aAAaJ,OAAA,CAAQ,+EAAR,CADjB,EAEIK,eAAeL,OAAA,CAAQ,oFAAR,CAFnB;AAGIM,QAAAA,GAASN,OAAA,CAAQ,oDAAR,CAATM;AACJ,MAAIC,gBAAgBP,OAAA,CAAQ,yEAAR,CAApB,EACIQ,UAAUR,OAAA,CAAQ,uEAAR,CADd,EAEIS,QAAQT,OAAA,CAAQ,uEAAR,CAFZ;AAIA,cAAA;AACqB,QAAA,kFAAA,aAA2BM,OAAOA,CAAAA,MAAlC;AAInBI,eAAW,CAACC,OAAA,GAAU,EAAX,CAAe;AACxBA,aAAA,GAAU,CAAE,GAAGC,+EAAaC,CAAAA,cAAlB,EAAkC,GAAGF,OAArC,CAAV;AACA,YAAMG,aAAaV,UAAWA,CAAAA,UAAWW,CAAAA,IAAtB,CAA2B,CAC5CC,OAAQ,CACNC,OAAQR,KAAMS,CAAAA,OADR,EAENC,WAAY,YAFN,CADoC,EAK5CC,SAAU,CACRH,OAAQR,KAAMS,CAAAA,OADN,EAERC,WAAY,cAFJ,CALkC,CAA3B,CAAnB,EAUME,YAAYlB,SAAUA,CAAAA,SAAUY,CAAAA,IAApB,CAAyB,CACzCC,OAAQT,aAAcW,CAAAA,OADmB,EAEzCE,SAAUZ,OAAQU,CAAAA,OAFuB,EAGzCI,KAAM,cAHmC,CAAzB,CAVlB,EAeM,CAAE,MAAOC,OAAT,EAAkBC,IAAlB,EAAwB,GAAGC,IAA3B,CAAA,GAAoCd,OAf1C;AAgBA,WAAA,CAAM,CACJ,GAAGc,IADC,EAEJX,UAFI,EAGJO,SAHI,EAIJK,UAAW,CACTC,cAAe,IAAItB,YAAaA,CAAAA,YAAjB,CAA8B,CAC3CuB,OAAQ,CAAEC,MAAO,CAAT,EAAYC,KAAM,KAAlB,CADmC,EAE3CC,MAAO,CAAEF,MAAO,CAAT,EAAYC,KAAM,KAAlB,CAFoC,CAA9B,CADN,CAJP,CAAN,CAAA;AAWA,UAAKrB,CAAAA,KAAL,GAAac,OAAb;AACA,UAAKC,CAAAA,IAAL,GAAYA,IAAZ,IAAoBQ,IAAKC,CAAAA,MAAL,EAApB;AA9BwB;AAoCtB,aAAQ,EAAA;AACV,aAAO,IAAKP,CAAAA,SAAUC,CAAAA,aAAcO,CAAAA,QAASN,CAAAA,MAA7C;AADU;AAGR,aAAK,CAACC,KAAD,CAAQ;AACf,UAAKH,CAAAA,SAAUC,CAAAA,aAAcO,CAAAA,QAASN,CAAAA,MAAtC,GAA+CC,KAA/C;AADe;AAIb,YAAO,EAAA;AACT,aAAO,IAAKH,CAAAA,SAAUC,CAAAA,aAAcO,CAAAA,QAASH,CAAAA,KAA7C;AADS;AAGP,YAAI,CAACF,KAAD,CAAQ;AACd,UAAKH,CAAAA,SAAUC,CAAAA,aAAcO,CAAAA,QAASH,CAAAA,KAAtC,GAA8CF,KAA9C;AADc;AAlDG,GAAA;AAAfjB,SAAAA,GAAe,+EAAfA;AAsDNA,SAAaC,CAAAA,cAAb,GAA8B,CAC5BJ,MAAO,GADqB,CAA9B;AAKAP,SAAQiC,CAAAA,WAAR,GAFkBvB,OAElB;AAvEmI,CAAnI;;",
"sources":["node_modules/pixi_DOT_js/lib/filters/defaults/noise/NoiseFilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$filters$defaults$noise$NoiseFilter\"] = function(global,require,module,exports) {\n'use strict';\n\nvar GlProgram = require('../../../rendering/renderers/gl/shader/GlProgram.js');\nvar GpuProgram = require('../../../rendering/renderers/gpu/shader/GpuProgram.js');\nvar UniformGroup = require('../../../rendering/renderers/shared/shader/UniformGroup.js');\nvar Filter = require('../../Filter.js');\nvar defaultFilter = require('../defaultFilter.vert.js');\nvar noise$1 = require('./noise.frag.js');\nvar noise = require('./noise.wgsl.js');\n\n\"use strict\";\nconst _NoiseFilter = class _NoiseFilter extends Filter.Filter {\n  /**\n   * @param options - The options of the noise filter.\n   */\n  constructor(options = {}) {\n    options = { ..._NoiseFilter.defaultOptions, ...options };\n    const gpuProgram = GpuProgram.GpuProgram.from({\n      vertex: {\n        source: noise.default,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source: noise.default,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.GlProgram.from({\n      vertex: defaultFilter.default,\n      fragment: noise$1.default,\n      name: \"noise-filter\"\n    });\n    const { noise: noise$2, seed, ...rest } = options;\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        noiseUniforms: new UniformGroup.UniformGroup({\n          uNoise: { value: 1, type: \"f32\" },\n          uSeed: { value: 1, type: \"f32\" }\n        })\n      }\n    });\n    this.noise = noise$2;\n    this.seed = seed ?? Math.random();\n  }\n  /**\n   * The amount of noise to apply, this value should be in the range (0, 1].\n   * @default 0.5\n   */\n  get noise() {\n    return this.resources.noiseUniforms.uniforms.uNoise;\n  }\n  set noise(value) {\n    this.resources.noiseUniforms.uniforms.uNoise = value;\n  }\n  /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n  get seed() {\n    return this.resources.noiseUniforms.uniforms.uSeed;\n  }\n  set seed(value) {\n    this.resources.noiseUniforms.uniforms.uSeed = value;\n  }\n};\n_NoiseFilter.defaultOptions = {\n  noise: 0.5\n};\nlet NoiseFilter = _NoiseFilter;\n\nexports.NoiseFilter = NoiseFilter;\n//# sourceMappingURL=NoiseFilter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","GlProgram","GpuProgram","UniformGroup","Filter","defaultFilter","noise$1","noise","constructor","options","_NoiseFilter","defaultOptions","gpuProgram","from","vertex","source","default","entryPoint","fragment","glProgram","name","noise$2","seed","rest","resources","noiseUniforms","uNoise","value","type","uSeed","Math","random","uniforms","NoiseFilter"]
}
