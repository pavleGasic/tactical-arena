shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$GpuBufferSystem = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  var fastCopy = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$utils$fastCopy");
  "use strict";
  class GpuBufferSystem {
    constructor(renderer) {
      this._gpuBuffers = Object.create(null);
      this._managedBuffers = [];
      renderer.renderableGC.addManagedHash(this, "_gpuBuffers");
    }
    contextChange(gpu) {
      this._gpu = gpu;
    }
    getGPUBuffer(buffer) {
      return this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);
    }
    updateBuffer(buffer) {
      const gpuBuffer = this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer), data = buffer.data;
      buffer._updateID && data && (buffer._updateID = 0, this._gpu.device.queue.writeBuffer(gpuBuffer, 0, data.buffer, 0, (buffer._updateSize || data.byteLength) + 3 & -4));
      return gpuBuffer;
    }
    destroyAll() {
      for (const id in this._gpuBuffers) {
        this._gpuBuffers[id].destroy();
      }
      this._gpuBuffers = {};
    }
    createGPUBuffer(buffer) {
      this._gpuBuffers[buffer.uid] || (buffer.on("update", this.updateBuffer, this), buffer.on("change", this.onBufferChange, this), buffer.on("destroy", this.onBufferDestroy, this), this._managedBuffers.push(buffer));
      const gpuBuffer = this._gpu.device.createBuffer(buffer.descriptor);
      buffer._updateID = 0;
      buffer.data && (fastCopy.fastCopy(buffer.data.buffer, gpuBuffer.getMappedRange()), gpuBuffer.unmap());
      return this._gpuBuffers[buffer.uid] = gpuBuffer;
    }
    onBufferChange(buffer) {
      this._gpuBuffers[buffer.uid].destroy();
      buffer._updateID = 0;
      this._gpuBuffers[buffer.uid] = this.createGPUBuffer(buffer);
    }
    onBufferDestroy(buffer) {
      this._managedBuffers.splice(this._managedBuffers.indexOf(buffer), 1);
      this._destroyBuffer(buffer);
    }
    destroy() {
      this._managedBuffers.forEach(buffer => this._destroyBuffer(buffer));
      this._gpuBuffers = this._managedBuffers = null;
    }
    _destroyBuffer(buffer) {
      this._gpuBuffers[buffer.uid].destroy();
      buffer.off("update", this.updateBuffer, this);
      buffer.off("change", this.onBufferChange, this);
      buffer.off("destroy", this.onBufferDestroy, this);
      this._gpuBuffers[buffer.uid] = null;
    }
  }
  GpuBufferSystem.extension = {type:[global.ExtensionType.WebGPUSystem], name:"buffer"};
  exports.GpuBufferSystem = GpuBufferSystem;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$GpuBufferSystem.js.map
