{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$high_shader$shader_bits$generateTextureBatchBit.js",
"lineCount":60,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/high-shader/shader-bits/generateTextureBatchBit.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$high_shader$shader_bits$generateTextureBatchBit\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst textureBatchBitGpuCache = {};\nfunction generateBindingSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push(\"@group(1) @binding(0) var textureSource1: texture_2d<f32>;\");\n    src.push(\"@group(1) @binding(1) var textureSampler1: sampler;\");\n  } else {\n    let bindingIndex = 0;\n    for (let i = 0; i < maxTextures; i++) {\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSource${i + 1}: texture_2d<f32>;`);\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSampler${i + 1}: sampler;`);\n    }\n  }\n  return src.join(\"\\n\");\n}\nfunction generateSampleSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push(\"outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);\");\n  } else {\n    src.push(\"switch vTextureId {\");\n    for (let i = 0; i < maxTextures; i++) {\n      if (i === maxTextures - 1) {\n        src.push(`  default:{`);\n      } else {\n        src.push(`  case ${i}:{`);\n      }\n      src.push(`      outColor = textureSampleGrad(textureSource${i + 1}, textureSampler${i + 1}, vUV, uvDx, uvDy);`);\n      src.push(`      break;}`);\n    }\n    src.push(`}`);\n  }\n  return src.join(\"\\n\");\n}\nfunction generateTextureBatchBit(maxTextures) {\n  if (!textureBatchBitGpuCache[maxTextures]) {\n    textureBatchBitGpuCache[maxTextures] = {\n      name: \"texture-batch-bit\",\n      vertex: {\n        header: `\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                @in @interpolate(flat) vTextureId: u32;\n\n                ${generateBindingSrc(maxTextures)}\n            `,\n        main: `\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n\n                ${generateSampleSrc(maxTextures)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGpuCache[maxTextures];\n}\nconst textureBatchBitGlCache = {};\nfunction generateSampleGlSrc(maxTextures) {\n  const src = [];\n  for (let i = 0; i < maxTextures; i++) {\n    if (i > 0) {\n      src.push(\"else\");\n    }\n    if (i < maxTextures - 1) {\n      src.push(`if(vTextureId < ${i}.5)`);\n    }\n    src.push(\"{\");\n    src.push(`\toutColor = texture(uTextures[${i}], vUV);`);\n    src.push(\"}\");\n  }\n  return src.join(\"\\n\");\n}\nfunction generateTextureBatchBitGl(maxTextures) {\n  if (!textureBatchBitGlCache[maxTextures]) {\n    textureBatchBitGlCache[maxTextures] = {\n      name: \"texture-batch-bit\",\n      vertex: {\n        header: `\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                in float vTextureId;\n\n                uniform sampler2D uTextures[${maxTextures}];\n\n            `,\n        main: `\n\n                ${generateSampleGlSrc(maxTextures)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGlCache[maxTextures];\n}\n\nexports.generateTextureBatchBit = generateTextureBatchBit;\nexports.generateTextureBatchBitGl = generateTextureBatchBitGl;\n//# sourceMappingURL=generateTextureBatchBit.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","textureBatchBitGpuCache","textureBatchBitGlCache","generateTextureBatchBit","maxTextures","src","push","bindingIndex","i","join","name","vertex","header","main","end","fragment","generateTextureBatchBitGl"]
}
