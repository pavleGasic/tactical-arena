{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$compileHighShader.js",
"lineCount":45,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/high-shader/compiler/compileHighShader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$compileHighShader\"] = function(global,require,module,exports) {\n'use strict';\n\nvar addBits = require('./utils/addBits.js');\nvar compileHooks = require('./utils/compileHooks.js');\nvar compileInputs = require('./utils/compileInputs.js');\nvar compileOutputs = require('./utils/compileOutputs.js');\nvar injectBits = require('./utils/injectBits.js');\n\n\"use strict\";\nconst cacheMap = /* @__PURE__ */ Object.create(null);\nconst bitCacheMap = /* @__PURE__ */ new Map();\nlet CACHE_UID = 0;\nfunction compileHighShader({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  const { vertex, fragment } = compileInputsAndOutputs(template, bits);\n  cacheMap[cacheId] = compileBits(vertex, fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileHighShaderGl({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  cacheMap[cacheId] = compileBits(template.vertex, template.fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileInputsAndOutputs(template, bits) {\n  const vertexFragments = bits.map((shaderBit) => shaderBit.vertex).filter((v) => !!v);\n  const fragmentFragments = bits.map((shaderBit) => shaderBit.fragment).filter((v) => !!v);\n  let compiledVertex = compileInputs.compileInputs(vertexFragments, template.vertex, true);\n  compiledVertex = compileOutputs.compileOutputs(vertexFragments, compiledVertex);\n  const compiledFragment = compileInputs.compileInputs(fragmentFragments, template.fragment, true);\n  return {\n    vertex: compiledVertex,\n    fragment: compiledFragment\n  };\n}\nfunction generateCacheId(template, bits) {\n  return bits.map((highFragment) => {\n    if (!bitCacheMap.has(highFragment)) {\n      bitCacheMap.set(highFragment, CACHE_UID++);\n    }\n    return bitCacheMap.get(highFragment);\n  }).sort((a, b) => a - b).join(\"-\") + template.vertex + template.fragment;\n}\nfunction compileBits(vertex, fragment, bits) {\n  const vertexParts = compileHooks.compileHooks(vertex);\n  const fragmentParts = compileHooks.compileHooks(fragment);\n  bits.forEach((shaderBit) => {\n    addBits.addBits(shaderBit.vertex, vertexParts, shaderBit.name);\n    addBits.addBits(shaderBit.fragment, fragmentParts, shaderBit.name);\n  });\n  return {\n    vertex: injectBits.injectBits(vertex, vertexParts),\n    fragment: injectBits.injectBits(fragment, fragmentParts)\n  };\n}\n\nexports.compileHighShader = compileHighShader;\nexports.compileHighShaderGl = compileHighShaderGl;\n//# sourceMappingURL=compileHighShader.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","compileInputsAndOutputs","template","bits","vertexFragments","map","shaderBit","vertex","filter","v","fragmentFragments","fragment","compiledVertex","compileInputs","compileOutputs","compiledFragment","generateCacheId","highFragment","bitCacheMap","has","set","CACHE_UID","get","sort","a","b","join","compileBits","vertexParts","compileHooks","fragmentParts","forEach","addBits","name","injectBits","cacheMap","Object","create","Map","compileHighShader","cacheId","compileHighShaderGl"]
}
