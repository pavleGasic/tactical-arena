{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$BindGroup.js",
"lineCount":56,
"mappings":"AAAAA,cAAA,CAAA,4EAAA,GAAiG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAIzI,OAAMC,UAAN;AAKEC,eAAW,CAACC,SAAD,CAAY;AAErB,UAAKA,CAAAA,SAAL,GAAiCC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAjC;AACA,UAAKC,CAAAA,MAAL,GAAc,CAAA,CAAd;AACA,UAAIC,QAAQ,CAAZ;AACA,WAAK,MAAMC,CAAX,GAAgBL,UAAhB;AAEE,YAAKM,CAAAA,WAAL,CADiBN,SAAAO,CAAUF,CAAVE,CACjB,EAA2BH,KAAA,EAA3B,CAAA;AAFF;AAIA,UAAKI,CAAAA,UAAL,EAAA;AATqB;AAiBvBA,cAAU,EAAG;AACX,UAAK,IAAKL,CAAAA,MAAV,CAAA;AAEA,YAAKA,CAAAA,MAAL,GAAc,CAAA,CAAd;AACA,YAAMM,WAAW,EAAjB,EACIL,QAAQ,CADZ;AAEA,aAAK,MAAMC,CAAX,GAAgB,KAAKL,CAAAA,SAArB;AACES,kBAAA,CAASL,KAAA,EAAT,CAAA,GAAoB,IAAKJ,CAAAA,SAAL,CAAeK,CAAf,CAAkBK,CAAAA,WAAtC;AADF;AAGA,YAAKC,CAAAA,IAAL,GAAYF,QAASG,CAAAA,IAAT,CAAc,GAAd,CAAZ;AARA;AADW;AAkBbN,eAAW,CAACC,QAAD,EAAWH,KAAX,CAAkB;AAC3B,YAAMS,kBAAkB,IAAKb,CAAAA,SAAL,CAAeI,KAAf,CAAxB;AACIG,cAAJ,KAAiBM,eAAjB,KAEIA,eAKJ,IAJEN,QAASO,CAAAA,GAAT,GAAe,QAAf,EAAyB,IAAKC,CAAAA,gBAA9B,EAAgD,IAAhD,CAIF,EAFAR,QAASS,CAAAA,EAAT,GAAc,QAAd,EAAwB,IAAKD,CAAAA,gBAA7B,EAA+C,IAA/C,CAEA,EADA,IAAKf,CAAAA,SAAL,CAAeI,KAAf,CACA,GADwBG,QACxB,EAAA,IAAKJ,CAAAA,MAAL,GAAc,CAAA,CAPd;AAF2B;AAgB7Bc,eAAW,CAACb,KAAD,CAAQ;AACjB,aAAO,IAAKJ,CAAAA,SAAL,CAAeI,KAAf,CAAP;AADiB;AAUnBc,UAAM,CAACC,IAAD,CAAO;AACX,YAAMnB,YAAY,IAAKA,CAAAA,SAAvB;AACA,WAAK,MAAMK,CAAX,GAAgBL,UAAhB;AACEA,iBAAA,CAAUK,CAAV,CAAae,CAAAA,QAAb,GAAwBD,IAAxB;AADF;AAFW;AAObE,WAAO,EAAG;AACR,YAAMrB,YAAY,IAAKA,CAAAA,SAAvB;AACA,WAAK,MAAMK,CAAX,GAAgBL,UAAhB;AACmBA,iBAAAO,CAAUF,CAAVE,CACRO,CAAAA,GAAT,GAAe,QAAf,EAAyB,IAAKC,CAAAA,gBAA9B,EAAgD,IAAhD,CAAA;AAFF;AAIA,UAAKf,CAAAA,SAAL,GAAiB,IAAjB;AANQ;AAQVe,oBAAgB,CAACR,QAAD,CAAW;AACzB,UAAKJ,CAAAA,MAAL,GAAc,CAAA,CAAd;AACA,UAAII,QAASe,CAAAA,SAAb,CAAwB;AACtB,cAAMtB,YAAY,IAAKA,CAAAA,SAAvB;AACA,aAAK,MAAMK,CAAX,GAAgBL,UAAhB;AACMA,mBAAA,CAAUK,CAAV,CAAJ,KAAqBE,QAArB,KACEP,SAAA,CAAUK,CAAV,CADF,GACiB,IADjB;AADF;AAFsB,OAAxB;AAQE,YAAKG,CAAAA,UAAL,EAAA;AARF;AAFyB;AAjF7B;AAgGAX,SAAQC,CAAAA,SAAR,GAAoBA,SAApB;AApGyI,CAAzI;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/shader/BindGroup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$BindGroup\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nclass BindGroup {\n  /**\n   * Create a new instance eof the Bind Group.\n   * @param resources - The resources that are bound together for use by a shader.\n   */\n  constructor(resources) {\n    /** The resources that are bound together for use by a shader. */\n    this.resources = /* @__PURE__ */ Object.create(null);\n    this._dirty = true;\n    let index = 0;\n    for (const i in resources) {\n      const resource = resources[i];\n      this.setResource(resource, index++);\n    }\n    this._updateKey();\n  }\n  /**\n   * Updates the key if its flagged as dirty. This is used internally to\n   * match this bind group to a WebGPU BindGroup.\n   * @internal\n   * @ignore\n   */\n  _updateKey() {\n    if (!this._dirty)\n      return;\n    this._dirty = false;\n    const keyParts = [];\n    let index = 0;\n    for (const i in this.resources) {\n      keyParts[index++] = this.resources[i]._resourceId;\n    }\n    this._key = keyParts.join(\"|\");\n  }\n  /**\n   * Set a resource at a given index. this function will\n   * ensure that listeners will be removed from the current resource\n   * and added to the new resource.\n   * @param resource - The resource to set.\n   * @param index - The index to set the resource at.\n   */\n  setResource(resource, index) {\n    const currentResource = this.resources[index];\n    if (resource === currentResource)\n      return;\n    if (currentResource) {\n      resource.off?.(\"change\", this.onResourceChange, this);\n    }\n    resource.on?.(\"change\", this.onResourceChange, this);\n    this.resources[index] = resource;\n    this._dirty = true;\n  }\n  /**\n   * Returns the resource at the current specified index.\n   * @param index - The index of the resource to get.\n   * @returns - The resource at the specified index.\n   */\n  getResource(index) {\n    return this.resources[index];\n  }\n  /**\n   * Used internally to 'touch' each resource, to ensure that the GC\n   * knows that all resources in this bind group are still being used.\n   * @param tick - The current tick.\n   * @internal\n   * @ignore\n   */\n  _touch(tick) {\n    const resources = this.resources;\n    for (const i in resources) {\n      resources[i]._touched = tick;\n    }\n  }\n  /** Destroys this bind group and removes all listeners. */\n  destroy() {\n    const resources = this.resources;\n    for (const i in resources) {\n      const resource = resources[i];\n      resource.off?.(\"change\", this.onResourceChange, this);\n    }\n    this.resources = null;\n  }\n  onResourceChange(resource) {\n    this._dirty = true;\n    if (resource.destroyed) {\n      const resources = this.resources;\n      for (const i in resources) {\n        if (resources[i] === resource) {\n          resources[i] = null;\n        }\n      }\n    } else {\n      this._updateKey();\n    }\n  }\n}\n\nexports.BindGroup = BindGroup;\n//# sourceMappingURL=BindGroup.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","BindGroup","constructor","resources","Object","create","_dirty","index","i","setResource","resource","_updateKey","keyParts","_resourceId","_key","join","currentResource","off","onResourceChange","on","getResource","_touch","tick","_touched","destroy","destroyed"]
}
