{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$AssetExtension.js",
"lineCount":12,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,GAAwE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEhH,MAAIC,OAAOH,OAAA,CAAQ,0CAAR,CAAX;AACA,QAAMI,cAAc,CAClBC,OAAQF,IAAKG,CAAAA,aAAcC,CAAAA,UADT,EAElBC,SAAUL,IAAKG,CAAAA,aAAcG,CAAAA,aAFX,EAGlBC,MAAOP,IAAKG,CAAAA,aAAcK,CAAAA,WAHR,EAIlBC,UAAWT,IAAKG,CAAAA,aAAcO,CAAAA,eAJZ,CAApB;AAMAV,MAAKW,CAAAA,UAAWC,CAAAA,MAAhB,CAAuBZ,IAAKG,CAAAA,aAAcU,CAAAA,KAA1C,EAAkDC,SAAD,IAAe;AAC9D,UAAMC,MAAMD,SAAUC,CAAAA,GAAtB;AACAC,UAAOC,CAAAA,OAAP,CAAehB,WAAf,CAA4BiB,CAAAA,MAA5B,CAAmC,CAAC,CAACC,GAAD,CAAD,CAAA,IAAW,CAAC,CAACJ,GAAA,CAAII,GAAJ,CAAhD,CAA0DC,CAAAA,OAA1D,CAAkE,CAAC,CAACD,GAAD,EAAME,IAAN,CAAD,CAAA,IAAiBrB,IAAKW,CAAAA,UAAWW,CAAAA,GAAhB,CAAoBN,MAAOO,CAAAA,MAAP,CACrGR,GAAA,CAAII,GAAJ,CADqG,EAIrG,CAAEL,UAAWC,GAAA,CAAII,GAAJ,CAASL,CAAAA,SAApBA,IAAiCO,IAAnC,CAJqG,CAApB,CAAnF,CAAA;AAF8D,GAAhE,EAQIP,SAAD,IAAe;AAChB,UAAMC,MAAMD,SAAUC,CAAAA,GAAtB;AACAC,UAAOQ,CAAAA,IAAP,CAAYvB,WAAZ,CAAyBiB,CAAAA,MAAzB,CAAiCC,GAAD,IAAS,CAAC,CAACJ,GAAA,CAAII,GAAJ,CAA3C,CAAqDC,CAAAA,OAArD,CAA8DD,GAAD,IAASnB,IAAKW,CAAAA,UAAWc,CAAAA,MAAhB,CAAuBV,GAAA,CAAII,GAAJ,CAAvB,CAAtE,CAAA;AAFgB,GARlB,CAAA;AATgH,CAAhH;;",
"sources":["node_modules/@pixi/assets/lib/AssetExtension.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$AssetExtension\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nconst assetKeyMap = {\n  loader: core.ExtensionType.LoadParser,\n  resolver: core.ExtensionType.ResolveParser,\n  cache: core.ExtensionType.CacheParser,\n  detection: core.ExtensionType.DetectionParser\n};\ncore.extensions.handle(core.ExtensionType.Asset, (extension) => {\n  const ref = extension.ref;\n  Object.entries(assetKeyMap).filter(([key]) => !!ref[key]).forEach(([key, type]) => core.extensions.add(Object.assign(\n    ref[key],\n    // Allow the function to optionally define it's own\n    // ExtensionMetadata, the use cases here is priority for LoaderParsers\n    { extension: ref[key].extension ?? type }\n  )));\n}, (extension) => {\n  const ref = extension.ref;\n  Object.keys(assetKeyMap).filter((key) => !!ref[key]).forEach((key) => core.extensions.remove(ref[key]));\n});\n//# sourceMappingURL=AssetExtension.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","assetKeyMap","loader","ExtensionType","LoadParser","resolver","ResolveParser","cache","CacheParser","detection","DetectionParser","extensions","handle","Asset","extension","ref","Object","entries","filter","key","forEach","type","add","assign","keys","remove"]
}
