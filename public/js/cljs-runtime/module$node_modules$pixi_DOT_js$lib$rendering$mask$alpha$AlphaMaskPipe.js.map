{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$mask$alpha$AlphaMaskPipe.js",
"lineCount":83,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/mask/alpha/AlphaMaskPipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$mask$alpha$AlphaMaskPipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar FilterEffect = require('../../../filters/FilterEffect.js');\nvar MaskFilter = require('../../../filters/mask/MaskFilter.js');\nvar Bounds = require('../../../scene/container/bounds/Bounds.js');\nvar getGlobalBounds = require('../../../scene/container/bounds/getGlobalBounds.js');\nvar Sprite = require('../../../scene/sprite/Sprite.js');\nvar PoolGroup = require('../../../utils/pool/PoolGroup.js');\nvar Texture = require('../../renderers/shared/texture/Texture.js');\nvar TexturePool = require('../../renderers/shared/texture/TexturePool.js');\nvar types = require('../../renderers/types.js');\n\n\"use strict\";\nconst tempBounds = new Bounds.Bounds();\nclass AlphaMaskEffect extends FilterEffect.FilterEffect {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter.MaskFilter({\n      sprite: new Sprite.Sprite(Texture.Texture.EMPTY),\n      inverse: false,\n      resolution: \"inherit\",\n      antialias: \"inherit\"\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n  get inverse() {\n    return this.filters[0].inverse;\n  }\n  set inverse(value) {\n    this.filters[0].inverse = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false,\n      maskedContainer\n    });\n    mask.inverse = maskedContainer._maskOptions.inverse;\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      maskContainer.collectRenderables(\n        instructionSet,\n        renderer,\n        null\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      inverse: _maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = PoolGroup.BigPool.get(AlphaMaskEffect);\n      filterEffect.inverse = instruction.inverse;\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds.getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n        const filterTexture = TexturePool.TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          colorTextureSource._resolution,\n          colorTextureSource.antialias\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        if (renderer.type === types.RendererType.WEBGL) {\n          renderer.renderTarget.finishRenderPass();\n        }\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.TexturePool.returnTexture(maskData.filterTexture);\n      }\n      PoolGroup.BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexports.AlphaMaskPipe = AlphaMaskPipe;\n//# sourceMappingURL=AlphaMaskPipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","FilterEffect","MaskFilter","Bounds","getGlobalBounds","Sprite","PoolGroup","Texture","TexturePool","types","tempBounds","AlphaMaskEffect","constructor","filters","sprite","EMPTY","inverse","resolution","antialias","value","AlphaMaskPipe","renderer","_activeMaskStage","_renderer","push","mask","maskedContainer","instructionSet","renderPipes","batch","break","add","renderPipeId","action","_maskOptions","canBundle","renderMaskToTexture","maskContainer","includeInBuild","collectRenderables","pop","_maskedContainer","execute","instruction","renderMask","filterEffect","BigPool","get","measurable","bounds","ceil","colorTextureSource","renderTarget","colorTexture","source","filterTexture","getOptimalTexture","width","height","_resolution","globalUniforms","offset","worldColor","texture","worldTransform","tx","minX","ty","minY","maskData","length","type","RendererType","WEBGL","finishRenderPass","filter","container","returnTexture","return","destroy","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"]
}
