{
"version":3,
"file":"module$node_modules$$pixi$text_bitmap$lib$BitmapText.js",
"lineCount":270,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,GAAyE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE7GC,OAAOH,OAAA,CAAQ,0CAAR,CAFsG,EAE/EI,UAAUJ,OAAA,CAAQ,6CAAR,CAFqE,EAE3CK,OAAOL,OAAA,CAAQ,0CAAR,CAFoC,EAEbM,aAAaN,OAAA,CAAQ,sDAAR,CAFA,EAE4BO,SAASP,OAAA,CAAQ,4DAAR,CAFrC,EAEuEQ,OAAOR,OAAA,CAAQ,4DAAR,CAF9E;AAGjHA,SAAA,CAAQ,uDAAR,CAAA;AAHiH,MAI7GS,wBAAwBT,OAAA,CAAQ,uEAAR,CAJqF,EAIxCU,kBAAkBV,OAAA,CAAQ,iEAAR,CAJsB;AAAA,QAK3GW,kCAAkC,EALyE,EAKrEC,+BAA+B,EALsC,EAKlCC,qBAAqB,EALa;AAKTC,QAAAA,GAAc,CAAA,EAAA,IAAA;AAAA,UAAA,gEAAA,aAA2BV,QAAQW,CAAAA,SAAnC;AAapHC,iBAAW,CAACC,IAAD,EAAOC,KAAA,GAAQ,EAAf,CAAmB;AAC5B,aAAA,EAAA;AACA,cAAM,CAAEC,KAAF,EAASC,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,QAAxC,EAAkDC,QAAlD,CAAA,GAA+DC,MAAOC,CAAAA,MAAP,CACnE,EADmE,EAEnEC,6DAAaC,CAAAA,aAFsD,EAGnEV,KAHmE,CAArE;AAKA,YAAI,CAACZ,UAAWA,CAAAA,UAAWuB,CAAAA,SAAtB,CAAgCN,QAAhC,CAAL;AACE,gBAAUO,KAAJ,CAAW,uBAAsBP,QAAtB,GAAX,CAAN;AADF;AAEA,YAAKQ,CAAAA,oBAAL,GAA4B,EAA5B;AAAqD,YAAKC,CAAAA,WAAL,GAArB,IAAKC,CAAAA,UAAgB,GAAH,CAAG;AAAsB,YAAKC,CAAAA,MAAL,GAAcf,KAAd;AAAqB,YAAKgB,CAAAA,UAAL,GAAkB,IAAIhC,IAAKiC,CAAAA,KAAT,CAAehB,IAAf,CAAlB;AAAwC,YAAKiB,CAAAA,KAAL,GAAa,IAAK,EAAlB;AAAqB,YAAKC,CAAAA,SAAL,GAAiBf,QAAjB;AAA2B,YAAKgB,CAAAA,SAAL,GAAiBf,QAAjB;AAA2B,YAAKP,CAAAA,IAAL,GAAYA,IAAZ;AAAkB,YAAKuB,CAAAA,SAAL,GAAiBnB,QAAjB;AAA2B,YAAKoB,CAAAA,cAAL,GAAsB,CAAtB;AAAyB,YAAKC,CAAAA,cAAL,GAAsBpB,aAAtB;AAAqC,YAAKqB,CAAAA,OAAL,GAAe,IAAIxC,IAAKyC,CAAAA,eAAT,CAAyB,EAAA,IAAM;AAC1W,cAAKC,CAAAA,KAAL,GAAa,CAAA,CAAb;AAD0W,SAA/B,EAE1U,IAF0U,EAEpU,CAFoU,EAEjU,CAFiU,CAAf;AAE9S,YAAKC,CAAAA,YAAL,GAAoB3C,IAAK4C,CAAAA,QAASC,CAAAA,YAAlC;AAAgD,YAAKH,CAAAA,KAAL,GAAa,CAAA,CAAb;AAAiB,YAAKI,CAAAA,WAAL,GAAmB9C,IAAK4C,CAAAA,QAASG,CAAAA,UAAjC;AAA6C,YAAKC,CAAAA,eAAL,GAAuB,CAAA,CAAvB;AAA2B,YAAKC,CAAAA,aAAL,GAAqB,EAArB;AAX7H;AAc9BC,gBAAU,EAAG;AAAA,cACLC,OAAOhD,UAAWA,CAAAA,UAAWuB,CAAAA,SAAtB,CAAgC,IAAKS,CAAAA,SAArC,CADF;AAAA,YACmDd,WAAW,IAAKA,CAAAA,QADnE,EAC6E+B,QAAQ/B,QAAR+B,GAAmBD,IAAKE,CAAAA,IADrG,EAC2GC,MAAM,IAAItD,IAAKuD,CAAAA,KAAT,EADjH;AAAA,cACmIC,QAAQ,EAD3I;AAAA,YAC+IC,aAAa,EAD5J,EACgKC,aAAa,EAD7K,EACiL5C,OAAO,IAAK6C,CAAAA,KAAMC,CAAAA,OAAX,CAAmB,cAAnB,EAAoC,IAApC,CAAP9C,IAC1L,GAFS,EAEJ+C,aAAavD,qBAAsBA,CAAAA,qBAAtB,CAA4CQ,IAA5C,CAFT,EAE4DI,WAAW,IAAKmB,CAAAA,SAAhBnB,GAA4BiC,IAAKE,CAAAA,IAAjCnC,GAAwCG,QAFpG,EAE8GyC,mBAA8C,MAA3B,KAAAX,IAAKY,CAAAA,iBAAL,GAAoCvD,+BAApC,GAAsEC,4BAFvM;AAAA,YAGPuD,eAAe,IAHR;AAAA,YAGcC,gBAAgB,CAH9B,EAGmDC,OAAlBC,IAAkBD,GAAH,CAHhD,EAG6DE,eAAe,CAAC,CAH7E,EAGgFC,iBAAiB,CAHjG,EAGoGC,gBAAgB,CAHpH,EAG0IC,aAAnBC,QAAmBD,GAAH,CAHvI;AAIX,aAAK,IAAIE,IAAI,CAAb,EAAgBA,CAAhB,GAAoBZ,UAAWa,CAAAA,MAA/B,EAAuCD,CAAA,EAAvC,CAA4C;AAAA,cACpCE,OAAOd,UAAA,CAAWY,CAAX,CAD6B;AAC1C,gBAA4BG,WAAWrE,eAAgBA,CAAAA,eAAhB,CAAgCoE,IAAhC,CAAvC;AACA,cAAI,QAASE,CAAAA,IAAT,CAAcF,IAAd,CAAA,KAAwBP,YAAA,GAAeK,CAAf,EAAkBJ,cAAlB,GAAmCJ,aAAnC,EAAkDM,UAAA,EAA1E,GAAkG,IAAlG,KAAyFI,IAAzF,IAAoH,IAApH,KAA0GA,IAA9G;AAEElB,sBAAWqB,CAAAA,IAAX,CAAgBb,aAAhB,CAA8L,EAA9JP,UAAWoB,CAAAA,IAAX,CAAgB,CAAC,CAAjB,CAA8J,EAAzIX,IAAyI,GAA1HY,IAAKC,CAAAA,GAAL,CAASb,IAAT,EAAuBF,aAAvB,CAA0H,EAAnF,EAAEC,IAAiF,EAA3E,EAAEI,aAAyE,EAA1DhB,GAAI2B,CAAAA,CAAsD,GAAlD,CAAkD,EAA/C3B,GAAI4B,CAAAA,CAA2C,IAAtC/B,IAAKgC,CAAAA,UAAiC,EAArBnB,YAAqB,GAAN,IAAM,EAAAO,UAAA,GAAa,CAAb;AAFhM;AAMA,gBADMa,IACN,GADiBjC,IAAKK,CAAAA,KAAL,CAAWoB,QAAX,CACjB;AAEAZ,0BAQsmB,IARtlBoB,IAASC,CAAAA,OAAT,CAAiBrB,YAAjB,CAQslB,KARnjBV,GAAI2B,CAAAA,CAQ+iB,IAR1iBG,IAASC,CAAAA,OAAT,CAAiBrB,YAAjB,CAQ0iB,GAPhmBsB,aAOgmB,GAP/kB5E,kBAAmB6E,CAAAA,GAAnB,EAO+kB,IAPnjB,CACjDC,QAASxF,IAAKyF,CAAAA,OAAQC,CAAAA,KAD2B,EAEjDxB,KAAM,CAF2C,EAGjDU,SAAU,CAHuC,EAIjDe,WAAY,CAJqC,EAKjDC,SAAU,IAAI5F,IAAKuD,CAAAA,KAAT,EALuC,CAOmjB,EAAtmB+B,aAAeE,CAAAA,OAAulB,GAA7kBJ,IAASI,CAAAA,OAAokB,EAA3jBF,aAAepB,CAAAA,IAA4iB,GAAriBA,IAAqiB,EAA/hBoB,aAAeV,CAAAA,QAAghB,GAArgBA,QAAqgB,EAA3fU,aAAeM,CAAAA,QAASX,CAAAA,CAAme,GAA/dF,IAAKc,CAAAA,KAAL,CAAWvC,GAAI2B,CAAAA,CAAf,GAAmBG,IAASU,CAAAA,OAA5B,GAAsC,IAAKvD,CAAAA,cAA3C,GAA4D,CAA5D,CAA+d,EAA/Z+C,aAAeM,CAAAA,QAASV,CAAAA,CAAuY,GAAnYH,IAAKc,CAAAA,KAAL,CAAWvC,GAAI4B,CAAAA,CAAf,GAAmBE,IAASW,CAAAA,OAA5B,CAAmY,EAA7VT,aAAeK,CAAAA,UAA8U;AAAjUpB,wBAAiU,EAArTf,KAAMsB,CAAAA,IAAN,CAAWQ,aAAX,CAAqT,EAAzRrB,aAAyR,GAAzQqB,aAAeM,CAAAA,QAASX,CAAAA,CAAiP,GAA7OF,IAAKC,CAAAA,GAAL,CAASI,IAASY,CAAAA,QAAlB,GAA6BZ,IAASU,CAAAA,OAAtC,EAA+CV,IAASI,CAAAA,OAAQS,CAAAA,IAAKC,CAAAA,KAArE,CAA6O,EAAhK5C,GAAI2B,CAAAA,CAA4J,IAAvJG,IAASY,CAAAA,QAA8I,GAAnI,IAAKzD,CAAAA,cAA8H,EAA9GiC,QAA8G,GAA9FO,IAAKC,CAAAA,GAAL,CAASR,QAAT,EAAwBY,IAASW,CAAAA,OAAjC,GAA2CX,IAASI,CAAAA,OAAQW,CAAAA,MAA5D,CAA8F,EAAzBnC,YAAyB,GAAVY,QAAU,EAAiB,CAAC,CAAlB,KAAAR,YAAA,IAAkC,CAAlC,GAAuBlD,QAAvB,IAAuCoC,GAAI2B,CAAAA,CAA3C,GAA+C/D,QAA/C,KAA4D,EAAEoD,aAAF,EAAiBtE,IAAKoG,CAAAA,KAAMC,CAAAA,WAAX,CAAuB7C,KAAvB,EAA8B,CAA9B,GAAkCY,YAAlC,GAAiDE,aAAjD,EAAgE,CAAhE,GAAoEG,CAApE,GAAwEL,YAAxE,CAAjB,EAAwGK,CAAxG,GAA4GL,YAA5G,EAA0HA,YAA1H,GAAyI,CAAC,CAA1I,EAA6IX,UAAWqB,CAAAA,IAAX,CAAgBT,cAAhB,CAA7I;AAA8KX,wBAAWoB,CAAAA,IAAX,CAA+B,CAAf,GAAAtB,KAAMkB,CAAAA,MAAN,GAAmBlB,KAAA,CAAMA,KAAMkB,CAAAA,MAAZ,GAAqB,CAArB,CAAwBiB,CAAAA,UAA3C,GAAwD,CAAxE,CAA9K,EAA0PxB,IAA1P,GAAyQY,IAAKC,CAAAA,GAAL,CAASb,IAAT,EAAuBE,cAAvB,CAAzQ,EAAiTH,IAAA,EAAjT,EAAyTZ,GAAI2B,CAAAA,CAA7T,GAAiU,CAAjU,EAAoU3B,GAAI4B,CAAAA,CAAxU,IAA6U/B,IAAKgC,CAAAA,UAAlV,EAA8VnB,YAA9V,GAA6W,IAA7W,EAAmXO,UAAnX,GAAgY,CAA5b,CAAA;AAVtmB;AANA;AAF0C;AAoBtC+B,kBAAAA,GAAWzC,UAAA,CAAWA,UAAWa,CAAAA,MAAtB,GAA+B,CAA/B,CAAX4B;AACO,YAAb,KAAAA,UAAA,IAAmC,IAAnC,KAAqBA,UAArB,KACE,QAASzB,CAAAA,IAAT,CAAcyB,UAAd,CAAA,KAA4BrC,aAA5B,GAA4CI,cAA5C,GAA6DZ,UAAWqB,CAAAA,IAAX,CAAgBb,aAAhB,CAA7D,EAA6FE,IAA7F,GAA4GY,IAAKC,CAAAA,GAAL,CAASb,IAAT,EAAuBF,aAAvB,CAA5G,EAAmJP,UAAWoB,CAAAA,IAAX,CAAgB,CAAC,CAAjB,CADrJ;AAEMyB,kBAAAA,GAAmB,EAAnBA;AACN,aAAS9B,cAAT,GAAa,CAAb,EAAgBA,cAAhB,IAAqBP,IAArB,EAA2BO,cAAA,EAA3B;AACM+B,kBACsQ,GADxP,CACwP,EAA1P,OAAhB,KAAA,IAAKzE,CAAAA,MAAL,GAA0ByE,QAA1B,GAAwCrC,IAAxC,GAAuDV,UAAA,CAAWgB,cAAX,CAAvD,GAAuF,QAAhB,KAAA,IAAK1C,CAAAA,MAAL,GAA2ByE,QAA3B,IAA0CrC,IAA1C,GAAyDV,UAAA,CAAWgB,cAAX,CAAzD,IAA0E,CAA1E,GAA8F,SAA9F,KAA8E,IAAK1C,CAAAA,MAAnF,KAA4GyE,QAA5G,GAA0I,CAAhB,GAAA9C,UAAA,CAAWe,cAAX,CAAA,GAAoB,CAApB,IAAyBN,IAAzB,GAAwCV,UAAA,CAAWgB,cAAX,CAAxC,IAAyDf,UAAA,CAAWe,cAAX,CAAnL,CAAmM,EAAA8B,UAAiBzB,CAAAA,IAAjB,CAAsB0B,QAAtB,CAAA;AAF5Q;AAIMC,kBAAAA,GAAWjD,KAAMkB,CAAAA,MAAjB+B;AAAyBC,kBAAAA,GAAgB,EAAhBA;AAAoBC,YAAAA,GAAmB,EAAnBA;AAAuBC,sBAAAA,GAAsB,IAAKhF,CAAAA,oBAA3BgF;AAC1E9C,wBAAiBgB,CAAAA,IAAjB,CAAsB,GAAG8B,cAAzB,CAAA;AACA,aAASnC,QAAT,GAAa,CAAb,EAAgBA,QAAhB,GAAoBgC,UAApB,EAA8BhC,QAAA,EAA9B,CAAmC;AAC3Be,uBAAAA,GAAUhC,KAAA,CAAMiB,QAAN,CAASe,CAAAA,OAAnBA;AAA4BqB,sBAAAA,GAAiBrB,aAAQsB,CAAAA,WAAYC,CAAAA,GAArCF;AAClC,cAAI,CAACH,UAAA,CAAcG,YAAd,CAAL,CAAoC;AAC9BG,yBAAAA,GAAelD,gBAAiByB,CAAAA,GAAjB,EAAfyB;AACJ,gBAAI,CAACA,aAAL,CAAmB;AACXC,2BAAAA,GAAW,IAAI/G,IAAKgH,CAAAA,YAAT,EAAXD;AADW,kBAEbE,WAAAA,IAAAA,EAFa,EAEHC,gBAAAA,IAAAA,EAFG;AAGU,oBAA3B,KAAAjE,IAAKY,CAAAA,iBAAL,IAAqCoD,QAAA,GAAW,IAAIjH,IAAKmH,CAAAA,YAAT,CAAsBrH,IAAKyF,CAAAA,OAAQC,CAAAA,KAAnC,CAAX,EAAsD0B,aAAtD,GAAsEpH,IAAKsH,CAAAA,WAAYC,CAAAA,MAA5H,KAAuIJ,QAAA,GAAW,IAAIjH,IAAKmH,CAAAA,YAAT,CAChJrH,IAAKyF,CAAAA,OAAQC,CAAAA,KADmI,EAEhJ,CAAE8B,QAASxH,IAAKyH,CAAAA,OAAQC,CAAAA,IAAb,CAAkBrH,IAAKsH,CAAAA,OAAvB,EAAgCvH,MAAOuH,CAAAA,OAAvC,CAAX,EAA4DC,SAAU,CAAEC,QAAS,CAAX,CAAtE,CAFgJ,CAAX,EAGpIT,aAHoI,GAGpHpH,IAAKsH,CAAAA,WAAYQ,CAAAA,UAHpC,CAAA;AAIMC,2BAAAA,GAAS,IAAI7H,IAAK8H,CAAAA,IAAT,CAAcf,aAAd,EAAwBE,QAAxB,CAATY;AACNA,2BAAOE,CAAAA,SAAP,GAAmBb,aAAnB;AAAkCJ,2BAAA,GAAe,CAC/CkB,MAAO,CADwC,EAE/CC,WAAY,CAFmC,EAG/CC,YAAa,CAHkC,EAI/CC,SAAU,CAJqC,EAK/CC,MAAO,CALwC,EAM/CpI,KAAM6H,aANyC,EAO/CQ,SAAU,IAPqC,EAQ/CC,IAAK,IAR0C,EAS/CC,QAAS,IATsC,CAAf;AARjB;AAoBnBzB,yBAAakB,CAAAA,KAAb,GAAqB,CAArB;AAAwBlB,yBAAamB,CAAAA,UAAb,GAA0B,CAA1B;AAA6BnB,yBAAaoB,CAAAA,WAAb,GAA2B,CAA3B;AAA8BpB,yBAAaqB,CAAAA,QAAb,GAAwB,CAAxB;AAA2BrB,yBAAasB,CAAAA,KAAb,GAAqB,CAArB;AAC9G,aAAM,CAAE,cAAArF,UAAF,CAAN,GAA0B,IAA1B;AACAA,sBAAA,CAAc4D,YAAd,CAAA,GAAgC5D,UAAA,CAAc4D,YAAd,CAAhC,IAAiE,IAAI7G,IAAKyF,CAAAA,OAAT,CAAiBD,aAAQsB,CAAAA,WAAzB,CAAjE;AAAwGE,yBAAa9G,CAAAA,IAAKsF,CAAAA,OAAlB,GAA4BvC,UAAA,CAAc4D,YAAd,CAA5B;AAA2DG,yBAAa9G,CAAAA,IAAKe,CAAAA,IAAlB,GAAyB,IAAKe,CAAAA,UAAW0G,CAAAA,KAAzC;AAAgD/B,gBAAiB7B,CAAAA,IAAjB,CAAsBkC,aAAtB,CAAA;AAAqCN,sBAAA,CAAcG,YAAd,CAAA,GAAgCG,aAAhC;AAxBtN;AA0BpCN,oBAAA,CAAcG,YAAd,CAA8ByB,CAAAA,KAA9B,EAAA;AA5BiC;AA8BnC,aAAS7D,QAAT,GAAa,CAAb,EAAgBA,QAAhB,GAAoBmC,cAAoBlC,CAAAA,MAAxC,EAAgDD,QAAA,EAAhD;AACEkC,cAAiBgC,CAAAA,QAAjB,CAA0B/B,cAAA,CAAoBnC,QAApB,CAA1B,CAAA,IAAqD,IAAKmE,CAAAA,WAAL,CAAiBhC,cAAA,CAAoBnC,QAApB,CAAuBvE,CAAAA,IAAxC,CAArD;AADF;AAEA,aAASuE,QAAT,GAAa,CAAb,EAAgBA,QAAhB,GAAoBkC,IAAiBjC,CAAAA,MAArC,EAA6CD,QAAA,EAA7C;AACEkC,cAAA,CAAiBlC,QAAjB,CAAoBvE,CAAAA,IAAK2I,CAAAA,MAAzB,KAAoC,IAApC,IAA4C,IAAKC,CAAAA,QAAL,CAAcnC,IAAA,CAAiBlC,QAAjB,CAAoBvE,CAAAA,IAAlC,CAA5C;AADF;AAEA,YAAK0B,CAAAA,oBAAL,GAA4B+E,IAA5B;AACA,aAAK,IAAMlC,UAAX,GAAgBiC,WAAhB,CAA+B;AACvBM,kBAAAA,GAAeN,UAAA,CAAcjC,UAAd,CAAfuC;AAAiCsB,uBAAAA,GAAQtB,QAAasB,CAAAA,KAArBA;AACvC,cAAI,EAAEtB,QAAayB,CAAAA,OAAS/D,EAAAA,MAAxB,GAAiC,CAAjC,GAAqC4D,aAArC,CAAJ,IAAmDtB,QAAauB,CAAAA,QAAS7D,CAAAA,MAAzE,GAA6G,CAA7G,GAAkFxE,IAAK8H,CAAAA,IAAKe,CAAAA,cAA5F;AACE/B,oBAAauB,CAAAA,QAAgG,GAArF,IAAIS,YAAJ,CAAiB,CAAjB,GAAyBV,aAAzB,CAAqF,EAApDtB,QAAawB,CAAAA,GAAuC,GAAjC,IAAIQ,YAAJ,CAAiB,CAAjB,GAAyBV,aAAzB,CAAiC,EAAAtB,QAAayB,CAAAA,OAAb,GAAuB,IAAIQ,WAAJ,CAAgB,CAAhB,GAAoBX,aAApB,CAAvB;AAD/G;AAIE,iBADMY,IACQC,GADCnC,QAAasB,CAAAA,KACda,EADqBZ,gBACrBY,GADgCnC,QAAauB,CAAAA,QAC7CY,EAAAD,IAAAC,IAAa,CAA3B,EAA8BA,IAA9B,GAAmCZ,gBAAS7D,CAAAA,MAA5C,EAAoDyE,IAAA,EAApD;AACEZ,8BAAA,CAASY,IAAT,CAAA,GAAe,CAAf;AADF;AAJF;AAOAnC,kBAAa9G,CAAAA,IAAKmD,CAAAA,IAAlB,GAAyB,CAAzB,GAA6BiF,aAA7B;AAT6B;AAW/B,aAAS7D,UAAT,GAAa,CAAb,EAAgBA,UAAhB,GAAoBgC,UAApB,EAA8BhC,UAAA,EAA9B;AACQE,0BAIyhC,GAJlhCnB,KAAA,CAAMiB,UAAN,CAIkhC,EAH3hC2E,QAG2hC,GAHlhCzE,gBAAKiB,CAAAA,QAASX,CAAAA,CAGogC,GAHhgCsB,UAAA,CAAiB5B,gBAAKT,CAAAA,IAAtB,CAGggC,IAHj9B,SAAhB,KAAA,IAAKnC,CAAAA,MAAL,GAA4B4C,gBAAKgB,CAAAA,UAAjC,GAA8C,CAGm7B,GAF/hC,IAAKhD,CAAAA,YAE0hC,KAFzgCyG,QAEygC,GAFhgCrE,IAAKc,CAAAA,KAAL,CAAWuD,QAAX,CAEggC,GADlhCA,QACkhC,IADzgChG,KACygC,EADlgCiG,aACkgC,GAD3/B1E,gBAAKiB,CAAAA,QAASV,CAAAA,CAC6+B,GADz+B9B,KACy+B,EADl+BoC,cACk+B,GADx9Bb,gBAAKa,CAAAA,OACm9B,EAD18B8D,gBAC08B,GAD/7B5C,UAAA,CAAclB,cAAQsB,CAAAA,WAAYC,CAAAA,GAAlC,CAC+7B,EADv5BwC,IACu5B,GADx4B/D,cAAQgE,CAAAA,KACg4B,EADz3BC,cACy3B,GAD52BjE,cAAQkE,CAAAA,IACo2B,EAD91BxB,QAC81B,GADt1BoB,gBAASpB,CAAAA,KAAT,EACs1B;AAA/hCoB,0BAASb,CAAAA,OAAT,CAAyB,CAAzB,GAAiBP,QAAjB,CAA+hC,GAAj/B,CAAi/B,GAAz/BA,QAAy/B,EAA9+BoB,gBAASb,CAAAA,OAAT,CAAyB,CAAzB,GAAiBP,QAAjB,GAA6B,CAA7B,CAA8+B,GAA58B,CAA48B,GAAh8B,CAAg8B,GAAx8BA,QAAw8B,EAA77BoB,gBAASb,CAAAA,OAAT,CAAyB,CAAzB,GAAiBP,QAAjB,GAA6B,CAA7B,CAA67B,GAA35B,CAA25B,GAA/4B,CAA+4B,GAAv5BA,QAAu5B,EAA54BoB,gBAASb,CAAAA,OAAT,CAAyB,CAAzB,GAAiBP,QAAjB,GAA6B,CAA7B,CAA44B,GAA91B,CAA81B,GAAt2BA,QAAs2B,EAA31BoB,gBAASb,CAAAA,OAAT,CAAyB,CAAzB,GAAiBP,QAAjB,GAA6B,CAA7B,CAA21B,GAAzzB,CAAyzB,GAA7yB,CAA6yB,GAArzBA,QAAqzB,EAA1yBoB,gBAASb,CAAAA,OAAT,CAAyB,CAAzB,GAAiBP,QAAjB,GAA6B,CAA7B,CAA0yB,GAAxwB,CAAwwB,GAA5vB,CAA4vB,GAApwBA,QAAowB,EAAzvBoB,gBAASf,CAAAA,QAAT,CAA0B,CAA1B,GAAkBL,QAAlB,CAAyvB,GAAttByB,QAAstB,EAAhtBL,gBAASf,CAAAA,QAAT,CAA0B,CAA1B,GAAkBL,QAAlB,GAA8B,CAA9B,CAAgtB,GAA7qBmB,aAA6qB,EAAvqBC,gBAASf,CAAAA,QAAT,CAA0B,CAA1B;AAAkBL,kBAAlB,GAA8B,CAA9B,CAAuqB,GAApoByB,QAAooB,GAA7nBJ,IAAarD,CAAAA,KAAgnB,GAAxmB9C,KAAwmB,EAAjmBkG,gBAASf,CAAAA,QAAT,CAA0B,CAA1B,GAAkBL,QAAlB,GAA8B,CAA9B,CAAimB,GAA9jBmB,aAA8jB,EAAxjBC,gBAASf,CAAAA,QAAT,CAA0B,CAA1B,GAAkBL,QAAlB,GAA8B,CAA9B,CAAwjB,GAArhByB,QAAqhB,GAA9gBJ,IAAarD,CAAAA,KAAigB,GAAzf9C,KAAyf,EAAlfkG,gBAASf,CAAAA,QAAT,CAA0B,CAA1B,GAAkBL,QAAlB,GAA8B,CAA9B,CAAkf,GAA/cmB,aAA+c,GAAxcE,IAAapD,CAAAA,MAA2b,GAAlb/C,KAAkb,EAA3akG,gBAASf,CAAAA,QAAT,CAA0B,CAA1B,GAAkBL,QAAlB,GAA8B,CAA9B,CAA2a,GAAxYyB,QAAwY,EAAlYL,gBAASf,CAAAA,QAAT,CAA0B,CAA1B,GAAkBL,QAAlB,GAA8B,CAA9B,CAAkY,GAA/VmB,aAA+V,GAAxVE,IAAapD,CAAAA,MAA2U,GAAlU/C,KAAkU,EAA3TkG,gBAASd,CAAAA,GAAT,CAAqB,CAArB,GAAaN,QAAb,CAA2T,GAA7RuB,cAAWG,CAAAA,EAAkR,EAA9QN,gBAASd,CAAAA,GAAT,CAAqB,CAArB,GAAaN,QAAb;AAAyB,WAAzB,CAA8Q,GAAhPuB,cAAWI,CAAAA,EAAqO,EAAjOP,gBAASd,CAAAA,GAAT,CAAqB,CAArB,GAAaN,QAAb,GAAyB,CAAzB,CAAiO,GAAnMuB,cAAWK,CAAAA,EAAwL,EAApLR,gBAASd,CAAAA,GAAT,CAAqB,CAArB,GAAaN,QAAb,GAAyB,CAAzB,CAAoL,GAAtJuB,cAAWM,CAAAA,EAA2I,EAAvIT,gBAASd,CAAAA,GAAT,CAAqB,CAArB,GAAaN,QAAb,GAAyB,CAAzB,CAAuI,GAAzGuB,cAAWO,CAAAA,EAA8F,EAA1FV,gBAASd,CAAAA,GAAT,CAAqB,CAArB,GAAaN,QAAb,GAAyB,CAAzB,CAA0F,GAA5DuB,cAAWQ,CAAAA,EAAiD,EAA7CX,gBAASd,CAAAA,GAAT,CAAqB,CAArB,GAAaN,QAAb,GAAyB,CAAzB,CAA6C,GAAfuB,cAAWS,CAAAA,EAAI,EAAAZ,gBAASd,CAAAA,GAAT,CAAqB,CAArB,GAAaN,QAAb,GAAyB,CAAzB,CAAA,GAA8BuB,cAAWU,CAAAA,EAAzC;AALjiC;AAOA,YAAKrI,CAAAA,UAAL,GAAkBqC,IAAlB,GAAiCf,KAAjC;AAAwC,YAAKvB,CAAAA,WAAL,IAAoByB,GAAI4B,CAAAA,CAAxB,GAA4B/B,IAAKgC,CAAAA,UAAjC,IAA+C/B,KAA/C;AACxC,aAAK,MAAMqB,CAAX,GAAgBiC,WAAhB,CAA+B;AACvBM,aAAAA,GAAeN,UAAA,CAAcjC,CAAd,CAAfuC;AACN,cAAsB,CAAtB,KAAI,IAAKoD,CAAAA,MAAOnF,CAAAA,CAAhB,IAA6C,CAA7C,KAA2B,IAAKmF,CAAAA,MAAOlF,CAAAA,CAAvC;AAGE,iBAFIkD,IAEKe,GAFS,CAETA,EADHkB,UACGlB,GADa,IAAKrH,CAAAA,UAClBqH,GAD+B,IAAKiB,CAAAA,MAAOnF,CAAAA,CAC3CkE,EAD8CmB,UAC9CnB,GAD8D,IAAKtH,CAAAA,WACnEsH,GADiF,IAAKiB,CAAAA,MAAOlF,CAAAA,CAC7FiE,EAAAA,QAAAA,GAAK,CAAd,EAAiBA,QAAjB,GAAsBnC,GAAasB,CAAAA,KAAnC,EAA0Ca,QAAA,EAA1C;AACEnC,iBAAauB,CAAAA,QAAb,CAAsBH,IAAA,EAAtB,CAAiY,IAAzViC,UAAyV,EAA1UrD,GAAauB,CAAAA,QAAb,CAAsBH,IAAA,EAAtB,CAA0U,IAAlSkC,UAAkS,EAAnRtD,GAAauB,CAAAA,QAAb,CAAsBH,IAAA,EAAtB,CAAmR,IAA3OiC,UAA2O,EAA5NrD,GAAauB,CAAAA,QAAb,CAAsBH,IAAA,EAAtB,CAA4N,IAApLkC,UAAoL,EAArKtD,GAAauB,CAAAA,QAAb,CAAsBH,IAAA,EAAtB,CAAqK,IAA7HiC,UAA6H,EAA9GrD,GAAauB,CAAAA,QAAb,CAAsBH,IAAA,EAAtB,CAA8G,IAAtEkC,UAAsE,EAAvDtD,GAAauB,CAAAA,QAAb,CAAsBH,IAAA,EAAtB,CAAuD,IAAfiC,UAAe,EAAArD,GAAauB,CAAAA,QAAb,CAAsBH,IAAA,EAAtB,CAAA,IAAwCkC,UAAxC;AADnY;AAHF;AAMA,cAAKhI,CAAAA,cAAL,GAAsBkC,QAAtB,GAAsCpB,KAAtC;AACMmH,cAAAA,GAAevD,GAAa9G,CAAAA,IAAK+G,CAAAA,QAASuD,CAAAA,SAA3B,CAAqC,iBAArC,CAAfD;AAAwEE,oBAAAA,GAAgBzD,GAAa9G,CAAAA,IAAK+G,CAAAA,QAASuD,CAAAA,SAA3B,CAAqC,eAArC,CAAhBC;AAAuEC,oBAAAA,GAAc1D,GAAa9G,CAAAA,IAAK+G,CAAAA,QAAS0D,CAAAA,QAA3B,EAAdD;AACrJH,cAAapH,CAAAA,IAAb,GAAoB6D,GAAauB,CAAAA,QAAjC;AAA2CkC,oBAActH,CAAAA,IAAd,GAAqB6D,GAAawB,CAAAA,GAAlC;AAAuCkC,oBAAYvH,CAAAA,IAAZ,GAAmB6D,GAAayB,CAAAA,OAAhC;AAAyC8B,cAAaK,CAAAA,MAAb,EAAA;AAAuBH,oBAAcG,CAAAA,MAAd,EAAA;AAAwBF,oBAAYE,CAAAA,MAAZ,EAAA;AAV7I;AAY/B,aAASnG,KAAT,GAAa,CAAb,EAAgBA,KAAhB,GAAoBjB,KAAMkB,CAAAA,MAA1B,EAAkCD,KAAA,EAAlC;AACE/D,4BAAmBoE,CAAAA,IAAnB,CAAwBtB,KAAA,CAAMiB,KAAN,CAAxB,CAAA;AADF;AAEA,YAAKvC,CAAAA,KAAL,GAAaiB,IAAb;AAAmB,YAAKT,CAAAA,KAAL,GAAa,CAAA,CAAb;AAtGR;AAwGbmI,qBAAe,EAAG;AAChB,YAAKC,CAAAA,QAAL,EAAA;AAAiB,YAAKC,CAAAA,wBAAL,EAAA;AADD;AAGlBC,aAAO,CAACC,QAAD,CAAW;AAChB,YAAKjI,CAAAA,eAAL,IAAwB,IAAKF,CAAAA,WAA7B,KAA6CmI,QAASC,CAAAA,UAAtD,KAAqE,IAAKpI,CAAAA,WAAL,GAAmBmI,QAASC,CAAAA,UAA5B,EAAwC,IAAKxI,CAAAA,KAA7C,GAAqD,CAAA,CAA1H;AACA,cAAM,CAAEyI,kBAAF,EAAsBpH,iBAAtB,EAAyCV,IAAzC,CAAA,GAAkDlD,UAAWA,CAAAA,UAAWuB,CAAAA,SAAtB,CAAgC,IAAKS,CAAAA,SAArC,CAAxD;AACA,YAA0B,MAA1B,KAAI4B,iBAAJ,CAAkC;AAAA,gBAC1B,CAAEqH,CAAF,EAAKC,CAAL,EAAQC,CAAR,EAAWC,CAAX,CAAA,GAAiB,IAAKC,CAAAA,cADI,EAC0EC,cAAc1G,IAAK2G,CAAAA,GAAL,CAAvE3G,IAAK4G,CAAAA,IAALC,CAAUR,CAAVQ,GAAcR,CAAdQ,GAAkBP,CAAlBO,GAAsBP,CAAtBO,CAAuE,CAAdH,GAA6B1G,IAAK2G,CAAAA,GAAL,CAAvD3G,IAAK4G,CAAAA,IAALE,CAAUP,CAAVO,GAAcP,CAAdO,GAAkBN,CAAlBM,GAAsBN,CAAtBM,CAAuD,CAA7BJ,IAA6C,CADvH,EAC0HK,YAAY,IAAKzK,CAAAA,QAAjByK,GAA4BzI,IADtJ,EAC4J6H,aAAaD,QAASc,CAAAA,KAAMb,CAAAA,UADxL;AAEhC,eAAK,MAAMc,KAAX,IAAoB,IAAKpK,CAAAA,oBAAzB;AACEoK,iBAAM9L,CAAAA,IAAK+L,CAAAA,MAAOrE,CAAAA,QAASC,CAAAA,OAA3B,GAAqC4D,UAArC,GAAkDN,kBAAlD,GAAuEW,SAAvE,GAAmFZ,UAAnF;AADF;AAFgC;AAKlC,aAAMF,CAAAA,OAAN,CAAcC,QAAd,CAAA;AARgB;AAclBiB,oBAAc,EAAG;AACf,eAAO,IAAKpB,CAAAA,QAAL,EAAA,EAAiB,KAAMoB,CAAAA,cAAN,EAAxB;AADe;AAOjBpB,cAAQ,EAAG;AACT,cAAMqB,OAAOhM,UAAWA,CAAAA,UAAWuB,CAAAA,SAAtB,CAAgC,IAAKS,CAAAA,SAArC,CAAb;AACA,YAAI,CAACgK,IAAL;AACE,gBAAUxK,KAAJ,CAAW,uBAAsB,IAAKQ,CAAAA,SAA3B,GAAX,CAAN;AADF;AAEA,YAAKD,CAAAA,KAAL,KAAeiK,IAAf,KAAwB,IAAKzJ,CAAAA,KAA7B,GAAqC,CAAA,CAArC;AAA0C,YAAKA,CAAAA,KAAL,IAAc,IAAKQ,CAAAA,UAAL,EAAd;AAJjC;AAUP,cAAO,EAAA;AACT,eAAO,IAAKlB,CAAAA,UAAW0G,CAAAA,KAAvB;AADS;AAGP,cAAI,CAACA,KAAD,CAAQ;AACd,YAAI,IAAKzH,CAAAA,IAAT,KAAkByH,KAAlB,CAAyB;AACvB,cAAK1G,CAAAA,UAAWoK,CAAAA,QAAhB,CAAyB1D,KAAzB,CAAA;AACA,eAAK,IAAIjE,IAAI,CAAb,EAAgBA,CAAhB,GAAoB,IAAK7C,CAAAA,oBAAqB8C,CAAAA,MAA9C,EAAsDD,CAAA,EAAtD;AACE,gBAAK7C,CAAAA,oBAAL,CAA0B6C,CAA1B,CAA6BvE,CAAAA,IAAKe,CAAAA,IAAlC,GAAyCyH,KAAzC;AADF;AAFuB;AADX;AAYZ,eAAQ,EAAA;AACV,eAAO,IAAK3G,CAAAA,MAAZ;AADU;AAGR,eAAK,CAAC2G,KAAD,CAAQ;AACf,YAAK3G,CAAAA,MAAL,KAAgB2G,KAAhB,KAA0B,IAAK3G,CAAAA,MAAL,GAAc2G,KAAd,EAAqB,IAAKhG,CAAAA,KAA1B,GAAkC,CAAA,CAA5D;AADe;AAIb,kBAAW,EAAA;AACb,eAAO,IAAKP,CAAAA,SAAZ;AADa;AAGX,kBAAQ,CAACuG,KAAD,CAAQ;AAClB,YAAI,CAACvI,UAAWA,CAAAA,UAAWuB,CAAAA,SAAtB,CAAgCgH,KAAhC,CAAL;AACE,gBAAU/G,KAAJ,CAAW,uBAAsB+G,KAAtB,GAAX,CAAN;AADF;AAEA,YAAKvG,CAAAA,SAAL,KAAmBuG,KAAnB,KAA6B,IAAKvG,CAAAA,SAAL,GAAiBuG,KAAjB,EAAwB,IAAKhG,CAAAA,KAA7B,GAAqC,CAAA,CAAlE;AAHkB;AAMhB,kBAAW,EAAA;AACb,eAAO,IAAKN,CAAAA,SAAZ,IAAyBjC,UAAWA,CAAAA,UAAWuB,CAAAA,SAAtB,CAAgC,IAAKS,CAAAA,SAArC,CAAgDkB,CAAAA,IAAzE;AADa;AAGX,kBAAQ,CAACqF,KAAD,CAAQ;AAClB,YAAKtG,CAAAA,SAAL,KAAmBsG,KAAnB,KAA6B,IAAKtG,CAAAA,SAAL,GAAiBsG,KAAjB,EAAwB,IAAKhG,CAAAA,KAA7B,GAAqC,CAAA,CAAlE;AADkB;AAYhB,gBAAS,EAAA;AACX,eAAO,IAAKF,CAAAA,OAAZ;AADW;AAGT,gBAAM,CAACkG,KAAD,CAAQ;AACA,gBAAhB,IAAA,MAAOA,MAAP,GAA2B,IAAKlG,CAAAA,OAAQ6J,CAAAA,GAAb,CAAiB3D,KAAjB,CAA3B,GAAqD,IAAKlG,CAAAA,OAAQ8J,CAAAA,QAAb,CAAsB5D,KAAtB,CAArD;AADgB;AAId,cAAO,EAAA;AACT,eAAO,IAAK/E,CAAAA,KAAZ;AADS;AAGP,cAAI,CAAC7C,IAAD,CAAO;AACbA,YAAA,GAAOyL,MAAA,CAAOzL,IAAP,IAAe,EAAf,CAAP;AAA2B,YAAK6C,CAAAA,KAAL,KAAe7C,IAAf,KAAwB,IAAK6C,CAAAA,KAAL,GAAa7C,IAAb,EAAmB,IAAK4B,CAAAA,KAAxB,GAAgC,CAAA,CAAxD;AADd;AAQX,kBAAW,EAAA;AACb,eAAO,IAAKL,CAAAA,SAAZ;AADa;AAGX,kBAAQ,CAACqG,KAAD,CAAQ;AAClB,YAAKrG,CAAAA,SAAL,KAAmBqG,KAAnB,KAA6B,IAAKrG,CAAAA,SAAL,GAAiBqG,KAAjB,EAAwB,IAAKhG,CAAAA,KAA7B,GAAqC,CAAA,CAAlE;AADkB;AAQhB,uBAAgB,EAAA;AAClB,eAAO,IAAKoI,CAAAA,QAAL,EAAA,EAAiB,IAAKxI,CAAAA,cAA7B;AADkB;AAQhB,mBAAY,EAAA;AACd,eAAO,IAAKwI,CAAAA,QAAL,EAAA,EAAiB,IAAKhJ,CAAAA,UAA7B;AADc;AAIZ,uBAAgB,EAAA;AAClB,eAAO,IAAKS,CAAAA,cAAZ;AADkB;AAGhB,uBAAa,CAACmG,KAAD,CAAQ;AACvB,YAAKnG,CAAAA,cAAL,KAAwBmG,KAAxB,KAAkC,IAAKnG,CAAAA,cAAL,GAAsBmG,KAAtB,EAA6B,IAAKhG,CAAAA,KAAlC,GAA0C,CAAA,CAA5E;AADuB;AAUrB,qBAAc,EAAA;AAChB,eAAO,IAAKC,CAAAA,YAAZ;AADgB;AAGd,qBAAW,CAAC+F,KAAD,CAAQ;AACrBA,aAAA,KAAU,IAAK/F,CAAAA,YAAf,KAAgC,IAAKA,CAAAA,YAAL,GAAoB+F,KAApB,EAA2B,IAAKhG,CAAAA,KAAhC,GAAwC,CAAA,CAAxE;AADqB;AAQnB,oBAAa,EAAA;AACf,eAAO,IAAKoI,CAAAA,QAAL,EAAA,EAAiB,IAAKjJ,CAAAA,WAA7B;AADe;AASb,oBAAa,EAAA;AACf,eAAO,IAAKiB,CAAAA,WAAZ;AADe;AAGb,oBAAU,CAAC4F,KAAD,CAAQ;AACpB,YAAK1F,CAAAA,eAAL,GAAuB,CAAA,CAAvB;AAA2B,YAAKF,CAAAA,WAAL,KAAqB4F,KAArB,KAA+B,IAAK5F,CAAAA,WAAL,GAAmB4F,KAAnB,EAA0B,IAAKhG,CAAAA,KAA/B,GAAuC,CAAA,CAAtE;AADP;AAGtB8J,aAAO,CAACC,OAAD,CAAU;AAAA,cACT,CAAExJ,aAAF,CAAA,GAAoB,IADX,EACiBa,mBAAyF,MAAtE,KAAA3D,UAAWA,CAAAA,UAAWuB,CAAAA,SAAtB,CAAgC,IAAKS,CAAAA,SAArC,CAAgD4B,CAAAA,iBAAhD,GAA+EvD,+BAA/E,GAAiHC,4BADrJ;AAEfqD,wBAAiBgB,CAAAA,IAAjB,CAAsB,GAAG,IAAKlD,CAAAA,oBAA9B,CAAA;AACA,aAAK,MAAMoF,YAAX,IAA2B,IAAKpF,CAAAA,oBAAhC;AACE,cAAKgH,CAAAA,WAAL,CAAiB5B,YAAa9G,CAAAA,IAA9B,CAAA;AADF;AAEA,YAAK0B,CAAAA,oBAAL,GAA4B,EAA5B;AAAgCkC,wBAAiB4I,CAAAA,MAAjB,CAAyBC,IAAD,IAAU1J,aAAA,CAAc0J,IAAKzM,CAAAA,IAAKsF,CAAAA,OAAQsB,CAAAA,WAAYC,CAAAA,GAA5C,CAAlC,CAAoF6F,CAAAA,OAApF,CAA6FD,IAAD,IAAU;AACpIA,cAAKzM,CAAAA,IAAKsF,CAAAA,OAAV,GAAoBxF,IAAKyF,CAAAA,OAAQC,CAAAA,KAAjC;AADoI,SAAtG,CAAA;AAGhC,aAAK,MAAMmH,EAAX,GAAiB5J,cAAjB;AACEA,uBAAA,CAAc4J,EAAd,CAAkBL,CAAAA,OAAlB,EAA6B,EAAA,OAAOvJ,aAAA,CAAc4J,EAAd,CAAP;AAD/B;AAE2C,YAAK5J,CAAAA,aAAL,GAAxB,IAAKjB,CAAAA,UAAmB,GAA3C,IAAKE,CAAAA,KAAsC,GAA9B,IAA8B;AAA2B,aAAMsK,CAAAA,OAAN,CAAcC,OAAd,CAAA;AAVvD;AAnSmG,KAAA;AAAA,WAAA,6DAAA;AAAA,GAAA,CAAA,EAAd9L;AAgTxGA,QAAYc,CAAAA,aAAZ,GAA4B,CAC1BT,MAAO,MADmB,EAE1BC,KAAM,QAFoB,EAG1BC,SAAU,CAHgB,EAI1BC,cAAe,CAJW,CAA5B;AAOApB,SAAQ+M,CAAAA,UAAR,GADiBnM,MACjB;AA5TiH,CAAjH;;",
"sources":["node_modules/@pixi/text-bitmap/lib/BitmapText.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text_bitmap$lib$BitmapText\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), display = require(\"@pixi/display\"), mesh = require(\"@pixi/mesh\"), BitmapFont = require(\"./BitmapFont.js\"), msdf$1 = require(\"./shader/msdf.frag.js\"), msdf = require(\"./shader/msdf.vert.js\");\nrequire(\"./utils/index.js\");\nvar splitTextToCharacters = require(\"./utils/splitTextToCharacters.js\"), extractCharCode = require(\"./utils/extractCharCode.js\");\nconst pageMeshDataDefaultPageMeshData = [], pageMeshDataMSDFPageMeshData = [], charRenderDataPool = [], _BitmapText = class _BitmapText2 extends display.Container {\n  /**\n   * @param text - A string that you would like the text to display.\n   * @param style - The style parameters.\n   * @param {string} style.fontName - The installed BitmapFont name.\n   * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n   *.     this will default to the BitmapFont size.\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n   *      does not affect single line text.\n   * @param {PIXI.ColorSource} [style.tint=0xFFFFFF] - The tint color.\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n   * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n   */\n  constructor(text, style = {}) {\n    super();\n    const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n      {},\n      _BitmapText2.styleDefaults,\n      style\n    );\n    if (!BitmapFont.BitmapFont.available[fontName])\n      throw new Error(`Missing BitmapFont \"${fontName}\"`);\n    this._activePagesMeshData = [], this._textWidth = 0, this._textHeight = 0, this._align = align, this._tintColor = new core.Color(tint), this._font = void 0, this._fontName = fontName, this._fontSize = fontSize, this.text = text, this._maxWidth = maxWidth, this._maxLineHeight = 0, this._letterSpacing = letterSpacing, this._anchor = new core.ObservablePoint(() => {\n      this.dirty = !0;\n    }, this, 0, 0), this._roundPixels = core.settings.ROUND_PIXELS, this.dirty = !0, this._resolution = core.settings.RESOLUTION, this._autoResolution = !0, this._textureCache = {};\n  }\n  /** Renders text and updates it when needed. This should only be called if the BitmapFont is regenerated. */\n  updateText() {\n    const data = BitmapFont.BitmapFont.available[this._fontName], fontSize = this.fontSize, scale = fontSize / data.size, pos = new core.Point(), chars = [], lineWidths = [], lineSpaces = [], text = this._text.replace(/(?:\\r\\n|\\r)/g, `\n`) || \" \", charsInput = splitTextToCharacters.splitTextToCharacters(text), maxWidth = this._maxWidth * data.size / fontSize, pageMeshDataPool = data.distanceFieldType === \"none\" ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    let prevCharCode = null, lastLineWidth = 0, maxLineWidth = 0, line = 0, lastBreakPos = -1, lastBreakWidth = 0, spacesRemoved = 0, maxLineHeight = 0, spaceCount = 0;\n    for (let i = 0; i < charsInput.length; i++) {\n      const char = charsInput[i], charCode = extractCharCode.extractCharCode(char);\n      if (/(?:\\s)/.test(char) && (lastBreakPos = i, lastBreakWidth = lastLineWidth, spaceCount++), char === \"\\r\" || char === `\n`) {\n        lineWidths.push(lastLineWidth), lineSpaces.push(-1), maxLineWidth = Math.max(maxLineWidth, lastLineWidth), ++line, ++spacesRemoved, pos.x = 0, pos.y += data.lineHeight, prevCharCode = null, spaceCount = 0;\n        continue;\n      }\n      const charData = data.chars[charCode];\n      if (!charData)\n        continue;\n      prevCharCode && charData.kerning[prevCharCode] && (pos.x += charData.kerning[prevCharCode]);\n      const charRenderData = charRenderDataPool.pop() || {\n        texture: core.Texture.EMPTY,\n        line: 0,\n        charCode: 0,\n        prevSpaces: 0,\n        position: new core.Point()\n      };\n      charRenderData.texture = charData.texture, charRenderData.line = line, charRenderData.charCode = charCode, charRenderData.position.x = Math.round(pos.x + charData.xOffset + this._letterSpacing / 2), charRenderData.position.y = Math.round(pos.y + charData.yOffset), charRenderData.prevSpaces = spaceCount, chars.push(charRenderData), lastLineWidth = charRenderData.position.x + Math.max(charData.xAdvance - charData.xOffset, charData.texture.orig.width), pos.x += charData.xAdvance + this._letterSpacing, maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height), prevCharCode = charCode, lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth && (++spacesRemoved, core.utils.removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos), i = lastBreakPos, lastBreakPos = -1, lineWidths.push(lastBreakWidth), lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0), maxLineWidth = Math.max(maxLineWidth, lastBreakWidth), line++, pos.x = 0, pos.y += data.lineHeight, prevCharCode = null, spaceCount = 0);\n    }\n    const lastChar = charsInput[charsInput.length - 1];\n    lastChar !== \"\\r\" && lastChar !== `\n` && (/(?:\\s)/.test(lastChar) && (lastLineWidth = lastBreakWidth), lineWidths.push(lastLineWidth), maxLineWidth = Math.max(maxLineWidth, lastLineWidth), lineSpaces.push(-1));\n    const lineAlignOffsets = [];\n    for (let i = 0; i <= line; i++) {\n      let alignOffset = 0;\n      this._align === \"right\" ? alignOffset = maxLineWidth - lineWidths[i] : this._align === \"center\" ? alignOffset = (maxLineWidth - lineWidths[i]) / 2 : this._align === \"justify\" && (alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i]), lineAlignOffsets.push(alignOffset);\n    }\n    const lenChars = chars.length, pagesMeshData = {}, newPagesMeshData = [], activePagesMeshData = this._activePagesMeshData;\n    pageMeshDataPool.push(...activePagesMeshData);\n    for (let i = 0; i < lenChars; i++) {\n      const texture = chars[i].texture, baseTextureUid = texture.baseTexture.uid;\n      if (!pagesMeshData[baseTextureUid]) {\n        let pageMeshData = pageMeshDataPool.pop();\n        if (!pageMeshData) {\n          const geometry = new mesh.MeshGeometry();\n          let material, meshBlendMode;\n          data.distanceFieldType === \"none\" ? (material = new mesh.MeshMaterial(core.Texture.EMPTY), meshBlendMode = core.BLEND_MODES.NORMAL) : (material = new mesh.MeshMaterial(\n            core.Texture.EMPTY,\n            { program: core.Program.from(msdf.default, msdf$1.default), uniforms: { uFWidth: 0 } }\n          ), meshBlendMode = core.BLEND_MODES.NORMAL_NPM);\n          const mesh$1 = new mesh.Mesh(geometry, material);\n          mesh$1.blendMode = meshBlendMode, pageMeshData = {\n            index: 0,\n            indexCount: 0,\n            vertexCount: 0,\n            uvsCount: 0,\n            total: 0,\n            mesh: mesh$1,\n            vertices: null,\n            uvs: null,\n            indices: null\n          };\n        }\n        pageMeshData.index = 0, pageMeshData.indexCount = 0, pageMeshData.vertexCount = 0, pageMeshData.uvsCount = 0, pageMeshData.total = 0;\n        const { _textureCache } = this;\n        _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new core.Texture(texture.baseTexture), pageMeshData.mesh.texture = _textureCache[baseTextureUid], pageMeshData.mesh.tint = this._tintColor.value, newPagesMeshData.push(pageMeshData), pagesMeshData[baseTextureUid] = pageMeshData;\n      }\n      pagesMeshData[baseTextureUid].total++;\n    }\n    for (let i = 0; i < activePagesMeshData.length; i++)\n      newPagesMeshData.includes(activePagesMeshData[i]) || this.removeChild(activePagesMeshData[i].mesh);\n    for (let i = 0; i < newPagesMeshData.length; i++)\n      newPagesMeshData[i].mesh.parent !== this && this.addChild(newPagesMeshData[i].mesh);\n    this._activePagesMeshData = newPagesMeshData;\n    for (const i in pagesMeshData) {\n      const pageMeshData = pagesMeshData[i], total = pageMeshData.total;\n      if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < mesh.Mesh.BATCHABLE_SIZE * 2)\n        pageMeshData.vertices = new Float32Array(4 * 2 * total), pageMeshData.uvs = new Float32Array(4 * 2 * total), pageMeshData.indices = new Uint16Array(6 * total);\n      else {\n        const total2 = pageMeshData.total, vertices = pageMeshData.vertices;\n        for (let i2 = total2 * 4 * 2; i2 < vertices.length; i2++)\n          vertices[i2] = 0;\n      }\n      pageMeshData.mesh.size = 6 * total;\n    }\n    for (let i = 0; i < lenChars; i++) {\n      const char = chars[i];\n      let offset = char.position.x + lineAlignOffsets[char.line] * (this._align === \"justify\" ? char.prevSpaces : 1);\n      this._roundPixels && (offset = Math.round(offset));\n      const xPos = offset * scale, yPos = char.position.y * scale, texture = char.texture, pageMesh = pagesMeshData[texture.baseTexture.uid], textureFrame = texture.frame, textureUvs = texture._uvs, index = pageMesh.index++;\n      pageMesh.indices[index * 6 + 0] = 0 + index * 4, pageMesh.indices[index * 6 + 1] = 1 + index * 4, pageMesh.indices[index * 6 + 2] = 2 + index * 4, pageMesh.indices[index * 6 + 3] = 0 + index * 4, pageMesh.indices[index * 6 + 4] = 2 + index * 4, pageMesh.indices[index * 6 + 5] = 3 + index * 4, pageMesh.vertices[index * 8 + 0] = xPos, pageMesh.vertices[index * 8 + 1] = yPos, pageMesh.vertices[index * 8 + 2] = xPos + textureFrame.width * scale, pageMesh.vertices[index * 8 + 3] = yPos, pageMesh.vertices[index * 8 + 4] = xPos + textureFrame.width * scale, pageMesh.vertices[index * 8 + 5] = yPos + textureFrame.height * scale, pageMesh.vertices[index * 8 + 6] = xPos, pageMesh.vertices[index * 8 + 7] = yPos + textureFrame.height * scale, pageMesh.uvs[index * 8 + 0] = textureUvs.x0, pageMesh.uvs[index * 8 + 1] = textureUvs.y0, pageMesh.uvs[index * 8 + 2] = textureUvs.x1, pageMesh.uvs[index * 8 + 3] = textureUvs.y1, pageMesh.uvs[index * 8 + 4] = textureUvs.x2, pageMesh.uvs[index * 8 + 5] = textureUvs.y2, pageMesh.uvs[index * 8 + 6] = textureUvs.x3, pageMesh.uvs[index * 8 + 7] = textureUvs.y3;\n    }\n    this._textWidth = maxLineWidth * scale, this._textHeight = (pos.y + data.lineHeight) * scale;\n    for (const i in pagesMeshData) {\n      const pageMeshData = pagesMeshData[i];\n      if (this.anchor.x !== 0 || this.anchor.y !== 0) {\n        let vertexCount = 0;\n        const anchorOffsetX = this._textWidth * this.anchor.x, anchorOffsetY = this._textHeight * this.anchor.y;\n        for (let i2 = 0; i2 < pageMeshData.total; i2++)\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX, pageMeshData.vertices[vertexCount++] -= anchorOffsetY, pageMeshData.vertices[vertexCount++] -= anchorOffsetX, pageMeshData.vertices[vertexCount++] -= anchorOffsetY, pageMeshData.vertices[vertexCount++] -= anchorOffsetX, pageMeshData.vertices[vertexCount++] -= anchorOffsetY, pageMeshData.vertices[vertexCount++] -= anchorOffsetX, pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n      }\n      this._maxLineHeight = maxLineHeight * scale;\n      const vertexBuffer = pageMeshData.mesh.geometry.getBuffer(\"aVertexPosition\"), textureBuffer = pageMeshData.mesh.geometry.getBuffer(\"aTextureCoord\"), indexBuffer = pageMeshData.mesh.geometry.getIndex();\n      vertexBuffer.data = pageMeshData.vertices, textureBuffer.data = pageMeshData.uvs, indexBuffer.data = pageMeshData.indices, vertexBuffer.update(), textureBuffer.update(), indexBuffer.update();\n    }\n    for (let i = 0; i < chars.length; i++)\n      charRenderDataPool.push(chars[i]);\n    this._font = data, this.dirty = !1;\n  }\n  updateTransform() {\n    this.validate(), this.containerUpdateTransform();\n  }\n  _render(renderer) {\n    this._autoResolution && this._resolution !== renderer.resolution && (this._resolution = renderer.resolution, this.dirty = !0);\n    const { distanceFieldRange, distanceFieldType, size } = BitmapFont.BitmapFont.available[this._fontName];\n    if (distanceFieldType !== \"none\") {\n      const { a, b, c, d } = this.worldTransform, dx = Math.sqrt(a * a + b * b), dy = Math.sqrt(c * c + d * d), worldScale = (Math.abs(dx) + Math.abs(dy)) / 2, fontScale = this.fontSize / size, resolution = renderer._view.resolution;\n      for (const mesh2 of this._activePagesMeshData)\n        mesh2.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * resolution;\n    }\n    super._render(renderer);\n  }\n  /**\n   * Validates text before calling parent's getLocalBounds\n   * @returns - The rectangular bounding area\n   */\n  getLocalBounds() {\n    return this.validate(), super.getLocalBounds();\n  }\n  /**\n   * Updates text when needed\n   * @private\n   */\n  validate() {\n    const font = BitmapFont.BitmapFont.available[this._fontName];\n    if (!font)\n      throw new Error(`Missing BitmapFont \"${this._fontName}\"`);\n    this._font !== font && (this.dirty = !0), this.dirty && this.updateText();\n  }\n  /**\n   * The tint of the BitmapText object.\n   * @default 0xffffff\n   */\n  get tint() {\n    return this._tintColor.value;\n  }\n  set tint(value) {\n    if (this.tint !== value) {\n      this._tintColor.setValue(value);\n      for (let i = 0; i < this._activePagesMeshData.length; i++)\n        this._activePagesMeshData[i].mesh.tint = value;\n    }\n  }\n  /**\n   * The alignment of the BitmapText object.\n   * @member {string}\n   * @default 'left'\n   */\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    this._align !== value && (this._align = value, this.dirty = !0);\n  }\n  /** The name of the BitmapFont. */\n  get fontName() {\n    return this._fontName;\n  }\n  set fontName(value) {\n    if (!BitmapFont.BitmapFont.available[value])\n      throw new Error(`Missing BitmapFont \"${value}\"`);\n    this._fontName !== value && (this._fontName = value, this.dirty = !0);\n  }\n  /** The size of the font to display. */\n  get fontSize() {\n    return this._fontSize ?? BitmapFont.BitmapFont.available[this._fontName].size;\n  }\n  set fontSize(value) {\n    this._fontSize !== value && (this._fontSize = value, this.dirty = !0);\n  }\n  /**\n   * The anchor sets the origin point of the text.\n   *\n   * The default is `(0,0)`, this means the text's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value == \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** The text of the BitmapText object. */\n  get text() {\n    return this._text;\n  }\n  set text(text) {\n    text = String(text ?? \"\"), this._text !== text && (this._text = text, this.dirty = !0);\n  }\n  /**\n   * The max width of this bitmap text in pixels. If the text provided is longer than the\n   * value provided, line breaks will be automatically inserted in the last whitespace.\n   * Disable by setting the value to 0.\n   */\n  get maxWidth() {\n    return this._maxWidth;\n  }\n  set maxWidth(value) {\n    this._maxWidth !== value && (this._maxWidth = value, this.dirty = !0);\n  }\n  /**\n   * The max line height. This is useful when trying to use the total height of the Text,\n   * i.e. when trying to vertically align.\n   * @readonly\n   */\n  get maxLineHeight() {\n    return this.validate(), this._maxLineHeight;\n  }\n  /**\n   * The width of the overall text, different from fontSize,\n   * which is defined in the style object.\n   * @readonly\n   */\n  get textWidth() {\n    return this.validate(), this._textWidth;\n  }\n  /** Additional space between characters. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    this._letterSpacing !== value && (this._letterSpacing = value, this.dirty = !0);\n  }\n  /**\n   * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n   * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n   * The main disadvantage is movement of objects may appear less smooth.\n   * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n   * @default PIXI.settings.ROUND_PIXELS\n   */\n  get roundPixels() {\n    return this._roundPixels;\n  }\n  set roundPixels(value) {\n    value !== this._roundPixels && (this._roundPixels = value, this.dirty = !0);\n  }\n  /**\n   * The height of the overall text, different from fontSize,\n   * which is defined in the style object.\n   * @readonly\n   */\n  get textHeight() {\n    return this.validate(), this._textHeight;\n  }\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   *\n   * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n   * @default 1\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._autoResolution = !1, this._resolution !== value && (this._resolution = value, this.dirty = !0);\n  }\n  destroy(options) {\n    const { _textureCache } = this, pageMeshDataPool = BitmapFont.BitmapFont.available[this._fontName].distanceFieldType === \"none\" ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    pageMeshDataPool.push(...this._activePagesMeshData);\n    for (const pageMeshData of this._activePagesMeshData)\n      this.removeChild(pageMeshData.mesh);\n    this._activePagesMeshData = [], pageMeshDataPool.filter((page) => _textureCache[page.mesh.texture.baseTexture.uid]).forEach((page) => {\n      page.mesh.texture = core.Texture.EMPTY;\n    });\n    for (const id in _textureCache)\n      _textureCache[id].destroy(), delete _textureCache[id];\n    this._font = null, this._tintColor = null, this._textureCache = null, super.destroy(options);\n  }\n};\n_BitmapText.styleDefaults = {\n  align: \"left\",\n  tint: 16777215,\n  maxWidth: 0,\n  letterSpacing: 0\n};\nlet BitmapText = _BitmapText;\nexports.BitmapText = BitmapText;\n//# sourceMappingURL=BitmapText.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","display","mesh","BitmapFont","msdf$1","msdf","splitTextToCharacters","extractCharCode","pageMeshDataDefaultPageMeshData","pageMeshDataMSDFPageMeshData","charRenderDataPool","_BitmapText","Container","constructor","text","style","align","tint","maxWidth","letterSpacing","fontName","fontSize","Object","assign","_BitmapText2","styleDefaults","available","Error","_activePagesMeshData","_textHeight","_textWidth","_align","_tintColor","Color","_font","_fontName","_fontSize","_maxWidth","_maxLineHeight","_letterSpacing","_anchor","ObservablePoint","dirty","_roundPixels","settings","ROUND_PIXELS","_resolution","RESOLUTION","_autoResolution","_textureCache","updateText","data","scale","size","pos","Point","chars","lineWidths","lineSpaces","_text","replace","charsInput","pageMeshDataPool","distanceFieldType","prevCharCode","lastLineWidth","line","maxLineWidth","lastBreakPos","lastBreakWidth","spacesRemoved","spaceCount","maxLineHeight","i","length","char","charCode","test","push","Math","max","x","y","lineHeight","charData","kerning","charRenderData","pop","texture","Texture","EMPTY","prevSpaces","position","round","xOffset","yOffset","xAdvance","orig","width","height","utils","removeItems","lastChar","lineAlignOffsets","alignOffset","lenChars","pagesMeshData","newPagesMeshData","activePagesMeshData","baseTextureUid","baseTexture","uid","pageMeshData","geometry","MeshGeometry","material","meshBlendMode","MeshMaterial","BLEND_MODES","NORMAL","program","Program","from","default","uniforms","uFWidth","NORMAL_NPM","mesh$1","Mesh","blendMode","index","indexCount","vertexCount","uvsCount","total","vertices","uvs","indices","value","includes","removeChild","parent","addChild","BATCHABLE_SIZE","Float32Array","Uint16Array","total2","i2","offset","yPos","pageMesh","textureFrame","frame","textureUvs","_uvs","xPos","x0","y0","x1","y1","x2","y2","x3","y3","anchor","anchorOffsetX","anchorOffsetY","vertexBuffer","getBuffer","textureBuffer","indexBuffer","getIndex","update","updateTransform","validate","containerUpdateTransform","_render","renderer","resolution","distanceFieldRange","a","b","c","d","worldTransform","worldScale","abs","sqrt","dx","dy","fontScale","_view","mesh2","shader","getLocalBounds","font","setValue","set","copyFrom","String","destroy","options","filter","page","forEach","id","BitmapText"]
}
