shadow$provide.module$node_modules$pixi_DOT_js$lib$utils$canvas$getCanvasBoundingBox = function(global, require, module, exports) {
  function checkRow(data, width, y) {
    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {
      if (0 !== data[index + 3]) {
        return !1;
      }
    }
    return !0;
  }
  function checkColumn(data, width, x, top, bottom) {
    width *= 4;
    for (let y = top, index = top * width + 4 * x; y <= bottom; ++y, index += width) {
      if (0 !== data[index + 3]) {
        return !1;
      }
    }
    return !0;
  }
  var Rectangle = require("module$node_modules$pixi_DOT_js$lib$maths$shapes$Rectangle");
  "use strict";
  exports.getCanvasBoundingBox = function(canvas, resolution = 1) {
    const {width, height} = canvas;
    canvas = canvas.getContext("2d", {willReadFrequently:!0});
    if (null === canvas) {
      throw new TypeError("Failed to get canvas 2D context");
    }
    canvas = canvas.getImageData(0, 0, width, height).data;
    let left = 0, top = 0, right = width - 1, bottom = height - 1;
    for (; top < height && checkRow(canvas, width, top);) {
      ++top;
    }
    if (top === height) {
      return Rectangle.Rectangle.EMPTY;
    }
    for (; checkRow(canvas, width, bottom);) {
      --bottom;
    }
    for (; checkColumn(canvas, width, left, top, bottom);) {
      ++left;
    }
    for (; checkColumn(canvas, width, right, top, bottom);) {
      --right;
    }
    ++right;
    ++bottom;
    return new Rectangle.Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);
  };
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$utils$canvas$getCanvasBoundingBox.js.map
