{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$gpu$GpuGraphicsAdaptor.js",
"lineCount":43,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/gpu/GpuGraphicsAdaptor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$gpu$GpuGraphicsAdaptor\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar maxRecommendedTextures = require('../../../rendering/batcher/gl/utils/maxRecommendedTextures.js');\nvar getTextureBatchBindGroup = require('../../../rendering/batcher/gpu/getTextureBatchBindGroup.js');\nvar compileHighShaderToProgram = require('../../../rendering/high-shader/compileHighShaderToProgram.js');\nvar colorBit = require('../../../rendering/high-shader/shader-bits/colorBit.js');\nvar generateTextureBatchBit = require('../../../rendering/high-shader/shader-bits/generateTextureBatchBit.js');\nvar localUniformBit = require('../../../rendering/high-shader/shader-bits/localUniformBit.js');\nvar roundPixelsBit = require('../../../rendering/high-shader/shader-bits/roundPixelsBit.js');\nvar Shader = require('../../../rendering/renderers/shared/shader/Shader.js');\nvar UniformGroup = require('../../../rendering/renderers/shared/shader/UniformGroup.js');\n\n\"use strict\";\nclass GpuGraphicsAdaptor {\n  init() {\n    const localUniforms = new UniformGroup.UniformGroup({\n      uTransformMatrix: { value: new Matrix.Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const gpuProgram = compileHighShaderToProgram.compileHighShaderGpuProgram({\n      name: \"graphics\",\n      bits: [\n        colorBit.colorBit,\n        generateTextureBatchBit.generateTextureBatchBit(maxRecommendedTextures.getMaxTexturesPerBatch()),\n        localUniformBit.localUniformBitGroup2,\n        roundPixelsBit.roundPixelsBit\n      ]\n    });\n    this.shader = new Shader.Shader({\n      gpuProgram,\n      resources: {\n        // added on the fly!\n        localUniforms\n      }\n    });\n  }\n  execute(graphicsPipe, renderable) {\n    const context = renderable.context;\n    const shader = context.customShader || this.shader;\n    const renderer = graphicsPipe.renderer;\n    const contextSystem = renderer.graphicsContext;\n    const {\n      batcher,\n      instructions\n    } = contextSystem.getContextRenderData(context);\n    const encoder = renderer.encoder;\n    encoder.setGeometry(batcher.geometry, shader.gpuProgram);\n    const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n    encoder.setBindGroup(0, globalUniformsBindGroup, shader.gpuProgram);\n    const localBindGroup = renderer.renderPipes.uniformBatch.getUniformBindGroup(shader.resources.localUniforms, true);\n    encoder.setBindGroup(2, localBindGroup, shader.gpuProgram);\n    const batches = instructions.instructions;\n    let topology = null;\n    for (let i = 0; i < instructions.instructionSize; i++) {\n      const batch = batches[i];\n      if (batch.topology !== topology) {\n        topology = batch.topology;\n        encoder.setPipelineFromGeometryProgramAndState(\n          batcher.geometry,\n          shader.gpuProgram,\n          graphicsPipe.state,\n          batch.topology\n        );\n      }\n      shader.groups[1] = batch.bindGroup;\n      if (!batch.gpuBindGroup) {\n        const textureBatch = batch.textures;\n        batch.bindGroup = getTextureBatchBindGroup.getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n        batch.gpuBindGroup = renderer.bindGroup.getBindGroup(\n          batch.bindGroup,\n          shader.gpuProgram,\n          1\n        );\n      }\n      encoder.setBindGroup(1, batch.bindGroup, shader.gpuProgram);\n      encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n    }\n  }\n  destroy() {\n    this.shader.destroy(true);\n    this.shader = null;\n  }\n}\n/** @ignore */\nGpuGraphicsAdaptor.extension = {\n  type: [\n    Extensions.ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"graphics\"\n};\n\nexports.GpuGraphicsAdaptor = GpuGraphicsAdaptor;\n//# sourceMappingURL=GpuGraphicsAdaptor.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Matrix","maxRecommendedTextures","getTextureBatchBindGroup","compileHighShaderToProgram","colorBit","generateTextureBatchBit","localUniformBit","roundPixelsBit","Shader","UniformGroup","GpuGraphicsAdaptor","init","localUniforms","uTransformMatrix","value","type","uColor","Float32Array","uRound","gpuProgram","compileHighShaderGpuProgram","name","bits","getMaxTexturesPerBatch","localUniformBitGroup2","shader","resources","execute","graphicsPipe","renderable","context","customShader","renderer","batcher","instructions","graphicsContext","getContextRenderData","encoder","setGeometry","geometry","setBindGroup","globalUniforms","bindGroup","localBindGroup","renderPipes","uniformBatch","getUniformBindGroup","batches","topology","i","instructionSize","batch","setPipelineFromGeometryProgramAndState","state","groups","gpuBindGroup","textureBatch","textures","count","getBindGroup","renderPassEncoder","drawIndexed","size","start","destroy","extension","ExtensionType","WebGPUPipesAdaptor"]
}
