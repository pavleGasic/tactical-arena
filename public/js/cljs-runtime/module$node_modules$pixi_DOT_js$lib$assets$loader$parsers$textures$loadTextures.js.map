{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$loadTextures.js",
"lineCount":37,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/assets/loader/parsers/textures/loadTextures.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$loadTextures\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../../environment/adapter.js');\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar ImageSource = require('../../../../rendering/renderers/shared/texture/sources/ImageSource.js');\nvar getResolutionOfUrl = require('../../../../utils/network/getResolutionOfUrl.js');\nvar checkDataUrl = require('../../../utils/checkDataUrl.js');\nvar checkExtension = require('../../../utils/checkExtension.js');\nvar WorkerManager = require('../../workers/WorkerManager.js');\nvar LoaderParser = require('../LoaderParser.js');\nvar createTexture = require('./utils/createTexture.js');\n\n\"use strict\";\nconst validImageExtensions = [\".jpeg\", \".jpg\", \".png\", \".webp\", \".avif\"];\nconst validImageMIMEs = [\n  \"image/jpeg\",\n  \"image/png\",\n  \"image/webp\",\n  \"image/avif\"\n];\nasync function loadImageBitmap(url, asset) {\n  const response = await adapter.DOMAdapter.get().fetch(url);\n  if (!response.ok) {\n    throw new Error(`[loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);\n  }\n  const imageBlob = await response.blob();\n  return asset?.data?.alphaMode === \"premultiplied-alpha\" ? createImageBitmap(imageBlob, { premultiplyAlpha: \"none\" }) : createImageBitmap(imageBlob);\n}\nconst loadTextures = {\n  name: \"loadTextures\",\n  extension: {\n    type: Extensions.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.High,\n    name: \"loadTextures\"\n  },\n  config: {\n    preferWorkers: true,\n    preferCreateImageBitmap: true,\n    crossOrigin: \"anonymous\"\n  },\n  test(url) {\n    return checkDataUrl.checkDataUrl(url, validImageMIMEs) || checkExtension.checkExtension(url, validImageExtensions);\n  },\n  async load(url, asset, loader) {\n    let src = null;\n    if (globalThis.createImageBitmap && this.config.preferCreateImageBitmap) {\n      if (this.config.preferWorkers && await WorkerManager.WorkerManager.isImageBitmapSupported()) {\n        src = await WorkerManager.WorkerManager.loadImageBitmap(url, asset);\n      } else {\n        src = await loadImageBitmap(url, asset);\n      }\n    } else {\n      src = await new Promise((resolve, reject) => {\n        src = new Image();\n        src.crossOrigin = this.config.crossOrigin;\n        src.src = url;\n        if (src.complete) {\n          resolve(src);\n        } else {\n          src.onload = () => {\n            resolve(src);\n          };\n          src.onerror = reject;\n        }\n      });\n    }\n    const base = new ImageSource.ImageSource({\n      resource: src,\n      alphaMode: \"premultiply-alpha-on-upload\",\n      resolution: asset.data?.resolution || getResolutionOfUrl.getResolutionOfUrl(url),\n      ...asset.data\n    });\n    return createTexture.createTexture(base, loader, url);\n  },\n  unload(texture) {\n    texture.destroy(true);\n  }\n};\n\nexports.loadImageBitmap = loadImageBitmap;\nexports.loadTextures = loadTextures;\n//# sourceMappingURL=loadTextures.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","loadImageBitmap","url","asset","response","adapter","DOMAdapter","get","fetch","ok","Error","status","statusText","imageBlob","blob","data","alphaMode","createImageBitmap","premultiplyAlpha","Extensions","ImageSource","getResolutionOfUrl","checkDataUrl","checkExtension","WorkerManager","LoaderParser","createTexture","validImageExtensions","validImageMIMEs","loadTextures","name","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","config","preferWorkers","preferCreateImageBitmap","crossOrigin","test","load","loader","src","globalThis","isImageBitmapSupported","Promise","resolve","reject","Image","complete","onload","src.onload","onerror","base","resource","resolution","unload","texture","destroy"]
}
