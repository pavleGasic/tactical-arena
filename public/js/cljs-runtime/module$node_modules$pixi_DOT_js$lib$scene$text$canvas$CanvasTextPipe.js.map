{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text$canvas$CanvasTextPipe.js",
"lineCount":82,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,GAAyF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG7HC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACJ,MAAIC,YAAYJ,OAAA,CAAQ,0DAAR,CAAhB,EACIK,kBAAkBL,OAAA,CAAQ,kEAAR,CADtB,EAEIM,mBAAmBN,OAAA,CAAQ,uEAAR,CAFvB;AAIA,cAAA;AACA,OAAMO,eAAN;AACEC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKC,CAAAA,QAAL,GAAgCC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAhC;AACA,UAAKC,CAAAA,uBAAL,GAA+B,IAAKC,CAAAA,iBAAkBC,CAAAA,IAAvB,CAA4B,IAA5B,CAA/B;AACA,UAAKC,CAAAA,SAAL,GAAiBP,QAAjB;AACA,UAAKO,CAAAA,SAAUC,CAAAA,OAAQC,CAAAA,gBAAiBC,CAAAA,GAAxC,CAA4C,IAA5C,CAAA;AACA,UAAKH,CAAAA,SAAUI,CAAAA,YAAaC,CAAAA,cAA5B,CAA2C,IAA3C,EAAiD,UAAjD,CAAA;AALoB;AAOtBH,oBAAgB,EAAG;AACjB,WAAK,MAAMI,CAAX,GAAgB,KAAKZ,CAAAA,QAArB,CAA+B;AAC7B,YAAMa,UAAU,IAAKb,CAAAA,QAAL,CAAcY,CAAd,CAAhB;AACKC,eAAL,KAEMC,OACN,GADaD,OAAQE,CAAAA,eAAgBC,CAAAA,UACrC,EAAIF,OAAKG,CAAAA,eAAT,KACEH,OAAKI,CAAAA,WACL,GADmB,IAAKZ,CAAAA,SAAUa,CAAAA,UAClC,EAAAL,OAAKM,CAAAA,YAAL,EAFF,CAHA;AAF6B;AADd;AAYnBC,sBAAkB,CAACP,IAAD,CAAO;AACvB,YAAMD,UAAU,IAAKS,CAAAA,WAAL,CAAiBR,IAAjB,CAAhB;AACMS,UAAAA,GAAST,IAAKU,CAAAA,OAAL,EAATD;AACN,aAAIV,OAAQY,CAAAA,UAAZ,KAA2BF,IAA3B,GACS,CAAA,CADT,GAGO,CAAA,CAHP;AAHuB;AAQzBG,iBAAa,CAACZ,IAAD,EAAOa,cAAP,CAAuB;AAElC,YAAMZ,kBADU,IAAKO,CAAAA,WAALT,CAAiBC,IAAjBD,CACgBE,CAAAA,eAAhC;AACID,UAAKc,CAAAA,cAAT,IACE,IAAKC,CAAAA,WAAL,CAAiBf,IAAjB,CADF;AAGA,UAAKR,CAAAA,SAAUwB,CAAAA,WAAYC,CAAAA,KAAMC,CAAAA,UAAjC,CAA4CjB,eAA5C,EAA6DY,cAA7D,CAAA;AANkC;AAQpCM,oBAAgB,CAACnB,IAAD,CAAO;AAErB,YAAMC,kBADU,IAAKO,CAAAA,WAALT,CAAiBC,IAAjBD,CACgBE,CAAAA,eAAhC;AACID,UAAKc,CAAAA,cAAT,IACE,IAAKC,CAAAA,WAAL,CAAiBf,IAAjB,CADF;AAGAC,qBAAgBmB,CAAAA,QAASC,CAAAA,aAAzB,CAAuCpB,eAAvC,CAAA;AANqB;AAQvBX,qBAAiB,CAACU,IAAD,CAAO;AACtBA,UAAKsB,CAAAA,GAAL,CAAS,WAAT,EAAsB,IAAKjC,CAAAA,uBAA3B,CAAA;AACA,UAAKkC,CAAAA,sBAAL,CAA4BvB,IAAKwB,CAAAA,GAAjC,CAAA;AAFsB;AAIxBD,0BAAsB,CAACE,OAAD,CAAU;AAC9B,YAAM1B,UAAU,IAAKb,CAAAA,QAAL,CAAcuC,OAAd,CAAhB;AACA,UAAKjC,CAAAA,SAAUkC,CAAAA,UAAWC,CAAAA,sBAA1B,CAAiD5B,OAAQY,CAAAA,UAAzD,CAAA;AACA/B,eAAUgD,CAAAA,OAAQC,CAAAA,MAAlB,CAAyB9B,OAAQE,CAAAA,eAAjC,CAAA;AACA,UAAKf,CAAAA,QAAL,CAAcuC,OAAd,CAAA,GAAyB,IAAzB;AAJ8B;AAMhCV,eAAW,CAACf,IAAD,CAAO;AAChB,YAAMS,SAAST,IAAKU,CAAAA,OAAL,EAAf,EACMX,UAAU,IAAKS,CAAAA,WAAL,CAAiBR,IAAjB,CADhB,EAEMC,kBAAkBF,OAAQE,CAAAA,eAFhC;AAGIF,aAAQY,CAAAA,UAAZ,KAA2BF,MAA3B,IACE,IAAKqB,CAAAA,cAAL,CAAoB9B,IAApB,CADF;AAGAA,UAAKc,CAAAA,cAAL,GAAsB,CAAA,CAAtB;AACAhC,sBAAiBA,CAAAA,gBAAjB,CAAkCmB,eAAlC,EAAmDD,IAAnD,CAAA;AARgB;AAUlB8B,kBAAc,CAAC9B,IAAD,CAAO;AACnB,YAAMD,UAAU,IAAKS,CAAAA,WAAL,CAAiBR,IAAjB,CAAhB,EACMC,kBAAkBF,OAAQE,CAAAA,eADhC;AAEIF,aAAQgC,CAAAA,OAAZ,IACE,IAAKvC,CAAAA,SAAUkC,CAAAA,UAAWC,CAAAA,sBAA1B,CAAiD5B,OAAQY,CAAAA,UAAzD,CADF;AAGAZ,aAAQgC,CAAAA,OAAR,GAAkB9B,eAAgB8B,CAAAA,OAAlC,GAA4C,IAAKvC,CAAAA,SAAUkC,CAAAA,UAAWM,CAAAA,iBAA1B,CAA4ChC,IAA5C,CAA5C;AACAD,aAAQY,CAAAA,UAAR,GAAqBX,IAAKU,CAAAA,OAAL,EAArB;AACAT,qBAAgB8B,CAAAA,OAAhB,GAA0BhC,OAAQgC,CAAAA,OAAlC;AARmB;AAUrBvB,eAAW,CAACR,IAAD,CAAO;AAChB,aAAO,IAAKd,CAAAA,QAAL,CAAcc,IAAKwB,CAAAA,GAAnB,CAAP,IAAkC,IAAKS,CAAAA,WAAL,CAAiBjC,IAAjB,CAAlC;AADgB;AAGlBiC,eAAW,CAACjC,IAAD,CAAO;AAChB,YAAMkC,cAAc,CAClBH,QAAS,IADS,EAElBpB,WAAY,IAFM,EAGlBV,gBAAiBrB,SAAUgD,CAAAA,OAAQO,CAAAA,GAAlB,CAAsBtD,eAAgBA,CAAAA,eAAtC,CAHC,CAApB;AAKAqD,iBAAYjC,CAAAA,eAAgBC,CAAAA,UAA5B,GAAyCF,IAAzC;AACAkC,iBAAYjC,CAAAA,eAAgBmC,CAAAA,SAA5B,GAAwCpC,IAAKqC,CAAAA,cAA7C;AACAH,iBAAYjC,CAAAA,eAAgBqC,CAAAA,MAA5B,GAAqC,CAAEC,KAAM,CAAR,EAAWC,KAAM,CAAjB,EAAoBC,KAAM,CAA1B,EAA6BC,KAAM,CAAnC,CAArC;AACAR,iBAAYjC,CAAAA,eAAgB0C,CAAAA,WAA5B,GAA0C,IAAKnD,CAAAA,SAAUoD,CAAAA,YAAzD,GAAwE5C,IAAK4C,CAAAA,YAA7E;AACA,UAAK1D,CAAAA,QAAL,CAAcc,IAAKwB,CAAAA,GAAnB,CAAA,GAA0BU,WAA1B;AACAlC,UAAKI,CAAAA,WAAL,GAAmBJ,IAAKG,CAAAA,eAAL,GAAuB,IAAKX,CAAAA,SAAUa,CAAAA,UAAtC,GAAmDL,IAAKK,CAAAA,UAA3E;AACA,UAAKU,CAAAA,WAAL,CAAiBf,IAAjB,CAAA;AACAA,UAAK6C,CAAAA,EAAL,CAAQ,WAAR,EAAqB,IAAKxD,CAAAA,uBAA1B,CAAA;AACA,aAAO6C,WAAP;AAdgB;AAgBlBY,WAAO,EAAG;AACR,WAAK,MAAMhD,CAAX,GAAgB,KAAKZ,CAAAA,QAArB;AACE,YAAKqC,CAAAA,sBAAL,CAA4BzB,CAA5B,CAAA;AADF;AAIA,UAAKN,CAAAA,SAAL,GADA,IAAKN,CAAAA,QACL,GADgB,IAChB;AALQ;AA7FZ;AAsGAH,gBAAegE,CAAAA,SAAf,GAA2B,CACzBC,KAAM,CACJrE,MAAWsE,CAAAA,aAAcC,CAAAA,UADrB,EAEJvE,MAAWsE,CAAAA,aAAcE,CAAAA,WAFrB,EAGJxE,MAAWsE,CAAAA,aAAcG,CAAAA,WAHrB,CADmB,EAMzBC,KAAM,MANmB,CAA3B;AASA3E,SAAQK,CAAAA,cAAR,GAAyBA,cAAzB;AAxHiI,CAAjI;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/text/canvas/CanvasTextPipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text$canvas$CanvasTextPipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar PoolGroup = require('../../../utils/pool/PoolGroup.js');\nvar BatchableSprite = require('../../sprite/BatchableSprite.js');\nvar updateTextBounds = require('../utils/updateTextBounds.js');\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    PoolGroup.BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    updateTextBounds.updateTextBounds(batchableSprite, text);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: PoolGroup.BigPool.get(BatchableSprite.BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexports.CanvasTextPipe = CanvasTextPipe;\n//# sourceMappingURL=CanvasTextPipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","PoolGroup","BatchableSprite","updateTextBounds","CanvasTextPipe","constructor","renderer","_gpuText","Object","create","_destroyRenderableBound","destroyRenderable","bind","_renderer","runners","resolutionChange","add","renderableGC","addManagedHash","i","gpuText","text","batchableSprite","renderable","_autoResolution","_resolution","resolution","onViewUpdate","validateRenderable","_getGpuText","newKey","_getKey","currentKey","addRenderable","instructionSet","_didTextUpdate","_updateText","renderPipes","batch","addToBatch","updateRenderable","_batcher","updateElement","off","_destroyRenderableById","uid","textUid","canvasText","decreaseReferenceCount","BigPool","return","_updateGpuText","texture","getManagedTexture","initGpuText","gpuTextData","get","transform","groupTransform","bounds","minX","maxX","minY","maxY","roundPixels","_roundPixels","on","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"]
}
