shadow$provide.module$node_modules$$pixi$assets$lib$cache$Cache = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index");
  require("module$node_modules$$pixi$assets$lib$utils$index");
  var convertToList = require("module$node_modules$$pixi$assets$lib$utils$convertToList");
  class CacheClass {
    constructor() {
      this._parsers = [];
      this._cache = new Map();
      this._cacheMap = new Map();
    }
    reset() {
      this._cacheMap.clear();
      this._cache.clear();
    }
    has(key) {
      return this._cache.has(key);
    }
    get(key) {
      const result = this._cache.get(key);
      return result || console.warn(`[Assets] Asset id ${key} was not found in the Cache`), result;
    }
    set(key, value) {
      key = convertToList.convertToList(key);
      let cacheableAssets;
      for (var i = 0; i < this.parsers.length; i++) {
        const parser = this.parsers[i];
        if (parser.test(value)) {
          cacheableAssets = parser.getCacheableAssets(key, value);
          break;
        }
      }
      cacheableAssets || (cacheableAssets = {}, key.forEach(key2 => {
        cacheableAssets[key2] = value;
      }));
      i = Object.keys(cacheableAssets);
      const cachedAssets = {cacheKeys:i, keys:key};
      (key.forEach(key2 => {
        this._cacheMap.set(key2, cachedAssets);
      }), i.forEach(key2 => {
        const val = cacheableAssets ? cacheableAssets[key2] : value;
        this._cache.has(key2) && this._cache.get(key2) !== val && console.warn("[Cache] already has key:", key2);
        this._cache.set(key2, cacheableAssets[key2]);
      }), value instanceof core.Texture) && key.forEach(key2 => {
        value.baseTexture !== core.Texture.EMPTY.baseTexture && core.BaseTexture.addToCache(value.baseTexture, key2);
        core.Texture.addToCache(value, key2);
      });
    }
    remove(key) {
      this._cacheMap.has(key) ? (key = this._cacheMap.get(key), key.cacheKeys.forEach(key2 => {
        this._cache.delete(key2);
      }), key.keys.forEach(key2 => {
        this._cacheMap.delete(key2);
      })) : console.warn(`[Assets] Asset id ${key} was not found in the Cache`);
    }
    get parsers() {
      return this._parsers;
    }
  }
  global = new CacheClass();
  exports.Cache = global;
};

//# sourceMappingURL=module$node_modules$$pixi$assets$lib$cache$Cache.js.map
