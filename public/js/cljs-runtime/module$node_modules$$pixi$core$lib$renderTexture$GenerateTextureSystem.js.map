{
"version":3,
"file":"module$node_modules$$pixi$core$lib$renderTexture$GenerateTextureSystem.js",
"lineCount":33,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/renderTexture/GenerateTextureSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$renderTexture$GenerateTextureSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar extensions = require(\"@pixi/extensions\"), math = require(\"@pixi/math\"), RenderTexture = require(\"./RenderTexture.js\");\nconst tempTransform = new math.Transform(), tempRect = new math.Rectangle();\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this.renderer = renderer, this._tempMatrix = new math.Matrix();\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n   * @param displayObject - The displayObject the object will be generated from.\n   * @param {IGenerateTextureOptions} options - Generate texture options.\n   * @param {PIXI.Rectangle} options.region - The region of the displayObject, that shall be rendered,\n   *        if no region is specified, defaults to the local bounds of the displayObject.\n   * @param {number} [options.resolution] - If not given, the renderer's resolution is used.\n   * @param {PIXI.MSAA_QUALITY} [options.multisample] - If not given, the renderer's multisample is used.\n   * @returns a shiny new texture of the display object passed in\n   */\n  generateTexture(displayObject, options) {\n    const { region: manualRegion, ...textureOptions } = options || {}, region = manualRegion?.copyTo(tempRect) || displayObject.getLocalBounds(tempRect, !0), resolution = textureOptions.resolution || this.renderer.resolution;\n    region.width = Math.max(region.width, 1 / resolution), region.height = Math.max(region.height, 1 / resolution), textureOptions.width = region.width, textureOptions.height = region.height, textureOptions.resolution = resolution, textureOptions.multisample ?? (textureOptions.multisample = this.renderer.multisample);\n    const renderTexture = RenderTexture.RenderTexture.create(textureOptions);\n    this._tempMatrix.tx = -region.x, this._tempMatrix.ty = -region.y;\n    const transform = displayObject.transform;\n    return displayObject.transform = tempTransform, this.renderer.render(displayObject, {\n      renderTexture,\n      transform: this._tempMatrix,\n      skipUpdateTransform: !!displayObject.parent,\n      blit: !0\n    }), displayObject.transform = transform, renderTexture;\n  }\n  destroy() {\n  }\n}\nGenerateTextureSystem.extension = {\n  type: [\n    extensions.ExtensionType.RendererSystem,\n    extensions.ExtensionType.CanvasRendererSystem\n  ],\n  name: \"textureGenerator\"\n};\nextensions.extensions.add(GenerateTextureSystem);\nexports.GenerateTextureSystem = GenerateTextureSystem;\n//# sourceMappingURL=GenerateTextureSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extensions","math","RenderTexture","tempTransform","Transform","tempRect","Rectangle","GenerateTextureSystem","constructor","renderer","_tempMatrix","Matrix","generateTexture","displayObject","options","manualRegion","textureOptions","region","copyTo","getLocalBounds","resolution","width","Math","max","height","multisample","renderTexture","create","tx","x","ty","y","transform","render","skipUpdateTransform","parent","blit","destroy","extension","type","ExtensionType","RendererSystem","CanvasRendererSystem","name","add"]
}
