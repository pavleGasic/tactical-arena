{
"version":3,
"file":"module$node_modules$$pixi$display$lib$DisplayObject.js",
"lineCount":185,
"mappings":"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",
"sources":["node_modules/@pixi/display/lib/DisplayObject.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$display$lib$DisplayObject\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), Bounds = require(\"./Bounds.js\");\nclass DisplayObject extends core.utils.EventEmitter {\n  constructor() {\n    super(), this.tempDisplayObjectParent = null, this.transform = new core.Transform(), this.alpha = 1, this.visible = !0, this.renderable = !0, this.cullable = !1, this.cullArea = null, this.parent = null, this.worldAlpha = 1, this._lastSortedIndex = 0, this._zIndex = 0, this.filterArea = null, this.filters = null, this._enabledFilters = null, this._bounds = new Bounds.Bounds(), this._localBounds = null, this._boundsID = 0, this._boundsRect = null, this._localBoundsRect = null, this._mask = null, this._maskRefCount = 0, this._destroyed = !1, this.isSprite = !1, this.isMask = !1;\n  }\n  /**\n   * Mixes all enumerable properties and methods from a source object to DisplayObject.\n   * @param source - The source of properties and methods to mix in.\n   */\n  static mixin(source) {\n    const keys = Object.keys(source);\n    for (let i = 0; i < keys.length; ++i) {\n      const propertyName = keys[i];\n      Object.defineProperty(\n        DisplayObject.prototype,\n        propertyName,\n        Object.getOwnPropertyDescriptor(source, propertyName)\n      );\n    }\n  }\n  /**\n   * Fired when this DisplayObject is added to a Container.\n   * @instance\n   * @event added\n   * @param {PIXI.Container} container - The container added to.\n   */\n  /**\n   * Fired when this DisplayObject is removed from a Container.\n   * @instance\n   * @event removed\n   * @param {PIXI.Container} container - The container removed from.\n   */\n  /**\n   * Fired when this DisplayObject is destroyed. This event is emitted once\n   * destroy is finished.\n   * @instance\n   * @event destroyed\n   */\n  /** Readonly flag for destroyed display objects. */\n  get destroyed() {\n    return this._destroyed;\n  }\n  /** Recursively updates transform of all objects from the root to this one internal function for toLocal() */\n  _recursivePostUpdateTransform() {\n    this.parent ? (this.parent._recursivePostUpdateTransform(), this.transform.updateTransform(this.parent.transform)) : this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n  }\n  /** Updates the object transform for rendering. TODO - Optimization pass! */\n  updateTransform() {\n    this._boundsID++, this.transform.updateTransform(this.parent.transform), this.worldAlpha = this.alpha * this.parent.worldAlpha;\n  }\n  /**\n   * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.\n   *\n   * This method is expensive on containers with a large subtree (like the stage). This is because the bounds\n   * of a container depend on its children's bounds, which recursively causes all bounds in the subtree to\n   * be recalculated. The upside, however, is that calling `getBounds` once on a container will indeed update\n   * the bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n   * `displayObject._bounds.getRectangle()` when traversing through all the bounds in a scene graph. Otherwise,\n   * calling `getBounds` on each object in a subtree will cause the total cost to increase quadratically as\n   * its height increases.\n   *\n   * The transforms of all objects in a container's **subtree** and of all **ancestors** are updated.\n   * The world bounds of all display objects in a container's **subtree** will also be recalculated.\n   *\n   * The `_bounds` object stores the last calculation of the bounds. You can use to entirely skip bounds\n   * calculation if needed.\n   *\n   * ```js\n   * const lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n   * ```\n   *\n   * Do know that usage of `getLocalBounds` can corrupt the `_bounds` of children (the whole subtree, actually). This\n   * is a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\n   * details.\n   *\n   * `getBounds` should be called with `skipUpdate` equal to `true` in a render() call. This is because the transforms\n   * are guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\n   * cases.\n   * @param skipUpdate - Setting to `true` will stop the transforms of the scene graph from\n   *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n   *  nice performance boost.\n   * @param rect - Optional rectangle to store the result of the bounds calculation.\n   * @returns - The minimum axis-aligned rectangle in world space that fits around this object.\n   */\n  getBounds(skipUpdate, rect) {\n    return skipUpdate || (this.parent ? (this._recursivePostUpdateTransform(), this.updateTransform()) : (this.parent = this._tempDisplayObjectParent, this.updateTransform(), this.parent = null)), this._bounds.updateID !== this._boundsID && (this.calculateBounds(), this._bounds.updateID = this._boundsID), rect || (this._boundsRect || (this._boundsRect = new core.Rectangle()), rect = this._boundsRect), this._bounds.getRectangle(rect);\n  }\n  /**\n   * Retrieves the local bounds of the displayObject as a rectangle object.\n   * @param rect - Optional rectangle to store the result of the bounds calculation.\n   * @returns - The rectangular bounding area.\n   */\n  getLocalBounds(rect) {\n    rect || (this._localBoundsRect || (this._localBoundsRect = new core.Rectangle()), rect = this._localBoundsRect), this._localBounds || (this._localBounds = new Bounds.Bounds());\n    const transformRef = this.transform, parentRef = this.parent;\n    this.parent = null, this._tempDisplayObjectParent.worldAlpha = parentRef?.worldAlpha ?? 1, this.transform = this._tempDisplayObjectParent.transform;\n    const worldBounds = this._bounds, worldBoundsID = this._boundsID;\n    this._bounds = this._localBounds;\n    const bounds = this.getBounds(!1, rect);\n    return this.parent = parentRef, this.transform = transformRef, this._bounds = worldBounds, this._bounds.updateID += this._boundsID - worldBoundsID, bounds;\n  }\n  /**\n   * Calculates the global position of the display object.\n   * @param position - The world origin to calculate from.\n   * @param point - A Point object in which to store the value, optional\n   *  (otherwise will create a new Point).\n   * @param skipUpdate - Should we skip the update transform.\n   * @returns - A point object representing the position of this object.\n   */\n  toGlobal(position, point, skipUpdate = !1) {\n    return skipUpdate || (this._recursivePostUpdateTransform(), this.parent ? this.displayObjectUpdateTransform() : (this.parent = this._tempDisplayObjectParent, this.displayObjectUpdateTransform(), this.parent = null)), this.worldTransform.apply(position, point);\n  }\n  /**\n   * Calculates the local position of the display object relative to another point.\n   * @param position - The world origin to calculate from.\n   * @param from - The DisplayObject to calculate the global position from.\n   * @param point - A Point object in which to store the value, optional\n   *  (otherwise will create a new Point).\n   * @param skipUpdate - Should we skip the update transform\n   * @returns - A point object representing the position of this object\n   */\n  toLocal(position, from, point, skipUpdate) {\n    return from && (position = from.toGlobal(position, point, skipUpdate)), skipUpdate || (this._recursivePostUpdateTransform(), this.parent ? this.displayObjectUpdateTransform() : (this.parent = this._tempDisplayObjectParent, this.displayObjectUpdateTransform(), this.parent = null)), this.worldTransform.applyInverse(position, point);\n  }\n  /**\n   * Set the parent Container of this DisplayObject.\n   * @param container - The Container to add this DisplayObject to.\n   * @returns - The Container that this DisplayObject was added to.\n   */\n  setParent(container) {\n    if (!container || !container.addChild)\n      throw new Error(\"setParent: Argument must be a Container\");\n    return container.addChild(this), container;\n  }\n  /** Remove the DisplayObject from its parent Container. If the DisplayObject has no parent, do nothing. */\n  removeFromParent() {\n    this.parent?.removeChild(this);\n  }\n  /**\n   * Convenience function to set the position, scale, skew and pivot at once.\n   * @param x - The X position\n   * @param y - The Y position\n   * @param scaleX - The X scale value\n   * @param scaleY - The Y scale value\n   * @param rotation - The rotation\n   * @param skewX - The X skew value\n   * @param skewY - The Y skew value\n   * @param pivotX - The X pivot value\n   * @param pivotY - The Y pivot value\n   * @returns - The DisplayObject instance\n   */\n  setTransform(x = 0, y = 0, scaleX = 1, scaleY = 1, rotation = 0, skewX = 0, skewY = 0, pivotX = 0, pivotY = 0) {\n    return this.position.x = x, this.position.y = y, this.scale.x = scaleX || 1, this.scale.y = scaleY || 1, this.rotation = rotation, this.skew.x = skewX, this.skew.y = skewY, this.pivot.x = pivotX, this.pivot.y = pivotY, this;\n  }\n  /**\n   * Base destroy method for generic display objects. This will automatically\n   * remove the display object from its parent Container as well as remove\n   * all current event listeners and internal references. Do not use a DisplayObject\n   * after calling `destroy()`.\n   * @param _options\n   */\n  destroy(_options) {\n    this.removeFromParent(), this._destroyed = !0, this.transform = null, this.parent = null, this._bounds = null, this.mask = null, this.cullArea = null, this.filters = null, this.filterArea = null, this.hitArea = null, this.eventMode = \"auto\", this.interactiveChildren = !1, this.emit(\"destroyed\"), this.removeAllListeners();\n  }\n  /**\n   * @protected\n   * @member {PIXI.Container}\n   */\n  get _tempDisplayObjectParent() {\n    return this.tempDisplayObjectParent === null && (this.tempDisplayObjectParent = new TemporaryDisplayObject()), this.tempDisplayObjectParent;\n  }\n  /**\n   * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root.\n   *\n   * ```js\n   * const cacheParent = elem.enableTempParent();\n   * elem.updateTransform();\n   * elem.disableTempParent(cacheParent);\n   * ```\n   * @returns - Current parent\n   */\n  enableTempParent() {\n    const myParent = this.parent;\n    return this.parent = this._tempDisplayObjectParent, myParent;\n  }\n  /**\n   * Pair method for `enableTempParent`\n   * @param cacheParent - Actual parent of element\n   */\n  disableTempParent(cacheParent) {\n    this.parent = cacheParent;\n  }\n  /**\n   * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n   * An alias to position.x\n   */\n  get x() {\n    return this.position.x;\n  }\n  set x(value) {\n    this.transform.position.x = value;\n  }\n  /**\n   * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n   * An alias to position.y\n   */\n  get y() {\n    return this.position.y;\n  }\n  set y(value) {\n    this.transform.position.y = value;\n  }\n  /**\n   * Current transform of the object based on world (parent) factors.\n   * @readonly\n   */\n  get worldTransform() {\n    return this.transform.worldTransform;\n  }\n  /**\n   * Current transform of the object based on local factors: position, scale, other stuff.\n   * @readonly\n   */\n  get localTransform() {\n    return this.transform.localTransform;\n  }\n  /**\n   * The coordinate of the object relative to the local coordinates of the parent.\n   * @since 4.0.0\n   */\n  get position() {\n    return this.transform.position;\n  }\n  set position(value) {\n    this.transform.position.copyFrom(value);\n  }\n  /**\n   * The scale factors of this object along the local coordinate axes.\n   *\n   * The default scale is (1, 1).\n   * @since 4.0.0\n   */\n  get scale() {\n    return this.transform.scale;\n  }\n  set scale(value) {\n    this.transform.scale.copyFrom(value);\n  }\n  /**\n   * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n   * is the projection of `pivot` in the parent's local space.\n   *\n   * By default, the pivot is the origin (0, 0).\n   * @since 4.0.0\n   */\n  get pivot() {\n    return this.transform.pivot;\n  }\n  set pivot(value) {\n    this.transform.pivot.copyFrom(value);\n  }\n  /**\n   * The skew factor for the object in radians.\n   * @since 4.0.0\n   */\n  get skew() {\n    return this.transform.skew;\n  }\n  set skew(value) {\n    this.transform.skew.copyFrom(value);\n  }\n  /**\n   * The rotation of the object in radians.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get rotation() {\n    return this.transform.rotation;\n  }\n  set rotation(value) {\n    this.transform.rotation = value;\n  }\n  /**\n   * The angle of the object in degrees.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get angle() {\n    return this.transform.rotation * core.RAD_TO_DEG;\n  }\n  set angle(value) {\n    this.transform.rotation = value * core.DEG_TO_RAD;\n  }\n  /**\n   * The zIndex of the displayObject.\n   *\n   * If a container has the sortableChildren property set to true, children will be automatically\n   * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n   * and thus rendered on top of other display objects within the same container.\n   * @see PIXI.Container#sortableChildren\n   */\n  get zIndex() {\n    return this._zIndex;\n  }\n  set zIndex(value) {\n    this._zIndex !== value && (this._zIndex = value, this.parent && (this.parent.sortDirty = !0));\n  }\n  /**\n   * Indicates if the object is globally visible.\n   * @readonly\n   */\n  get worldVisible() {\n    let item = this;\n    do {\n      if (!item.visible)\n        return !1;\n      item = item.parent;\n    } while (item);\n    return !0;\n  }\n  /**\n   * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n   * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n   * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n   * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n   * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n   * To remove a mask, set this property to `null`.\n   *\n   * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n   * @example\n   * import { Graphics, Sprite } from 'pixi.js';\n   *\n   * const graphics = new Graphics();\n   * graphics.beginFill(0xFF3300);\n   * graphics.drawRect(50, 250, 100, 100);\n   * graphics.endFill();\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.mask = graphics;\n   * @todo At the moment, CanvasRenderer doesn't support Sprite as mask.\n   */\n  get mask() {\n    return this._mask;\n  }\n  set mask(value) {\n    if (this._mask !== value) {\n      if (this._mask) {\n        const maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;\n        maskObject && (maskObject._maskRefCount--, maskObject._maskRefCount === 0 && (maskObject.renderable = !0, maskObject.isMask = !1));\n      }\n      if (this._mask = value, this._mask) {\n        const maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;\n        maskObject && (maskObject._maskRefCount === 0 && (maskObject.renderable = !1, maskObject.isMask = !0), maskObject._maskRefCount++);\n      }\n    }\n  }\n}\nclass TemporaryDisplayObject extends DisplayObject {\n  constructor() {\n    super(...arguments), this.sortDirty = null;\n  }\n}\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\nexports.DisplayObject = DisplayObject;\nexports.TemporaryDisplayObject = TemporaryDisplayObject;\n//# sourceMappingURL=DisplayObject.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","Bounds","DisplayObject","utils","EventEmitter","constructor","tempDisplayObjectParent","transform","Transform","alpha","renderable","visible","cullable","parent","cullArea","worldAlpha","_zIndex","_lastSortedIndex","_enabledFilters","filters","filterArea","_bounds","_localBounds","_boundsID","_mask","_localBoundsRect","_boundsRect","_maskRefCount","isMask","isSprite","_destroyed","mixin","source","keys","Object","i","length","propertyName","defineProperty","prototype","getOwnPropertyDescriptor","_recursivePostUpdateTransform","updateTransform","_tempDisplayObjectParent","getBounds","skipUpdate","rect","updateID","calculateBounds","Rectangle","getRectangle","getLocalBounds","transformRef","parentRef","worldBounds","worldBoundsID","bounds","toGlobal","position","point","displayObjectUpdateTransform","worldTransform","apply","toLocal","from","applyInverse","setParent","container","addChild","Error","removeFromParent","removeChild","setTransform","x","y","scaleX","scaleY","rotation","skewX","skewY","pivotX","pivotY","scale","skew","pivot","destroy","_options","hitArea","mask","eventMode","interactiveChildren","emit","removeAllListeners","TemporaryDisplayObject","enableTempParent","myParent","disableTempParent","cacheParent","value","localTransform","copyFrom","RAD_TO_DEG","DEG_TO_RAD","sortDirty","item","maskObject","isMaskData","arguments"]
}
