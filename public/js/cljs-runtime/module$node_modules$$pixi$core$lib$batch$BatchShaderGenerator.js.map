{
"version":3,
"file":"module$node_modules$$pixi$core$lib$batch$BatchShaderGenerator.js",
"lineCount":39,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/batch/BatchShaderGenerator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$batch$BatchShaderGenerator\"] = function(global,require,module,exports) {\n\"use strict\";\nvar math = require(\"@pixi/math\"), Program = require(\"../shader/Program.js\"), Shader = require(\"../shader/Shader.js\"), UniformGroup = require(\"../shader/UniformGroup.js\");\nclass BatchShaderGenerator {\n  /**\n   * @param vertexSrc - Vertex shader\n   * @param fragTemplate - Fragment shader template\n   */\n  constructor(vertexSrc, fragTemplate) {\n    if (this.vertexSrc = vertexSrc, this.fragTemplate = fragTemplate, this.programCache = {}, this.defaultGroupCache = {}, !fragTemplate.includes(\"%count%\"))\n      throw new Error('Fragment template must contain \"%count%\".');\n    if (!fragTemplate.includes(\"%forloop%\"))\n      throw new Error('Fragment template must contain \"%forloop%\".');\n  }\n  generateShader(maxTextures) {\n    if (!this.programCache[maxTextures]) {\n      const sampleValues = new Int32Array(maxTextures);\n      for (let i = 0; i < maxTextures; i++)\n        sampleValues[i] = i;\n      this.defaultGroupCache[maxTextures] = UniformGroup.UniformGroup.from({ uSamplers: sampleValues }, !0);\n      let fragmentSrc = this.fragTemplate;\n      fragmentSrc = fragmentSrc.replace(/%count%/gi, `${maxTextures}`), fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures)), this.programCache[maxTextures] = new Program.Program(this.vertexSrc, fragmentSrc);\n    }\n    const uniforms = {\n      tint: new Float32Array([1, 1, 1, 1]),\n      translationMatrix: new math.Matrix(),\n      default: this.defaultGroupCache[maxTextures]\n    };\n    return new Shader.Shader(this.programCache[maxTextures], uniforms);\n  }\n  generateSampleSrc(maxTextures) {\n    let src = \"\";\n    src += `\n`, src += `\n`;\n    for (let i = 0; i < maxTextures; i++)\n      i > 0 && (src += `\nelse `), i < maxTextures - 1 && (src += `if(vTextureId < ${i}.5)`), src += `\n{`, src += `\n\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`, src += `\n}`;\n    return src += `\n`, src += `\n`, src;\n  }\n}\nexports.BatchShaderGenerator = BatchShaderGenerator;\n//# sourceMappingURL=BatchShaderGenerator.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","math","Program","Shader","UniformGroup","BatchShaderGenerator","constructor","vertexSrc","fragTemplate","programCache","defaultGroupCache","includes","Error","generateShader","maxTextures","sampleValues","Int32Array","i","from","uSamplers","fragmentSrc","replace","generateSampleSrc","uniforms","tint","Float32Array","translationMatrix","Matrix","default","src"]
}
