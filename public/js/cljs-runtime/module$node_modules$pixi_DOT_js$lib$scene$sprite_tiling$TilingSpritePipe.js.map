{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$TilingSpritePipe.js",
"lineCount":89,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/sprite-tiling/TilingSpritePipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$TilingSpritePipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../extensions/Extensions.js');\nvar getAdjustedBlendModeBlend = require('../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.js');\nvar State = require('../../rendering/renderers/shared/state/State.js');\nvar types = require('../../rendering/renderers/types.js');\nvar colorToUniform = require('../graphics/gpu/colorToUniform.js');\nvar BatchableMesh = require('../mesh/shared/BatchableMesh.js');\nvar MeshGeometry = require('../mesh/shared/MeshGeometry.js');\nvar TilingSpriteShader = require('./shader/TilingSpriteShader.js');\nvar QuadGeometry = require('./utils/QuadGeometry.js');\nvar setPositions = require('./utils/setPositions.js');\nvar setUvs = require('./utils/setUvs.js');\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry.QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_tilingSpriteDataHash\");\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh.BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader.TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    colorToUniform.color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend.getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry.MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs.setUvs(tilingSprite, geometry.uvs);\n    setPositions.setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === types.RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexports.TilingSpritePipe = TilingSpritePipe;\n//# sourceMappingURL=TilingSpritePipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","getAdjustedBlendModeBlend","State","types","colorToUniform","BatchableMesh","MeshGeometry","TilingSpriteShader","QuadGeometry","setPositions","setUvs","sharedQuad","TilingSpritePipe","constructor","renderer","_state","default2d","_tilingSpriteDataHash","Object","create","_destroyRenderableBound","destroyRenderable","bind","_renderer","renderableGC","addManagedHash","validateRenderable","renderable","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","batchableMesh","_batcher","checkAndUpdateTexture","texture","addRenderable","tilingSprite","instructionSet","batcher","renderPipes","batch","geometry","didViewUpdate","_updateBatchableMesh","transform","groupTransform","setTexture","_texture","roundPixels","_roundPixels","addToBatch","break","shader","updateRenderable","add","execute","uid","groups","globalUniforms","bindGroup","localUniforms","resources","uniforms","uTransformMatrix","uRound","color32BitToUniform","groupColorAlpha","uColor","blendMode","groupBlendMode","_source","encoder","draw","state","updateElement","updateUniforms","width","height","_tileTransform","matrix","anchor","x","y","destroy","off","_initTilingSpriteData","indices","positions","slice","uvs","on","renderableData","style","source","addressMode","update","i","_nonPowOf2wrapping","type","RendererType","WEBGL","context","supports","nonPowOf2wrapping","textureMatrix","isSimple","isPowerOfTwo","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"]
}
