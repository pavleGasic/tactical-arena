shadow$provide.module$node_modules$$pixi$react$lib$helpers$createInstance = function(global, require, module, exports) {
  var EventPropNames = require("module$node_modules$$pixi$react$lib$constants$EventPropNames"), PixiReactIgnoredProps = require("module$node_modules$$pixi$react$lib$constants$PixiReactIgnoredProps"), applyProps = require("module$node_modules$$pixi$react$lib$helpers$applyProps"), catalogue = require("module$node_modules$$pixi$react$lib$helpers$catalogue"), convertStringToPascalCase = require("module$node_modules$$pixi$react$lib$helpers$convertStringToPascalCase"), gentleCloneProps = require("module$node_modules$$pixi$react$lib$helpers$gentleCloneProps"), 
  log = require("module$node_modules$$pixi$react$lib$helpers$log"), parseComponentType = require("module$node_modules$$pixi$react$lib$helpers$parseComponentType"), prepareInstance = require("module$node_modules$$pixi$react$lib$helpers$prepareInstance");
  "use strict";
  exports.createInstance = function(type, props, root) {
    log.log("info", "lifecycle::createInstance");
    type = parseComponentType.parseComponentType(type);
    var name = convertStringToPascalCase.convertStringToPascalCase(type);
    if (!(name in catalogue.catalogue)) {
      throw Error(`${name} is not part of the PIXI namespace! Did you forget to extend?`);
    }
    name = catalogue.catalogue[name];
    const pixiProps = gentleCloneProps.gentleCloneProps(props, PixiReactIgnoredProps.PixiReactIgnoredProps);
    Object.entries(props).forEach(([key, value]) => {
      key in EventPropNames.ReactToPixiEventPropNames && (pixiProps[EventPropNames.ReactToPixiEventPropNames[key]] = value);
    });
    root = prepareInstance.prepareInstance(new name(pixiProps), {root, type});
    applyProps.applyProps(root, props);
    return root;
  };
};

//# sourceMappingURL=module$node_modules$$pixi$react$lib$helpers$createInstance.js.map
