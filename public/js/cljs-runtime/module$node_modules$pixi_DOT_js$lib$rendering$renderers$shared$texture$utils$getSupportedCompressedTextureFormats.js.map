{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getSupportedCompressedTextureFormats.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,CAAA,iHAAA,GAAsI,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG9K,MAAIC,mBAAmBH,OAAA,CAAQ,oEAAR,CAAvB,EACII,oBAAoBJ,OAAA,CAAQ,qEAAR,CADxB,EAEIK,yCAAyCL,OAAA,CAAQ,iHAAR,CAF7C,EAGIM,0CAA0CN,OAAA,CAAQ,mHAAR,CAH9C;AAKA,cAAA;AACA,MAAIO,iCAAJ;AAqBAL,SAAQM,CAAAA,oCAAR,GApBAA,cAAmD,EAAG;AACpD,WAA0C,IAAK,EAA/C,KAAID,iCAAJ,GACSA,iCADT,GAEAA,iCAFA,GAEoC,MAAO,MAAM,EAAN,IAAY;AACrD,UAAME,qBAAqB,MAAML,iBAAkBA,CAAAA,iBAAlB,EAAjC;AACA,YAAMM,oBAAoBP,gBAAiBA,CAAAA,gBAAjB,EAA1B;AACA,UAAIM,kBAAJ,IAA0BC,iBAA1B,CAA6C;AACrCC,0BAAAA,GAAoB,MAAML,uCAAwCA,CAAAA,uCAAxC,EAA1BK;AACN,cAAMC,mBAAmBP,sCAAuCA,CAAAA,sCAAvC,EAAzB;AACA,eAAOM,kBAAkBE,CAAAA,MAAlB,CAA0BC,MAAD,IAAYF,gBAAiBG,CAAAA,QAAjB,CAA0BD,MAA1B,CAArC,CAAP;AAH2C;AAItC,aAAIL,kBAAJ,GACE,MAAMH,uCAAwCA,CAAAA,uCAAxC,EADR,GAEII,iBAAJ,GACEL,sCAAuCA,CAAAA,sCAAvC,EADF,GAGA,EALA;AAP8C,KAAZ,CAAD,EAF1C;AADoD,GAoBtD;AA9B8K,CAA9K;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/utils/getSupportedCompressedTextureFormats.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getSupportedCompressedTextureFormats\"] = function(global,require,module,exports) {\n'use strict';\n\nvar isWebGLSupported = require('../../../../../utils/browser/isWebGLSupported.js');\nvar isWebGPUSupported = require('../../../../../utils/browser/isWebGPUSupported.js');\nvar getSupportedGlCompressedTextureFormats = require('../../../gl/texture/utils/getSupportedGlCompressedTextureFormats.js');\nvar getSupportedGPUCompressedTextureFormats = require('../../../gpu/texture/utils/getSupportedGPUCompressedTextureFormats.js');\n\n\"use strict\";\nlet supportedCompressedTextureFormats;\nasync function getSupportedCompressedTextureFormats() {\n  if (supportedCompressedTextureFormats !== void 0)\n    return supportedCompressedTextureFormats;\n  supportedCompressedTextureFormats = await (async () => {\n    const _isWebGPUSupported = await isWebGPUSupported.isWebGPUSupported();\n    const _isWebGLSupported = isWebGLSupported.isWebGLSupported();\n    if (_isWebGPUSupported && _isWebGLSupported) {\n      const gpuTextureFormats = await getSupportedGPUCompressedTextureFormats.getSupportedGPUCompressedTextureFormats();\n      const glTextureFormats = getSupportedGlCompressedTextureFormats.getSupportedGlCompressedTextureFormats();\n      return gpuTextureFormats.filter((format) => glTextureFormats.includes(format));\n    } else if (_isWebGPUSupported) {\n      return await getSupportedGPUCompressedTextureFormats.getSupportedGPUCompressedTextureFormats();\n    } else if (_isWebGLSupported) {\n      return getSupportedGlCompressedTextureFormats.getSupportedGlCompressedTextureFormats();\n    }\n    return [];\n  })();\n  return supportedCompressedTextureFormats;\n}\n\nexports.getSupportedCompressedTextureFormats = getSupportedCompressedTextureFormats;\n//# sourceMappingURL=getSupportedCompressedTextureFormats.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","isWebGLSupported","isWebGPUSupported","getSupportedGlCompressedTextureFormats","getSupportedGPUCompressedTextureFormats","supportedCompressedTextureFormats","getSupportedCompressedTextureFormats","_isWebGPUSupported","_isWebGLSupported","gpuTextureFormats","glTextureFormats","filter","format","includes"]
}
