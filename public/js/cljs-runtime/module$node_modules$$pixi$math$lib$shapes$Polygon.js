shadow$provide.module$node_modules$$pixi$math$lib$shapes$Polygon = function(global, require, module, exports) {
  var _const = require("module$node_modules$$pixi$math$lib$const");
  class Polygon {
    constructor(...points) {
      points = Array.isArray(points[0]) ? points[0] : points;
      if ("number" != typeof points[0]) {
        const p = [];
        for (let i = 0, il = points.length; i < il; i++) {
          p.push(points[i].x, points[i].y);
        }
        points = p;
      }
      this.points = points;
      this.type = _const.SHAPES.POLY;
      this.closeStroke = !0;
    }
    clone() {
      var points = this.points.slice();
      points = new Polygon(points);
      return points.closeStroke = this.closeStroke, points;
    }
    contains(x, y) {
      let inside = !1;
      const length = this.points.length / 2;
      for (let i = 0, j = length - 1; i < length; j = i++) {
        const xi = this.points[2 * i], yi = this.points[2 * i + 1], xj = this.points[2 * j], yj = this.points[2 * j + 1];
        yi > y != yj > y && x < (y - yi) / (yj - yi) * (xj - xi) + xi && (inside = !inside);
      }
      return inside;
    }
  }
  Polygon.prototype.toString = function() {
    return `[@pixi/math:PolygoncloseStroke=${this.closeStroke}points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, "")}]`;
  };
  exports.Polygon = Polygon;
};

//# sourceMappingURL=module$node_modules$$pixi$math$lib$shapes$Polygon.js.map
