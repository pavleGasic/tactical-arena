shadow$provide.module$node_modules$$pixi$compressed_textures$lib$resources$BlobResource = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index");
  class BlobResource extends core.BufferResource {
    constructor(source, options = {width:1, height:1, autoLoad:!0}) {
      let origin, data;
      "string" == typeof source ? (origin = source, data = new Uint8Array()) : (origin = null, data = source);
      super(data, options);
      this.origin = origin;
      this.buffer = data ? new core.ViewableBuffer(data) : null;
      this._load = null;
      this.loaded = !1;
      null !== this.origin && !1 !== options.autoLoad && this.load();
      null === this.origin && this.buffer && (this._load = Promise.resolve(this), this.loaded = !0, this.onBlobLoaded(this.buffer.rawBinaryData));
    }
    onBlobLoaded(_data) {
    }
    load() {
      return this._load ? this._load : (this._load = fetch(this.origin).then(response => response.blob()).then(blob => blob.arrayBuffer()).then(arrayBuffer => (this.data = new Uint32Array(arrayBuffer), this.buffer = new core.ViewableBuffer(arrayBuffer), this.loaded = !0, this.onBlobLoaded(arrayBuffer), this.update(), this)), this._load);
    }
  }
  exports.BlobResource = BlobResource;
};

//# sourceMappingURL=module$node_modules$$pixi$compressed_textures$lib$resources$BlobResource.js.map
