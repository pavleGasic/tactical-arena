{
"version":3,
"file":"module$node_modules$$pixi$spritesheet$lib$Spritesheet.js",
"lineCount":86,
"mappings":"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",
"sources":["node_modules/@pixi/spritesheet/lib/Spritesheet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$spritesheet$lib$Spritesheet\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nconst _Spritesheet = class _Spritesheet2 {\n  /** @ignore */\n  constructor(optionsOrTexture, arg1, arg2) {\n    this.linkedSheets = [], (optionsOrTexture instanceof core.BaseTexture || optionsOrTexture instanceof core.Texture) && (optionsOrTexture = { texture: optionsOrTexture, data: arg1, resolutionFilename: arg2 });\n    const { texture, data, resolutionFilename = null, cachePrefix = \"\" } = optionsOrTexture;\n    this.cachePrefix = cachePrefix, this._texture = texture instanceof core.Texture ? texture : null, this.baseTexture = texture instanceof core.BaseTexture ? texture : this._texture.baseTexture, this.textures = {}, this.animations = {}, this.data = data;\n    const resource = this.baseTexture.resource;\n    this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null)), this._frames = this.data.frames, this._frameKeys = Object.keys(this._frames), this._batchIndex = 0, this._callback = null;\n  }\n  /**\n   * Generate the resolution from the filename or fallback\n   * to the meta.scale field of the JSON data.\n   * @param resolutionFilename - The filename to use for resolving\n   *        the default resolution.\n   * @returns Resolution to use for spritesheet.\n   */\n  _updateResolution(resolutionFilename = null) {\n    const { scale } = this.data.meta;\n    let resolution = core.utils.getResolutionOfUrl(resolutionFilename, null);\n    return resolution === null && (resolution = typeof scale == \"number\" ? scale : parseFloat(scale ?? \"1\")), resolution !== 1 && this.baseTexture.setResolution(resolution), resolution;\n  }\n  /**\n   * Parser spritesheet from loaded data. This is done asynchronously\n   * to prevent creating too many Texture within a single process.\n   * @method PIXI.Spritesheet#parse\n   */\n  parse() {\n    return new Promise((resolve) => {\n      this._callback = resolve, this._batchIndex = 0, this._frameKeys.length <= _Spritesheet2.BATCH_SIZE ? (this._processFrames(0), this._processAnimations(), this._parseComplete()) : this._nextBatch();\n    });\n  }\n  /**\n   * Process a batch of frames\n   * @param initialFrameIndex - The index of frame to start.\n   */\n  _processFrames(initialFrameIndex) {\n    let frameIndex = initialFrameIndex;\n    const maxFrames = _Spritesheet2.BATCH_SIZE;\n    for (; frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length; ) {\n      const i = this._frameKeys[frameIndex], data = this._frames[i], rect = data.frame;\n      if (rect) {\n        let frame = null, trim = null;\n        const sourceSize = data.trimmed !== !1 && data.sourceSize ? data.sourceSize : data.frame, orig = new core.Rectangle(\n          0,\n          0,\n          Math.floor(sourceSize.w) / this.resolution,\n          Math.floor(sourceSize.h) / this.resolution\n        );\n        data.rotated ? frame = new core.Rectangle(\n          Math.floor(rect.x) / this.resolution,\n          Math.floor(rect.y) / this.resolution,\n          Math.floor(rect.h) / this.resolution,\n          Math.floor(rect.w) / this.resolution\n        ) : frame = new core.Rectangle(\n          Math.floor(rect.x) / this.resolution,\n          Math.floor(rect.y) / this.resolution,\n          Math.floor(rect.w) / this.resolution,\n          Math.floor(rect.h) / this.resolution\n        ), data.trimmed !== !1 && data.spriteSourceSize && (trim = new core.Rectangle(\n          Math.floor(data.spriteSourceSize.x) / this.resolution,\n          Math.floor(data.spriteSourceSize.y) / this.resolution,\n          Math.floor(rect.w) / this.resolution,\n          Math.floor(rect.h) / this.resolution\n        )), this.textures[i] = new core.Texture(\n          this.baseTexture,\n          frame,\n          orig,\n          trim,\n          data.rotated ? 2 : 0,\n          data.anchor,\n          data.borders\n        ), core.Texture.addToCache(this.textures[i], this.cachePrefix + i.toString());\n      }\n      frameIndex++;\n    }\n  }\n  /** Parse animations config. */\n  _processAnimations() {\n    const animations = this.data.animations || {};\n    for (const animName in animations) {\n      this.animations[animName] = [];\n      for (let i = 0; i < animations[animName].length; i++) {\n        const frameName = animations[animName][i];\n        this.animations[animName].push(this.textures[frameName]);\n      }\n    }\n  }\n  /** The parse has completed. */\n  _parseComplete() {\n    const callback = this._callback;\n    this._callback = null, this._batchIndex = 0, callback.call(this, this.textures);\n  }\n  /** Begin the next batch of textures. */\n  _nextBatch() {\n    this._processFrames(this._batchIndex * _Spritesheet2.BATCH_SIZE), this._batchIndex++, setTimeout(() => {\n      this._batchIndex * _Spritesheet2.BATCH_SIZE < this._frameKeys.length ? this._nextBatch() : (this._processAnimations(), this._parseComplete());\n    }, 0);\n  }\n  /**\n   * Destroy Spritesheet and don't use after this.\n   * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n   */\n  destroy(destroyBase = !1) {\n    for (const i in this.textures)\n      this.textures[i].destroy();\n    this._frames = null, this._frameKeys = null, this.data = null, this.textures = null, destroyBase && (this._texture?.destroy(), this.baseTexture.destroy()), this._texture = null, this.baseTexture = null, this.linkedSheets = [];\n  }\n};\n_Spritesheet.BATCH_SIZE = 1e3;\nlet Spritesheet = _Spritesheet;\nexports.Spritesheet = Spritesheet;\n//# sourceMappingURL=Spritesheet.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","constructor","optionsOrTexture","arg1","arg2","linkedSheets","BaseTexture","Texture","texture","data","resolutionFilename","cachePrefix","_texture","baseTexture","textures","animations","resource","resolution","_updateResolution","url","_frames","frames","_frameKeys","Object","keys","_batchIndex","_callback","scale","meta","utils","getResolutionOfUrl","parseFloat","setResolution","parse","Promise","resolve","length","_Spritesheet2","BATCH_SIZE","_processFrames","_processAnimations","_parseComplete","_nextBatch","initialFrameIndex","frameIndex","maxFrames","i","rect","frame","trim","sourceSize","trimmed","orig","Rectangle","Math","floor","w","h","rotated","x","y","spriteSourceSize","anchor","borders","addToCache","toString","animName","push","frameName","callback","call","setTimeout","destroy","destroyBase","_Spritesheet","Spritesheet"]
}
