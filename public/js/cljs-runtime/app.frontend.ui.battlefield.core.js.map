{"version":3,"sources":["app/frontend/ui/battlefield/core.cljs"],"mappings":"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","names":["app.frontend.ui.battlefield.core/render-tilemap","app","map__27983","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","layers","app.frontend.ui.battlefield.state/map-data","map-dimensions","app.frontend.ui.battlefield.map/calc-map-dimensions","screen-width","screen-height","initial-x","initial-y","map-container","js/module$node_modules$pixi_DOT_js$lib$index.Container","js/module$node_modules$pixi_DOT_js$lib$index.Assets","app.frontend.ui.battlefield.config/spritesheet-path","_","app.frontend.ui.battlefield.config/placeholder-path","texture","module$node_modules$pixi_DOT_js$lib$index/Texture","placeholder-texture","module$node_modules$pixi_DOT_js$lib$index/SCALE_MODES","app.frontend.ui.battlefield.map/setup-drag-handlers!","app.frontend.ui.battlefield.map/populate-map-container!","app.frontend.ui.battlefield.characters/render-characters!","cljs.core/add-watch","app.frontend.ui.battlefield.state/characters","new-state","seq__27984","cljs.core/seq","chunk__27985","count__27986","i__27987","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","c","app.frontend.ui.battlefield.overlay/display-move-overlay","app.frontend.ui.battlefield.core/display-battlefield","container","reagent.core.atom","canvas-div","on-resize","reagent.core.create_class","app.frontend.ui.battlefield.map/load-map!","resize-handler","js/window","cljs.core/reset!","and__5000__auto__","js/module$node_modules$pixi_DOT_js$lib$index.Application","cljs.core/clj->js","p1__27988#"],"sourcesContent":["(ns app.frontend.ui.battlefield.core\n  (:require [reagent.core :as r]\n            [app.frontend.ui.battlefield.state :as state]\n            [app.frontend.ui.battlefield.config :as config]\n            [app.frontend.ui.battlefield.map :as tilemap]\n            [app.frontend.ui.battlefield.overlay :as overlay]\n            [app.frontend.ui.battlefield.characters :as characters]\n            [\"pixi.js\" :refer [Application Assets Texture Sprite Rectangle Container SCALE_MODES]]))\n\n\n(defn render-tilemap [app]\n  (let [{:keys [layers]} @state/map-data\n        map-dimensions (tilemap/calc-map-dimensions @state/map-data)\n        screen-width (.-width (.-renderer app))\n        screen-height (.-height (.-renderer app))\n        initial-x 0\n        initial-y (- screen-height (- (:map-height map-dimensions) 100))\n        map-container (Container.)]\n    (-> (.load Assets config/spritesheet-path)\n        (.then\n          (fn [_]\n            (-> (.load Assets config/placeholder-path)\n                (.then\n                  (fn [_]\n                    (let [texture (Texture.from config/spritesheet-path)\n                          placeholder-texture (Texture.from config/placeholder-path)]\n                      (set! (.-scaleMode (.-baseTexture texture)) SCALE_MODES.NEAREST)\n                      (set! (.-scaleMode (.-baseTexture placeholder-texture)) SCALE_MODES.NEAREST)\n\n                      (set! (.-x map-container) initial-x)\n                      (set! (.-y map-container) initial-y)\n\n                      (.addChild ^js (.-stage app) map-container)\n\n                      (tilemap/setup-drag-handlers! map-container screen-width screen-height (:map-width map-dimensions) (:map-height map-dimensions))\n                      (tilemap/populate-map-container! map-container layers texture)\n                      (characters/render-characters! map-container)\n                      (add-watch state/characters :movement-overlay\n                                 (fn [_ _ _ new-state]\n                                   (doseq [c new-state]\n                                     (when (:selected? c)\n                                       (overlay/display-move-overlay map-container c placeholder-texture))))))))))))))\n\n(defn display-battlefield []\n  (let [container (r/atom nil)\n        canvas-div (r/atom nil)\n        on-resize (r/atom nil)]\n    (r/create-class\n      {:component-did-mount\n       (fn []\n         (tilemap/load-map!)\n         (let [resize-handler\n               (fn []\n                 (when-let [app @container]\n                   (.resize (.-renderer app) (.-innerWidth js/window) (.-innerHeight js/window))))]\n           (reset! on-resize resize-handler)\n           (.addEventListener js/window \"resize\" resize-handler)))\n\n       :component-will-unmount\n       (fn []\n         (when @on-resize\n           (.removeEventListener js/window \"resize\" @on-resize)))\n\n       :component-did-update\n       (fn []\n         (when (and (nil? @container) @state/map-data @canvas-div)\n           (let [app (Application. (clj->js {:width (.-innerWidth js/window) :height (.-innerHeight js/window)}))]\n             (reset! container app)\n             (.appendChild @canvas-div (.-view app))\n             (render-tilemap app))))\n\n       :reagent-render\n       (fn []\n         [:div\n          [:div {:ref #(reset! canvas-div %)}]\n          (when-not @state/map-data\n            [:p \"Loading-map...\"])])})))\n\n"]}