{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$assets$loader$workers$WorkerManager.js",
"lineCount":68,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/assets/loader/workers/WorkerManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$assets$loader$workers$WorkerManager\"] = function(global,require,module,exports) {\n'use strict';\n\nvar checkImageBitmap_worker = require('../../../_virtual/checkImageBitmap.worker.js');\nvar loadImageBitmap_worker = require('../../../_virtual/loadImageBitmap.worker.js');\n\n\"use strict\";\nlet UUID = 0;\nlet MAX_WORKERS;\nclass WorkerManagerClass {\n  constructor() {\n    this._initialized = false;\n    this._createdWorkers = 0;\n    this._workerPool = [];\n    this._queue = [];\n    this._resolveHash = {};\n  }\n  isImageBitmapSupported() {\n    if (this._isImageBitmapSupported !== void 0)\n      return this._isImageBitmapSupported;\n    this._isImageBitmapSupported = new Promise((resolve) => {\n      const { worker } = new checkImageBitmap_worker.default();\n      worker.addEventListener(\"message\", (event) => {\n        worker.terminate();\n        checkImageBitmap_worker.default.revokeObjectURL();\n        resolve(event.data);\n      });\n    });\n    return this._isImageBitmapSupported;\n  }\n  loadImageBitmap(src, asset) {\n    return this._run(\"loadImageBitmap\", [src, asset?.data?.alphaMode]);\n  }\n  async _initWorkers() {\n    if (this._initialized)\n      return;\n    this._initialized = true;\n  }\n  _getWorker() {\n    if (MAX_WORKERS === void 0) {\n      MAX_WORKERS = navigator.hardwareConcurrency || 4;\n    }\n    let worker = this._workerPool.pop();\n    if (!worker && this._createdWorkers < MAX_WORKERS) {\n      this._createdWorkers++;\n      worker = new loadImageBitmap_worker.default().worker;\n      worker.addEventListener(\"message\", (event) => {\n        this._complete(event.data);\n        this._returnWorker(event.target);\n        this._next();\n      });\n    }\n    return worker;\n  }\n  _returnWorker(worker) {\n    this._workerPool.push(worker);\n  }\n  _complete(data) {\n    if (data.error !== void 0) {\n      this._resolveHash[data.uuid].reject(data.error);\n    } else {\n      this._resolveHash[data.uuid].resolve(data.data);\n    }\n    this._resolveHash[data.uuid] = null;\n  }\n  async _run(id, args) {\n    await this._initWorkers();\n    const promise = new Promise((resolve, reject) => {\n      this._queue.push({ id, arguments: args, resolve, reject });\n    });\n    this._next();\n    return promise;\n  }\n  _next() {\n    if (!this._queue.length)\n      return;\n    const worker = this._getWorker();\n    if (!worker) {\n      return;\n    }\n    const toDo = this._queue.pop();\n    const id = toDo.id;\n    this._resolveHash[UUID] = { resolve: toDo.resolve, reject: toDo.reject };\n    worker.postMessage({\n      data: toDo.arguments,\n      uuid: UUID++,\n      id\n    });\n  }\n}\nconst WorkerManager = new WorkerManagerClass();\n\nexports.WorkerManager = WorkerManager;\n//# sourceMappingURL=WorkerManager.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","checkImageBitmap_worker","loadImageBitmap_worker","UUID","MAX_WORKERS","WorkerManagerClass","constructor","_initialized","_createdWorkers","_workerPool","_queue","_resolveHash","isImageBitmapSupported","_isImageBitmapSupported","Promise","resolve","worker","default","addEventListener","event","terminate","revokeObjectURL","data","loadImageBitmap","src","asset","_run","alphaMode","_initWorkers","_getWorker","navigator","hardwareConcurrency","pop","_complete","_returnWorker","target","_next","push","error","uuid","reject","id","args","promise","arguments","length","toDo","postMessage","WorkerManager"]
}
