{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$maths$shapes$Circle.js",
"lineCount":57,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,GAA4E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGpH,MAAIC,YAAYH,OAAA,CAAQ,4DAAR,CAAhB;AAEA,cAAA;AACA,OAAMI,OAAN;AAMEC,eAAW,CAACC,CAAA,GAAI,CAAL,EAAQC,CAAA,GAAI,CAAZ,EAAeC,MAAA,GAAS,CAAxB,CAA2B;AAKpC,UAAKC,CAAAA,IAAL,GAAY,QAAZ;AACA,UAAKH,CAAAA,CAAL,GAASA,CAAT;AACA,UAAKC,CAAAA,CAAL,GAASA,CAAT;AACA,UAAKC,CAAAA,MAAL,GAAcA,MAAd;AARoC;AActCE,SAAK,EAAG;AACN,aAAO,IAAIN,MAAJ,CAAW,IAAKE,CAAAA,CAAhB,EAAmB,IAAKC,CAAAA,CAAxB,EAA2B,IAAKC,CAAAA,MAAhC,CAAP;AADM;AASRG,YAAQ,CAACL,CAAD,EAAIC,CAAJ,CAAO;AACb,UAAmB,CAAnB,IAAI,IAAKC,CAAAA,MAAT;AACE,eAAO,CAAA,CAAP;AADF;AAGII,OAAAA,GAAK,IAAKN,CAAAA,CAAVM,GAAcN,CAAdM;AACAC,OAAAA,GAAK,IAAKN,CAAAA,CAAVM,GAAcN,CAAdM;AAGJ,aAFAD,CAEA,GAFMA,CAEN,GADAC,CACA,GADMA,CACN,IALW,IAAKL,CAAAA,MAKhB,GALyB,IAAKA,CAAAA,MAK9B;AARa;AAkBfM,kBAAc,CAACR,CAAD,EAAIC,CAAJ,EAAOQ,KAAP,EAAcC,SAAA,GAAY,GAA1B,CAA+B;AAC3C,UAAoB,CAApB,KAAI,IAAKR,CAAAA,MAAT;AACE,eAAO,CAAA,CAAP;AADF;AAEMI,OAAAA,GAAK,IAAKN,CAAAA,CAAVM,GAAcN,CAAdM;AACN,YAAMC,KAAK,IAAKN,CAAAA,CAAVM,GAAcN,CAApB;AACMC,OAAAA,GAAS,IAAKA,CAAAA,MAAdA;AACAS,eAAAA,IAAc,CAAdA,GAAkBD,SAAlBC,IAA+BF,KAA/BE;AACAC,OAAAA,GAAWC,IAAKC,CAAAA,IAAL,CAAUR,CAAV,GAAeA,CAAf,GAAoBC,EAApB,GAAyBA,EAAzB,CAAXK;AACN,aAAOA,CAAP,IAAmBV,CAAnB,GAA4BS,SAA5B,IAA0CC,CAA1C,GAAqDV,CAArD,IAA+DO,KAA/D,GAAuEE,SAAvE;AAR2C;AAe7CI,aAAS,CAACC,GAAD,CAAM;AACbA,SAAA,KAAQA,GAAR,GAAc,IAAInB,SAAUA,CAAAA,SAAd,EAAd;AACAmB,SAAIhB,CAAAA,CAAJ,GAAQ,IAAKA,CAAAA,CAAb,GAAiB,IAAKE,CAAAA,MAAtB;AACAc,SAAIf,CAAAA,CAAJ,GAAQ,IAAKA,CAAAA,CAAb,GAAiB,IAAKC,CAAAA,MAAtB;AACAc,SAAIP,CAAAA,KAAJ,GAA0B,CAA1B,GAAY,IAAKP,CAAAA,MAAjB;AACAc,SAAIC,CAAAA,MAAJ,GAA2B,CAA3B,GAAa,IAAKf,CAAAA,MAAlB;AACA,aAAOc,GAAP;AANa;AAafE,YAAQ,CAACC,MAAD,CAAS;AACf,UAAKnB,CAAAA,CAAL,GAASmB,MAAOnB,CAAAA,CAAhB;AACA,UAAKC,CAAAA,CAAL,GAASkB,MAAOlB,CAAAA,CAAhB;AACA,UAAKC,CAAAA,MAAL,GAAciB,MAAOjB,CAAAA,MAArB;AACA,aAAO,IAAP;AAJe;AAWjBkB,UAAM,CAACD,MAAD,CAAS;AACbA,YAAOD,CAAAA,QAAP,CAAgB,IAAhB,CAAA;AACA,aAAOC,MAAP;AAFa;AAIfE,YAAQ,EAAG;AACT,aAAQ,0BAAyB,IAAKrB,CAAAA,CAA9B,MAAqC,IAAKC,CAAAA,CAA1C,WAAsD,IAAKC,CAAAA,MAA3D,GAAR;AADS;AA1Fb;AA+FAN,SAAQE,CAAAA,MAAR,GAAiBA,MAAjB;AArGoH,CAApH;;",
"sources":["node_modules/pixi_DOT_js/lib/maths/shapes/Circle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$maths$shapes$Circle\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Rectangle = require('./Rectangle.js');\n\n\"use strict\";\nclass Circle {\n  /**\n   * @param x - The X coordinate of the center of this circle\n   * @param y - The Y coordinate of the center of this circle\n   * @param radius - The radius of the circle\n   */\n  constructor(x = 0, y = 0, radius = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'circle'\n     */\n    this.type = \"circle\";\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   * @returns A copy of the Circle\n   */\n  clone() {\n    return new Circle(this.x, this.y, this.radius);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  contains(x, y) {\n    if (this.radius <= 0)\n      return false;\n    const r2 = this.radius * this.radius;\n    let dx = this.x - x;\n    let dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param width - The width of the line to check\n   * @param alignment - The alignment of the stroke, 0.5 by default\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  strokeContains(x, y, width, alignment = 0.5) {\n    if (this.radius === 0)\n      return false;\n    const dx = this.x - x;\n    const dy = this.y - y;\n    const radius = this.radius;\n    const outerWidth = (1 - alignment) * width;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance <= radius + outerWidth && distance > radius - (width - outerWidth);\n  }\n  /**\n   * Returns the framing rectangle of the circle as a Rectangle object\n   * @param out\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle.Rectangle());\n    out.x = this.x - this.radius;\n    out.y = this.y - this.radius;\n    out.width = this.radius * 2;\n    out.height = this.radius * 2;\n    return out;\n  }\n  /**\n   * Copies another circle to this one.\n   * @param circle - The circle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(circle) {\n    this.x = circle.x;\n    this.y = circle.y;\n    this.radius = circle.radius;\n    return this;\n  }\n  /**\n   * Copies this circle to another one.\n   * @param circle - The circle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(circle) {\n    circle.copyFrom(this);\n    return circle;\n  }\n  toString() {\n    return `[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n  }\n}\n\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Rectangle","Circle","constructor","x","y","radius","type","clone","contains","dx","dy","strokeContains","width","alignment","outerWidth","distance","Math","sqrt","getBounds","out","height","copyFrom","circle","copyTo","toString"]
}
