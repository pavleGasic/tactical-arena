shadow$provide.module$node_modules$$pixi$assets$lib$loader$parsers$textures$loadTextures = function(global, require, module, exports) {
  async function loadImageBitmap(url) {
    const response = await core.settings.ADAPTER.fetch(url);
    if (!response.ok) {
      throw Error(`[loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);
    }
    url = await response.blob();
    return await createImageBitmap(url);
  }
  var core = require("module$node_modules$$pixi$core$lib$index"), checkDataUrl = require("module$node_modules$$pixi$assets$lib$utils$checkDataUrl"), checkExtension = require("module$node_modules$$pixi$assets$lib$utils$checkExtension");
  global = require("module$node_modules$$pixi$assets$lib$loader$parsers$LoaderParser");
  var WorkerManager = require("module$node_modules$$pixi$assets$lib$loader$parsers$WorkerManager"), createTexture = require("module$node_modules$$pixi$assets$lib$loader$parsers$textures$utils$createTexture");
  const validImageExtensions = [".jpeg", ".jpg", ".png", ".webp", ".avif"], validImageMIMEs = ["image/jpeg", "image/png", "image/webp", "image/avif"];
  require = {name:"loadTextures", extension:{type:core.ExtensionType.LoadParser, priority:global.LoaderParserPriority.High}, config:{preferWorkers:!0, preferCreateImageBitmap:!0, crossOrigin:"anonymous"}, test(url) {
    return checkDataUrl.checkDataUrl(url, validImageMIMEs) || checkExtension.checkExtension(url, validImageExtensions);
  }, async load(url, asset, loader) {
    var useImageBitmap = globalThis.createImageBitmap && this.config.preferCreateImageBitmap;
    let src;
    useImageBitmap ? this.config.preferWorkers && await WorkerManager.WorkerManager.isImageBitmapSupported() ? src = await WorkerManager.WorkerManager.loadImageBitmap(url) : src = await loadImageBitmap(url) : src = await new Promise((resolve, reject) => {
      const src2 = new Image();
      src2.crossOrigin = this.config.crossOrigin;
      src2.src = url;
      src2.complete ? resolve(src2) : (src2.onload = () => resolve(src2), src2.onerror = e => reject(e));
    });
    asset = {...asset.data};
    asset.resolution ?? (asset.resolution = core.utils.getResolutionOfUrl(url));
    useImageBitmap && void 0 === asset.resourceOptions?.ownsImageBitmap && (asset.resourceOptions = {...asset.resourceOptions}, asset.resourceOptions.ownsImageBitmap = !0);
    useImageBitmap = new core.BaseTexture(src, asset);
    return useImageBitmap.resource.src = url, createTexture.createTexture(useImageBitmap, loader, url);
  }, unload(texture) {
    texture.destroy(!0);
  }};
  core.extensions.add(require);
  exports.loadImageBitmap = loadImageBitmap;
  exports.loadTextures = require;
};

//# sourceMappingURL=module$node_modules$$pixi$assets$lib$loader$parsers$textures$loadTextures.js.map
