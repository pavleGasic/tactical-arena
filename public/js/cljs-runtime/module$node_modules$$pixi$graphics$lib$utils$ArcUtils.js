shadow$provide.module$node_modules$$pixi$graphics$lib$utils$ArcUtils = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index"), _const = require("module$node_modules$$pixi$graphics$lib$const");
  class ArcUtils {
    static curveTo(x1, y1, x2, y2, radius, points) {
      const a1 = points[points.length - 1] - y1, b1 = points[points.length - 2] - x1;
      y2 -= y1;
      x2 -= x1;
      var mm = Math.abs(a1 * x2 - b1 * y2);
      if (1e-8 > mm || 0 === radius) {
        return (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) && points.push(x1, y1), null;
      }
      var dd = a1 * a1 + b1 * b1, cc = y2 * y2 + x2 * x2, tt = a1 * y2 + b1 * x2;
      points = radius * Math.sqrt(dd) / mm;
      mm = radius * Math.sqrt(cc) / mm;
      dd = points * tt / dd;
      cc = mm * tt / cc;
      tt = points * x2 + mm * b1;
      const cy = points * y2 + mm * a1;
      return {cx:tt + x1, cy:cy + y1, radius, startAngle:Math.atan2(a1 * (mm + dd) - cy, b1 * (mm + dd) - tt), endAngle:Math.atan2(y2 * (points + cc) - cy, x2 * (points + cc) - tt), anticlockwise:b1 * y2 > x2 * a1};
    }
    static arc(_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {
      _startX = endAngle - startAngle;
      var n = _const.curves._segmentsCount(Math.abs(_startX) * radius, 40 * Math.ceil(Math.abs(_startX) / core.PI_2));
      _startX /= 2 * n;
      _startY = 2 * _startX;
      endAngle = Math.cos(_startX);
      _anticlockwise = Math.sin(_startX);
      --n;
      const remainder = n % 1 / n;
      for (let i = 0; i <= n; ++i) {
        var angle = _startX + startAngle + _startY * (i + remainder * i);
        const c = Math.cos(angle);
        angle = -Math.sin(angle);
        points.push((endAngle * c + _anticlockwise * angle) * radius + cx, (endAngle * -angle + _anticlockwise * c) * radius + cy);
      }
    }
  }
  exports.ArcUtils = ArcUtils;
};

//# sourceMappingURL=module$node_modules$$pixi$graphics$lib$utils$ArcUtils.js.map
