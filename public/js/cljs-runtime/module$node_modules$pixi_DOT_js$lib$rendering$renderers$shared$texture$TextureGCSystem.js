shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureGCSystem = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  "use strict";
  const node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureGCSystem$classdecl$var28 = class {
    constructor(renderer) {
      this._renderer = renderer;
      this.checkCount = this.count = 0;
    }
    init(options) {
      options = {...node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureGCSystem$classdecl$var28.defaultOptions, ...options};
      this.checkCountMax = options.textureGCCheckCountMax;
      this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;
      this.active = options.textureGCActive;
    }
    postrender() {
      this._renderer.renderingToScreen && (this.count++, this.active && (this.checkCount++, this.checkCount > this.checkCountMax && (this.checkCount = 0, this.run())));
    }
    run() {
      const managedTextures = this._renderer.texture.managedTextures;
      for (let i = 0; i < managedTextures.length; i++) {
        const texture = managedTextures[i];
        texture.autoGarbageCollect && texture.resource && -1 < texture._touched && this.count - texture._touched > this.maxIdle && (texture._touched = -1, texture.unload());
      }
    }
    destroy() {
      this._renderer = null;
    }
  };
  require = node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureGCSystem$classdecl$var28;
  require.extension = {type:[global.ExtensionType.WebGLSystem, global.ExtensionType.WebGPUSystem], name:"textureGC"};
  require.defaultOptions = {textureGCActive:!0, textureGCAMaxIdle:null, textureGCMaxIdle:3600, textureGCCheckCountMax:600};
  exports.TextureGCSystem = require;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureGCSystem.js.map
