shadow$provide.module$node_modules$$pixi$core$lib$index = function(global, require, module, exports) {
  require("module$node_modules$$pixi$core$lib$settings");
  var color = require("module$node_modules$$pixi$color$lib$index"), constants = require("module$node_modules$$pixi$constants$lib$index"), extensions = require("module$node_modules$$pixi$extensions$lib$index"), math = require("module$node_modules$$pixi$math$lib$index"), runner = require("module$node_modules$$pixi$runner$lib$index"), settings = require("module$node_modules$$pixi$settings$lib$index"), ticker = require("module$node_modules$$pixi$ticker$lib$index"), utils$1 = require("module$node_modules$$pixi$utils$lib$index");
  global = require("module$node_modules$$pixi$core$lib$autoDetectRenderer");
  module = require("module$node_modules$$pixi$core$lib$background$BackgroundSystem");
  var BatchDrawCall = require("module$node_modules$$pixi$core$lib$batch$BatchDrawCall"), BatchGeometry = require("module$node_modules$$pixi$core$lib$batch$BatchGeometry"), BatchRenderer = require("module$node_modules$$pixi$core$lib$batch$BatchRenderer"), BatchShaderGenerator = require("module$node_modules$$pixi$core$lib$batch$BatchShaderGenerator"), BatchSystem = require("module$node_modules$$pixi$core$lib$batch$BatchSystem"), BatchTextureArray = require("module$node_modules$$pixi$core$lib$batch$BatchTextureArray"), 
  ObjectRenderer = require("module$node_modules$$pixi$core$lib$batch$ObjectRenderer"), ContextSystem = require("module$node_modules$$pixi$core$lib$context$ContextSystem"), Filter = require("module$node_modules$$pixi$core$lib$filters$Filter"), FilterState = require("module$node_modules$$pixi$core$lib$filters$FilterState"), FilterSystem = require("module$node_modules$$pixi$core$lib$filters$FilterSystem");
  require("module$node_modules$$pixi$core$lib$filters$IFilterTarget");
  var SpriteMaskFilter = require("module$node_modules$$pixi$core$lib$filters$spriteMask$SpriteMaskFilter"), index = require("module$node_modules$$pixi$core$lib$fragments$index"), Framebuffer = require("module$node_modules$$pixi$core$lib$framebuffer$Framebuffer"), FramebufferSystem = require("module$node_modules$$pixi$core$lib$framebuffer$FramebufferSystem"), GLFramebuffer = require("module$node_modules$$pixi$core$lib$framebuffer$GLFramebuffer"), MultisampleSystem = require("module$node_modules$$pixi$core$lib$framebuffer$MultisampleSystem"), 
  Attribute = require("module$node_modules$$pixi$core$lib$geometry$Attribute"), Buffer = require("module$node_modules$$pixi$core$lib$geometry$Buffer"), BufferSystem = require("module$node_modules$$pixi$core$lib$geometry$BufferSystem"), Geometry = require("module$node_modules$$pixi$core$lib$geometry$Geometry"), GeometrySystem = require("module$node_modules$$pixi$core$lib$geometry$GeometrySystem"), ViewableBuffer = require("module$node_modules$$pixi$core$lib$geometry$ViewableBuffer");
  require("module$node_modules$$pixi$core$lib$IRenderer");
  var MaskData = require("module$node_modules$$pixi$core$lib$mask$MaskData"), MaskSystem = require("module$node_modules$$pixi$core$lib$mask$MaskSystem"), ScissorSystem = require("module$node_modules$$pixi$core$lib$mask$ScissorSystem"), StencilSystem = require("module$node_modules$$pixi$core$lib$mask$StencilSystem"), PluginSystem = require("module$node_modules$$pixi$core$lib$plugin$PluginSystem"), ProjectionSystem = require("module$node_modules$$pixi$core$lib$projection$ProjectionSystem"), ObjectRendererSystem = 
  require("module$node_modules$$pixi$core$lib$render$ObjectRendererSystem"), Renderer = require("module$node_modules$$pixi$core$lib$Renderer"), BaseRenderTexture = require("module$node_modules$$pixi$core$lib$renderTexture$BaseRenderTexture"), GenerateTextureSystem = require("module$node_modules$$pixi$core$lib$renderTexture$GenerateTextureSystem"), RenderTexture = require("module$node_modules$$pixi$core$lib$renderTexture$RenderTexture"), RenderTexturePool = require("module$node_modules$$pixi$core$lib$renderTexture$RenderTexturePool"), 
  RenderTextureSystem = require("module$node_modules$$pixi$core$lib$renderTexture$RenderTextureSystem"), GLProgram = require("module$node_modules$$pixi$core$lib$shader$GLProgram"), Program = require("module$node_modules$$pixi$core$lib$shader$Program"), Shader = require("module$node_modules$$pixi$core$lib$shader$Shader"), ShaderSystem = require("module$node_modules$$pixi$core$lib$shader$ShaderSystem"), UniformGroup = require("module$node_modules$$pixi$core$lib$shader$UniformGroup"), checkMaxIfStatementsInShader = 
  require("module$node_modules$$pixi$core$lib$shader$utils$checkMaxIfStatementsInShader"), generateProgram = require("module$node_modules$$pixi$core$lib$shader$utils$generateProgram"), generateUniformBufferSync = require("module$node_modules$$pixi$core$lib$shader$utils$generateUniformBufferSync"), getTestContext = require("module$node_modules$$pixi$core$lib$shader$utils$getTestContext"), uniformParsers = require("module$node_modules$$pixi$core$lib$shader$utils$uniformParsers"), unsafeEvalSupported = 
  require("module$node_modules$$pixi$core$lib$shader$utils$unsafeEvalSupported"), StartupSystem = require("module$node_modules$$pixi$core$lib$startup$StartupSystem"), State = require("module$node_modules$$pixi$core$lib$state$State"), StateSystem = require("module$node_modules$$pixi$core$lib$state$StateSystem");
  require("module$node_modules$$pixi$core$lib$system$ISystem");
  require("module$node_modules$$pixi$core$lib$systems");
  var BaseTexture = require("module$node_modules$$pixi$core$lib$textures$BaseTexture"), GLTexture = require("module$node_modules$$pixi$core$lib$textures$GLTexture");
  require("module$node_modules$$pixi$core$lib$textures$resources$index");
  var Texture = require("module$node_modules$$pixi$core$lib$textures$Texture"), TextureGCSystem = require("module$node_modules$$pixi$core$lib$textures$TextureGCSystem"), TextureMatrix = require("module$node_modules$$pixi$core$lib$textures$TextureMatrix"), TextureSystem = require("module$node_modules$$pixi$core$lib$textures$TextureSystem"), TextureUvs = require("module$node_modules$$pixi$core$lib$textures$TextureUvs"), TransformFeedback = require("module$node_modules$$pixi$core$lib$transformFeedback$TransformFeedback"), 
  TransformFeedbackSystem = require("module$node_modules$$pixi$core$lib$transformFeedback$TransformFeedbackSystem"), Quad = require("module$node_modules$$pixi$core$lib$utils$Quad"), QuadUv = require("module$node_modules$$pixi$core$lib$utils$QuadUv"), ViewSystem = require("module$node_modules$$pixi$core$lib$view$ViewSystem"), SystemManager = require("module$node_modules$$pixi$core$lib$system$SystemManager"), BaseImageResource = require("module$node_modules$$pixi$core$lib$textures$resources$BaseImageResource"), 
  Resource = require("module$node_modules$$pixi$core$lib$textures$resources$Resource"), AbstractMultiResource = require("module$node_modules$$pixi$core$lib$textures$resources$AbstractMultiResource"), ArrayResource = require("module$node_modules$$pixi$core$lib$textures$resources$ArrayResource"), autoDetectResource = require("module$node_modules$$pixi$core$lib$textures$resources$autoDetectResource"), BufferResource = require("module$node_modules$$pixi$core$lib$textures$resources$BufferResource"), CanvasResource = 
  require("module$node_modules$$pixi$core$lib$textures$resources$CanvasResource"), CubeResource = require("module$node_modules$$pixi$core$lib$textures$resources$CubeResource"), ImageBitmapResource = require("module$node_modules$$pixi$core$lib$textures$resources$ImageBitmapResource"), ImageResource = require("module$node_modules$$pixi$core$lib$textures$resources$ImageResource"), SVGResource = require("module$node_modules$$pixi$core$lib$textures$resources$SVGResource");
  require = require("module$node_modules$$pixi$core$lib$textures$resources$VideoResource");
  utils$1 = function(e) {
    var n = Object.create(null);
    return e && Object.keys(e).forEach(function(k) {
      if ("default" !== k) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {enumerable:!0, get:function() {
          return e[k];
        }});
      }
    }), n.default = e, n;
  }(utils$1);
  exports.utils = utils$1;
  exports.autoDetectRenderer = global.autoDetectRenderer;
  exports.BackgroundSystem = module.BackgroundSystem;
  exports.BatchDrawCall = BatchDrawCall.BatchDrawCall;
  exports.BatchGeometry = BatchGeometry.BatchGeometry;
  exports.BatchRenderer = BatchRenderer.BatchRenderer;
  exports.BatchShaderGenerator = BatchShaderGenerator.BatchShaderGenerator;
  exports.BatchSystem = BatchSystem.BatchSystem;
  exports.BatchTextureArray = BatchTextureArray.BatchTextureArray;
  exports.ObjectRenderer = ObjectRenderer.ObjectRenderer;
  exports.ContextSystem = ContextSystem.ContextSystem;
  exports.Filter = Filter.Filter;
  exports.FilterState = FilterState.FilterState;
  exports.FilterSystem = FilterSystem.FilterSystem;
  exports.SpriteMaskFilter = SpriteMaskFilter.SpriteMaskFilter;
  exports.defaultFilterVertex = index.defaultFilterVertex;
  exports.defaultVertex = index.defaultVertex;
  exports.Framebuffer = Framebuffer.Framebuffer;
  exports.FramebufferSystem = FramebufferSystem.FramebufferSystem;
  exports.GLFramebuffer = GLFramebuffer.GLFramebuffer;
  exports.MultisampleSystem = MultisampleSystem.MultisampleSystem;
  exports.Attribute = Attribute.Attribute;
  exports.Buffer = Buffer.Buffer;
  exports.BufferSystem = BufferSystem.BufferSystem;
  exports.Geometry = Geometry.Geometry;
  exports.GeometrySystem = GeometrySystem.GeometrySystem;
  exports.ViewableBuffer = ViewableBuffer.ViewableBuffer;
  exports.MaskData = MaskData.MaskData;
  exports.MaskSystem = MaskSystem.MaskSystem;
  exports.ScissorSystem = ScissorSystem.ScissorSystem;
  exports.StencilSystem = StencilSystem.StencilSystem;
  exports.PluginSystem = PluginSystem.PluginSystem;
  exports.ProjectionSystem = ProjectionSystem.ProjectionSystem;
  exports.ObjectRendererSystem = ObjectRendererSystem.ObjectRendererSystem;
  exports.Renderer = Renderer.Renderer;
  exports.BaseRenderTexture = BaseRenderTexture.BaseRenderTexture;
  exports.GenerateTextureSystem = GenerateTextureSystem.GenerateTextureSystem;
  exports.RenderTexture = RenderTexture.RenderTexture;
  exports.RenderTexturePool = RenderTexturePool.RenderTexturePool;
  exports.RenderTextureSystem = RenderTextureSystem.RenderTextureSystem;
  exports.GLProgram = GLProgram.GLProgram;
  exports.IGLUniformData = GLProgram.IGLUniformData;
  exports.Program = Program.Program;
  exports.Shader = Shader.Shader;
  exports.ShaderSystem = ShaderSystem.ShaderSystem;
  exports.UniformGroup = UniformGroup.UniformGroup;
  exports.checkMaxIfStatementsInShader = checkMaxIfStatementsInShader.checkMaxIfStatementsInShader;
  exports.generateProgram = generateProgram.generateProgram;
  exports.createUBOElements = generateUniformBufferSync.createUBOElements;
  exports.generateUniformBufferSync = generateUniformBufferSync.generateUniformBufferSync;
  exports.getUBOData = generateUniformBufferSync.getUBOData;
  exports.getTestContext = getTestContext.getTestContext;
  exports.uniformParsers = uniformParsers.uniformParsers;
  exports.unsafeEvalSupported = unsafeEvalSupported.unsafeEvalSupported;
  exports.StartupSystem = StartupSystem.StartupSystem;
  exports.State = State.State;
  exports.StateSystem = StateSystem.StateSystem;
  exports.BaseTexture = BaseTexture.BaseTexture;
  exports.GLTexture = GLTexture.GLTexture;
  exports.Texture = Texture.Texture;
  exports.TextureGCSystem = TextureGCSystem.TextureGCSystem;
  exports.TextureMatrix = TextureMatrix.TextureMatrix;
  exports.TextureSystem = TextureSystem.TextureSystem;
  exports.TextureUvs = TextureUvs.TextureUvs;
  exports.TransformFeedback = TransformFeedback.TransformFeedback;
  exports.TransformFeedbackSystem = TransformFeedbackSystem.TransformFeedbackSystem;
  exports.Quad = Quad.Quad;
  exports.QuadUv = QuadUv.QuadUv;
  exports.ViewSystem = ViewSystem.ViewSystem;
  exports.SystemManager = SystemManager.SystemManager;
  exports.BaseImageResource = BaseImageResource.BaseImageResource;
  exports.Resource = Resource.Resource;
  exports.AbstractMultiResource = AbstractMultiResource.AbstractMultiResource;
  exports.ArrayResource = ArrayResource.ArrayResource;
  exports.INSTALLED = autoDetectResource.INSTALLED;
  exports.autoDetectResource = autoDetectResource.autoDetectResource;
  exports.BufferResource = BufferResource.BufferResource;
  exports.CanvasResource = CanvasResource.CanvasResource;
  exports.CubeResource = CubeResource.CubeResource;
  exports.ImageBitmapResource = ImageBitmapResource.ImageBitmapResource;
  exports.ImageResource = ImageResource.ImageResource;
  exports.SVGResource = SVGResource.SVGResource;
  exports.VideoResource = require.VideoResource;
  exports.VERSION = "7.4.3";
  Object.keys(color).forEach(function(k) {
    "default" !== k && !Object.prototype.hasOwnProperty.call(exports, k) && Object.defineProperty(exports, k, {enumerable:!0, get:function() {
      return color[k];
    }});
  });
  Object.keys(constants).forEach(function(k) {
    "default" !== k && !Object.prototype.hasOwnProperty.call(exports, k) && Object.defineProperty(exports, k, {enumerable:!0, get:function() {
      return constants[k];
    }});
  });
  Object.keys(extensions).forEach(function(k) {
    "default" !== k && !Object.prototype.hasOwnProperty.call(exports, k) && Object.defineProperty(exports, k, {enumerable:!0, get:function() {
      return extensions[k];
    }});
  });
  Object.keys(math).forEach(function(k) {
    "default" !== k && !Object.prototype.hasOwnProperty.call(exports, k) && Object.defineProperty(exports, k, {enumerable:!0, get:function() {
      return math[k];
    }});
  });
  Object.keys(runner).forEach(function(k) {
    "default" !== k && !Object.prototype.hasOwnProperty.call(exports, k) && Object.defineProperty(exports, k, {enumerable:!0, get:function() {
      return runner[k];
    }});
  });
  Object.keys(settings).forEach(function(k) {
    "default" !== k && !Object.prototype.hasOwnProperty.call(exports, k) && Object.defineProperty(exports, k, {enumerable:!0, get:function() {
      return settings[k];
    }});
  });
  Object.keys(ticker).forEach(function(k) {
    "default" !== k && !Object.prototype.hasOwnProperty.call(exports, k) && Object.defineProperty(exports, k, {enumerable:!0, get:function() {
      return ticker[k];
    }});
  });
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$index.js.map
