{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$ImageBitmapResource.js",
"lineCount":54,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,GAA8F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAElIC,YAAYH,OAAA,CAAQ,+CAAR,CAFsH,EAE1FI,WAAWJ,OAAA,CAAQ,8CAAR,CAF+E;AAEpDK,QAAAA,GAAoBL,OAAA,CAAQ,yEAAR,CAApBK;AAClF,OAAMC,oBAAN,QAAkCD,OAAkBA,CAAAA,iBAApD;AAKEE,eAAW,CAACC,MAAD,EAASC,OAAT,CAAkB;AAC3BA,aAAA,GAAUA,OAAV,IAAqB,EAArB;AAD2B,UAEvBC,UAFuB,EAEXC,GAFW,EAENC,eAFM;AAGV,cAAjB,IAAA,MAAOJ,OAAP,IAA6BE,UAAA,GAAaJ,mBAAoBO,CAAAA,KAAjC,EAAwCF,GAAxC,GAA8CH,MAA9C,EAAsDI,eAAtD,GAAwE,CAAA,CAArG,KAA4GF,UAAA,GAAaF,MAAb,EAAqBG,GAArB,GAA2B,IAA3B,EAAiCC,eAAjC,GAAmD,CAAA,CAA/J,CAAA;AAAoK,WAAA,CAAMF,UAAN,CAAA;AAAmB,UAAKC,CAAAA,GAAL,GAAWA,GAAX;AAAgB,UAAKG,CAAAA,WAAL,GAAmBL,OAAQK,CAAAA,WAA3B,IAA0C,CAAA,CAA1C;AAA8C,UAAKC,CAAAA,SAAL,GAA6C,QAA5B,IAAA,MAAON,QAAQM,CAAAA,SAAf,GAAuCN,OAAQM,CAAAA,SAA/C,GAA2D,IAA5E;AAAkF,UAAKH,CAAAA,eAAL,GAAuBH,OAAQG,CAAAA,eAA/B,IAAkDA,eAAlD;AAAmE,UAAKI,CAAAA,KAAL,GAAa,IAAb;AAAwC,OAAA,CAArB,KAAAP,OAAQQ,CAAAA,QAAR,IAA2B,IAAKC,CAAAA,IAAL,EAA3B;AAHlY;AAK7BA,QAAI,EAAG;AACL,aAAO,IAAKF,CAAAA,KAAL,GAAa,IAAKA,CAAAA,KAAlB,IAA2B,IAAKA,CAAAA,KAAL,GAAa,IAAIG,OAAJ,CAAY,KAAM,CAACC,OAAD,EAAUC,MAAV,CAAN,IAA2B;AACpF,YAAiB,IAAjB,KAAI,IAAKV,CAAAA,GAAT;AACES,iBAAA,CAAQ,IAAR,CAAA;AADF;AAIA,aAAI;AACF,kBAAME,WAAW,MAAMlB,QAASA,CAAAA,QAASmB,CAAAA,OAAQC,CAAAA,KAA1B,CAAgC,IAAKb,CAAAA,GAArC,EAA0C,CAC/Dc,KAAM,IAAKX,CAAAA,WAAL,GAAmB,MAAnB,GAA4B,SAD6B,CAA1C,CAAvB;AAGA,gBAASY,CAAL,IAAKA,CAAAA,SAAT,CAAA;AAEA,kBAAMC,YAAY,MAAML,QAASM,CAAAA,IAAT,EAAxB;AACA,kBAASF,CAAL,IAAKA,CAAAA,SAAT,CAAA;AAEA,oBAAMG,cAAc,MAAMC,iBAAA,CAAkBH,SAAlB,EAA6B,CACrDI,iBAAqC,IAAnB,KAAA,IAAKhB,CAAAA,SAAL,IAA2B,IAAKA,CAAAA,SAAhC,KAA8CZ,SAAU6B,CAAAA,WAAYC,CAAAA,MAApE,GAA6E,aAA7E,GAA6F,MAD1D,CAA7B,CAA1B;AAGI,oBAAKP,CAAAA,SAAT,GACEG,WAAYK,CAAAA,KAAZ,EADF,IAIA,IAAK1B,CAAAA,MAAqC,GAA5BqB,WAA4B,EAAf,IAAKM,CAAAA,MAAL,EAAe,EAAAf,OAAA,CAAQ,IAAR,CAJ1C,CAAA;AALA;AAHA;AAJE,WAiBF,QAAOgB,CAAP,CAAU;AACN,gBAAKV,CAAAA,SAAT,KAEAL,MAAA,CAAOe,CAAP,CAAW,EAAA,IAAKC,CAAAA,OAAQC,CAAAA,IAAb,CAAkBF,CAAlB,CAFX;AADU;AArBZ;AADoF,OAAvC,CAAb,EA2B9B,IAAKpB,CAAAA,KA3BF,CAAP;AADK;AAqCPuB,UAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,CAAmC;AACvC,aAAO,IAAKlC,CAAAA,MAAL,YAAuBmC,WAAvB,IAA+D,QAAzB,IAAA,MAAO,KAAK5B,CAAAA,SAAZ,KAAsC0B,WAAY1B,CAAAA,SAAlD,GAA8D,IAAKA,CAAAA,SAAnE,GAA+E,KAAMwB,CAAAA,MAAN,CAAaC,QAAb,EAAuBC,WAAvB,EAAoCC,SAApC,CAArH,KAAwK,IAAKxB,CAAAA,IAAL,EAAA,EAAa,CAAA,CAArL,CAAP;AADuC;AAIzC0B,WAAO,EAAG;AACR,UAAKhC,CAAAA,eAAL,IAAwB,IAAKJ,CAAAA,MAA7B,YAA+CmC,WAA/C,IAA8D,IAAKnC,CAAAA,MAAO0B,CAAAA,KAAZ,EAA9D;AAAmF,WAAMU,CAAAA,OAAN,EAAA;AAAiB,UAAK5B,CAAAA,KAAL,GAAa,IAAb;AAD5F;AAQH6B,eAAI,CAACrC,MAAD,CAAS;AAClB,aAAO,CAAC,CAACsC,UAAWhB,CAAAA,iBAApB,IAA8D,GAA9D,GAAyC,MAAOa,YAAhD,KAAuF,QAAvF,IAAsE,MAAOnC,OAA7E,IAAmGA,MAAnG,YAAqHmC,WAArH;AADkB;AAQT,oBAAQ,EAAA;AACjB,aAAOrC,mBAAoByC,CAAAA,MAApB,GAA6BzC,mBAAoByC,CAAAA,MAAjD,IAA2D3C,QAASA,CAAAA,QAASmB,CAAAA,OAAQyB,CAAAA,YAA1B,CAAuC,CAAvC,EAA0C,CAA1C,CAA3D,EAAyG1C,mBAAoByC,CAAAA,MAApI;AADiB;AAnErB;AAuEA7C,SAAQI,CAAAA,mBAAR,GAA8BA,mBAA9B;AA1EsI,CAAtI;;",
"sources":["node_modules/@pixi/core/lib/textures/resources/ImageBitmapResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$ImageBitmapResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), settings = require(\"@pixi/settings\"), BaseImageResource = require(\"./BaseImageResource.js\");\nclass ImageBitmapResource extends BaseImageResource.BaseImageResource {\n  /**\n   * @param source - ImageBitmap or URL to use.\n   * @param options - Options to use.\n   */\n  constructor(source, options) {\n    options = options || {};\n    let baseSource, url, ownsImageBitmap;\n    typeof source == \"string\" ? (baseSource = ImageBitmapResource.EMPTY, url = source, ownsImageBitmap = !0) : (baseSource = source, url = null, ownsImageBitmap = !1), super(baseSource), this.url = url, this.crossOrigin = options.crossOrigin ?? !0, this.alphaMode = typeof options.alphaMode == \"number\" ? options.alphaMode : null, this.ownsImageBitmap = options.ownsImageBitmap ?? ownsImageBitmap, this._load = null, options.autoLoad !== !1 && this.load();\n  }\n  load() {\n    return this._load ? this._load : (this._load = new Promise(async (resolve, reject) => {\n      if (this.url === null) {\n        resolve(this);\n        return;\n      }\n      try {\n        const response = await settings.settings.ADAPTER.fetch(this.url, {\n          mode: this.crossOrigin ? \"cors\" : \"no-cors\"\n        });\n        if (this.destroyed)\n          return;\n        const imageBlob = await response.blob();\n        if (this.destroyed)\n          return;\n        const imageBitmap = await createImageBitmap(imageBlob, {\n          premultiplyAlpha: this.alphaMode === null || this.alphaMode === constants.ALPHA_MODES.UNPACK ? \"premultiply\" : \"none\"\n        });\n        if (this.destroyed) {\n          imageBitmap.close();\n          return;\n        }\n        this.source = imageBitmap, this.update(), resolve(this);\n      } catch (e) {\n        if (this.destroyed)\n          return;\n        reject(e), this.onError.emit(e);\n      }\n    }), this._load);\n  }\n  /**\n   * Upload the image bitmap resource to GPU.\n   * @param renderer - Renderer to upload to\n   * @param baseTexture - BaseTexture for this resource\n   * @param glTexture - GLTexture to use\n   * @returns {boolean} true is success\n   */\n  upload(renderer, baseTexture, glTexture) {\n    return this.source instanceof ImageBitmap ? (typeof this.alphaMode == \"number\" && (baseTexture.alphaMode = this.alphaMode), super.upload(renderer, baseTexture, glTexture)) : (this.load(), !1);\n  }\n  /** Destroys this resource. */\n  dispose() {\n    this.ownsImageBitmap && this.source instanceof ImageBitmap && this.source.close(), super.dispose(), this._load = null;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @returns {boolean} `true` if current environment support ImageBitmap, and source is string or ImageBitmap\n   */\n  static test(source) {\n    return !!globalThis.createImageBitmap && typeof ImageBitmap < \"u\" && (typeof source == \"string\" || source instanceof ImageBitmap);\n  }\n  /**\n   * ImageBitmap cannot be created synchronously, so a empty placeholder canvas is needed when loading from URLs.\n   * Only for internal usage.\n   * @returns The cached placeholder canvas.\n   */\n  static get EMPTY() {\n    return ImageBitmapResource._EMPTY = ImageBitmapResource._EMPTY ?? settings.settings.ADAPTER.createCanvas(0, 0), ImageBitmapResource._EMPTY;\n  }\n}\nexports.ImageBitmapResource = ImageBitmapResource;\n//# sourceMappingURL=ImageBitmapResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","settings","BaseImageResource","ImageBitmapResource","constructor","source","options","baseSource","url","ownsImageBitmap","EMPTY","crossOrigin","alphaMode","_load","autoLoad","load","Promise","resolve","reject","response","ADAPTER","fetch","mode","destroyed","imageBlob","blob","imageBitmap","createImageBitmap","premultiplyAlpha","ALPHA_MODES","UNPACK","close","update","e","onError","emit","upload","renderer","baseTexture","glTexture","ImageBitmap","dispose","test","globalThis","_EMPTY","createCanvas"]
}
