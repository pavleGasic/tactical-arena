{
"version":3,
"file":"module$node_modules$$pixi$core$lib$autoDetectRenderer.js",
"lineCount":14,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,GAA0E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE9GC,QAAAA,GAAaH,OAAA,CAAQ,gDAAR,CAAbG;AACJ,QAAMC,YAAY,EAAlB;AACAD,QAAWA,CAAAA,UAAWE,CAAAA,YAAtB,CAAmCF,MAAWG,CAAAA,aAAcC,CAAAA,QAA5D,EAAsEH,SAAtE,CAAA;AAOAF,SAAQM,CAAAA,kBAAR,GANAA,QAA2B,CAACC,OAAD,CAAU;AACnC,SAAK,MAAMC,YAAX,IAA2BN,SAA3B;AACE,UAAIM,YAAaC,CAAAA,IAAb,CAAkBF,OAAlB,CAAJ;AACE,eAAO,IAAIC,YAAJ,CAAiBD,OAAjB,CAAP;AADF;AADF;AAGA,UAAUG,KAAJ,CAAU,4CAAV,CAAN;AAJmC,GAMrC;AAXkH,CAAlH;;",
"sources":["node_modules/@pixi/core/lib/autoDetectRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$autoDetectRenderer\"] = function(global,require,module,exports) {\n\"use strict\";\nvar extensions = require(\"@pixi/extensions\");\nconst renderers = [];\nextensions.extensions.handleByList(extensions.ExtensionType.Renderer, renderers);\nfunction autoDetectRenderer(options) {\n  for (const RendererType of renderers)\n    if (RendererType.test(options))\n      return new RendererType(options);\n  throw new Error(\"Unable to auto-detect a suitable renderer.\");\n}\nexports.autoDetectRenderer = autoDetectRenderer;\n//# sourceMappingURL=autoDetectRenderer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extensions","renderers","handleByList","ExtensionType","Renderer","autoDetectRenderer","options","RendererType","test","Error"]
}
