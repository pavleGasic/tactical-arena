{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$ImageResource.js",
"lineCount":79,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/resources/ImageResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$ImageResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), settings = require(\"@pixi/settings\"), BaseImageResource = require(\"./BaseImageResource.js\");\nclass ImageResource extends BaseImageResource.BaseImageResource {\n  /**\n   * @param source - image source or URL\n   * @param options\n   * @param {boolean} [options.autoLoad=true] - start loading process\n   * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - whether its required to create\n   *        a bitmap before upload\n   * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n   * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Premultiply image alpha in bitmap\n   */\n  constructor(source, options) {\n    if (options = options || {}, typeof source == \"string\") {\n      const imageElement = new Image();\n      BaseImageResource.BaseImageResource.crossOrigin(imageElement, source, options.crossorigin), imageElement.src = source, source = imageElement;\n    }\n    super(source), !source.complete && this._width && this._height && (this._width = 0, this._height = 0), this.url = source.src, this._process = null, this.preserveBitmap = !1, this.createBitmap = (options.createBitmap ?? settings.settings.CREATE_IMAGE_BITMAP) && !!globalThis.createImageBitmap, this.alphaMode = typeof options.alphaMode == \"number\" ? options.alphaMode : null, this.bitmap = null, this._load = null, options.autoLoad !== !1 && this.load();\n  }\n  /**\n   * Returns a promise when image will be loaded and processed.\n   * @param createBitmap - whether process image into bitmap\n   */\n  load(createBitmap) {\n    return this._load ? this._load : (createBitmap !== void 0 && (this.createBitmap = createBitmap), this._load = new Promise((resolve, reject) => {\n      const source = this.source;\n      this.url = source.src;\n      const completed = () => {\n        this.destroyed || (source.onload = null, source.onerror = null, this.update(), this._load = null, this.createBitmap ? resolve(this.process()) : resolve(this));\n      };\n      source.complete && source.src ? completed() : (source.onload = completed, source.onerror = (event) => {\n        reject(event), this.onError.emit(event);\n      });\n    }), this._load);\n  }\n  /**\n   * Called when we need to convert image into BitmapImage.\n   * Can be called multiple times, real promise is cached inside.\n   * @returns - Cached promise to fill that bitmap\n   */\n  process() {\n    const source = this.source;\n    if (this._process !== null)\n      return this._process;\n    if (this.bitmap !== null || !globalThis.createImageBitmap)\n      return Promise.resolve(this);\n    const createImageBitmap = globalThis.createImageBitmap, cors = !source.crossOrigin || source.crossOrigin === \"anonymous\";\n    return this._process = fetch(\n      source.src,\n      {\n        mode: cors ? \"cors\" : \"no-cors\"\n      }\n    ).then((r) => r.blob()).then((blob) => createImageBitmap(\n      blob,\n      0,\n      0,\n      source.width,\n      source.height,\n      {\n        premultiplyAlpha: this.alphaMode === null || this.alphaMode === constants.ALPHA_MODES.UNPACK ? \"premultiply\" : \"none\"\n      }\n    )).then((bitmap) => this.destroyed ? Promise.reject() : (this.bitmap = bitmap, this.update(), this._process = null, Promise.resolve(this))), this._process;\n  }\n  /**\n   * Upload the image resource to GPU.\n   * @param renderer - Renderer to upload to\n   * @param baseTexture - BaseTexture for this resource\n   * @param glTexture - GLTexture to use\n   * @returns {boolean} true is success\n   */\n  upload(renderer, baseTexture, glTexture) {\n    if (typeof this.alphaMode == \"number\" && (baseTexture.alphaMode = this.alphaMode), !this.createBitmap)\n      return super.upload(renderer, baseTexture, glTexture);\n    if (!this.bitmap && (this.process(), !this.bitmap))\n      return !1;\n    if (super.upload(renderer, baseTexture, glTexture, this.bitmap), !this.preserveBitmap) {\n      let flag = !0;\n      const glTextures = baseTexture._glTextures;\n      for (const key in glTextures) {\n        const otherTex = glTextures[key];\n        if (otherTex !== glTexture && otherTex.dirtyId !== baseTexture.dirtyId) {\n          flag = !1;\n          break;\n        }\n      }\n      flag && (this.bitmap.close && this.bitmap.close(), this.bitmap = null);\n    }\n    return !0;\n  }\n  /** Destroys this resource. */\n  dispose() {\n    this.source.onload = null, this.source.onerror = null, super.dispose(), this.bitmap && (this.bitmap.close(), this.bitmap = null), this._process = null, this._load = null;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @returns {boolean} `true` if current environment support HTMLImageElement, and source is string or HTMLImageElement\n   */\n  static test(source) {\n    return typeof HTMLImageElement < \"u\" && (typeof source == \"string\" || source instanceof HTMLImageElement);\n  }\n}\nexports.ImageResource = ImageResource;\n//# sourceMappingURL=ImageResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","settings","BaseImageResource","ImageResource","constructor","source","options","imageElement","Image","crossOrigin","crossorigin","src","complete","_width","_height","url","_process","preserveBitmap","createBitmap","CREATE_IMAGE_BITMAP","globalThis","createImageBitmap","alphaMode","_load","bitmap","autoLoad","load","Promise","resolve","reject","completed","destroyed","onload","onerror","update","process","event","source.onerror","onError","emit","fetch","mode","then","r","blob","width","height","premultiplyAlpha","ALPHA_MODES","UNPACK","upload","renderer","baseTexture","glTexture","flag","glTextures","_glTextures","key","otherTex","dirtyId","close","dispose","test","HTMLImageElement"]
}
