{
"version":3,
"file":"module$node_modules$$pixi$events$lib$FederatedEventTarget.js",
"lineCount":43,
"mappings":"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",
"sources":["node_modules/@pixi/events/lib/FederatedEventTarget.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$events$lib$FederatedEventTarget\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), display = require(\"@pixi/display\"), EventSystem = require(\"./EventSystem.js\"), FederatedEvent = require(\"./FederatedEvent.js\");\nfunction convertEventModeToInteractiveMode(mode) {\n  return mode === \"dynamic\" || mode === \"static\";\n}\nconst FederatedDisplayObject = {\n  /**\n   * Property-based event handler for the `click` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onclick = (event) => {\n   *  //some function here that happens on click\n   * }\n   */\n  onclick: null,\n  /**\n   * Property-based event handler for the `mousedown` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onmousedown = (event) => {\n   *  //some function here that happens on mousedown\n   * }\n   */\n  onmousedown: null,\n  /**\n   * Property-based event handler for the `mouseenter` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onmouseenter = (event) => {\n   *  //some function here that happens on mouseenter\n   * }\n   */\n  onmouseenter: null,\n  /**\n   * Property-based event handler for the `mouseleave` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onmouseleave = (event) => {\n   *  //some function here that happens on mouseleave\n   * }\n   */\n  onmouseleave: null,\n  /**\n   * Property-based event handler for the `mousemove` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onmousemove = (event) => {\n   *  //some function here that happens on mousemove\n   * }\n   */\n  onmousemove: null,\n  /**\n   * Property-based event handler for the `globalmousemove` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onglobalmousemove = (event) => {\n   *  //some function here that happens on globalmousemove\n   * }\n   */\n  onglobalmousemove: null,\n  /**\n   * Property-based event handler for the `mouseout` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onmouseout = (event) => {\n   *  //some function here that happens on mouseout\n   * }\n   */\n  onmouseout: null,\n  /**\n   * Property-based event handler for the `mouseover` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onmouseover = (event) => {\n   *  //some function here that happens on mouseover\n   * }\n   */\n  onmouseover: null,\n  /**\n   * Property-based event handler for the `mouseup` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onmouseup = (event) => {\n   *  //some function here that happens on mouseup\n   * }\n   */\n  onmouseup: null,\n  /**\n   * Property-based event handler for the `mouseupoutside` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onmouseupoutside = (event) => {\n   *  //some function here that happens on mouseupoutside\n   * }\n   */\n  onmouseupoutside: null,\n  /**\n   * Property-based event handler for the `pointercancel` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointercancel = (event) => {\n   *  //some function here that happens on pointercancel\n   * }\n   */\n  onpointercancel: null,\n  /**\n   * Property-based event handler for the `pointerdown` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointerdown = (event) => {\n   *  //some function here that happens on pointerdown\n   * }\n   */\n  onpointerdown: null,\n  /**\n   * Property-based event handler for the `pointerenter` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointerenter = (event) => {\n   *  //some function here that happens on pointerenter\n   * }\n   */\n  onpointerenter: null,\n  /**\n   * Property-based event handler for the `pointerleave` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointerleave = (event) => {\n   *  //some function here that happens on pointerleave\n   * }\n   */\n  onpointerleave: null,\n  /**\n   * Property-based event handler for the `pointermove` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointermove = (event) => {\n   *  //some function here that happens on pointermove\n   * }\n   */\n  onpointermove: null,\n  /**\n   * Property-based event handler for the `globalpointermove` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onglobalpointermove = (event) => {\n   *  //some function here that happens on globalpointermove\n   * }\n   */\n  onglobalpointermove: null,\n  /**\n   * Property-based event handler for the `pointerout` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointerout = (event) => {\n   *  //some function here that happens on pointerout\n   * }\n   */\n  onpointerout: null,\n  /**\n   * Property-based event handler for the `pointerover` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointerover = (event) => {\n   *  //some function here that happens on pointerover\n   * }\n   */\n  onpointerover: null,\n  /**\n   * Property-based event handler for the `pointertap` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointertap = (event) => {\n   *  //some function here that happens on pointertap\n   * }\n   */\n  onpointertap: null,\n  /**\n   * Property-based event handler for the `pointerup` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointerup = (event) => {\n   *  //some function here that happens on pointerup\n   * }\n   */\n  onpointerup: null,\n  /**\n   * Property-based event handler for the `pointerupoutside` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onpointerupoutside = (event) => {\n   *  //some function here that happens on pointerupoutside\n   * }\n   */\n  onpointerupoutside: null,\n  /**\n   * Property-based event handler for the `rightclick` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onrightclick = (event) => {\n   *  //some function here that happens on rightclick\n   * }\n   */\n  onrightclick: null,\n  /**\n   * Property-based event handler for the `rightdown` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onrightdown = (event) => {\n   *  //some function here that happens on rightdown\n   * }\n   */\n  onrightdown: null,\n  /**\n   * Property-based event handler for the `rightup` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onrightup = (event) => {\n   *  //some function here that happens on rightup\n   * }\n   */\n  onrightup: null,\n  /**\n   * Property-based event handler for the `rightupoutside` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onrightupoutside = (event) => {\n   *  //some function here that happens on rightupoutside\n   * }\n   */\n  onrightupoutside: null,\n  /**\n   * Property-based event handler for the `tap` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.ontap = (event) => {\n   *  //some function here that happens on tap\n   * }\n   */\n  ontap: null,\n  /**\n   * Property-based event handler for the `touchcancel` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.ontouchcancel = (event) => {\n   *  //some function here that happens on touchcancel\n   * }\n   */\n  ontouchcancel: null,\n  /**\n   * Property-based event handler for the `touchend` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.ontouchend = (event) => {\n   *  //some function here that happens on touchend\n   * }\n   */\n  ontouchend: null,\n  /**\n   * Property-based event handler for the `touchendoutside` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.ontouchendoutside = (event) => {\n   *  //some function here that happens on touchendoutside\n   * }\n   */\n  ontouchendoutside: null,\n  /**\n   * Property-based event handler for the `touchmove` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.ontouchmove = (event) => {\n   *  //some function here that happens on touchmove\n   * }\n   */\n  ontouchmove: null,\n  /**\n   * Property-based event handler for the `globaltouchmove` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onglobaltouchmove = (event) => {\n   *  //some function here that happens on globaltouchmove\n   * }\n   */\n  onglobaltouchmove: null,\n  /**\n   * Property-based event handler for the `touchstart` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.ontouchstart = (event) => {\n   *  //some function here that happens on touchstart\n   * }\n   */\n  ontouchstart: null,\n  /**\n   * Property-based event handler for the `wheel` event.\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   * @example\n   * this.onwheel = (event) => {\n   *  //some function here that happens on wheel\n   * }\n   */\n  onwheel: null,\n  /**\n   * @ignore\n   */\n  _internalInteractive: void 0,\n  /**\n   * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n   * @memberof PIXI.DisplayObject#\n   */\n  get interactive() {\n    return this._internalInteractive ?? convertEventModeToInteractiveMode(EventSystem.EventSystem.defaultEventMode);\n  },\n  set interactive(value) {\n    core.utils.deprecation(\n      \"7.2.0\",\n      // eslint-disable-next-line max-len\n      \"Setting interactive is deprecated, use eventMode = 'none'/'passive'/'auto'/'static'/'dynamic' instead.\"\n    ), this._internalInteractive = value, this.eventMode = value ? \"static\" : \"auto\";\n  },\n  /**\n   * @ignore\n   */\n  _internalEventMode: void 0,\n  /**\n   * Enable interaction events for the DisplayObject. Touch, pointer and mouse.\n   * This now replaces the `interactive` property.\n   * There are 5 types of interaction settings:\n   * - `'none'`: Ignores all interaction events, even on its children.\n   * - `'passive'`: Does not emit events and ignores all hit testing on itself and non-interactive children.\n   * Interactive children will still emit events.\n   * - `'auto'`: Does not emit events but is hit tested if parent is interactive. Same as `interactive = false` in v7\n   * - `'static'`: Emit events and is hit tested. Same as `interaction = true` in v7\n   * - `'dynamic'`: Emits events and is hit tested but will also receive mock interaction events fired from a ticker to\n   * allow for interaction when the mouse isn't moving\n   * @example\n   * import { Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.eventMode = 'static';\n   * sprite.on('tap', (event) => {\n   *     // Handle event\n   * });\n   * @memberof PIXI.DisplayObject#\n   * @since 7.2.0\n   */\n  get eventMode() {\n    return this._internalEventMode ?? EventSystem.EventSystem.defaultEventMode;\n  },\n  set eventMode(value) {\n    this._internalInteractive = convertEventModeToInteractiveMode(value), this._internalEventMode = value;\n  },\n  /**\n   * Determines if the displayObject is interactive or not\n   * @returns {boolean} Whether the displayObject is interactive or not\n   * @memberof PIXI.DisplayObject#\n   * @since 7.2.0\n   * @example\n   * import { Sprite } from 'pixi.js';\n   * const sprite = new Sprite(texture);\n   * sprite.eventMode = 'static';\n   * sprite.isInteractive(); // true\n   *\n   * sprite.eventMode = 'dynamic';\n   * sprite.isInteractive(); // true\n   *\n   * sprite.eventMode = 'none';\n   * sprite.isInteractive(); // false\n   *\n   * sprite.eventMode = 'passive';\n   * sprite.isInteractive(); // false\n   *\n   * sprite.eventMode = 'auto';\n   * sprite.isInteractive(); // false\n   */\n  isInteractive() {\n    return this.eventMode === \"static\" || this.eventMode === \"dynamic\";\n  },\n  /**\n   * Determines if the children to the displayObject can be clicked/touched\n   * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n   * @memberof PIXI.Container#\n   */\n  interactiveChildren: !0,\n  /**\n   * Interaction shape. Children will be hit first, then this shape will be checked.\n   * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n   * @example\n   * import { Rectangle, Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.hitArea = new Rectangle(0, 0, 100, 100);\n   * @member {PIXI.IHitArea}\n   * @memberof PIXI.DisplayObject#\n   */\n  hitArea: null,\n  /**\n   * Unlike `on` or `addListener` which are methods from EventEmitter, `addEventListener`\n   * seeks to be compatible with the DOM's `addEventListener` with support for options.\n   * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n   * @memberof PIXI.DisplayObject\n   * @param type - The type of event to listen to.\n   * @param listener - The listener callback or object.\n   * @param options - Listener options, used for capture phase.\n   * @example\n   * // Tell the user whether they did a single, double, triple, or nth click.\n   * button.addEventListener('click', {\n   *     handleEvent(e): {\n   *         let prefix;\n   *\n   *         switch (e.detail) {\n   *             case 1: prefix = 'single'; break;\n   *             case 2: prefix = 'double'; break;\n   *             case 3: prefix = 'triple'; break;\n   *             default: prefix = e.detail + 'th'; break;\n   *         }\n   *\n   *         console.log('That was a ' + prefix + 'click');\n   *     }\n   * });\n   *\n   * // But skip the first click!\n   * button.parent.addEventListener('click', function blockClickOnce(e) {\n   *     e.stopImmediatePropagation();\n   *     button.parent.removeEventListener('click', blockClickOnce, true);\n   * }, {\n   *     capture: true,\n   * });\n   */\n  addEventListener(type, listener, options) {\n    const capture = typeof options == \"boolean\" && options || typeof options == \"object\" && options.capture, signal = typeof options == \"object\" ? options.signal : void 0, once = typeof options == \"object\" ? options.once === !0 : !1, context = typeof listener == \"function\" ? void 0 : listener;\n    type = capture ? `${type}capture` : type;\n    const listenerFn = typeof listener == \"function\" ? listener : listener.handleEvent, emitter = this;\n    signal && signal.addEventListener(\"abort\", () => {\n      emitter.off(type, listenerFn, context);\n    }), once ? emitter.once(type, listenerFn, context) : emitter.on(type, listenerFn, context);\n  },\n  /**\n   * Unlike `off` or `removeListener` which are methods from EventEmitter, `removeEventListener`\n   * seeks to be compatible with the DOM's `removeEventListener` with support for options.\n   * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n   * @memberof PIXI.DisplayObject\n   * @param type - The type of event the listener is bound to.\n   * @param listener - The listener callback or object.\n   * @param options - The original listener options. This is required to deregister a capture phase listener.\n   */\n  removeEventListener(type, listener, options) {\n    const capture = typeof options == \"boolean\" && options || typeof options == \"object\" && options.capture, context = typeof listener == \"function\" ? void 0 : listener;\n    type = capture ? `${type}capture` : type, listener = typeof listener == \"function\" ? listener : listener.handleEvent, this.off(type, listener, context);\n  },\n  /**\n   * Dispatch the event on this {@link PIXI.DisplayObject} using the event's {@link PIXI.EventBoundary}.\n   *\n   * The target of the event is set to `this` and the `defaultPrevented` flag is cleared before dispatch.\n   *\n   * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n   * @memberof PIXI.DisplayObject\n   * @param e - The event to dispatch.\n   * @returns Whether the {@link PIXI.FederatedEvent.preventDefault preventDefault}() method was not invoked.\n   * @example\n   * // Reuse a click event!\n   * button.dispatchEvent(clickEvent);\n   */\n  dispatchEvent(e) {\n    if (!(e instanceof FederatedEvent.FederatedEvent))\n      throw new Error(\"DisplayObject cannot propagate events outside of the Federated Events API\");\n    return e.defaultPrevented = !1, e.path = null, e.target = this, e.manager.dispatchEvent(e), !e.defaultPrevented;\n  }\n};\ndisplay.DisplayObject.mixin(FederatedDisplayObject);\nexports.FederatedDisplayObject = FederatedDisplayObject;\n//# sourceMappingURL=FederatedEventTarget.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","convertEventModeToInteractiveMode","mode","core","display","EventSystem","FederatedEvent","FederatedDisplayObject","onclick","onmousedown","onmouseenter","onmouseleave","onmousemove","onglobalmousemove","onmouseout","onmouseover","onmouseup","onmouseupoutside","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onglobalpointermove","onpointerout","onpointerover","onpointertap","onpointerup","onpointerupoutside","onrightclick","onrightdown","onrightup","onrightupoutside","ontap","ontouchcancel","ontouchend","ontouchendoutside","ontouchmove","onglobaltouchmove","ontouchstart","onwheel","_internalInteractive","interactive","defaultEventMode","value","utils","deprecation","eventMode","_internalEventMode","isInteractive","interactiveChildren","hitArea","addEventListener","type","listener","options","signal","once","context","capture","listenerFn","handleEvent","emitter","off","on","removeEventListener","dispatchEvent","e","Error","defaultPrevented","path","target","manager","DisplayObject","mixin"]
}
