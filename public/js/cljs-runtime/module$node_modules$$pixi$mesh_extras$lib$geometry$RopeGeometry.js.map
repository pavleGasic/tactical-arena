{
"version":3,
"file":"module$node_modules$$pixi$mesh_extras$lib$geometry$RopeGeometry.js",
"lineCount":79,
"mappings":"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",
"sources":["node_modules/@pixi/mesh-extras/lib/geometry/RopeGeometry.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$mesh_extras$lib$geometry$RopeGeometry\"] = function(global,require,module,exports) {\n\"use strict\";\nvar mesh = require(\"@pixi/mesh\");\nclass RopeGeometry extends mesh.MeshGeometry {\n  /**\n   * @param width - The width (i.e., thickness) of the rope.\n   * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param textureScale - By default the rope texture will be stretched to match\n   *     rope length. If textureScale is positive this value will be treated as a scaling\n   *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n   *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n   *     then set textureScale=1 to keep the original texture pixel size.\n   *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n   *     i.e. set textureScale=0.5 to scale it down twice.\n   */\n  constructor(width = 200, points, textureScale = 0) {\n    super(\n      new Float32Array(points.length * 4),\n      new Float32Array(points.length * 4),\n      new Uint16Array((points.length - 1) * 6)\n    ), this.points = points, this._width = width, this.textureScale = textureScale, this.build();\n  }\n  /**\n   * The width (i.e., thickness) of the rope.\n   * @readonly\n   */\n  get width() {\n    return this._width;\n  }\n  /** Refreshes Rope indices and uvs */\n  build() {\n    const points = this.points;\n    if (!points)\n      return;\n    const vertexBuffer = this.getBuffer(\"aVertexPosition\"), uvBuffer = this.getBuffer(\"aTextureCoord\"), indexBuffer = this.getIndex();\n    if (points.length < 1)\n      return;\n    vertexBuffer.data.length / 4 !== points.length && (vertexBuffer.data = new Float32Array(points.length * 4), uvBuffer.data = new Float32Array(points.length * 4), indexBuffer.data = new Uint16Array((points.length - 1) * 6));\n    const uvs = uvBuffer.data, indices = indexBuffer.data;\n    uvs[0] = 0, uvs[1] = 0, uvs[2] = 0, uvs[3] = 1;\n    let amount = 0, prev = points[0];\n    const textureWidth = this._width * this.textureScale, total = points.length;\n    for (let i = 0; i < total; i++) {\n      const index = i * 4;\n      if (this.textureScale > 0) {\n        const dx = prev.x - points[i].x, dy = prev.y - points[i].y, distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i], amount += distance / textureWidth;\n      } else\n        amount = i / (total - 1);\n      uvs[index] = amount, uvs[index + 1] = 0, uvs[index + 2] = amount, uvs[index + 3] = 1;\n    }\n    let indexCount = 0;\n    for (let i = 0; i < total - 1; i++) {\n      const index = i * 2;\n      indices[indexCount++] = index, indices[indexCount++] = index + 1, indices[indexCount++] = index + 2, indices[indexCount++] = index + 2, indices[indexCount++] = index + 1, indices[indexCount++] = index + 3;\n    }\n    uvBuffer.update(), indexBuffer.update(), this.updateVertices();\n  }\n  /** refreshes vertices of Rope mesh */\n  updateVertices() {\n    const points = this.points;\n    if (points.length < 1)\n      return;\n    let lastPoint = points[0], nextPoint, perpX = 0, perpY = 0;\n    const vertices = this.buffers[0].data, total = points.length, halfWidth = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n    for (let i = 0; i < total; i++) {\n      const point = points[i], index = i * 4;\n      i < points.length - 1 ? nextPoint = points[i + 1] : nextPoint = point, perpY = -(nextPoint.x - lastPoint.x), perpX = nextPoint.y - lastPoint.y;\n      let ratio = (1 - i / (total - 1)) * 10;\n      ratio > 1 && (ratio = 1);\n      const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      perpLength < 1e-6 ? (perpX = 0, perpY = 0) : (perpX /= perpLength, perpY /= perpLength, perpX *= halfWidth, perpY *= halfWidth), vertices[index] = point.x + perpX, vertices[index + 1] = point.y + perpY, vertices[index + 2] = point.x - perpX, vertices[index + 3] = point.y - perpY, lastPoint = point;\n    }\n    this.buffers[0].update();\n  }\n  update() {\n    this.textureScale > 0 ? this.build() : this.updateVertices();\n  }\n}\nexports.RopeGeometry = RopeGeometry;\n//# sourceMappingURL=RopeGeometry.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","mesh","RopeGeometry","MeshGeometry","constructor","width","points","textureScale","Float32Array","length","Uint16Array","_width","build","vertexBuffer","getBuffer","uvBuffer","indexBuffer","getIndex","data","uvs","indices","amount","prev","textureWidth","total","i","index","dx","x","dy","y","distance","Math","sqrt","indexCount","update","updateVertices","lastPoint","nextPoint","vertices","buffers","halfWidth","point","perpY","perpX","perpLength"]
}
