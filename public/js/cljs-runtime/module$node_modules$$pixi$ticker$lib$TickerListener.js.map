{
"version":3,
"file":"module$node_modules$$pixi$ticker$lib$TickerListener.js",
"lineCount":36,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,GAAwE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEhH,OAAMC,eAAN;AASEC,eAAW,CAACC,EAAD,EAAKC,OAAA,GAAU,IAAf,EAAqBC,QAAA,GAAW,CAAhC,EAAmCC,IAAA,GAAO,CAAA,CAA1C,CAA8C;AACrC,UAAKC,CAAAA,QAAL,GAAlB,IAAKC,CAAAA,IAAa,GAAN,IAAM;AAAsB,UAAKC,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AAAsB,UAAKN,CAAAA,EAAL,GAAUA,EAAV;AAAc,UAAKC,CAAAA,OAAL,GAAeA,OAAf;AAAwB,UAAKC,CAAAA,QAAL,GAAgBA,QAAhB;AAA0B,UAAKC,CAAAA,IAAL,GAAYA,IAAZ;AADvE;AAUzDI,SAAK,CAACP,EAAD,EAAKC,OAAA,GAAU,IAAf,CAAqB;AACxB,aAAO,IAAKD,CAAAA,EAAZ,KAAmBA,EAAnB,IAAyB,IAAKC,CAAAA,OAA9B,KAA0CA,OAA1C;AADwB;AAS1BO,QAAI,CAACC,SAAD,CAAY;AACd,UAAKT,CAAAA,EAAL,KAAY,IAAKC,CAAAA,OAAL,GAAe,IAAKD,CAAAA,EAAGU,CAAAA,IAAR,CAAa,IAAKT,CAAAA,OAAlB,EAA2BQ,SAA3B,CAAf,GAAuD,IAAKT,CAAAA,EAAL,CAAQS,SAAR,CAAnE;AACME,eAAAA,GAAW,IAAKN,CAAAA,IAAhBM;AACN,aAAO,IAAKR,CAAAA,IAAL,IAAa,IAAKS,CAAAA,OAAL,CAAa,CAAA,CAAb,CAAb,EAA+B,IAAKN,CAAAA,UAApC,KAAmD,IAAKD,CAAAA,IAAxD,GAA+D,IAA/D,GAAsEM,SAA7E;AAHc;AAUhBE,WAAO,CAACT,QAAD,CAAW;AAChB,UAAKA,CAAAA,QAAL,GAAgBA,QAAhB;AAA0BA,cAASC,CAAAA,IAAT,KAAkBD,QAASC,CAAAA,IAAKD,CAAAA,QAAhC,GAA2C,IAA3C;AAAkD,UAAKC,CAAAA,IAAL,GAAYD,QAASC,CAAAA,IAArB;AAA2BD,cAASC,CAAAA,IAAT,GAAgB,IAAhB;AADvF;AAUlBO,WAAO,CAACE,IAAA,GAAO,CAAA,CAAR,CAAY;AACjB,UAAKR,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AAAsC,UAAKL,CAAAA,OAAL,GAAhB,IAAKD,CAAAA,EAAW,GAAN,IAAM;AAAqB,UAAKI,CAAAA,QAAL,KAAkB,IAAKA,CAAAA,QAASC,CAAAA,IAAhC,GAAuC,IAAKA,CAAAA,IAA5C;AAAmD,UAAKA,CAAAA,IAAL,KAAc,IAAKA,CAAAA,IAAKD,CAAAA,QAAxB,GAAmC,IAAKA,CAAAA,QAAxC;AAC9G,YAAMO,WAAW,IAAKN,CAAAA,IAAtB;AACA,aAAO,IAAKA,CAAAA,IAAL,GAAYS,IAAA,GAAO,IAAP,GAAcH,QAA1B,EAAoC,IAAKP,CAAAA,QAAzC,GAAoD,IAApD,EAA0DO,QAAjE;AAHiB;AAhDrB;AAsDAd,SAAQC,CAAAA,cAAR,GAAyBA,cAAzB;AAxDgH,CAAhH;;",
"sources":["node_modules/@pixi/ticker/lib/TickerListener.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$ticker$lib$TickerListener\"] = function(global,require,module,exports) {\n\"use strict\";\nclass TickerListener {\n  /**\n   * Constructor\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param priority - The priority for emitting\n   * @param once - If the handler should fire once\n   */\n  constructor(fn, context = null, priority = 0, once = !1) {\n    this.next = null, this.previous = null, this._destroyed = !1, this.fn = fn, this.context = context, this.priority = priority, this.once = once;\n  }\n  /**\n   * Simple compare function to figure out if a function and context match.\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @returns `true` if the listener match the arguments\n   */\n  match(fn, context = null) {\n    return this.fn === fn && this.context === context;\n  }\n  /**\n   * Emit by calling the current function.\n   * @private\n   * @param deltaTime - time since the last emit.\n   * @returns Next ticker\n   */\n  emit(deltaTime) {\n    this.fn && (this.context ? this.fn.call(this.context, deltaTime) : this.fn(deltaTime));\n    const redirect = this.next;\n    return this.once && this.destroy(!0), this._destroyed && (this.next = null), redirect;\n  }\n  /**\n   * Connect to the list.\n   * @private\n   * @param previous - Input node, previous listener\n   */\n  connect(previous) {\n    this.previous = previous, previous.next && (previous.next.previous = this), this.next = previous.next, previous.next = this;\n  }\n  /**\n   * Destroy and don't use after this.\n   * @private\n   * @param hard - `true` to remove the `next` reference, this\n   *        is considered a hard destroy. Soft destroy maintains the next reference.\n   * @returns The listener to redirect while emitting or removing.\n   */\n  destroy(hard = !1) {\n    this._destroyed = !0, this.fn = null, this.context = null, this.previous && (this.previous.next = this.next), this.next && (this.next.previous = this.previous);\n    const redirect = this.next;\n    return this.next = hard ? null : redirect, this.previous = null, redirect;\n  }\n}\nexports.TickerListener = TickerListener;\n//# sourceMappingURL=TickerListener.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","TickerListener","constructor","fn","context","priority","once","previous","next","_destroyed","match","emit","deltaTime","call","redirect","destroy","connect","hard"]
}
