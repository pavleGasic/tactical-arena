shadow$provide.module$node_modules$get_intrinsic$index = function(global, require, module, exports) {
  var $Object = require("module$node_modules$es_object_atoms$index"), $Error = require("module$node_modules$es_errors$index"), $EvalError = require("module$node_modules$es_errors$eval"), $RangeError = require("module$node_modules$es_errors$range"), $ReferenceError = require("module$node_modules$es_errors$ref"), $SyntaxError = require("module$node_modules$es_errors$syntax"), $TypeError = require("module$node_modules$es_errors$type"), $URIError = require("module$node_modules$es_errors$uri"), abs = 
  require("module$node_modules$math_intrinsics$abs"), floor = require("module$node_modules$math_intrinsics$floor"), max = require("module$node_modules$math_intrinsics$max"), min = require("module$node_modules$math_intrinsics$min"), pow = require("module$node_modules$math_intrinsics$pow"), round = require("module$node_modules$math_intrinsics$round"), sign = require("module$node_modules$math_intrinsics$sign"), $Function = Function, getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  }, $gOPD = require("module$node_modules$gopd$index"), $defineProperty = require("module$node_modules$es_define_property$index"), throwTypeError = function() {
    throw new $TypeError();
  }, ThrowTypeError = $gOPD ? function() {
    try {
      return arguments.callee, throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError, hasSymbols = require("module$node_modules$has_symbols$index")(), getProto = require("module$node_modules$get_proto$index"), $ObjectGPO = require("module$node_modules$get_proto$Object_getPrototypeOf"), $ReflectGPO = require("module$node_modules$get_proto$Reflect_getPrototypeOf");
  global = require("module$node_modules$call_bind_apply_helpers$functionApply");
  exports = require("module$node_modules$call_bind_apply_helpers$functionCall");
  var needsEval = {}, TypedArray = "undefined" !== typeof Uint8Array && getProto ? getProto(Uint8Array) : void 0, INTRINSICS = {__proto__:null, "%AggregateError%":"undefined" === typeof AggregateError ? void 0 : AggregateError, "%Array%":Array, "%ArrayBuffer%":"undefined" === typeof ArrayBuffer ? void 0 : ArrayBuffer, "%ArrayIteratorPrototype%":hasSymbols && getProto ? getProto([][Symbol.iterator]()) : void 0, "%AsyncFromSyncIteratorPrototype%":void 0, "%AsyncFunction%":needsEval, "%AsyncGenerator%":needsEval, 
  "%AsyncGeneratorFunction%":needsEval, "%AsyncIteratorPrototype%":needsEval, "%Atomics%":"undefined" === typeof Atomics ? void 0 : Atomics, "%BigInt%":"undefined" === typeof BigInt ? void 0 : BigInt, "%BigInt64Array%":"undefined" === typeof BigInt64Array ? void 0 : BigInt64Array, "%BigUint64Array%":"undefined" === typeof BigUint64Array ? void 0 : BigUint64Array, "%Boolean%":Boolean, "%DataView%":"undefined" === typeof DataView ? void 0 : DataView, "%Date%":Date, "%decodeURI%":decodeURI, "%decodeURIComponent%":decodeURIComponent, 
  "%encodeURI%":encodeURI, "%encodeURIComponent%":encodeURIComponent, "%Error%":$Error, "%eval%":eval, "%EvalError%":$EvalError, "%Float16Array%":"undefined" === typeof Float16Array ? void 0 : Float16Array, "%Float32Array%":"undefined" === typeof Float32Array ? void 0 : Float32Array, "%Float64Array%":"undefined" === typeof Float64Array ? void 0 : Float64Array, "%FinalizationRegistry%":"undefined" === typeof FinalizationRegistry ? void 0 : FinalizationRegistry, "%Function%":$Function, "%GeneratorFunction%":needsEval, 
  "%Int8Array%":"undefined" === typeof Int8Array ? void 0 : Int8Array, "%Int16Array%":"undefined" === typeof Int16Array ? void 0 : Int16Array, "%Int32Array%":"undefined" === typeof Int32Array ? void 0 : Int32Array, "%isFinite%":isFinite, "%isNaN%":isNaN, "%IteratorPrototype%":hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : void 0, "%JSON%":"object" === typeof JSON ? JSON : void 0, "%Map%":"undefined" === typeof Map ? void 0 : Map, "%MapIteratorPrototype%":"undefined" !== typeof Map && 
  hasSymbols && getProto ? getProto((new Map())[Symbol.iterator]()) : void 0, "%Math%":Math, "%Number%":Number, "%Object%":$Object, "%Object.getOwnPropertyDescriptor%":$gOPD, "%parseFloat%":parseFloat, "%parseInt%":parseInt, "%Promise%":"undefined" === typeof Promise ? void 0 : Promise, "%Proxy%":"undefined" === typeof Proxy ? void 0 : Proxy, "%RangeError%":$RangeError, "%ReferenceError%":$ReferenceError, "%Reflect%":"undefined" === typeof Reflect ? void 0 : Reflect, "%RegExp%":RegExp, "%Set%":"undefined" === 
  typeof Set ? void 0 : Set, "%SetIteratorPrototype%":"undefined" !== typeof Set && hasSymbols && getProto ? getProto((new Set())[Symbol.iterator]()) : void 0, "%SharedArrayBuffer%":"undefined" === typeof SharedArrayBuffer ? void 0 : SharedArrayBuffer, "%String%":String, "%StringIteratorPrototype%":hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : void 0, "%Symbol%":hasSymbols ? Symbol : void 0, "%SyntaxError%":$SyntaxError, "%ThrowTypeError%":ThrowTypeError, "%TypedArray%":TypedArray, "%TypeError%":$TypeError, 
  "%Uint8Array%":"undefined" === typeof Uint8Array ? void 0 : Uint8Array, "%Uint8ClampedArray%":"undefined" === typeof Uint8ClampedArray ? void 0 : Uint8ClampedArray, "%Uint16Array%":"undefined" === typeof Uint16Array ? void 0 : Uint16Array, "%Uint32Array%":"undefined" === typeof Uint32Array ? void 0 : Uint32Array, "%URIError%":$URIError, "%WeakMap%":"undefined" === typeof WeakMap ? void 0 : WeakMap, "%WeakRef%":"undefined" === typeof WeakRef ? void 0 : WeakRef, "%WeakSet%":"undefined" === typeof WeakSet ? 
  void 0 : WeakSet, "%Function.prototype.call%":exports, "%Function.prototype.apply%":global, "%Object.defineProperty%":$defineProperty, "%Object.getPrototypeOf%":$ObjectGPO, "%Math.abs%":abs, "%Math.floor%":floor, "%Math.max%":max, "%Math.min%":min, "%Math.pow%":pow, "%Math.round%":round, "%Math.sign%":sign, "%Reflect.getPrototypeOf%":$ReflectGPO};
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      $Object = getProto(getProto(e)), INTRINSICS["%Error.prototype%"] = $Object;
    }
  }
  var doEval = function doEval(name) {
    if ("%AsyncFunction%" === name) {
      var value = getEvalledConstructor("async function () {}");
    } else if ("%GeneratorFunction%" === name) {
      value = getEvalledConstructor("function* () {}");
    } else if ("%AsyncGeneratorFunction%" === name) {
      value = getEvalledConstructor("async function* () {}");
    } else if ("%AsyncGenerator%" === name) {
      var fn = doEval("%AsyncGeneratorFunction%");
      fn && (value = fn.prototype);
    } else {
      "%AsyncIteratorPrototype%" === name && (fn = doEval("%AsyncGenerator%")) && getProto && (value = getProto(fn.prototype));
    }
    return INTRINSICS[name] = value;
  }, LEGACY_ALIASES = {__proto__:null, "%ArrayBufferPrototype%":["ArrayBuffer", "prototype"], "%ArrayPrototype%":["Array", "prototype"], "%ArrayProto_entries%":["Array", "prototype", "entries"], "%ArrayProto_forEach%":["Array", "prototype", "forEach"], "%ArrayProto_keys%":["Array", "prototype", "keys"], "%ArrayProto_values%":["Array", "prototype", "values"], "%AsyncFunctionPrototype%":["AsyncFunction", "prototype"], "%AsyncGenerator%":["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%":["AsyncGeneratorFunction", 
  "prototype", "prototype"], "%BooleanPrototype%":["Boolean", "prototype"], "%DataViewPrototype%":["DataView", "prototype"], "%DatePrototype%":["Date", "prototype"], "%ErrorPrototype%":["Error", "prototype"], "%EvalErrorPrototype%":["EvalError", "prototype"], "%Float32ArrayPrototype%":["Float32Array", "prototype"], "%Float64ArrayPrototype%":["Float64Array", "prototype"], "%FunctionPrototype%":["Function", "prototype"], "%Generator%":["GeneratorFunction", "prototype"], "%GeneratorPrototype%":["GeneratorFunction", 
  "prototype", "prototype"], "%Int8ArrayPrototype%":["Int8Array", "prototype"], "%Int16ArrayPrototype%":["Int16Array", "prototype"], "%Int32ArrayPrototype%":["Int32Array", "prototype"], "%JSONParse%":["JSON", "parse"], "%JSONStringify%":["JSON", "stringify"], "%MapPrototype%":["Map", "prototype"], "%NumberPrototype%":["Number", "prototype"], "%ObjectPrototype%":["Object", "prototype"], "%ObjProto_toString%":["Object", "prototype", "toString"], "%ObjProto_valueOf%":["Object", "prototype", "valueOf"], 
  "%PromisePrototype%":["Promise", "prototype"], "%PromiseProto_then%":["Promise", "prototype", "then"], "%Promise_all%":["Promise", "all"], "%Promise_reject%":["Promise", "reject"], "%Promise_resolve%":["Promise", "resolve"], "%RangeErrorPrototype%":["RangeError", "prototype"], "%ReferenceErrorPrototype%":["ReferenceError", "prototype"], "%RegExpPrototype%":["RegExp", "prototype"], "%SetPrototype%":["Set", "prototype"], "%SharedArrayBufferPrototype%":["SharedArrayBuffer", "prototype"], "%StringPrototype%":["String", 
  "prototype"], "%SymbolPrototype%":["Symbol", "prototype"], "%SyntaxErrorPrototype%":["SyntaxError", "prototype"], "%TypedArrayPrototype%":["TypedArray", "prototype"], "%TypeErrorPrototype%":["TypeError", "prototype"], "%Uint8ArrayPrototype%":["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%":["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%":["Uint16Array", "prototype"], "%Uint32ArrayPrototype%":["Uint32Array", "prototype"], "%URIErrorPrototype%":["URIError", "prototype"], "%WeakMapPrototype%":["WeakMap", 
  "prototype"], "%WeakSetPrototype%":["WeakSet", "prototype"]};
  $Object = require("module$node_modules$function_bind$index");
  var hasOwn = require("module$node_modules$hasown$index"), $concat = $Object.call(exports, Array.prototype.concat), $spliceApply = $Object.call(global, Array.prototype.splice), $replace = $Object.call(exports, String.prototype.replace), $strSlice = $Object.call(exports, String.prototype.slice), $exec = $Object.call(exports, RegExp.prototype.exec), rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, reEscapeChar = /\\(\\)?/g, stringToPath = 
  function(string) {
    var first = $strSlice(string, 0, 1), last = $strSlice(string, -1);
    if ("%" === first && "%" !== last) {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    }
    if ("%" === last && "%" !== first) {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  module.exports = function(name$jscomp$0, allowMissing) {
    if ("string" !== typeof name$jscomp$0 || 0 === name$jscomp$0.length) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (1 < arguments.length && "boolean" !== typeof allowMissing) {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if (null === $exec(/^%?[^%]*%?$/, name$jscomp$0)) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name$jscomp$0), intrinsicBaseName = 0 < parts.length ? parts[0] : "";
    var name = "%" + intrinsicBaseName + "%", intrinsicName = name;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      var alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      value === needsEval && (value = doEval(intrinsicName));
      if ("undefined" === typeof value && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
    } else {
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    }
    name = value;
    intrinsicName = !1;
    alias && (intrinsicBaseName = alias[0], $spliceApply(parts, $concat([0, 1], alias)));
    alias = 1;
    for (value = !0; alias < parts.length; alias += 1) {
      var part = parts[alias];
      var intrinsicRealName = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if (('"' === intrinsicRealName || "'" === intrinsicRealName || "`" === intrinsicRealName || '"' === last || "'" === last || "`" === last) && intrinsicRealName !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      "constructor" !== part && value || (intrinsicName = !0);
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        name = INTRINSICS[intrinsicRealName];
      } else if (null != name) {
        if (!(part in name)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name$jscomp$0 + " exists, but the property is not available.");
          }
          return;
        }
        $gOPD && alias + 1 >= parts.length ? (last = $gOPD(name, part), name = (value = !!last) && "get" in last && !("originalValue" in last.get) ? last.get : name[part]) : (value = hasOwn(name, part), name = name[part]);
        value && !intrinsicName && (INTRINSICS[intrinsicRealName] = name);
      }
    }
    return name;
  };
};

//# sourceMappingURL=module$node_modules$get_intrinsic$index.js.map
