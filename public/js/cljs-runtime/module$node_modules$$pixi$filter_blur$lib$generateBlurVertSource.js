shadow$provide.module$node_modules$$pixi$filter_blur$lib$generateBlurVertSource = function(global, require, module, exports) {
  exports.generateBlurVertSource = function(kernelSize, x) {
    const halfLength = Math.ceil(kernelSize / 2);
    let vertSource = "\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position \x3d aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position \x3d filterVertexPosition();\n\n        vec2 textureCoord \x3d filterTextureCoord();\n        %blur%\n    }", 
    blurLoop = "", template;
    x ? template = "vBlurTexCoords[%index%] \x3d  textureCoord + vec2(%sampleIndex% * strength, 0.0);" : template = "vBlurTexCoords[%index%] \x3d  textureCoord + vec2(0.0, %sampleIndex% * strength);";
    for (x = 0; x < kernelSize; x++) {
      let blur = template.replace("%index%", x.toString());
      blur = blur.replace("%sampleIndex%", `${x - (halfLength - 1)}.0`);
      blurLoop += blur;
      blurLoop += "\n";
    }
    return vertSource = vertSource.replace("%blur%", blurLoop), vertSource = vertSource.replace("%size%", kernelSize.toString()), vertSource;
  };
};

//# sourceMappingURL=module$node_modules$$pixi$filter_blur$lib$generateBlurVertSource.js.map
