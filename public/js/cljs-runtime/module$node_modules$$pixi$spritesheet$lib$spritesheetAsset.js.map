{
"version":3,
"file":"module$node_modules$$pixi$spritesheet$lib$spritesheetAsset.js",
"lineCount":58,
"mappings":"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",
"sources":["node_modules/@pixi/spritesheet/lib/spritesheetAsset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$spritesheet$lib$spritesheetAsset\"] = function(global,require,module,exports) {\n\"use strict\";\nvar assets = require(\"@pixi/assets\"), core = require(\"@pixi/core\"), Spritesheet = require(\"./Spritesheet.js\");\nconst validImages = [\n  \"jpg\",\n  \"png\",\n  \"jpeg\",\n  \"avif\",\n  \"webp\",\n  \"s3tc\",\n  \"s3tc_sRGB\",\n  \"etc\",\n  \"etc1\",\n  \"pvrtc\",\n  \"atc\",\n  \"astc\",\n  \"bptc\"\n];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  if (keys.forEach((key) => {\n    out[key] = asset;\n  }), Object.keys(asset.textures).forEach((key) => {\n    out[`${asset.cachePrefix}${key}`] = asset.textures[key];\n  }), !ignoreMultiPack) {\n    const basePath = core.utils.path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      Object.assign(out, getCacheableAssets(\n        [`${basePath}/${asset.data.meta.related_multi_packs[i]}`],\n        item,\n        !0\n      ));\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: core.ExtensionType.Asset,\n  /** Handle the caching of the related Spritesheet Textures */\n  cache: {\n    test: (asset) => asset instanceof Spritesheet.Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, !1)\n  },\n  /** Resolve the the resolution of the asset. */\n  resolver: {\n    test: (value) => {\n      const split = value.split(\"?\")[0].split(\".\"), extension = split.pop(), format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: (value) => {\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  /**\n   * Loader plugin that parses sprite sheets!\n   * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n   * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n   * All textures in the sprite sheet are then added to the cache\n   * @ignore\n   */\n  loader: {\n    name: \"spritesheetLoader\",\n    extension: {\n      type: core.ExtensionType.LoadParser,\n      priority: assets.LoaderParserPriority.Normal\n    },\n    async testParse(asset, options) {\n      return core.utils.path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      const {\n        texture: imageTexture,\n        // if user need to use preloaded texture\n        imageFilename,\n        // if user need to use custom filename (not from jsonFile.meta.image)\n        cachePrefix\n        // if user need to use custom cache prefix\n      } = options?.data ?? {};\n      let basePath = core.utils.path.dirname(options.src);\n      basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1 && (basePath += \"/\");\n      let texture;\n      if (imageTexture && imageTexture.baseTexture)\n        texture = imageTexture;\n      else {\n        const imagePath = assets.copySearchParams(basePath + (imageFilename ?? asset.meta.image), options.src);\n        texture = (await loader.load([imagePath]))[imagePath];\n      }\n      const spritesheet = new Spritesheet.Spritesheet({\n        texture: texture.baseTexture,\n        data: asset,\n        resolutionFilename: options.src,\n        cachePrefix\n      });\n      await spritesheet.parse();\n      const multiPacks = asset?.meta?.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          if (typeof item != \"string\")\n            continue;\n          let itemUrl = basePath + item;\n          options.data?.ignoreMultiPack || (itemUrl = assets.copySearchParams(itemUrl, options.src), promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              ignoreMultiPack: !0\n            }\n          })));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res, res.forEach((item) => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    unload(spritesheet) {\n      spritesheet.destroy(!0);\n    }\n  }\n};\ncore.extensions.add(spritesheetAsset);\nexports.spritesheetAsset = spritesheetAsset;\n//# sourceMappingURL=spritesheetAsset.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getCacheableAssets","keys","asset","ignoreMultiPack","out","forEach","key","Object","textures","cachePrefix","basePath","core","utils","path","dirname","linkedSheets","item","i","assign","data","meta","related_multi_packs","assets","Spritesheet","validImages","spritesheetAsset","extension","ExtensionType","Asset","cache","test","resolver","value","split","pop","format","includes","parse","resolution","parseFloat","settings","RETINA_PREFIX","exec","length","src","loader","name","type","LoadParser","priority","LoaderParserPriority","Normal","testParse","options","extname","toLowerCase","frames","imageTexture","imageFilename","lastIndexOf","baseTexture","texture","imagePath","copySearchParams","image","load","spritesheet","resolutionFilename","multiPacks","Array","isArray","promises","itemUrl","push","res","Promise","all","concat","filter","sp","unload","destroy","extensions","add"]
}
