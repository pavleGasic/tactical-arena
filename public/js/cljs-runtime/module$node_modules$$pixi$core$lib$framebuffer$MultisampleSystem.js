shadow$provide.module$node_modules$$pixi$core$lib$framebuffer$MultisampleSystem = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index");
  global = require("module$node_modules$$pixi$extensions$lib$index");
  class MultisampleSystem {
    constructor(renderer) {
      this.renderer = renderer;
    }
    contextChange(gl) {
      let samples;
      if (1 === this.renderer.context.webGLVersion) {
        var framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        samples = gl.getParameter(gl.SAMPLES);
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
      } else {
        framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING), gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null), samples = gl.getParameter(gl.SAMPLES), gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);
      }
      samples >= constants.MSAA_QUALITY.HIGH ? this.multisample = constants.MSAA_QUALITY.HIGH : samples >= constants.MSAA_QUALITY.MEDIUM ? this.multisample = constants.MSAA_QUALITY.MEDIUM : samples >= constants.MSAA_QUALITY.LOW ? this.multisample = constants.MSAA_QUALITY.LOW : this.multisample = constants.MSAA_QUALITY.NONE;
    }
    destroy() {
    }
  }
  MultisampleSystem.extension = {type:global.ExtensionType.RendererSystem, name:"_multisample"};
  global.extensions.add(MultisampleSystem);
  exports.MultisampleSystem = MultisampleSystem;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$framebuffer$MultisampleSystem.js.map
