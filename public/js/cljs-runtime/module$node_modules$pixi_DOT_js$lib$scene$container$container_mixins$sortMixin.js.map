{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$sortMixin.js",
"lineCount":16,
"mappings":"AAAAA,cAAA,CAAA,8EAAA,GAAmG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAkE3IC,UAASA,aAAY,CAACC,CAAD,EAAIC,CAAJ,CAAO;AAC1B,WAAOD,CAAEE,CAAAA,OAAT,GAAmBD,CAAEC,CAAAA,OAArB;AAD0B;AAI5BJ,SAAQK,CAAAA,SAAR,GAlEkBA,CAChBD,QAAS,CADOC,EAShBC,UAAW,CAAA,CATKD,EAuBhBE,iBAAkB,CAAA,CAvBFF,EAiCZG,UAAS,EAAA;AACX,WAAO,IAAKJ,CAAAA,OAAZ;AADW,GAjCGC,EAoCZG,UAAM,CAACC,KAAD,CAAQ;AACZ,QAAKL,CAAAA,OAAT,KAAqBK,KAArB,KAEA,IAAKL,CAAAA,OACL,GADeK,KACf,EAAA,IAAKC,CAAAA,oBAAL,EAHA;AADgB,GApCFL,EA0ChBK,oBAAoB,EAAG;AACjB,QAAKC,CAAAA,MAAT,KACE,IAAKA,CAAAA,MAAOJ,CAAAA,gBACZ,GAD+B,CAAA,CAC/B,EAAA,IAAKI,CAAAA,MAAOL,CAAAA,SAAZ,GAAwB,CAAA,CAF1B;AAII,QAAKM,CAAAA,iBAAT,KACE,IAAKA,CAAAA,iBAAkBC,CAAAA,kBADzB,GAC8C,CAAA,CAD9C;AALqB,GA1CPR,EAuDhBJ,YAAY,EAAG;AACR,QAAKK,CAAAA,SAAV,KAEA,IAAKA,CAAAA,SACL,GADiB,CAAA,CACjB,EAAA,IAAKQ,CAAAA,QAASC,CAAAA,IAAd,CAAmBd,YAAnB,CAHA;AADa,GAvDCI,CAkElB;AAtE2I,CAA3I;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/container-mixins/sortMixin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$sortMixin\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst sortMixin = {\n  _zIndex: 0,\n  /**\n   * Should children be sorted by zIndex at the next render call.\n   *\n   * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n   * @type {boolean}\n   * @memberof scene.Container#\n   */\n  sortDirty: false,\n  /**\n   * If set to true, the container will sort its children by `zIndex` value\n   * when the next render is called, or manually if `sortChildren()` is called.\n   *\n   * This actually changes the order of elements in the array, so should be treated\n   * as a basic solution that is not performant compared to other solutions,\n   * such as {@link https://github.com/pixijs/layers PixiJS Layers}\n   *\n   * Also be aware of that this may not work nicely with the `addChildAt()` function,\n   * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n   * @type {boolean}\n   * @memberof scene.Container#\n   */\n  sortableChildren: false,\n  /**\n   * The zIndex of the container.\n   *\n   * Setting this value, will automatically set the parent to be sortable. Children will be automatically\n   * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n   * and thus rendered on top of other display objects within the same container.\n   * @see scene.Container#sortableChildren\n   * @memberof scene.Container#\n   */\n  get zIndex() {\n    return this._zIndex;\n  },\n  set zIndex(value) {\n    if (this._zIndex === value)\n      return;\n    this._zIndex = value;\n    this.depthOfChildModified();\n  },\n  depthOfChildModified() {\n    if (this.parent) {\n      this.parent.sortableChildren = true;\n      this.parent.sortDirty = true;\n    }\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n  },\n  /**\n   * Sorts children by zIndex.\n   * @memberof scene.Container#\n   */\n  sortChildren() {\n    if (!this.sortDirty)\n      return;\n    this.sortDirty = false;\n    this.children.sort(sortChildren);\n  }\n};\nfunction sortChildren(a, b) {\n  return a._zIndex - b._zIndex;\n}\n\nexports.sortMixin = sortMixin;\n//# sourceMappingURL=sortMixin.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","sortChildren","a","b","_zIndex","sortMixin","sortDirty","sortableChildren","zIndex","value","depthOfChildModified","parent","parentRenderGroup","structureDidChange","children","sort"]
}
