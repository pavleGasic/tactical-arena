{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$renderTarget$GlRenderTargetAdaptor.js",
"lineCount":157,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/renderTarget/GlRenderTargetAdaptor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$renderTarget$GlRenderTargetAdaptor\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Rectangle = require('../../../../maths/shapes/Rectangle.js');\nvar warn = require('../../../../utils/logging/warn.js');\nvar CanvasSource = require('../../shared/texture/sources/CanvasSource.js');\nvar _const = require('../const.js');\nvar GlRenderTarget = require('../GlRenderTarget.js');\n\n\"use strict\";\nclass GlRenderTargetAdaptor {\n  constructor() {\n    this._clearColorCache = [0, 0, 0, 0];\n    this._viewPortCache = new Rectangle.Rectangle();\n  }\n  init(renderer, renderTargetSystem) {\n    this._renderer = renderer;\n    this._renderTargetSystem = renderTargetSystem;\n    renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._clearColorCache = [0, 0, 0, 0];\n    this._viewPortCache = new Rectangle.Rectangle();\n  }\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const renderer = this._renderer;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture);\n    const gl = renderer.gl;\n    this.finishRenderPass(sourceRenderSurfaceTexture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n    renderer.texture.bind(destinationTexture, 0);\n    gl.copyTexSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      originDest.x,\n      originDest.y,\n      originSrc.x,\n      originSrc.y,\n      size.width,\n      size.height\n    );\n    return destinationTexture;\n  }\n  startRenderPass(renderTarget, clear = true, clearColor, viewport) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const source = renderTarget.colorTexture;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    let viewPortY = viewport.y;\n    if (renderTarget.isRoot) {\n      viewPortY = source.pixelHeight - viewport.height;\n    }\n    renderTarget.colorTextures.forEach((texture) => {\n      this._renderer.texture.unbind(texture);\n    });\n    const gl = this._renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n    const viewPortCache = this._viewPortCache;\n    if (viewPortCache.x !== viewport.x || viewPortCache.y !== viewPortY || viewPortCache.width !== viewport.width || viewPortCache.height !== viewport.height) {\n      viewPortCache.x = viewport.x;\n      viewPortCache.y = viewPortY;\n      viewPortCache.width = viewport.width;\n      viewPortCache.height = viewport.height;\n      gl.viewport(\n        viewport.x,\n        viewPortY,\n        viewport.width,\n        viewport.height\n      );\n    }\n    if (!gpuRenderTarget.depthStencilRenderBuffer && (renderTarget.stencil || renderTarget.depth)) {\n      this._initStencil(gpuRenderTarget);\n    }\n    this.clear(renderTarget, clear, clearColor);\n  }\n  finishRenderPass(renderTarget) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (!glRenderTarget.msaa)\n      return;\n    const gl = this._renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n    gl.blitFramebuffer(\n      0,\n      0,\n      glRenderTarget.width,\n      glRenderTarget.height,\n      0,\n      0,\n      glRenderTarget.width,\n      glRenderTarget.height,\n      gl.COLOR_BUFFER_BIT,\n      gl.NEAREST\n    );\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n  }\n  initGpuRenderTarget(renderTarget) {\n    const renderer = this._renderer;\n    const gl = renderer.gl;\n    const glRenderTarget = new GlRenderTarget.GlRenderTarget();\n    const colorTexture = renderTarget.colorTexture;\n    if (CanvasSource.CanvasSource.test(colorTexture.resource)) {\n      this._renderer.context.ensureCanvasSize(renderTarget.colorTexture.resource);\n      glRenderTarget.framebuffer = null;\n      return glRenderTarget;\n    }\n    this._initColor(renderTarget, glRenderTarget);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return glRenderTarget;\n  }\n  destroyGpuRenderTarget(gpuRenderTarget) {\n    const gl = this._renderer.gl;\n    if (gpuRenderTarget.framebuffer) {\n      gl.deleteFramebuffer(gpuRenderTarget.framebuffer);\n      gpuRenderTarget.framebuffer = null;\n    }\n    if (gpuRenderTarget.resolveTargetFramebuffer) {\n      gl.deleteFramebuffer(gpuRenderTarget.resolveTargetFramebuffer);\n      gpuRenderTarget.resolveTargetFramebuffer = null;\n    }\n    if (gpuRenderTarget.depthStencilRenderBuffer) {\n      gl.deleteRenderbuffer(gpuRenderTarget.depthStencilRenderBuffer);\n      gpuRenderTarget.depthStencilRenderBuffer = null;\n    }\n    gpuRenderTarget.msaaRenderBuffer.forEach((renderBuffer) => {\n      gl.deleteRenderbuffer(renderBuffer);\n    });\n    gpuRenderTarget.msaaRenderBuffer = null;\n  }\n  clear(_renderTarget, clear, clearColor) {\n    if (!clear)\n      return;\n    const renderTargetSystem = this._renderTargetSystem;\n    if (typeof clear === \"boolean\") {\n      clear = clear ? _const.CLEAR.ALL : _const.CLEAR.NONE;\n    }\n    const gl = this._renderer.gl;\n    if (clear & _const.CLEAR.COLOR) {\n      clearColor ?? (clearColor = renderTargetSystem.defaultClearColor);\n      const clearColorCache = this._clearColorCache;\n      const clearColorArray = clearColor;\n      if (clearColorCache[0] !== clearColorArray[0] || clearColorCache[1] !== clearColorArray[1] || clearColorCache[2] !== clearColorArray[2] || clearColorCache[3] !== clearColorArray[3]) {\n        clearColorCache[0] = clearColorArray[0];\n        clearColorCache[1] = clearColorArray[1];\n        clearColorCache[2] = clearColorArray[2];\n        clearColorCache[3] = clearColorArray[3];\n        gl.clearColor(clearColorArray[0], clearColorArray[1], clearColorArray[2], clearColorArray[3]);\n      }\n    }\n    gl.clear(clear);\n  }\n  resizeGpuRenderTarget(renderTarget) {\n    if (renderTarget.isRoot)\n      return;\n    const renderTargetSystem = this._renderTargetSystem;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    this._resizeColor(renderTarget, glRenderTarget);\n    if (renderTarget.stencil || renderTarget.depth) {\n      this._resizeStencil(glRenderTarget);\n    }\n  }\n  _initColor(renderTarget, glRenderTarget) {\n    const renderer = this._renderer;\n    const gl = renderer.gl;\n    const resolveTargetFramebuffer = gl.createFramebuffer();\n    glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n    glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n    glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      const source = colorTexture.source;\n      if (source.antialias) {\n        if (renderer.context.supports.msaa) {\n          glRenderTarget.msaa = true;\n        } else {\n          warn.warn(\"[RenderTexture] Antialiasing on textures is not supported in WebGL1\");\n        }\n      }\n      renderer.texture.bindSource(source, 0);\n      const glSource = renderer.texture.getGlSource(source);\n      const glTexture = glSource.texture;\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0 + i,\n        3553,\n        // texture.target,\n        glTexture,\n        0\n      );\n    });\n    if (glRenderTarget.msaa) {\n      const viewFramebuffer = gl.createFramebuffer();\n      glRenderTarget.framebuffer = viewFramebuffer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n      renderTarget.colorTextures.forEach((_, i) => {\n        const msaaRenderBuffer = gl.createRenderbuffer();\n        glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n      });\n    } else {\n      glRenderTarget.framebuffer = resolveTargetFramebuffer;\n    }\n    this._resizeColor(renderTarget, glRenderTarget);\n  }\n  _resizeColor(renderTarget, glRenderTarget) {\n    const source = renderTarget.colorTexture.source;\n    glRenderTarget.width = source.pixelWidth;\n    glRenderTarget.height = source.pixelHeight;\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      if (i === 0)\n        return;\n      colorTexture.source.resize(source.width, source.height, source._resolution);\n    });\n    if (glRenderTarget.msaa) {\n      const renderer = this._renderer;\n      const gl = renderer.gl;\n      const viewFramebuffer = glRenderTarget.framebuffer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n      renderTarget.colorTextures.forEach((colorTexture, i) => {\n        const source2 = colorTexture.source;\n        renderer.texture.bindSource(source2, 0);\n        const glSource = renderer.texture.getGlSource(source2);\n        const glInternalFormat = glSource.internalFormat;\n        const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n        gl.bindRenderbuffer(\n          gl.RENDERBUFFER,\n          msaaRenderBuffer\n        );\n        gl.renderbufferStorageMultisample(\n          gl.RENDERBUFFER,\n          4,\n          glInternalFormat,\n          source2.pixelWidth,\n          source2.pixelHeight\n        );\n        gl.framebufferRenderbuffer(\n          gl.FRAMEBUFFER,\n          gl.COLOR_ATTACHMENT0 + i,\n          gl.RENDERBUFFER,\n          msaaRenderBuffer\n        );\n      });\n    }\n  }\n  _initStencil(glRenderTarget) {\n    if (glRenderTarget.framebuffer === null)\n      return;\n    const gl = this._renderer.gl;\n    const depthStencilRenderBuffer = gl.createRenderbuffer();\n    glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n    gl.bindRenderbuffer(\n      gl.RENDERBUFFER,\n      depthStencilRenderBuffer\n    );\n    gl.framebufferRenderbuffer(\n      gl.FRAMEBUFFER,\n      gl.DEPTH_STENCIL_ATTACHMENT,\n      gl.RENDERBUFFER,\n      depthStencilRenderBuffer\n    );\n    this._resizeStencil(glRenderTarget);\n  }\n  _resizeStencil(glRenderTarget) {\n    const gl = this._renderer.gl;\n    gl.bindRenderbuffer(\n      gl.RENDERBUFFER,\n      glRenderTarget.depthStencilRenderBuffer\n    );\n    if (glRenderTarget.msaa) {\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        4,\n        gl.DEPTH24_STENCIL8,\n        glRenderTarget.width,\n        glRenderTarget.height\n      );\n    } else {\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        this._renderer.context.webGLVersion === 2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n        glRenderTarget.width,\n        glRenderTarget.height\n      );\n    }\n  }\n  prerender(renderTarget) {\n    const resource = renderTarget.colorTexture.resource;\n    if (this._renderer.context.multiView && CanvasSource.CanvasSource.test(resource)) {\n      this._renderer.context.ensureCanvasSize(resource);\n    }\n  }\n  postrender(renderTarget) {\n    if (!this._renderer.context.multiView)\n      return;\n    if (CanvasSource.CanvasSource.test(renderTarget.colorTexture.resource)) {\n      const contextCanvas = this._renderer.context.canvas;\n      const canvasSource = renderTarget.colorTexture;\n      canvasSource.context2D.drawImage(\n        contextCanvas,\n        0,\n        canvasSource.pixelHeight - contextCanvas.height\n      );\n    }\n  }\n}\n\nexports.GlRenderTargetAdaptor = GlRenderTargetAdaptor;\n//# sourceMappingURL=GlRenderTargetAdaptor.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Rectangle","warn","CanvasSource","_const","GlRenderTarget","GlRenderTargetAdaptor","constructor","_clearColorCache","_viewPortCache","init","renderer","renderTargetSystem","_renderer","_renderTargetSystem","runners","contextChange","add","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","size","originDest","glRenderTarget","getGpuRenderTarget","gl","finishRenderPass","bindFramebuffer","FRAMEBUFFER","resolveTargetFramebuffer","texture","bind","copyTexSubImage2D","TEXTURE_2D","x","y","width","height","startRenderPass","renderTarget","clear","clearColor","viewport","source","colorTexture","gpuRenderTarget","viewPortY","isRoot","pixelHeight","colorTextures","forEach","unbind","framebuffer","viewPortCache","depthStencilRenderBuffer","stencil","depth","_initStencil","msaa","READ_FRAMEBUFFER","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST","initGpuRenderTarget","test","resource","context","ensureCanvasSize","_initColor","destroyGpuRenderTarget","deleteFramebuffer","deleteRenderbuffer","msaaRenderBuffer","renderBuffer","_renderTarget","CLEAR","ALL","NONE","COLOR","defaultClearColor","clearColorCache","clearColorArray","resizeGpuRenderTarget","_resizeColor","_resizeStencil","createFramebuffer","pixelWidth","i","antialias","supports","bindSource","glTexture","getGlSource","glSource","framebufferTexture2D","COLOR_ATTACHMENT0","viewFramebuffer","_","createRenderbuffer","resize","_resolution","source2","glInternalFormat","internalFormat","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","DEPTH24_STENCIL8","renderbufferStorage","webGLVersion","DEPTH_STENCIL","prerender","multiView","postrender","contextCanvas","canvas","canvasSource","context2D","drawImage"]
}
