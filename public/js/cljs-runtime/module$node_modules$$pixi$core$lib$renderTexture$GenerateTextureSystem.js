shadow$provide.module$node_modules$$pixi$core$lib$renderTexture$GenerateTextureSystem = function(global, require, module, exports) {
  global = require("module$node_modules$$pixi$extensions$lib$index");
  var math = require("module$node_modules$$pixi$math$lib$index"), RenderTexture = require("module$node_modules$$pixi$core$lib$renderTexture$RenderTexture");
  const tempTransform = new math.Transform(), tempRect = new math.Rectangle();
  class GenerateTextureSystem {
    constructor(renderer) {
      this.renderer = renderer;
      this._tempMatrix = new math.Matrix();
    }
    generateTexture(displayObject, options) {
      const {region:manualRegion, ...textureOptions} = options || {};
      options = manualRegion?.copyTo(tempRect) || displayObject.getLocalBounds(tempRect, !0);
      var resolution = textureOptions.resolution || this.renderer.resolution;
      options.width = Math.max(options.width, 1 / resolution);
      options.height = Math.max(options.height, 1 / resolution);
      textureOptions.width = options.width;
      textureOptions.height = options.height;
      textureOptions.resolution = resolution;
      textureOptions.multisample ?? (textureOptions.multisample = this.renderer.multisample);
      resolution = RenderTexture.RenderTexture.create(textureOptions);
      this._tempMatrix.tx = -options.x;
      this._tempMatrix.ty = -options.y;
      options = displayObject.transform;
      return displayObject.transform = tempTransform, this.renderer.render(displayObject, {renderTexture:resolution, transform:this._tempMatrix, skipUpdateTransform:!!displayObject.parent, blit:!0}), displayObject.transform = options, resolution;
    }
    destroy() {
    }
  }
  GenerateTextureSystem.extension = {type:[global.ExtensionType.RendererSystem, global.ExtensionType.CanvasRendererSystem], name:"textureGenerator"};
  global.extensions.add(GenerateTextureSystem);
  exports.GenerateTextureSystem = GenerateTextureSystem;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$renderTexture$GenerateTextureSystem.js.map
