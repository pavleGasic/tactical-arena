{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$RenderContainer.js",
"lineCount":24,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,GAAwF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG5HC,QAAAA,GAAgBH,OAAA,CAAQ,8DAAR,CAAhBG;AAEJ,cAAA;AACA,OAAMC,gBAAN,QAA8BD,OAAcA,CAAAA,aAA5C;AAIEE,eAAW,CAACC,OAAD,CAAU;AACI,gBAAvB,KAAI,MAAOA,QAAX,KACEA,OADF,GACY,CAAEC,OAAQD,OAAV,CADZ;AAGA,YAAM,CAAEC,MAAF,EAAU,GAAGC,IAAb,CAAA,GAAsBF,OAA5B;AACA,WAAA,CAAM,CACJG,MAAO,iBADH,EAEJ,GAAGD,IAFC,CAAN,CAAA;AAIA,UAAKE,CAAAA,YAAL,GAAoB,cAApB;AACA,UAAKC,CAAAA,OAAL,GAAe,CAAA,CAAf;AACIJ,YAAJ,KACE,IAAKA,CAAAA,MADP,GACgBA,MADhB;AAEA,UAAKK,CAAAA,aAAL,GAAqBN,OAAQM,CAAAA,aAA7B,IAA+C,CAAA,EAAA,IAAM,CAAA,CAAN,CAA/C;AACA,UAAKC,CAAAA,SAAL,GAAiBP,OAAQO,CAAAA,SAAzB,IAAuC,CAAA,EAAA,IAAM,CAAA,CAAN,CAAvC;AAdmB;AAiBrBC,gBAAY,EAAG;AACb,UAAKC,CAAAA,OAAQC,CAAAA,KAAb,EAAA;AACA,UAAKH,CAAAA,SAAL,CAAe,IAAKE,CAAAA,OAApB,CAAA;AAFa;AAQfR,UAAM,CAACU,SAAD,CAAY;;AA7BpB;AAiCAf,SAAQE,CAAAA,eAAR,GAA0BA,eAA1B;AAvCgI,CAAhI;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/RenderContainer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$RenderContainer\"] = function(global,require,module,exports) {\n'use strict';\n\nvar ViewContainer = require('../view/ViewContainer.js');\n\n\"use strict\";\nclass RenderContainer extends ViewContainer.ViewContainer {\n  /**\n   * @param options - The options for the container.\n   */\n  constructor(options) {\n    if (typeof options === \"function\") {\n      options = { render: options };\n    }\n    const { render, ...rest } = options;\n    super({\n      label: \"RenderContainer\",\n      ...rest\n    });\n    this.renderPipeId = \"customRender\";\n    this.batched = false;\n    if (render)\n      this.render = render;\n    this.containsPoint = options.containsPoint ?? (() => false);\n    this.addBounds = options.addBounds ?? (() => false);\n  }\n  /** @private */\n  updateBounds() {\n    this._bounds.clear();\n    this.addBounds(this._bounds);\n  }\n  /**\n   * An overridable function that can be used to render the object using the current renderer.\n   * @param _renderer - The current renderer\n   */\n  render(_renderer) {\n  }\n}\n\nexports.RenderContainer = RenderContainer;\n//# sourceMappingURL=RenderContainer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ViewContainer","RenderContainer","constructor","options","render","rest","label","renderPipeId","batched","containsPoint","addBounds","updateBounds","_bounds","clear","_renderer"]
}
