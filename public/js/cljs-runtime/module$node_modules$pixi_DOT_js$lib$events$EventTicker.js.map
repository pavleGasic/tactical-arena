{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$events$EventTicker.js",
"lineCount":52,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/events/EventTicker.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$events$EventTicker\"] = function(global,require,module,exports) {\n'use strict';\n\nvar _const = require('../ticker/const.js');\nvar Ticker = require('../ticker/Ticker.js');\n\n\"use strict\";\nclass EventsTickerClass {\n  constructor() {\n    /** The frequency that fake events will be fired. */\n    this.interactionFrequency = 10;\n    this._deltaTime = 0;\n    this._didMove = false;\n    this._tickerAdded = false;\n    this._pauseUpdate = true;\n  }\n  /**\n   * Initializes the event ticker.\n   * @param events - The event system.\n   */\n  init(events) {\n    this.removeTickerListener();\n    this.events = events;\n    this.interactionFrequency = 10;\n    this._deltaTime = 0;\n    this._didMove = false;\n    this._tickerAdded = false;\n    this._pauseUpdate = true;\n  }\n  /** Whether to pause the update checks or not. */\n  get pauseUpdate() {\n    return this._pauseUpdate;\n  }\n  set pauseUpdate(paused) {\n    this._pauseUpdate = paused;\n  }\n  /** Adds the ticker listener. */\n  addTickerListener() {\n    if (this._tickerAdded || !this.domElement) {\n      return;\n    }\n    Ticker.Ticker.system.add(this._tickerUpdate, this, _const.UPDATE_PRIORITY.INTERACTION);\n    this._tickerAdded = true;\n  }\n  /** Removes the ticker listener. */\n  removeTickerListener() {\n    if (!this._tickerAdded) {\n      return;\n    }\n    Ticker.Ticker.system.remove(this._tickerUpdate, this);\n    this._tickerAdded = false;\n  }\n  /** Sets flag to not fire extra events when the user has already moved there mouse */\n  pointerMoved() {\n    this._didMove = true;\n  }\n  /** Updates the state of interactive objects. */\n  _update() {\n    if (!this.domElement || this._pauseUpdate) {\n      return;\n    }\n    if (this._didMove) {\n      this._didMove = false;\n      return;\n    }\n    const rootPointerEvent = this.events[\"_rootPointerEvent\"];\n    if (this.events.supportsTouchEvents && rootPointerEvent.pointerType === \"touch\") {\n      return;\n    }\n    globalThis.document.dispatchEvent(new PointerEvent(\"pointermove\", {\n      clientX: rootPointerEvent.clientX,\n      clientY: rootPointerEvent.clientY,\n      pointerType: rootPointerEvent.pointerType,\n      pointerId: rootPointerEvent.pointerId\n    }));\n  }\n  /**\n   * Updates the state of interactive objects if at least {@link interactionFrequency}\n   * milliseconds have passed since the last invocation.\n   *\n   * Invoked by a throttled ticker update from {@link Ticker.system}.\n   * @param ticker - The throttled ticker.\n   */\n  _tickerUpdate(ticker) {\n    this._deltaTime += ticker.deltaTime;\n    if (this._deltaTime < this.interactionFrequency) {\n      return;\n    }\n    this._deltaTime = 0;\n    this._update();\n  }\n}\nconst EventsTicker = new EventsTickerClass();\n\nexports.EventsTicker = EventsTicker;\n//# sourceMappingURL=EventTicker.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","Ticker","EventsTickerClass","constructor","interactionFrequency","_deltaTime","_tickerAdded","_didMove","_pauseUpdate","init","events","removeTickerListener","paused","addTickerListener","domElement","system","add","_tickerUpdate","UPDATE_PRIORITY","INTERACTION","remove","pointerMoved","_update","rootPointerEvent","supportsTouchEvents","pointerType","globalThis","document","dispatchEvent","PointerEvent","clientX","clientY","pointerId","ticker","deltaTime","EventsTicker"]
}
