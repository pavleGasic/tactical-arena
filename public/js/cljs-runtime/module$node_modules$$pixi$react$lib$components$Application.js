shadow$provide.module$node_modules$$pixi$react$lib$components$Application = function(global, require, module, exports) {
  var jsxRuntime = require("module$node_modules$react$jsx_runtime"), itsFine = require("module$node_modules$its_fine$dist$index_cjs"), pixi_js = require("module$node_modules$pixi_DOT_js$lib$index"), react = require("module$node_modules$react$index"), createRoot = require("module$node_modules$$pixi$react$lib$core$createRoot"), roots = require("module$node_modules$$pixi$react$lib$core$roots"), processUnmountQueue = require("module$node_modules$$pixi$react$lib$helpers$processUnmountQueue"), queueForUnmount = 
  require("module$node_modules$$pixi$react$lib$helpers$queueForUnmount"), unqueueForUnmount = require("module$node_modules$$pixi$react$lib$helpers$unqueueForUnmount"), useIsomorphicLayoutEffect = require("module$node_modules$$pixi$react$lib$hooks$useIsomorphicLayoutEffect");
  "use strict";
  const originalDefaultTextStyle = {...pixi_js.TextStyle.defaultTextStyle}, ApplicationImplementation = react.forwardRef(function(props, forwardedRef) {
    const {children, className, defaultTextStyle, extensions, onInit, resizeTo, ...applicationProps} = props, Bridge = itsFine.useContextBridge(), applicationRef = react.useRef(null), canvasRef = react.useRef(null), extensionsRef = react.useRef(new Set());
    react.useImperativeHandle(forwardedRef, () => ({getApplication() {
      return applicationRef.current;
    }, getCanvas() {
      return canvasRef.current;
    }}));
    const updateResizeTo = react.useCallback(() => {
      const application = applicationRef.current;
      application && (resizeTo ? "current" in resizeTo ? resizeTo.current instanceof HTMLElement && (application.resizeTo = resizeTo.current) : application.resizeTo = resizeTo : application.resizeTo = void 0);
    }, [resizeTo]), handleInit = react.useCallback(application => {
      processUnmountQueue.processUnmountQueue();
      applicationRef.current = application;
      updateResizeTo();
      onInit?.(application);
    }, [onInit]);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
      if (extensions) {
        const extensionsToHandle = [...extensions], extensionsState = extensionsRef.current;
        for (const extension of extensionsState.values()) {
          const extensionIndex = extensionsToHandle.indexOf(extension);
          -1 === extensionIndex && (pixi_js.extensions.remove(extension), extensionsState.delete(extension));
          extensionsToHandle.splice(extensionIndex, 1);
        }
        for (const extension in extensionsToHandle) {
          pixi_js.extensions.add(extension), extensionsState.add(extension);
        }
      }
    }, [extensions]);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
      const canvasElement = canvasRef.current;
      if (canvasElement) {
        let root = roots.roots.get(canvasElement);
        root || (root = createRoot.createRoot(canvasElement, {onInit:handleInit}));
        root.render(jsxRuntime.jsx(Bridge, {children}), applicationProps);
      }
    }, [applicationProps, children, handleInit, resizeTo]);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
      updateResizeTo();
    }, [resizeTo]);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
      defaultTextStyle ? Object.assign(pixi_js.TextStyle.defaultTextStyle, defaultTextStyle) : Object.assign(pixi_js.TextStyle.defaultTextStyle, originalDefaultTextStyle);
    }, [defaultTextStyle]);
    react.useEffect(() => {
      const canvasElement = canvasRef.current;
      if (canvasElement) {
        return unqueueForUnmount.unqueueForUnmount(canvasElement), () => {
          queueForUnmount.queueForUnmount(canvasElement);
        };
      }
    }, []);
    return jsxRuntime.jsx("canvas", {ref:canvasRef, className});
  });
  global = react.forwardRef(function(props, ref) {
    return jsxRuntime.jsx(itsFine.FiberProvider, {children:jsxRuntime.jsx(ApplicationImplementation, {ref, ...props})});
  });
  exports.Application = global;
};

//# sourceMappingURL=module$node_modules$$pixi$react$lib$components$Application.js.map
