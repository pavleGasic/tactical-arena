{
"version":3,
"file":"module$node_modules$$pixi$app$lib$Application.js",
"lineCount":38,
"mappings":"AAAAA,cAAA,CAAA,6CAAA,GAAkE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAEtGC,OAAOH,OAAA,CAAQ,0CAAR,CAF+F,EAExEI,UAAUJ,OAAA,CAAQ,6CAAR,CAF8D;AAGrF,QAAA,yDAAA,KAAA;AAInBK,eAAW,CAACC,OAAD,CAAU;AACnB,UAAKC,CAAAA,KAAL,GAAa,IAAIH,OAAQI,CAAAA,SAAZ,EAAb;AAAsCF,aAAA,GAAUG,MAAOC,CAAAA,MAAP,CAAc,CAC5DC,YAAa,CAAA,CAD+C,CAAd,EAE7CL,OAF6C,CAAV;AAEzB,UAAKM,CAAAA,QAAL,GAAgBT,IAAKU,CAAAA,kBAAL,CAAwBP,OAAxB,CAAhB;AAAkDQ,4DAAcC,CAAAA,QAASC,CAAAA,OAAvB,CAAgCC,MAAD,IAAY;AACxGA,cAAOC,CAAAA,IAAKC,CAAAA,IAAZ,CAAiB,IAAjB,EAAuBb,OAAvB,CAAA;AADwG,OAA3C,CAAA;AAH5C;AAQrBc,UAAM,EAAG;AACP,UAAKR,CAAAA,QAASQ,CAAAA,MAAd,CAAqB,IAAKb,CAAAA,KAA1B,CAAA;AADO;AAQL,YAAO,EAAA;AACT,aAAO,IAAKK,CAAAA,QAAUS,EAAAA,IAAtB;AADS;AAQP,cAAS,EAAA;AACX,aAAO,IAAKT,CAAAA,QAAUU,EAAAA,MAAtB;AADW;AAebC,WAAO,CAACC,UAAD,EAAaC,YAAb,CAA2B;AAChC,YAAMC,UAAUZ,sDAAcC,CAAAA,QAASY,CAAAA,KAAvB,CAA6B,CAA7B,CAAhB;AACAD,aAAQE,CAAAA,OAAR,EAAA;AAAmBF,aAAQV,CAAAA,OAAR,CAAiBC,MAAD,IAAY;AAC7CA,cAAOM,CAAAA,OAAQJ,CAAAA,IAAf,CAAoB,IAApB,CAAA;AAD6C,OAA5B,CAAA;AAEf,UAAKZ,CAAAA,KAAMgB,CAAAA,OAAX,CAAmBE,YAAnB,CAAA;AAAkC,UAAKlB,CAAAA,KAAL,GAAa,IAAb;AAAmB,UAAKK,CAAAA,QAASW,CAAAA,OAAd,CAAsBC,UAAtB,CAAA;AAAmC,UAAKZ,CAAAA,QAAL,GAAgB,IAAhB;AAJ5D;AA3Cf,GAAA;AAAfiB,QAAAA,GAAe,sDAAfA;AAkDNA,QAAad,CAAAA,QAAb,GAAwB,EAAxB;AAEAZ,MAAK2B,CAAAA,UAAWC,CAAAA,YAAhB,CAA6B5B,IAAK6B,CAAAA,aAAcC,CAAAA,WAAhD,EADkBJ,MACuDd,CAAAA,QAAzE,CAAA;AACAb,SAAQ+B,CAAAA,WAAR,GAFkBJ,MAElB;AAxD0G,CAA1G;;",
"sources":["node_modules/@pixi/app/lib/Application.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$app$lib$Application\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), display = require(\"@pixi/display\");\nconst _Application = class _Application2 {\n  /**\n   * @param options - The optional application and renderer parameters.\n   */\n  constructor(options) {\n    this.stage = new display.Container(), options = Object.assign({\n      forceCanvas: !1\n    }, options), this.renderer = core.autoDetectRenderer(options), _Application2._plugins.forEach((plugin) => {\n      plugin.init.call(this, options);\n    });\n  }\n  /** Render the current stage. */\n  render() {\n    this.renderer.render(this.stage);\n  }\n  /**\n   * Reference to the renderer's canvas element.\n   * @member {PIXI.ICanvas}\n   * @readonly\n   */\n  get view() {\n    return this.renderer?.view;\n  }\n  /**\n   * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n   * @member {PIXI.Rectangle}\n   * @readonly\n   */\n  get screen() {\n    return this.renderer?.screen;\n  }\n  /**\n   * Destroy and don't use after this.\n   * @param {boolean} [removeView=false] - Automatically remove canvas from DOM.\n   * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'stageOptions' will be passed on to those calls.\n   * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the texture of the child sprite\n   * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the base texture of the child sprite\n   */\n  destroy(removeView, stageOptions) {\n    const plugins = _Application2._plugins.slice(0);\n    plugins.reverse(), plugins.forEach((plugin) => {\n      plugin.destroy.call(this);\n    }), this.stage.destroy(stageOptions), this.stage = null, this.renderer.destroy(removeView), this.renderer = null;\n  }\n};\n_Application._plugins = [];\nlet Application = _Application;\ncore.extensions.handleByList(core.ExtensionType.Application, Application._plugins);\nexports.Application = Application;\n//# sourceMappingURL=Application.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","display","constructor","options","stage","Container","Object","assign","forceCanvas","renderer","autoDetectRenderer","_Application2","_plugins","forEach","plugin","init","call","render","view","screen","destroy","removeView","stageOptions","plugins","slice","reverse","_Application","extensions","handleByList","ExtensionType","Application"]
}
