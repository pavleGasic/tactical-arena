shadow$provide.module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx2$loadKTX2 = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$LoaderParser");
  var createTexture = require("module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$utils$createTexture"), checkExtension = require("module$node_modules$pixi_DOT_js$lib$assets$utils$checkExtension");
  module = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  var CompressedSource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$CompressedSource"), getSupportedTextureFormats = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getSupportedTextureFormats"), loadKTX2onWorker = require("module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx2$worker$loadKTX2onWorker");
  "use strict";
  exports.loadKTX2 = {extension:{type:module.ExtensionType.LoadParser, priority:global.LoaderParserPriority.High, name:"loadKTX2"}, name:"loadKTX2", test(url) {
    return checkExtension.checkExtension(url, ".ktx2");
  }, async load(url, _asset, loader) {
    _asset = await getSupportedTextureFormats.getSupportedTextureFormats();
    _asset = await loadKTX2onWorker.loadKTX2onWorker(url, _asset);
    _asset = new CompressedSource.CompressedSource(_asset);
    return createTexture.createTexture(_asset, loader, url);
  }, async unload(texture) {
    Array.isArray(texture) ? texture.forEach(t => t.destroy(!0)) : texture.destroy(!0);
  }};
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx2$loadKTX2.js.map
