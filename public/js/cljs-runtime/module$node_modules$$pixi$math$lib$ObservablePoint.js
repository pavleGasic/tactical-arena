shadow$provide.module$node_modules$$pixi$math$lib$ObservablePoint = function(global, require, module, exports) {
  class ObservablePoint {
    constructor(cb, scope, x = 0, y = 0) {
      this._x = x;
      this._y = y;
      this.cb = cb;
      this.scope = scope;
    }
    clone(cb = this.cb, scope = this.scope) {
      return new ObservablePoint(cb, scope, this._x, this._y);
    }
    set(x = 0, y = x) {
      return (this._x !== x || this._y !== y) && (this._x = x, this._y = y, this.cb.call(this.scope)), this;
    }
    copyFrom(p) {
      return (this._x !== p.x || this._y !== p.y) && (this._x = p.x, this._y = p.y, this.cb.call(this.scope)), this;
    }
    copyTo(p) {
      return p.set(this._x, this._y), p;
    }
    equals(p) {
      return p.x === this._x && p.y === this._y;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x !== value && (this._x = value, this.cb.call(this.scope));
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y !== value && (this._y = value, this.cb.call(this.scope));
    }
  }
  ObservablePoint.prototype.toString = function() {
    return `[@pixi/math:ObservablePoint x=${this.x} y=${this.y} scope=${this.scope}]`;
  };
  exports.ObservablePoint = ObservablePoint;
};

//# sourceMappingURL=module$node_modules$$pixi$math$lib$ObservablePoint.js.map
