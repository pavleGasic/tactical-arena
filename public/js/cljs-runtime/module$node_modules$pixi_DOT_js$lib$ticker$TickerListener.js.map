{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$ticker$TickerListener.js",
"lineCount":40,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,GAA8E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAItH,OAAMC,eAAN;AASEC,eAAW,CAACC,EAAD,EAAKC,OAAA,GAAU,IAAf,EAAqBC,QAAA,GAAW,CAAhC,EAAmCC,IAAA,GAAO,CAAA,CAA1C,CAAiD;AAI1D,UAAKC,CAAAA,QAAL,GAFA,IAAKC,CAAAA,IAEL,GAFY,IAEZ;AAEA,UAAKC,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AACA,UAAKC,CAAAA,GAAL,GAAWP,EAAX;AACA,UAAKQ,CAAAA,QAAL,GAAgBP,OAAhB;AACA,UAAKC,CAAAA,QAAL,GAAgBA,QAAhB;AACA,UAAKO,CAAAA,KAAL,GAAaN,IAAb;AAV0D;AAkB5DO,SAAK,CAACV,EAAD,EAAKC,OAAA,GAAU,IAAf,CAAqB;AACxB,aAAO,IAAKM,CAAAA,GAAZ,KAAoBP,EAApB,IAA0B,IAAKQ,CAAAA,QAA/B,KAA4CP,OAA5C;AADwB;AAQ1BU,QAAI,CAACC,MAAD,CAAS;AACP,UAAKL,CAAAA,GAAT,KACM,IAAKC,CAAAA,QAAT,GACE,IAAKD,CAAAA,GAAIM,CAAAA,IAAT,CAAc,IAAKL,CAAAA,QAAnB,EAA6BI,MAA7B,CADF,GAGE,IAAKL,CAAAA,GAAL,CAASK,MAAT,CAJJ;AAOME,YAAAA,GAAW,IAAKT,CAAAA,IAAhBS;AACF,UAAKL,CAAAA,KAAT,IACE,IAAKM,CAAAA,OAAL,CAAa,CAAA,CAAb,CADF;AAGI,UAAKT,CAAAA,UAAT,KACE,IAAKD,CAAAA,IADP,GACc,IADd;AAGA,aAAOS,MAAP;AAfW;AAqBbE,WAAO,CAACZ,QAAD,CAAW;AAChB,UAAKA,CAAAA,QAAL,GAAgBA,QAAhB;AACIA,cAASC,CAAAA,IAAb,KACED,QAASC,CAAAA,IAAKD,CAAAA,QADhB,GAC2B,IAD3B;AAGA,UAAKC,CAAAA,IAAL,GAAYD,QAASC,CAAAA,IAArB;AACAD,cAASC,CAAAA,IAAT,GAAgB,IAAhB;AANgB;AAclBU,WAAO,CAACE,IAAA,GAAO,CAAA,CAAR,CAAe;AACpB,UAAKX,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AAEA,UAAKE,CAAAA,QAAL,GADA,IAAKD,CAAAA,GACL,GADW,IACX;AACI,UAAKH,CAAAA,QAAT,KACE,IAAKA,CAAAA,QAASC,CAAAA,IADhB,GACuB,IAAKA,CAAAA,IAD5B;AAGI,UAAKA,CAAAA,IAAT,KACE,IAAKA,CAAAA,IAAKD,CAAAA,QADZ,GACuB,IAAKA,CAAAA,QAD5B;AAGA,YAAMU,WAAW,IAAKT,CAAAA,IAAtB;AACA,UAAKA,CAAAA,IAAL,GAAYY,IAAA,GAAO,IAAP,GAAcH,QAA1B;AACA,UAAKV,CAAAA,QAAL,GAAgB,IAAhB;AACA,aAAOU,QAAP;AAboB;AAtExB;AAuFAjB,SAAQC,CAAAA,cAAR,GAAyBA,cAAzB;AA3FsH,CAAtH;;",
"sources":["node_modules/pixi_DOT_js/lib/ticker/TickerListener.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$ticker$TickerListener\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nclass TickerListener {\n  /**\n   * Constructor\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param priority - The priority for emitting\n   * @param once - If the handler should fire once\n   */\n  constructor(fn, context = null, priority = 0, once = false) {\n    /** The next item in chain. */\n    this.next = null;\n    /** The previous item in chain. */\n    this.previous = null;\n    /** `true` if this listener has been destroyed already. */\n    this._destroyed = false;\n    this._fn = fn;\n    this._context = context;\n    this.priority = priority;\n    this._once = once;\n  }\n  /**\n   * Simple compare function to figure out if a function and context match.\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @returns `true` if the listener match the arguments\n   */\n  match(fn, context = null) {\n    return this._fn === fn && this._context === context;\n  }\n  /**\n   * Emit by calling the current function.\n   * @param ticker - The ticker emitting.\n   * @returns Next ticker\n   */\n  emit(ticker) {\n    if (this._fn) {\n      if (this._context) {\n        this._fn.call(this._context, ticker);\n      } else {\n        this._fn(ticker);\n      }\n    }\n    const redirect = this.next;\n    if (this._once) {\n      this.destroy(true);\n    }\n    if (this._destroyed) {\n      this.next = null;\n    }\n    return redirect;\n  }\n  /**\n   * Connect to the list.\n   * @param previous - Input node, previous listener\n   */\n  connect(previous) {\n    this.previous = previous;\n    if (previous.next) {\n      previous.next.previous = this;\n    }\n    this.next = previous.next;\n    previous.next = this;\n  }\n  /**\n   * Destroy and don't use after this.\n   * @param hard - `true` to remove the `next` reference, this\n   *        is considered a hard destroy. Soft destroy maintains the next reference.\n   * @returns The listener to redirect while emitting or removing.\n   */\n  destroy(hard = false) {\n    this._destroyed = true;\n    this._fn = null;\n    this._context = null;\n    if (this.previous) {\n      this.previous.next = this.next;\n    }\n    if (this.next) {\n      this.next.previous = this.previous;\n    }\n    const redirect = this.next;\n    this.next = hard ? null : redirect;\n    this.previous = null;\n    return redirect;\n  }\n}\n\nexports.TickerListener = TickerListener;\n//# sourceMappingURL=TickerListener.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","TickerListener","constructor","fn","context","priority","once","previous","next","_destroyed","_fn","_context","_once","match","emit","ticker","call","redirect","destroy","connect","hard"]
}
