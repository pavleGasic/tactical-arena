shadow$provide.module$node_modules$$pixi$core$lib$textures$resources$BaseImageResource = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index"), utils = require("module$node_modules$$pixi$utils$lib$index");
  global = require("module$node_modules$$pixi$core$lib$textures$resources$Resource");
  class BaseImageResource extends global.Resource {
    constructor(source) {
      super(source.naturalWidth || source.videoWidth || source.displayWidth || source.width, source.naturalHeight || source.videoHeight || source.displayHeight || source.height);
      this.source = source;
      this.noSubImage = !1;
    }
    static crossOrigin(element, url, crossorigin) {
      void 0 !== crossorigin || url.startsWith("data:") ? !1 !== crossorigin && (element.crossOrigin = "string" == typeof crossorigin ? crossorigin : "anonymous") : element.crossOrigin = utils.determineCrossOrigin(url);
    }
    upload(renderer, baseTexture, glTexture, source) {
      renderer = renderer.gl;
      const width = baseTexture.realWidth, height = baseTexture.realHeight;
      if (source = source || this.source, "u" > typeof HTMLImageElement && source instanceof HTMLImageElement) {
        if (!source.complete || 0 === source.naturalWidth) {
          return !1;
        }
      } else if ("u" > typeof HTMLVideoElement && source instanceof HTMLVideoElement && 1 >= source.readyState) {
        return !1;
      }
      return renderer.pixelStorei(renderer.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === constants.ALPHA_MODES.UNPACK), this.noSubImage || baseTexture.target !== renderer.TEXTURE_2D || glTexture.width !== width || glTexture.height !== height ? (glTexture.width = width, glTexture.height = height, renderer.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source)) : renderer.texSubImage2D(renderer.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, 
      source), !0;
    }
    update() {
      if (!this.destroyed) {
        var source = this.source;
        this.resize(source.naturalWidth || source.videoWidth || source.width, source.naturalHeight || source.videoHeight || source.height);
        super.update();
      }
    }
    dispose() {
      this.source = null;
    }
  }
  exports.BaseImageResource = BaseImageResource;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$textures$resources$BaseImageResource.js.map
