shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$BatchGeometry = function(global, require, module, exports) {
  var Buffer = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$Buffer"), _const = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$const");
  global = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$Geometry");
  "use strict";
  const placeHolderBufferData = new Float32Array(1), placeHolderIndexData = new Uint32Array(1);
  class BatchGeometry extends global.Geometry {
    constructor() {
      const attributeBuffer = new Buffer.Buffer({data:placeHolderBufferData, label:"attribute-batch-buffer", usage:_const.BufferUsage.VERTEX | _const.BufferUsage.COPY_DST, shrinkToFit:!1}), indexBuffer = new Buffer.Buffer({data:placeHolderIndexData, label:"index-batch-buffer", usage:_const.BufferUsage.INDEX | _const.BufferUsage.COPY_DST, shrinkToFit:!1});
      super({attributes:{aPosition:{buffer:attributeBuffer, format:"float32x2", stride:24, offset:0}, aUV:{buffer:attributeBuffer, format:"float32x2", stride:24, offset:8}, aColor:{buffer:attributeBuffer, format:"unorm8x4", stride:24, offset:16}, aTextureIdAndRound:{buffer:attributeBuffer, format:"uint16x2", stride:24, offset:20}}, indexBuffer});
    }
  }
  exports.BatchGeometry = BatchGeometry;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$BatchGeometry.js.map
