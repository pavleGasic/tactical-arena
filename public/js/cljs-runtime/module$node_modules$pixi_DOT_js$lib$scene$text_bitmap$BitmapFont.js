shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapFont = function(global, require, module, exports) {
  var Rectangle = require("module$node_modules$pixi_DOT_js$lib$maths$shapes$Rectangle"), Texture = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$Texture");
  global = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$AbstractBitmapFont");
  var BitmapFontManager = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapFontManager");
  "use strict";
  class BitmapFont extends global.AbstractBitmapFont {
    constructor(options, url) {
      super();
      const {textures, data} = options;
      Object.keys(data.pages).forEach(key => {
        key = data.pages[parseInt(key, 10)];
        this.pages.push({texture:textures[key.id]});
      });
      Object.keys(data.chars).forEach(key => {
        const charData = data.chars[key], {frame:textureFrame, source:textureSource} = textures[charData.page];
        var frameReal = new Rectangle.Rectangle(charData.x + textureFrame.x, charData.y + textureFrame.y, charData.width, charData.height);
        frameReal = new Texture.Texture({source:textureSource, frame:frameReal});
        this.chars[key] = {id:key.codePointAt(0), xOffset:charData.xOffset, yOffset:charData.yOffset, xAdvance:charData.xAdvance, kerning:charData.kerning ?? {}, texture:frameReal};
      });
      this.baseMeasurementFontSize = this.baseRenderedFontSize = data.fontSize;
      this.fontMetrics = {ascent:0, descent:0, fontSize:data.fontSize};
      this.baseLineOffset = data.baseLineOffset;
      this.lineHeight = data.lineHeight;
      this.fontFamily = data.fontFamily;
      this.distanceField = data.distanceField ?? {type:"none", range:0};
      this.url = url;
    }
    destroy() {
      super.destroy();
      for (let i = 0; i < this.pages.length; i++) {
        const {texture} = this.pages[i];
        texture.destroy(!0);
      }
      this.pages = null;
    }
    static install(options) {
      BitmapFontManager.BitmapFontManager.install(options);
    }
    static uninstall(name) {
      BitmapFontManager.BitmapFontManager.uninstall(name);
    }
  }
  exports.BitmapFont = BitmapFont;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapFont.js.map
