{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$filters$defaults$color_matrix$colorMatrixFilter_frag.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAA,wFAAA,GAA6G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGrJC,QAAOC,CAAAA,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAAA;AAIAH,SAAQI,CAAAA,OAAR,GAFeC,0vDAEf;AAPqJ,CAArJ;;",
"sources":["node_modules/pixi_DOT_js/lib/filters/defaults/color-matrix/colorMatrixFilter.frag.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$filters$defaults$color_matrix$colorMatrixFilter_frag\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar fragment = \"\\nin vec2 vTextureCoord;\\nin vec4 vColor;\\n\\nout vec4 finalColor;\\n\\nuniform float uColorMatrix[20];\\nuniform float uAlpha;\\n\\nuniform sampler2D uTexture;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture(uTexture, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * 0.2);\\n    float diff = (randomValue - 0.5) *  0.5;\\n\\n    if (uAlpha == 0.0) {\\n        finalColor = color;\\n        return;\\n    }\\n\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    vec4 result;\\n\\n    result.r = (uColorMatrix[0] * color.r);\\n        result.r += (uColorMatrix[1] * color.g);\\n        result.r += (uColorMatrix[2] * color.b);\\n        result.r += (uColorMatrix[3] * color.a);\\n        result.r += uColorMatrix[4];\\n\\n    result.g = (uColorMatrix[5] * color.r);\\n        result.g += (uColorMatrix[6] * color.g);\\n        result.g += (uColorMatrix[7] * color.b);\\n        result.g += (uColorMatrix[8] * color.a);\\n        result.g += uColorMatrix[9];\\n\\n    result.b = (uColorMatrix[10] * color.r);\\n       result.b += (uColorMatrix[11] * color.g);\\n       result.b += (uColorMatrix[12] * color.b);\\n       result.b += (uColorMatrix[13] * color.a);\\n       result.b += uColorMatrix[14];\\n\\n    result.a = (uColorMatrix[15] * color.r);\\n       result.a += (uColorMatrix[16] * color.g);\\n       result.a += (uColorMatrix[17] * color.b);\\n       result.a += (uColorMatrix[18] * color.a);\\n       result.a += uColorMatrix[19];\\n\\n    vec3 rgb = mix(color.rgb, result.rgb, uAlpha);\\n\\n    // Premultiply alpha again.\\n    rgb *= result.a;\\n\\n    finalColor = vec4(rgb, result.a);\\n}\\n\";\n\nexports.default = fragment;\n//# sourceMappingURL=colorMatrixFilter.frag.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","fragment"]
}
