shadow$provide.module$node_modules$$pixi$core$lib$renderTexture$RenderTextureSystem = function(global, require, module, exports) {
  var color = require("module$node_modules$$pixi$color$lib$index");
  global = require("module$node_modules$$pixi$extensions$lib$index");
  var math = require("module$node_modules$$pixi$math$lib$index");
  const tempRect = new math.Rectangle(), tempRect2 = new math.Rectangle();
  class RenderTextureSystem {
    constructor(renderer) {
      this.renderer = renderer;
      this.defaultMaskStack = [];
      this.current = null;
      this.sourceFrame = new math.Rectangle();
      this.destinationFrame = new math.Rectangle();
      this.viewportFrame = new math.Rectangle();
    }
    contextChange() {
      const attributes = this.renderer?.gl.getContextAttributes();
      this._rendererPremultipliedAlpha = !!(attributes && attributes.alpha && attributes.premultipliedAlpha);
    }
    bind(renderTexture = null, sourceFrame, destinationFrame) {
      const renderer = this.renderer;
      this.current = renderTexture;
      let baseTexture, framebuffer, resolution;
      renderTexture ? (baseTexture = renderTexture.baseTexture, resolution = baseTexture.resolution, sourceFrame || (tempRect.width = renderTexture.frame.width, tempRect.height = renderTexture.frame.height, sourceFrame = tempRect), destinationFrame || (tempRect2.x = renderTexture.frame.x, tempRect2.y = renderTexture.frame.y, tempRect2.width = sourceFrame.width, tempRect2.height = sourceFrame.height, destinationFrame = tempRect2), framebuffer = baseTexture.framebuffer) : (resolution = renderer.resolution, 
      sourceFrame || (tempRect.width = renderer._view.screen.width, tempRect.height = renderer._view.screen.height, sourceFrame = tempRect), destinationFrame || (destinationFrame = tempRect, destinationFrame.width = sourceFrame.width, destinationFrame.height = sourceFrame.height));
      const viewportFrame = this.viewportFrame;
      viewportFrame.x = destinationFrame.x * resolution;
      viewportFrame.y = destinationFrame.y * resolution;
      viewportFrame.width = destinationFrame.width * resolution;
      viewportFrame.height = destinationFrame.height * resolution;
      renderTexture || (viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height));
      viewportFrame.ceil();
      this.renderer.framebuffer.bind(framebuffer, viewportFrame);
      this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);
      renderTexture ? this.renderer.mask.setMaskStack(baseTexture.maskStack) : this.renderer.mask.setMaskStack(this.defaultMaskStack);
      this.sourceFrame.copyFrom(sourceFrame);
      this.destinationFrame.copyFrom(destinationFrame);
    }
    clear(clearColor, mask) {
      var fallbackColor = this.current ? this.current.baseTexture.clear : this.renderer.background.backgroundColor;
      clearColor = color.Color.shared.setValue(clearColor || fallbackColor);
      (this.current && 0 < this.current.baseTexture.alphaMode || !this.current && this._rendererPremultipliedAlpha) && clearColor.premultiply(clearColor.alpha);
      fallbackColor = this.destinationFrame;
      const baseFrame = this.current ? this.current.baseTexture : this.renderer._view.screen;
      if (fallbackColor = fallbackColor.width !== baseFrame.width || fallbackColor.height !== baseFrame.height) {
        let {x, y, width, height} = this.viewportFrame;
        x = Math.round(x);
        y = Math.round(y);
        width = Math.round(width);
        height = Math.round(height);
        this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);
        this.renderer.gl.scissor(x, y, width, height);
      }
      this.renderer.framebuffer.clear(clearColor.red, clearColor.green, clearColor.blue, clearColor.alpha, mask);
      fallbackColor && this.renderer.scissor.pop();
    }
    resize() {
      this.bind(null);
    }
    reset() {
      this.bind(null);
    }
    destroy() {
      this.renderer = null;
    }
  }
  RenderTextureSystem.extension = {type:global.ExtensionType.RendererSystem, name:"renderTexture"};
  global.extensions.add(RenderTextureSystem);
  exports.RenderTextureSystem = RenderTextureSystem;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$renderTexture$RenderTextureSystem.js.map
