{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$prepare$PrepareBase.js",
"lineCount":66,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/prepare/PrepareBase.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$prepare$PrepareBase\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Container = require('../scene/container/Container.js');\nvar _const = require('../ticker/const.js');\nvar Ticker = require('../ticker/Ticker.js');\n\n\"use strict\";\nconst _PrepareBase = class _PrepareBase {\n  /**\n   * @param {rendering.Renderer} renderer - A reference to the current renderer\n   */\n  constructor(renderer) {\n    /** called per frame by the ticker, defer processing to next tick */\n    this._tick = () => {\n      this.timeout = setTimeout(this._processQueue, 0);\n    };\n    /** process the queue up to max item limit per frame */\n    this._processQueue = () => {\n      const { queue } = this;\n      let itemsProcessed = 0;\n      while (queue.length && itemsProcessed < _PrepareBase.uploadsPerFrame) {\n        const queueItem = queue.shift();\n        this.uploadQueueItem(queueItem);\n        itemsProcessed++;\n      }\n      if (queue.length) {\n        Ticker.Ticker.system.addOnce(this._tick, this, _const.UPDATE_PRIORITY.UTILITY);\n      } else {\n        this._resolve();\n      }\n    };\n    this.renderer = renderer;\n    this.queue = [];\n    this.resolves = [];\n  }\n  /**\n   * Return a copy of the queue\n   * @returns {PrepareQueueItem[]} The queue\n   */\n  getQueue() {\n    return [...this.queue];\n  }\n  /**\n   * Add a textures or graphics resource to the queue\n   * @param {PrepareSourceItem | PrepareSourceItem[]} resource\n   */\n  add(resource) {\n    const resourceArray = Array.isArray(resource) ? resource : [resource];\n    for (const resourceItem of resourceArray) {\n      if (resourceItem instanceof Container.Container) {\n        this._addContainer(resourceItem);\n      } else {\n        this.resolveQueueItem(resourceItem, this.queue);\n      }\n    }\n    return this;\n  }\n  /**\n   * Recursively add a container and its children to the queue\n   * @param {Container} container - The container to add to the queue\n   */\n  _addContainer(container) {\n    this.resolveQueueItem(container, this.queue);\n    for (const child of container.children) {\n      this._addContainer(child);\n    }\n  }\n  /**\n   * Upload all the textures and graphics to the GPU (optionally add more resources to the queue first)\n   * @param {PrepareSourceItem | PrepareSourceItem[] | undefined} resource\n   */\n  upload(resource) {\n    if (resource) {\n      this.add(resource);\n    }\n    return new Promise((resolve) => {\n      if (this.queue.length) {\n        this.resolves.push(resolve);\n        this.dedupeQueue();\n        Ticker.Ticker.system.addOnce(this._tick, this, _const.UPDATE_PRIORITY.UTILITY);\n      } else {\n        resolve();\n      }\n    });\n  }\n  /** eliminate duplicates before processing */\n  dedupeQueue() {\n    const hash = /* @__PURE__ */ Object.create(null);\n    let nextUnique = 0;\n    for (let i = 0; i < this.queue.length; i++) {\n      const current = this.queue[i];\n      if (!hash[current.uid]) {\n        hash[current.uid] = true;\n        this.queue[nextUnique++] = current;\n      }\n    }\n    this.queue.length = nextUnique;\n  }\n  /** Call all the resolve callbacks */\n  _resolve() {\n    const { resolves } = this;\n    const array = resolves.slice(0);\n    resolves.length = 0;\n    for (const resolve of array) {\n      resolve();\n    }\n  }\n};\n/** The number of uploads to process per frame */\n_PrepareBase.uploadsPerFrame = 4;\nlet PrepareBase = _PrepareBase;\n\nexports.PrepareBase = PrepareBase;\n//# sourceMappingURL=PrepareBase.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Container","_const","Ticker","constructor","renderer","_tick","this._tick","timeout","setTimeout","_processQueue","this._processQueue","queue","itemsProcessed","length","_PrepareBase","uploadsPerFrame","queueItem","shift","uploadQueueItem","system","addOnce","UPDATE_PRIORITY","UTILITY","_resolve","resolves","getQueue","add","resource","resourceArray","Array","isArray","resourceItem","_addContainer","resolveQueueItem","container","child","children","upload","Promise","resolve","push","dedupeQueue","hash","Object","create","nextUnique","i","current","uid","array","slice","PrepareBase"]
}
