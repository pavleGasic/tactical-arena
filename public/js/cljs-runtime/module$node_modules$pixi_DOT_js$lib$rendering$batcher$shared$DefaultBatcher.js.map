{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$DefaultBatcher.js",
"lineCount":71,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/batcher/shared/DefaultBatcher.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$DefaultBatcher\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar Batcher = require('./Batcher.js');\nvar BatchGeometry = require('./BatchGeometry.js');\nvar DefaultShader = require('./DefaultShader.js');\n\n\"use strict\";\nlet defaultShader = null;\nconst _DefaultBatcher = class _DefaultBatcher extends Batcher.Batcher {\n  constructor() {\n    super(...arguments);\n    this.geometry = new BatchGeometry.BatchGeometry();\n    this.shader = defaultShader || (defaultShader = new DefaultShader.DefaultShader(this.maxTextures));\n    this.name = _DefaultBatcher.extension.name;\n    /** The size of one attribute. 1 = 32 bit. x, y, u, v, color, textureIdAndRound -> total = 6 */\n    this.vertexSize = 6;\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableMeshElement into the provided views.\n   * @param element - The DefaultBatchableMeshElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packAttributes(element, float32View, uint32View, index, textureId) {\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const { positions, uvs } = element;\n    const argb = element.color;\n    const offset = element.attributeOffset;\n    const end = offset + element.attributeSize;\n    for (let i = offset; i < end; i++) {\n      const i2 = i * 2;\n      const x = positions[i2];\n      const y = positions[i2 + 1];\n      float32View[index++] = a * x + c * y + tx;\n      float32View[index++] = d * y + b * x + ty;\n      float32View[index++] = uvs[i2];\n      float32View[index++] = uvs[i2 + 1];\n      uint32View[index++] = argb;\n      uint32View[index++] = textureIdAndRound;\n    }\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableQuadElement into the provided views.\n   * @param element - The DefaultBatchableQuadElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packQuadAttributes(element, float32View, uint32View, index, textureId) {\n    const texture = element.texture;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const bounds = element.bounds;\n    const w0 = bounds.maxX;\n    const w1 = bounds.minX;\n    const h0 = bounds.maxY;\n    const h1 = bounds.minY;\n    const uvs = texture.uvs;\n    const argb = element.color;\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    float32View[index + 0] = a * w1 + c * h1 + tx;\n    float32View[index + 1] = d * h1 + b * w1 + ty;\n    float32View[index + 2] = uvs.x0;\n    float32View[index + 3] = uvs.y0;\n    uint32View[index + 4] = argb;\n    uint32View[index + 5] = textureIdAndRound;\n    float32View[index + 6] = a * w0 + c * h1 + tx;\n    float32View[index + 7] = d * h1 + b * w0 + ty;\n    float32View[index + 8] = uvs.x1;\n    float32View[index + 9] = uvs.y1;\n    uint32View[index + 10] = argb;\n    uint32View[index + 11] = textureIdAndRound;\n    float32View[index + 12] = a * w0 + c * h0 + tx;\n    float32View[index + 13] = d * h0 + b * w0 + ty;\n    float32View[index + 14] = uvs.x2;\n    float32View[index + 15] = uvs.y2;\n    uint32View[index + 16] = argb;\n    uint32View[index + 17] = textureIdAndRound;\n    float32View[index + 18] = a * w1 + c * h0 + tx;\n    float32View[index + 19] = d * h0 + b * w1 + ty;\n    float32View[index + 20] = uvs.x3;\n    float32View[index + 21] = uvs.y3;\n    uint32View[index + 22] = argb;\n    uint32View[index + 23] = textureIdAndRound;\n  }\n};\n/** @ignore */\n_DefaultBatcher.extension = {\n  type: [\n    Extensions.ExtensionType.Batcher\n  ],\n  name: \"default\"\n};\nlet DefaultBatcher = _DefaultBatcher;\n\nexports.DefaultBatcher = DefaultBatcher;\n//# sourceMappingURL=DefaultBatcher.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Batcher","BatchGeometry","DefaultShader","defaultShader","constructor","arguments","geometry","shader","maxTextures","name","_DefaultBatcher","extension","vertexSize","packAttributes","element","float32View","uint32View","index","textureId","textureIdAndRound","roundPixels","wt","transform","a","b","c","d","tx","ty","positions","uvs","argb","color","offset","attributeOffset","end","attributeSize","i","i2","x","y","packQuadAttributes","bounds","w0","maxX","w1","minX","h0","maxY","h1","minY","texture","x0","y0","x1","y1","x2","y2","x3","y3","type","ExtensionType","DefaultBatcher"]
}
