shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$utils$applyProjectiveTransformationToPlane = function(global, require, module, exports) {
  exports.applyProjectiveTransformationToPlane = function(width, height, geometry, transformationMatrix) {
    const buffer = geometry.buffers[0], vertices = buffer.data, {verticesX, verticesY} = geometry;
    width /= verticesX - 1;
    height /= verticesY - 1;
    geometry = 0;
    const a00 = transformationMatrix[0], a01 = transformationMatrix[1], a02 = transformationMatrix[2], a10 = transformationMatrix[3], a11 = transformationMatrix[4], a12 = transformationMatrix[5], a20 = transformationMatrix[6], a21 = transformationMatrix[7];
    transformationMatrix = transformationMatrix[8];
    for (let i = 0; i < vertices.length; i += 2) {
      const x = geometry % verticesX * width, y = (geometry / verticesX | 0) * height, newY = a10 * x + a11 * y + a12, w = a20 * x + a21 * y + transformationMatrix;
      vertices[i] = (a00 * x + a01 * y + a02) / w;
      vertices[i + 1] = newY / w;
      geometry++;
    }
    buffer.update();
  };
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$utils$applyProjectiveTransformationToPlane.js.map
