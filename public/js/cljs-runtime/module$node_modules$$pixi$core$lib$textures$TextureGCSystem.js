shadow$provide.module$node_modules$$pixi$core$lib$textures$TextureGCSystem = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index");
  global = require("module$node_modules$$pixi$extensions$lib$index");
  const node_modules$$pixi$core$lib$textures$TextureGCSystem$classdecl$var7 = class {
    constructor(renderer) {
      this.renderer = renderer;
      this.checkCount = this.count = 0;
      this.maxIdle = node_modules$$pixi$core$lib$textures$TextureGCSystem$classdecl$var7.defaultMaxIdle;
      this.checkCountMax = node_modules$$pixi$core$lib$textures$TextureGCSystem$classdecl$var7.defaultCheckCountMax;
      this.mode = node_modules$$pixi$core$lib$textures$TextureGCSystem$classdecl$var7.defaultMode;
    }
    postrender() {
      this.renderer.objectRenderer.renderingToScreen && (this.count++, this.mode !== constants.GC_MODES.MANUAL && (this.checkCount++, this.checkCount > this.checkCountMax && (this.checkCount = 0, this.run())));
    }
    run() {
      var tm = this.renderer.texture;
      const managedTextures = tm.managedTextures;
      var wasRemoved = !1;
      for (let i = 0; i < managedTextures.length; i++) {
        const texture = managedTextures[i];
        texture.resource && this.count - texture.touched > this.maxIdle && (tm.destroyTexture(texture, !0), managedTextures[i] = null, wasRemoved = !0);
      }
      if (wasRemoved) {
        tm = 0;
        for (wasRemoved = 0; wasRemoved < managedTextures.length; wasRemoved++) {
          null !== managedTextures[wasRemoved] && (managedTextures[tm++] = managedTextures[wasRemoved]);
        }
        managedTextures.length = tm;
      }
    }
    unload(displayObject) {
      var tm = this.renderer.texture;
      const texture = displayObject._texture;
      texture && !texture.framebuffer && tm.destroyTexture(texture);
      for (tm = displayObject.children.length - 1; 0 <= tm; tm--) {
        this.unload(displayObject.children[tm]);
      }
    }
    destroy() {
      this.renderer = null;
    }
  };
  require = node_modules$$pixi$core$lib$textures$TextureGCSystem$classdecl$var7;
  require.defaultMode = constants.GC_MODES.AUTO;
  require.defaultMaxIdle = 3600;
  require.defaultCheckCountMax = 600;
  require.extension = {type:global.ExtensionType.RendererSystem, name:"textureGC"};
  global.extensions.add(require);
  exports.TextureGCSystem = require;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$textures$TextureGCSystem.js.map
