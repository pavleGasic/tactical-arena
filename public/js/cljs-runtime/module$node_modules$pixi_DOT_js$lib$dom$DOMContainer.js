shadow$provide.module$node_modules$pixi_DOT_js$lib$dom$DOMContainer = function(global, require, module, exports) {
  var Point = require("module$node_modules$pixi_DOT_js$lib$maths$point$Point");
  global = require("module$node_modules$pixi_DOT_js$lib$scene$view$ViewContainer");
  "use strict";
  class DOMContainer extends global.ViewContainer {
    constructor(options = {}) {
      const {element, anchor, ...rest} = options;
      super({label:"DOMContainer", ...rest});
      this.renderPipeId = "dom";
      this.batched = !1;
      this._anchor = new Point.Point(0, 0);
      anchor && (this.anchor = anchor);
      this.element = options.element || document.createElement("div");
    }
    get anchor() {
      return this._anchor;
    }
    set anchor(value) {
      "number" === typeof value ? this._anchor.set(value) : this._anchor.copyFrom(value);
    }
    set element(value) {
      this._element !== value && (this._element = value, this.onViewUpdate());
    }
    get element() {
      return this._element;
    }
    updateBounds() {
      const bounds = this._bounds, element = this._element;
      if (element) {
        var {offsetWidth, offsetHeight} = element;
        bounds.minX = 0;
        bounds.maxX = offsetWidth;
        bounds.minY = 0;
        bounds.maxY = offsetHeight;
      } else {
        bounds.minX = 0, bounds.minY = 0, bounds.maxX = 0, bounds.maxY = 0;
      }
    }
    destroy(options = !1) {
      super.destroy(options);
      this._element?.parentNode?.removeChild(this._element);
      this._anchor = this._element = null;
    }
  }
  exports.DOMContainer = DOMContainer;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$dom$DOMContainer.js.map
