{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlShaderSystem.js",
"lineCount":68,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/shader/GlShaderSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlShaderSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar maxRecommendedTextures = require('../../../batcher/gl/utils/maxRecommendedTextures.js');\nvar GenerateShaderSyncCode = require('./GenerateShaderSyncCode.js');\nvar generateProgram = require('./program/generateProgram.js');\n\n\"use strict\";\nconst defaultSyncData = {\n  textureCount: 0,\n  blockIndex: 0\n};\nclass GlShaderSystem {\n  constructor(renderer) {\n    /**\n     * @internal\n     * @private\n     */\n    this._activeProgram = null;\n    this._programDataHash = /* @__PURE__ */ Object.create(null);\n    this._shaderSyncFunctions = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_programDataHash\");\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    this._programDataHash = /* @__PURE__ */ Object.create(null);\n    this._shaderSyncFunctions = /* @__PURE__ */ Object.create(null);\n    this._activeProgram = null;\n    this.maxTextures = maxRecommendedTextures.getMaxTexturesPerBatch();\n  }\n  /**\n   * Changes the current shader to the one given in parameter.\n   * @param shader - the new shader\n   * @param skipSync - false if the shader should automatically sync its uniforms.\n   * @returns the glProgram that belongs to the shader.\n   */\n  bind(shader, skipSync) {\n    this._setProgram(shader.glProgram);\n    if (skipSync)\n      return;\n    defaultSyncData.textureCount = 0;\n    defaultSyncData.blockIndex = 0;\n    let syncFunction = this._shaderSyncFunctions[shader.glProgram._key];\n    if (!syncFunction) {\n      syncFunction = this._shaderSyncFunctions[shader.glProgram._key] = this._generateShaderSync(shader, this);\n    }\n    this._renderer.buffer.nextBindBase(!!shader.glProgram.transformFeedbackVaryings);\n    syncFunction(this._renderer, shader, defaultSyncData);\n  }\n  /**\n   * Updates the uniform group.\n   * @param uniformGroup - the uniform group to update\n   */\n  updateUniformGroup(uniformGroup) {\n    this._renderer.uniformGroup.updateUniformGroup(uniformGroup, this._activeProgram, defaultSyncData);\n  }\n  /**\n   * Binds a uniform block to the shader.\n   * @param uniformGroup - the uniform group to bind\n   * @param name - the name of the uniform block\n   * @param index - the index of the uniform block\n   */\n  bindUniformBlock(uniformGroup, name, index = 0) {\n    const bufferSystem = this._renderer.buffer;\n    const programData = this._getProgramData(this._activeProgram);\n    const isBufferResource = uniformGroup._bufferResource;\n    if (!isBufferResource) {\n      this._renderer.ubo.updateUniformGroup(uniformGroup);\n    }\n    const buffer = uniformGroup.buffer;\n    const glBuffer = bufferSystem.updateBuffer(buffer);\n    const boundLocation = bufferSystem.freeLocationForBufferBase(glBuffer);\n    if (isBufferResource) {\n      const { offset, size } = uniformGroup;\n      if (offset === 0 && size === buffer.data.byteLength) {\n        bufferSystem.bindBufferBase(glBuffer, boundLocation);\n      } else {\n        bufferSystem.bindBufferRange(glBuffer, boundLocation, offset);\n      }\n    } else if (bufferSystem.getLastBindBaseLocation(glBuffer) !== boundLocation) {\n      bufferSystem.bindBufferBase(glBuffer, boundLocation);\n    }\n    const uniformBlockIndex = this._activeProgram._uniformBlockData[name].index;\n    if (programData.uniformBlockBindings[index] === boundLocation)\n      return;\n    programData.uniformBlockBindings[index] = boundLocation;\n    this._renderer.gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundLocation);\n  }\n  _setProgram(program) {\n    if (this._activeProgram === program)\n      return;\n    this._activeProgram = program;\n    const programData = this._getProgramData(program);\n    this._gl.useProgram(programData.program);\n  }\n  /**\n   * @param program - the program to get the data for\n   * @internal\n   * @private\n   */\n  _getProgramData(program) {\n    return this._programDataHash[program._key] || this._createProgramData(program);\n  }\n  _createProgramData(program) {\n    const key = program._key;\n    this._programDataHash[key] = generateProgram.generateProgram(this._gl, program);\n    return this._programDataHash[key];\n  }\n  destroy() {\n    for (const key of Object.keys(this._programDataHash)) {\n      const programData = this._programDataHash[key];\n      programData.destroy();\n      this._programDataHash[key] = null;\n    }\n    this._programDataHash = null;\n  }\n  /**\n   * Creates a function that can be executed that will sync the shader as efficiently as possible.\n   * Overridden by the unsafe eval package if you don't want eval used in your project.\n   * @param shader - the shader to generate the sync function for\n   * @param shaderSystem - the shader system to use\n   * @returns - the generated sync function\n   * @ignore\n   */\n  _generateShaderSync(shader, shaderSystem) {\n    return GenerateShaderSyncCode.generateShaderSyncCode(shader, shaderSystem);\n  }\n  resetState() {\n    this._activeProgram = null;\n  }\n}\n/** @ignore */\nGlShaderSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem\n  ],\n  name: \"shader\"\n};\n\nexports.GlShaderSystem = GlShaderSystem;\n//# sourceMappingURL=GlShaderSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","maxRecommendedTextures","GenerateShaderSyncCode","generateProgram","defaultSyncData","textureCount","blockIndex","GlShaderSystem","constructor","renderer","_activeProgram","_programDataHash","Object","create","_shaderSyncFunctions","_renderer","renderableGC","addManagedHash","contextChange","gl","_gl","maxTextures","getMaxTexturesPerBatch","bind","shader","skipSync","_setProgram","glProgram","syncFunction","_key","_generateShaderSync","buffer","nextBindBase","transformFeedbackVaryings","updateUniformGroup","uniformGroup","bindUniformBlock","name","index","bufferSystem","programData","_getProgramData","isBufferResource","_bufferResource","ubo","glBuffer","updateBuffer","boundLocation","freeLocationForBufferBase","offset","size","data","byteLength","bindBufferBase","bindBufferRange","getLastBindBaseLocation","uniformBlockIndex","_uniformBlockData","uniformBlockBindings","uniformBlockBinding","program","useProgram","_createProgramData","key","destroy","keys","shaderSystem","generateShaderSyncCode","resetState","extension","type","ExtensionType","WebGLSystem"]
}
