{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$svg$SVGParser.js",
"lineCount":99,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/svg/SVGParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$svg$SVGParser\"] = function(global,require,module,exports) {\n'use strict';\n\nvar warn = require('../../../../utils/logging/warn.js');\nvar GraphicsPath = require('../path/GraphicsPath.js');\nvar parseSVGDefinitions = require('./parseSVGDefinitions.js');\nvar parseSVGFloatAttribute = require('./parseSVGFloatAttribute.js');\nvar parseSVGStyle = require('./parseSVGStyle.js');\n\n\"use strict\";\nfunction SVGParser(svg, graphicsContext) {\n  if (typeof svg === \"string\") {\n    const div = document.createElement(\"div\");\n    div.innerHTML = svg.trim();\n    svg = div.querySelector(\"svg\");\n  }\n  const session = {\n    context: graphicsContext,\n    defs: {},\n    path: new GraphicsPath.GraphicsPath()\n  };\n  parseSVGDefinitions.parseSVGDefinitions(svg, session);\n  const children = svg.children;\n  const { fillStyle, strokeStyle } = parseSVGStyle.parseSVGStyle(svg, session);\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (child.nodeName.toLowerCase() === \"defs\")\n      continue;\n    renderChildren(child, session, fillStyle, strokeStyle);\n  }\n  return graphicsContext;\n}\nfunction renderChildren(svg, session, fillStyle, strokeStyle) {\n  const children = svg.children;\n  const { fillStyle: f1, strokeStyle: s1 } = parseSVGStyle.parseSVGStyle(svg, session);\n  if (f1 && fillStyle) {\n    fillStyle = { ...fillStyle, ...f1 };\n  } else if (f1) {\n    fillStyle = f1;\n  }\n  if (s1 && strokeStyle) {\n    strokeStyle = { ...strokeStyle, ...s1 };\n  } else if (s1) {\n    strokeStyle = s1;\n  }\n  const noStyle = !fillStyle && !strokeStyle;\n  if (noStyle) {\n    fillStyle = { color: 0 };\n  }\n  let x;\n  let y;\n  let x1;\n  let y1;\n  let x2;\n  let y2;\n  let cx;\n  let cy;\n  let r;\n  let rx;\n  let ry;\n  let points;\n  let pointsString;\n  let d;\n  let graphicsPath;\n  let width;\n  let height;\n  switch (svg.nodeName.toLowerCase()) {\n    case \"path\":\n      d = svg.getAttribute(\"d\");\n      if (svg.getAttribute(\"fill-rule\") === \"evenodd\") {\n        warn.warn(\"SVG Evenodd fill rule not supported, your svg may render incorrectly\");\n      }\n      graphicsPath = new GraphicsPath.GraphicsPath(d, true);\n      session.context.path(graphicsPath);\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"circle\":\n      cx = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"cx\", 0);\n      cy = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"cy\", 0);\n      r = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"r\", 0);\n      session.context.ellipse(cx, cy, r, r);\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"rect\":\n      x = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"x\", 0);\n      y = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"y\", 0);\n      width = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"width\", 0);\n      height = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"height\", 0);\n      rx = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"rx\", 0);\n      ry = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"ry\", 0);\n      if (rx || ry) {\n        session.context.roundRect(x, y, width, height, rx || ry);\n      } else {\n        session.context.rect(x, y, width, height);\n      }\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"ellipse\":\n      cx = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"cx\", 0);\n      cy = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"cy\", 0);\n      rx = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"rx\", 0);\n      ry = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"ry\", 0);\n      session.context.beginPath();\n      session.context.ellipse(cx, cy, rx, ry);\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"line\":\n      x1 = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"x1\", 0);\n      y1 = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"y1\", 0);\n      x2 = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"x2\", 0);\n      y2 = parseSVGFloatAttribute.parseSVGFloatAttribute(svg, \"y2\", 0);\n      session.context.beginPath();\n      session.context.moveTo(x1, y1);\n      session.context.lineTo(x2, y2);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"polygon\":\n      pointsString = svg.getAttribute(\"points\");\n      points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n      session.context.poly(points, true);\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"polyline\":\n      pointsString = svg.getAttribute(\"points\");\n      points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n      session.context.poly(points, false);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"g\":\n    case \"svg\":\n      break;\n    default: {\n      warn.warn(`[SVG parser] <${svg.nodeName}> elements unsupported`);\n      break;\n    }\n  }\n  if (noStyle) {\n    fillStyle = null;\n  }\n  for (let i = 0; i < children.length; i++) {\n    renderChildren(children[i], session, fillStyle, strokeStyle);\n  }\n}\n\nexports.SVGParser = SVGParser;\n//# sourceMappingURL=SVGParser.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","renderChildren","svg","session","fillStyle","strokeStyle","children","f1","s1","parseSVGStyle","noStyle","color","width","height","nodeName","toLowerCase","d","getAttribute","warn","graphicsPath","GraphicsPath","context","path","fill","stroke","cx","parseSVGFloatAttribute","cy","r","ellipse","x","y","rx","ry","roundRect","rect","beginPath","x1","y1","x2","y2","moveTo","lineTo","pointsString","points","match","map","n","parseInt","poly","i","length","parseSVGDefinitions","SVGParser","graphicsContext","div","document","createElement","innerHTML","trim","querySelector","defs","child"]
}
