{
"version":3,
"file":"module$node_modules$$pixi$core$lib$renderTexture$RenderTextureSystem.js",
"lineCount":70,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/renderTexture/RenderTextureSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$renderTexture$RenderTextureSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar color = require(\"@pixi/color\"), extensions = require(\"@pixi/extensions\"), math = require(\"@pixi/math\");\nconst tempRect = new math.Rectangle(), tempRect2 = new math.Rectangle();\nclass RenderTextureSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.defaultMaskStack = [], this.current = null, this.sourceFrame = new math.Rectangle(), this.destinationFrame = new math.Rectangle(), this.viewportFrame = new math.Rectangle();\n  }\n  contextChange() {\n    const attributes = this.renderer?.gl.getContextAttributes();\n    this._rendererPremultipliedAlpha = !!(attributes && attributes.alpha && attributes.premultipliedAlpha);\n  }\n  /**\n   * Bind the current render texture.\n   * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.\n   * @param sourceFrame - Part of world that is mapped to the renderTexture.\n   * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.\n   */\n  bind(renderTexture = null, sourceFrame, destinationFrame) {\n    const renderer = this.renderer;\n    this.current = renderTexture;\n    let baseTexture, framebuffer, resolution;\n    renderTexture ? (baseTexture = renderTexture.baseTexture, resolution = baseTexture.resolution, sourceFrame || (tempRect.width = renderTexture.frame.width, tempRect.height = renderTexture.frame.height, sourceFrame = tempRect), destinationFrame || (tempRect2.x = renderTexture.frame.x, tempRect2.y = renderTexture.frame.y, tempRect2.width = sourceFrame.width, tempRect2.height = sourceFrame.height, destinationFrame = tempRect2), framebuffer = baseTexture.framebuffer) : (resolution = renderer.resolution, sourceFrame || (tempRect.width = renderer._view.screen.width, tempRect.height = renderer._view.screen.height, sourceFrame = tempRect), destinationFrame || (destinationFrame = tempRect, destinationFrame.width = sourceFrame.width, destinationFrame.height = sourceFrame.height));\n    const viewportFrame = this.viewportFrame;\n    viewportFrame.x = destinationFrame.x * resolution, viewportFrame.y = destinationFrame.y * resolution, viewportFrame.width = destinationFrame.width * resolution, viewportFrame.height = destinationFrame.height * resolution, renderTexture || (viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height)), viewportFrame.ceil(), this.renderer.framebuffer.bind(framebuffer, viewportFrame), this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer), renderTexture ? this.renderer.mask.setMaskStack(baseTexture.maskStack) : this.renderer.mask.setMaskStack(this.defaultMaskStack), this.sourceFrame.copyFrom(sourceFrame), this.destinationFrame.copyFrom(destinationFrame);\n  }\n  /**\n   * Erases the render texture and fills the drawing area with a colour.\n   * @param clearColor - The color as rgba, default to use the renderer backgroundColor\n   * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n   *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n   */\n  clear(clearColor, mask) {\n    const fallbackColor = this.current ? this.current.baseTexture.clear : this.renderer.background.backgroundColor, color$1 = color.Color.shared.setValue(clearColor || fallbackColor);\n    (this.current && this.current.baseTexture.alphaMode > 0 || !this.current && this._rendererPremultipliedAlpha) && color$1.premultiply(color$1.alpha);\n    const destinationFrame = this.destinationFrame, baseFrame = this.current ? this.current.baseTexture : this.renderer._view.screen, clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n    if (clearMask) {\n      let { x, y, width, height } = this.viewportFrame;\n      x = Math.round(x), y = Math.round(y), width = Math.round(width), height = Math.round(height), this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST), this.renderer.gl.scissor(x, y, width, height);\n    }\n    this.renderer.framebuffer.clear(color$1.red, color$1.green, color$1.blue, color$1.alpha, mask), clearMask && this.renderer.scissor.pop();\n  }\n  resize() {\n    this.bind(null);\n  }\n  /** Resets render-texture state. */\n  reset() {\n    this.bind(null);\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nRenderTextureSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"renderTexture\"\n};\nextensions.extensions.add(RenderTextureSystem);\nexports.RenderTextureSystem = RenderTextureSystem;\n//# sourceMappingURL=RenderTextureSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","color","extensions","math","tempRect","Rectangle","tempRect2","RenderTextureSystem","constructor","renderer","defaultMaskStack","current","sourceFrame","destinationFrame","viewportFrame","contextChange","attributes","gl","getContextAttributes","_rendererPremultipliedAlpha","alpha","premultipliedAlpha","bind","renderTexture","baseTexture","framebuffer","resolution","width","frame","height","x","y","_view","screen","view","ceil","projection","update","mask","setMaskStack","maskStack","copyFrom","clear","clearColor","fallbackColor","background","backgroundColor","color$1","Color","shared","setValue","alphaMode","premultiply","baseFrame","clearMask","Math","round","enable","SCISSOR_TEST","scissor","red","green","blue","pop","resize","reset","destroy","extension","type","ExtensionType","RendererSystem","name","add"]
}
