{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$BufferResource.js",
"lineCount":32,
"mappings":"AAAAA,cAAA,CAAA,oFAAA,GAAyG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG7IC,QAAAA,GAAeH,OAAA,CAAQ,yCAAR,CAAfG;AACJ,MAAIC,MAAMJ,OAAA,CAAQ,oDAAR,CAAV;AAEA,cAAA;AACA,OAAMK,eAAN,QAA6BF,OAA7B;AAUEG,eAAW,CAAC,CAAEC,MAAF,EAAUC,MAAV,EAAkBC,IAAlB,CAAD,CAA2B;AACpC,WAAA,EAAA;AAOA,UAAKL,CAAAA,GAAL,GAAWA,GAAIA,CAAAA,GAAJ,CAAQ,QAAR,CAAX;AAMA,UAAKM,CAAAA,aAAL,GAAqB,gBAArB;AAMA,UAAKC,CAAAA,QAAL,GAAgB,CAAhB;AAMA,UAAKC,CAAAA,WAAL,GAAmBR,GAAIA,CAAAA,GAAJ,CAAQ,UAAR,CAAnB;AAMA,UAAKS,CAAAA,eAAL,GAAuB,CAAA,CAAvB;AAKA,UAAKC,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AACA,UAAKP,CAAAA,MAAL,GAAcA,MAAd;AACA,UAAKC,CAAAA,MAAL,GAAcA,MAAd,GAAuB,CAAvB;AACA,UAAKC,CAAAA,IAAL,GAAYA,IAAZ;AACA,UAAKF,CAAAA,MAAOQ,CAAAA,EAAZ,CAAe,QAAf,EAAyB,IAAKC,CAAAA,cAA9B,EAA8C,IAA9C,CAAA;AAzCoC;AA2CtCA,kBAAc,EAAG;AACf,UAAKJ,CAAAA,WAAL,GAAmBR,GAAIA,CAAAA,GAAJ,CAAQ,UAAR,CAAnB;AACA,UAAKa,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AAFe;AASjBC,WAAO,CAACC,aAAA,GAAgB,CAAA,CAAjB,CAAwB;AAC7B,UAAKL,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AACIK,mBAAJ,IACE,IAAKZ,CAAAA,MAAOW,CAAAA,OAAZ,EADF;AAGA,UAAKD,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AACA,UAAKV,CAAAA,MAAL,GAAc,IAAd;AAN6B;AA9DjC;AAwEAL,SAAQG,CAAAA,cAAR,GAAyBA,cAAzB;AA/EiJ,CAAjJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/buffer/BufferResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$BufferResource\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar uid = require('../../../../utils/data/uid.js');\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid.uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid.uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid.uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexports.BufferResource = BufferResource;\n//# sourceMappingURL=BufferResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","uid","BufferResource","constructor","buffer","offset","size","_resourceType","_touched","_resourceId","_bufferResource","destroyed","on","onBufferChange","emit","destroy","destroyBuffer"]
}
