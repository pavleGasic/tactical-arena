{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$utils$createTexture.js",
"lineCount":20,
"mappings":"AAAAA,cAAA,CAAA,sFAAA,GAA2G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGnJ,MAAIC,UAAUH,OAAA,CAAQ,gFAAR,CAAd,EACII,OAAOJ,OAAA,CAAQ,wDAAR,CADX,EAEIK,QAAQL,OAAA,CAAQ,wDAAR,CAFZ;AAIA,cAAA;AA6BAE,SAAQI,CAAAA,aAAR,GA5BAA,QAAsB,CAACC,MAAD,EAASC,MAAT,EAAiBC,GAAjB,CAAsB;AAC1CF,UAAOG,CAAAA,KAAP,GAAeD,GAAf;AACAF,UAAOI,CAAAA,aAAP,GAAuBF,GAAvB;AACA,UAAMG,UAAU,IAAIT,OAAQA,CAAAA,OAAZ,CAAoB,CAClCI,MADkC,EAElCG,MAAOD,GAF2B,CAApB,CAAhB,EAIMI,SAAS,EAAAA,IAAM;AACnB,aAAOL,MAAOM,CAAAA,YAAP,CAAoBL,GAApB,CAAP;AACIJ,WAAMA,CAAAA,KAAMU,CAAAA,GAAZ,CAAgBN,GAAhB,CAAJ,IACEJ,KAAMA,CAAAA,KAAMW,CAAAA,MAAZ,CAAmBP,GAAnB,CADF;AAFmB,KAJrB;AAUAG,WAAQL,CAAAA,MAAOU,CAAAA,IAAf,CAAoB,SAApB,EAA+B,EAAA,IAAM;AAC/BT,YAAOM,CAAAA,YAAP,CAAoBL,GAApB,CAAJ,KACEL,IAAKA,CAAAA,IAAL,CAAU,4IAAV,CACA,EAAAS,MAAA,EAFF;AADmC,KAArC,CAAA;AAMAD,WAAQK,CAAAA,IAAR,CAAa,SAAb,EAAwB,EAAA,IAAM;AACvBV,YAAOW,CAAAA,SAAZ,KACEd,IAAKA,CAAAA,IAAL,CAAU,gIAAV,CACA,EAAAS,MAAA,EAFF;AAD4B,KAA9B,CAAA;AAMA,WAAOD,OAAP;AAzB0C,GA4B5C;AApCmJ,CAAnJ;;",
"sources":["node_modules/pixi_DOT_js/lib/assets/loader/parsers/textures/utils/createTexture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$utils$createTexture\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Texture = require('../../../../../rendering/renderers/shared/texture/Texture.js');\nvar warn = require('../../../../../utils/logging/warn.js');\nvar Cache = require('../../../../cache/Cache.js');\n\n\"use strict\";\nfunction createTexture(source, loader, url) {\n  source.label = url;\n  source._sourceOrigin = url;\n  const texture = new Texture.Texture({\n    source,\n    label: url\n  });\n  const unload = () => {\n    delete loader.promiseCache[url];\n    if (Cache.Cache.has(url)) {\n      Cache.Cache.remove(url);\n    }\n  };\n  texture.source.once(\"destroy\", () => {\n    if (loader.promiseCache[url]) {\n      warn.warn(\"[Assets] A TextureSource managed by Assets was destroyed instead of unloaded! Use Assets.unload() instead of destroying the TextureSource.\");\n      unload();\n    }\n  });\n  texture.once(\"destroy\", () => {\n    if (!source.destroyed) {\n      warn.warn(\"[Assets] A Texture managed by Assets was destroyed instead of unloaded! Use Assets.unload() instead of destroying the Texture.\");\n      unload();\n    }\n  });\n  return texture;\n}\n\nexports.createTexture = createTexture;\n//# sourceMappingURL=createTexture.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Texture","warn","Cache","createTexture","source","loader","url","label","_sourceOrigin","texture","unload","promiseCache","has","remove","once","destroyed"]
}
