{
"version":3,
"file":"module$node_modules$$xmldom$xmldom$lib$conventions.js",
"lineCount":38,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,GAAuE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAkD/GC,UAASA,OAAM,CAACC,MAAD,EAASC,EAAT,CAAa;AAChBC,QAAAA,EAAX,KAAID,EAAJ,KACCA,EADD,GACME,MADN;AAGA,WAAOF,EAAA,IAA2B,UAA3B,KAAM,MAAOA,GAAGF,CAAAA,MAAhB,GAAwCE,EAAGF,CAAAA,MAAH,CAAUC,MAAV,CAAxC,GAA4DA,MAAnE;AAJ2B;AAuC5B,MAAII,YAAYL,MAAA,CAAO,CAUtBM,KAAM,WAVgB,EAsBtBC,OAAQA,QAAS,CAACC,KAAD,CAAQ;AACxB,WAAOA,KAAP,KAAiBH,SAAUC,CAAAA,IAA3B;AADwB,GAtBH,EAiCtBG,gBAAiB,iBAjCK,EA0CtBC,SAAU,UA1CY,EAoDtBC,sBAAuB,uBApDD,EA6DtBC,cAAe,eA7DO,CAAP,CAAhB,EAqEIC,YAAYb,MAAA,CAAO,CAMtBM,KAAM,8BANgB,EAetBC,OAAQA,QAAS,CAACO,GAAD,CAAM;AACtB,WAAOA,GAAP,KAAeD,SAAUP,CAAAA,IAAzB;AADsB,GAfD,EAwBtBS,IAAK,4BAxBiB,EA+BtBC,IAAK,sCA/BiB,EAsCtBC,MAAO,+BAtCe,CAAP,CArEhB;AA8GAlB,SAAQmB,CAAAA,MAAR,GAjIAA,QAAe,CAACC,MAAD,EAASC,MAAT,CAAiB;AAC/B,QAAe,IAAf,KAAID,MAAJ,IAAyC,QAAzC,KAAuB,MAAOA,OAA9B;AACC,YAAM,IAAIE,SAAJ,CAAc,yBAAd,CAAN;AADD;AAGA,SAAKC,IAAIA,GAAT,GAAgBF,OAAhB;AACKhB,YAAOmB,CAAAA,SAAUC,CAAAA,cAAeC,CAAAA,IAAhC,CAAqCL,MAArC,EAA6CE,GAA7C,CAAJ,KACCH,MAAA,CAAOG,GAAP,CADD,GACeF,MAAA,CAAOE,GAAP,CADf;AADD;AAKA,WAAOH,MAAP;AAT+B,GAiIhC;AACApB,SAAQ2B,CAAAA,IAAR,GAtLAA,QAAa,CAACC,IAAD,EAAOC,SAAP,EAAkBC,EAAlB,CAAsB;AACvB1B,QAAAA,EAAX,KAAI0B,EAAJ,KACCA,EADD,GACMC,KAAMP,CAAAA,SADZ;AAGA,QAAII,IAAJ,IAA+B,UAA/B,KAAY,MAAOE,GAAGH,CAAAA,IAAtB;AACC,aAAOG,EAAGH,CAAAA,IAAKD,CAAAA,IAAR,CAAaE,IAAb,EAAmBC,SAAnB,CAAP;AADD;AAGA,SAASG,EAAT,GAAa,CAAb,EAAgBA,EAAhB,GAAoBJ,IAAKK,CAAAA,MAAzB,EAAiCD,EAAA,EAAjC;AACC,UAAI3B,MAAOmB,CAAAA,SAAUC,CAAAA,cAAeC,CAAAA,IAAhC,CAAqCE,IAArC,EAA2CI,EAA3C,CAAJ,CAAmD;AAClD,YAAIE,OAAON,IAAA,CAAKI,EAAL,CAAX;AACA,YAAIH,SAAUH,CAAAA,IAAV,CAAetB,IAAAA,EAAf,EAA0B8B,IAA1B,EAAgCF,EAAhC,EAAmCJ,IAAnC,CAAJ;AACC,iBAAOM,IAAP;AADD;AAFkD;AADpD;AAPkC,GAsLnC;AACAlC,SAAQC,CAAAA,MAAR,GAAiBA,MAAjB;AACAD,SAAQM,CAAAA,SAAR,GAAoBA,SAApB;AACAN,SAAQc,CAAAA,SAAR,GAAoBA,SAApB;AA3M+G,CAA/G;;",
"sources":["node_modules/@xmldom/xmldom/lib/conventions.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$xmldom$xmldom$lib$conventions\"] = function(global,require,module,exports) {\n'use strict'\n\n/**\n * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.\n *\n * Works with anything that has a `length` property and index access properties, including NodeList.\n *\n * @template {unknown} T\n * @param {Array<T> | ({length:number, [number]: T})} list\n * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate\n * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,\n * \t\t\t\tallows injecting a custom implementation in tests\n * @returns {T | undefined}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find\n */\nfunction find(list, predicate, ac) {\n\tif (ac === undefined) {\n\t\tac = Array.prototype;\n\t}\n\tif (list && typeof ac.find === 'function') {\n\t\treturn ac.find.call(list, predicate);\n\t}\n\tfor (var i = 0; i < list.length; i++) {\n\t\tif (Object.prototype.hasOwnProperty.call(list, i)) {\n\t\t\tvar item = list[i];\n\t\t\tif (predicate.call(undefined, item, i, list)) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * \"Shallow freezes\" an object to render it immutable.\n * Uses `Object.freeze` if available,\n * otherwise the immutability is only in the type.\n *\n * Is used to create \"enum like\" objects.\n *\n * @template T\n * @param {T} object the object to freeze\n * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,\n * \t\t\t\tallows to inject custom object constructor for tests\n * @returns {Readonly<T>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n */\nfunction freeze(object, oc) {\n\tif (oc === undefined) {\n\t\toc = Object\n\t}\n\treturn oc && typeof oc.freeze === 'function' ? oc.freeze(object) : object\n}\n\n/**\n * Since we can not rely on `Object.assign` we provide a simplified version\n * that is sufficient for our needs.\n *\n * @param {Object} target\n * @param {Object | null | undefined} source\n *\n * @returns {Object} target\n * @throws TypeError if target is not an object\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign\n */\nfunction assign(target, source) {\n\tif (target === null || typeof target !== 'object') {\n\t\tthrow new TypeError('target is not an object')\n\t}\n\tfor (var key in source) {\n\t\tif (Object.prototype.hasOwnProperty.call(source, key)) {\n\t\t\ttarget[key] = source[key]\n\t\t}\n\t}\n\treturn target\n}\n\n/**\n * All mime types that are allowed as input to `DOMParser.parseFromString`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec\n * @see DOMParser.prototype.parseFromString\n */\nvar MIME_TYPE = freeze({\n\t/**\n\t * `text/html`, the only mime type that triggers treating an XML document as HTML.\n\t *\n\t * @see DOMParser.SupportedType.isHTML\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec\n\t */\n\tHTML: 'text/html',\n\n\t/**\n\t * Helper method to check a mime type if it indicates an HTML document\n\t *\n\t * @param {string} [value]\n\t * @returns {boolean}\n\t *\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring \t */\n\tisHTML: function (value) {\n\t\treturn value === MIME_TYPE.HTML\n\t},\n\n\t/**\n\t * `application/xml`, the standard mime type for XML documents.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */\n\tXML_APPLICATION: 'application/xml',\n\n\t/**\n\t * `text/html`, an alias for `application/xml`.\n\t *\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303\n\t * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */\n\tXML_TEXT: 'text/xml',\n\n\t/**\n\t * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,\n\t * but is parsed as an XML document.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec\n\t * @see https://en.wikipedia.org/wiki/XHTML Wikipedia\n\t */\n\tXML_XHTML_APPLICATION: 'application/xhtml+xml',\n\n\t/**\n\t * `image/svg+xml`,\n\t *\n\t * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration\n\t * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1\n\t * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia\n\t */\n\tXML_SVG_IMAGE: 'image/svg+xml',\n})\n\n/**\n * Namespaces that are used in this code base.\n *\n * @see http://www.w3.org/TR/REC-xml-names\n */\nvar NAMESPACE = freeze({\n\t/**\n\t * The XHTML namespace.\n\t *\n\t * @see http://www.w3.org/1999/xhtml\n\t */\n\tHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Checks if `uri` equals `NAMESPACE.HTML`.\n\t *\n\t * @param {string} [uri]\n\t *\n\t * @see NAMESPACE.HTML\n\t */\n\tisHTML: function (uri) {\n\t\treturn uri === NAMESPACE.HTML\n\t},\n\n\t/**\n\t * The SVG namespace.\n\t *\n\t * @see http://www.w3.org/2000/svg\n\t */\n\tSVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * The `xml:` namespace.\n\t *\n\t * @see http://www.w3.org/XML/1998/namespace\n\t */\n\tXML: 'http://www.w3.org/XML/1998/namespace',\n\n\t/**\n\t * The `xmlns:` namespace\n\t *\n\t * @see https://www.w3.org/2000/xmlns/\n\t */\n\tXMLNS: 'http://www.w3.org/2000/xmlns/',\n})\n\nexports.assign = assign;\nexports.find = find;\nexports.freeze = freeze;\nexports.MIME_TYPE = MIME_TYPE;\nexports.NAMESPACE = NAMESPACE;\n\n};"],
"names":["shadow$provide","global","require","module","exports","freeze","object","oc","undefined","Object","MIME_TYPE","HTML","isHTML","value","XML_APPLICATION","XML_TEXT","XML_XHTML_APPLICATION","XML_SVG_IMAGE","NAMESPACE","uri","SVG","XML","XMLNS","assign","target","source","TypeError","key","prototype","hasOwnProperty","call","find","list","predicate","ac","Array","i","length","item"]
}
