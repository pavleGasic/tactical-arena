{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$loader$Loader.js",
"lineCount":76,
"mappings":"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",
"sources":["node_modules/@pixi/assets/lib/loader/Loader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$loader$Loader\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nrequire(\"../utils/index.js\");\nvar isSingleItem = require(\"../utils/isSingleItem.js\"), convertToList = require(\"../utils/convertToList.js\");\nclass Loader {\n  constructor() {\n    this._parsers = [], this._parsersValidated = !1, this.parsers = new Proxy(this._parsers, {\n      set: (target, key, value) => (this._parsersValidated = !1, target[key] = value, !0)\n    }), this.promiseCache = {};\n  }\n  /** function used for testing */\n  reset() {\n    this._parsersValidated = !1, this.promiseCache = {};\n  }\n  /**\n   * Used internally to generate a promise for the asset to be loaded.\n   * @param url - The URL to be loaded\n   * @param data - any custom additional information relevant to the asset being loaded\n   * @returns - a promise that will resolve to an Asset for example a Texture of a JSON object\n   */\n  _getLoadPromiseAndParser(url, data) {\n    const result = {\n      promise: null,\n      parser: null\n    };\n    return result.promise = (async () => {\n      let asset = null, parser = null;\n      if (data.loadParser && (parser = this._parserHash[data.loadParser], parser || console.warn(`[Assets] specified load parser \"${data.loadParser}\" not found while loading ${url}`)), !parser) {\n        for (let i = 0; i < this.parsers.length; i++) {\n          const parserX = this.parsers[i];\n          if (parserX.load && parserX.test?.(url, data, this)) {\n            parser = parserX;\n            break;\n          }\n        }\n        if (!parser)\n          return console.warn(`[Assets] ${url} could not be loaded as we don't know how to parse it, ensure the correct parser has been added`), null;\n      }\n      asset = await parser.load(url, data, this), result.parser = parser;\n      for (let i = 0; i < this.parsers.length; i++) {\n        const parser2 = this.parsers[i];\n        parser2.parse && parser2.parse && await parser2.testParse?.(asset, data, this) && (asset = await parser2.parse(asset, data, this) || asset, result.parser = parser2);\n      }\n      return asset;\n    })(), result;\n  }\n  async load(assetsToLoadIn, onProgress) {\n    this._parsersValidated || this._validateParsers();\n    let count = 0;\n    const assets = {}, singleAsset = isSingleItem.isSingleItem(assetsToLoadIn), assetsToLoad = convertToList.convertToList(assetsToLoadIn, (item) => ({\n      alias: [item],\n      src: item\n    })), total = assetsToLoad.length, promises = assetsToLoad.map(async (asset) => {\n      const url = core.utils.path.toAbsolute(asset.src);\n      if (!assets[asset.src])\n        try {\n          this.promiseCache[url] || (this.promiseCache[url] = this._getLoadPromiseAndParser(url, asset)), assets[asset.src] = await this.promiseCache[url].promise, onProgress && onProgress(++count / total);\n        } catch (e) {\n          throw delete this.promiseCache[url], delete assets[asset.src], new Error(`[Loader.load] Failed to load ${url}.\n${e}`);\n        }\n    });\n    return await Promise.all(promises), singleAsset ? assets[assetsToLoad[0].src] : assets;\n  }\n  /**\n   * Unloads one or more assets. Any unloaded assets will be destroyed, freeing up memory for your app.\n   * The parser that created the asset, will be the one that unloads it.\n   * @example\n   * // Single asset:\n   * const asset = await Loader.load('cool.png');\n   *\n   * await Loader.unload('cool.png');\n   *\n   * console.log(asset.destroyed); // true\n   * @param assetsToUnloadIn - urls that you want to unload, or a single one!\n   */\n  async unload(assetsToUnloadIn) {\n    const promises = convertToList.convertToList(assetsToUnloadIn, (item) => ({\n      alias: [item],\n      src: item\n    })).map(async (asset) => {\n      const url = core.utils.path.toAbsolute(asset.src), loadPromise = this.promiseCache[url];\n      if (loadPromise) {\n        const loadedAsset = await loadPromise.promise;\n        delete this.promiseCache[url], loadPromise.parser?.unload?.(loadedAsset, asset, this);\n      }\n    });\n    await Promise.all(promises);\n  }\n  /** validates our parsers, right now it only checks for name conflicts but we can add more here as required! */\n  _validateParsers() {\n    this._parsersValidated = !0, this._parserHash = this._parsers.filter((parser) => parser.name).reduce((hash, parser) => (hash[parser.name] && console.warn(`[Assets] loadParser name conflict \"${parser.name}\"`), { ...hash, [parser.name]: parser }), {});\n  }\n}\nexports.Loader = Loader;\n//# sourceMappingURL=Loader.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","isSingleItem","convertToList","Loader","constructor","_parsers","_parsersValidated","parsers","Proxy","set","target","key","value","promiseCache","reset","_getLoadPromiseAndParser","url","data","result","promise","parser","asset","loadParser","_parserHash","console","warn","i","length","parserX","load","test","parser2","parse","testParse","assetsToLoadIn","onProgress","_validateParsers","count","assets","singleAsset","assetsToLoad","item","alias","src","total","promises","map","utils","path","toAbsolute","e","Error","Promise","all","unload","assetsToUnloadIn","loadPromise","loadedAsset","filter","name","reduce","hash"]
}
