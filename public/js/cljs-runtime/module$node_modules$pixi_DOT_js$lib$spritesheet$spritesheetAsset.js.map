{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$spritesheet$spritesheetAsset.js",
"lineCount":64,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/spritesheet/spritesheetAsset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$spritesheet$spritesheetAsset\"] = function(global,require,module,exports) {\n'use strict';\n\nvar LoaderParser = require('../assets/loader/parsers/LoaderParser.js');\nvar Resolver = require('../assets/resolver/Resolver.js');\nvar copySearchParams = require('../assets/utils/copySearchParams.js');\nvar Extensions = require('../extensions/Extensions.js');\nvar Texture = require('../rendering/renderers/shared/texture/Texture.js');\nvar path = require('../utils/path.js');\nvar Spritesheet = require('./Spritesheet.js');\n\n\"use strict\";\nconst validImages = [\n  \"jpg\",\n  \"png\",\n  \"jpeg\",\n  \"avif\",\n  \"webp\",\n  \"basis\",\n  \"etc2\",\n  \"bc7\",\n  \"bc6h\",\n  \"bc5\",\n  \"bc4\",\n  \"bc3\",\n  \"bc2\",\n  \"bc1\",\n  \"eac\",\n  \"astc\"\n];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  keys.forEach((key) => {\n    out[key] = asset;\n  });\n  Object.keys(asset.textures).forEach((key) => {\n    out[key] = asset.textures[key];\n  });\n  if (!ignoreMultiPack) {\n    const basePath = path.path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n      Object.assign(out, out2);\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: Extensions.ExtensionType.Asset,\n  /** Handle the caching of the related Spritesheet Textures */\n  cache: {\n    test: (asset) => asset instanceof Spritesheet.Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, false)\n  },\n  /** Resolve the resolution of the asset. */\n  resolver: {\n    extension: {\n      type: Extensions.ExtensionType.ResolveParser,\n      name: \"resolveSpritesheet\"\n    },\n    test: (value) => {\n      const tempURL = value.split(\"?\")[0];\n      const split = tempURL.split(\".\");\n      const extension = split.pop();\n      const format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: (value) => {\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat(Resolver.Resolver.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  /**\n   * Loader plugin that parses sprite sheets!\n   * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n   * If it is, we load the spritesheets image and parse the data into Spritesheet\n   * All textures in the sprite sheet are then added to the cache\n   */\n  loader: {\n    name: \"spritesheetLoader\",\n    extension: {\n      type: Extensions.ExtensionType.LoadParser,\n      priority: LoaderParser.LoaderParserPriority.Normal,\n      name: \"spritesheetLoader\"\n    },\n    async testParse(asset, options) {\n      return path.path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      const {\n        texture: imageTexture,\n        // if user need to use preloaded texture\n        imageFilename,\n        // if user need to use custom filename (not from jsonFile.meta.image)\n        textureOptions\n        // if user need to set texture options on texture\n      } = options?.data ?? {};\n      let basePath = path.path.dirname(options.src);\n      if (basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1) {\n        basePath += \"/\";\n      }\n      let texture;\n      if (imageTexture instanceof Texture.Texture) {\n        texture = imageTexture;\n      } else {\n        const imagePath = copySearchParams.copySearchParams(basePath + (imageFilename ?? asset.meta.image), options.src);\n        const assets = await loader.load([{ src: imagePath, data: textureOptions }]);\n        texture = assets[imagePath];\n      }\n      const spritesheet = new Spritesheet.Spritesheet(\n        texture.source,\n        asset\n      );\n      await spritesheet.parse();\n      const multiPacks = asset?.meta?.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          if (typeof item !== \"string\") {\n            continue;\n          }\n          let itemUrl = basePath + item;\n          if (options.data?.ignoreMultiPack) {\n            continue;\n          }\n          itemUrl = copySearchParams.copySearchParams(itemUrl, options.src);\n          promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              textureOptions,\n              ignoreMultiPack: true\n            }\n          }));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res;\n        res.forEach((item) => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    async unload(spritesheet, _resolvedAsset, loader) {\n      await loader.unload(spritesheet.textureSource._sourceOrigin);\n      spritesheet.destroy(false);\n    }\n  }\n};\n\nexports.spritesheetAsset = spritesheetAsset;\n//# sourceMappingURL=spritesheetAsset.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getCacheableAssets","keys","asset","ignoreMultiPack","out","forEach","key","Object","textures","basePath","path","dirname","linkedSheets","item","i","out2","data","meta","related_multi_packs","assign","LoaderParser","Resolver","copySearchParams","Extensions","Texture","Spritesheet","validImages","spritesheetAsset","extension","ExtensionType","Asset","cache","test","resolver","type","ResolveParser","name","value","split","tempURL","pop","format","includes","parse","resolution","parseFloat","RETINA_PREFIX","exec","length","src","loader","LoadParser","priority","LoaderParserPriority","Normal","testParse","options","extname","toLowerCase","frames","imageTexture","imageFilename","textureOptions","lastIndexOf","texture","imagePath","image","assets","load","spritesheet","source","multiPacks","Array","isArray","promises","itemUrl","push","res","Promise","all","concat","filter","sp","unload","_resolvedAsset","textureSource","_sourceOrigin","destroy"]
}
