{
"version":3,
"file":"module$node_modules$$pixi$core$lib$geometry$utils$interleaveTypedArrays.js",
"lineCount":26,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,GAA4F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEpI,MAAIC,QAAQH,OAAA,CAAQ,2CAAR,CAAZ;AACA,QAAMI,MAAM,CACVC,YADU,EAEVC,WAFU,EAGVC,UAHU,EAIVC,UAJU,CAAZ;AAwBAN,SAAQO,CAAAA,qBAAR,GAlBAA,QAA8B,CAACC,MAAD,EAASC,KAAT,CAAgB;AAAA,QACxCC,UAAU,CAD8B;AAC5C,QAAiBC,SAAS,CAA1B;AACA,UAAMC,QAAQ,EAAd;AACA,SAAK,IAAIC,aAAI,CAAb,EAAgBA,UAAhB,GAAoBL,MAAOM,CAAAA,MAA3B,EAAmCD,UAAA,EAAnC;AACEF,YAAoB,IAAVF,KAAA,CAAMI,UAAN,CAAU,EAAAH,OAAA,IAAWF,MAAA,CAAOK,UAAP,CAAUC,CAAAA,MAArB;AADtB;AAEMC,WAAAA,GAAS,IAAIC,WAAJ,CAA0B,CAA1B,GAAgBN,OAAhB,CAATK;AACUE,cAAAA,GAAe,CAAfA;AAChB,SAAK,IAAIJ,IAAI,CAAb,EAAgBA,CAAhB,GAAoBL,MAAOM,CAAAA,MAA3B,EAAmCD,CAAA,EAAnC,CAAwC;AAAA,YAChCK,OAAOT,KAAA,CAAMI,CAAN,CADyB,EACfM,QAAQX,MAAA,CAAOK,CAAP,CADO;AACIO,UAAAA,MAAOnB,KAAMoB,CAAAA,aAAN,CAAoBF,KAApB,CAAPC;AAC1CR,WAAA,CAAMQ,GAAN,CAAA,KAAgBR,KAAA,CAAMQ,GAAN,CAAhB,GAA8B,IAAIlB,GAAA,CAAIkB,GAAJ,CAAJ,CAAcL,OAAd,CAA9B;AAAsDO,SAAA,GAAMV,KAAA,CAAMQ,GAAN,CAAN;AACtD,WAAK,IAAIG,IAAI,CAAb,EAAgBA,CAAhB,GAAoBJ,KAAML,CAAAA,MAA1B,EAAkCS,CAAA,EAAlC;AAEED,WAAA,EADoBC,CACpB,GADwBL,IACxB,GAD+B,CAC/B,IADoCP,MACpC,GAD6CM,UAC7C,GADmEM,CACnE,GADuEL,IACvE,CAAA,GAA0BC,KAAA,CAAMI,CAAN,CAA1B;AAFF;AAIAN,gBAAA,IAAgBC,IAAhB;AAPsC;AASxC,WAAO,IAAIf,YAAJ,CAAiBY,OAAjB,CAAP;AAhB4C,GAkB9C;AA3BoI,CAApI;;",
"sources":["node_modules/@pixi/core/lib/geometry/utils/interleaveTypedArrays.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$geometry$utils$interleaveTypedArrays\"] = function(global,require,module,exports) {\n\"use strict\";\nvar utils = require(\"@pixi/utils\");\nconst map = {\n  Float32Array,\n  Uint32Array,\n  Int32Array,\n  Uint8Array\n};\nfunction interleaveTypedArrays(arrays, sizes) {\n  let outSize = 0, stride = 0;\n  const views = {};\n  for (let i = 0; i < arrays.length; i++)\n    stride += sizes[i], outSize += arrays[i].length;\n  const buffer = new ArrayBuffer(outSize * 4);\n  let out = null, littleOffset = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const size = sizes[i], array = arrays[i], type = utils.getBufferType(array);\n    views[type] || (views[type] = new map[type](buffer)), out = views[type];\n    for (let j = 0; j < array.length; j++) {\n      const indexStart = (j / size | 0) * stride + littleOffset, index = j % size;\n      out[indexStart + index] = array[j];\n    }\n    littleOffset += size;\n  }\n  return new Float32Array(buffer);\n}\nexports.interleaveTypedArrays = interleaveTypedArrays;\n//# sourceMappingURL=interleaveTypedArrays.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","utils","map","Float32Array","Uint32Array","Int32Array","Uint8Array","interleaveTypedArrays","arrays","sizes","outSize","stride","views","i","length","buffer","ArrayBuffer","littleOffset","size","array","type","getBufferType","out","j"]
}
