{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$Texture.js",
"lineCount":163,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,GAAwE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAIhHC,UAASA,kBAAiB,CAACC,GAAD,CAAM;AAC9BA,OAAIC,CAAAA,OAAJ,GAAcC,QAAQ,EAAG;KAAzB;AACGF,OAAIG,CAAAA,EAAJ,GAASC,QAAQ,EAAG;KAApB;AACAJ,OAAIK,CAAAA,IAAJ,GAAWC,QAAQ,EAAG;KAAtB;AACAN,OAAIO,CAAAA,IAAJ,GAAWC,QAAQ,EAAG;KAAtB;AAJ2B;AAJgF,MAE5GC,OAAOb,OAAA,CAAQ,0CAAR,CAFqG,EAE9Ec,WAAWd,OAAA,CAAQ,8CAAR,CAFmE,EAExCe,QAAQf,OAAA,CAAQ,2CAAR,CAFgC,EAERgB,cAAchB,OAAA,CAAQ,yDAAR,CAFN,EAEmCiB,gBAAgBjB,OAAA,CAAQ,qEAAR,CAFnD,EAE4FkB,aAAalB,OAAA,CAAQ,wDAAR,CAFzG;AAGhH,QAAMmB,cAAc,IAAID,UAAWA,CAAAA,UAAf,EAApB;AAQA,OAAME,QAAN,QAAsBL,MAAMM,CAAAA,YAA5B;AAUEC,eAAW,CAACC,WAAD,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiDC,OAAjD,CAA0D;AACnE,UAAI,KAAA,EAAA,EAAS,IAAKC,CAAAA,OAAd,GAAwB,CAAA,CAAxB,EAA4BN,KAA5B,KAAsC,IAAKM,CAAAA,OAAL,GAAe,CAAA,CAAf,EAAmBN,KAAnB,GAA2B,IAAIX,IAAKkB,CAAAA,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAjE,GAAkGR,WAAlG,YAAyHH,OAAzH,KAAqIG,WAArI,GAAmJA,WAAYA,CAAAA,WAA/J,GAA6K,IAAKA,CAAAA,WAAlL,GAAgMA,WAAhM,EAA6M,IAAKS,CAAAA,MAAlN,GAA2NR,KAA3N,EAAkO,IAAKE,CAAAA,IAAvO,GAA8OA,IAA9O,EAAoP,IAAKO,CAAAA,KAAzP,GAAiQ,CAAA,CAAjQ,EAAqQ,IAAKC,CAAAA,SAA1Q,GAAsR,CAAA,CAAtR,EAA0R,IAAKC,CAAAA,IAA/R,GAAsShB,WAAtS,EAAmT,IAAKiB,CAAAA,QAAxT,GAAmU,IAAnU,EAAyU,IAAKX,CAAAA,IAA9U,GAAqVA,IAArV,IAA6VD,KAA7V,EAAoW,IAAKa,CAAAA,OAAzW,GAAmXC,MAAA,CAAOX,MAAP,IAAiB,CAAjB,CAAnX,EAAmZ,CAAA,CAAnZ,KAAwYA,MAA5Y;AACE,YAAKU,CAAAA,OAAL,GAAe,CAAf;AADF,YAEK,KAAyB,CAAzB,KAAI,IAAKA,CAAAA,OAAT,GAAmB,CAAnB;AACH,cAAUE,KAAJ,CAAU,2EAAV,CAAN;AADG;AAEL,UAAKC,CAAAA,aAAL,GAAqBZ,MAAA,GAAS,IAAIf,IAAK4B,CAAAA,KAAT,CAAeb,MAAOc,CAAAA,CAAtB,EAAyBd,MAAOe,CAAAA,CAAhC,CAAT,GAA8C,IAAI9B,IAAK4B,CAAAA,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAnE;AAAyF,UAAKG,CAAAA,cAAL,GAAsBf,OAAtB;AAA+B,UAAKgB,CAAAA,SAAL,GAAiB,CAAjB;AAAoB,UAAKC,CAAAA,eAAL,GAAuB,EAAvB;AAA2BvB,iBAAYU,CAAAA,KAAZ,GAAoB,IAAKH,CAAAA,OAAL,GAAeP,WAAYU,CAAAA,KAA3B,IAAoC,IAAKc,CAAAA,oBAAL,CAA0BxB,WAA1B,CAApC,GAA6E,IAAKC,CAAAA,KAAlF,GAA0FA,KAA9G,GAAsHD,WAAYd,CAAAA,IAAZ,CAAiB,QAAjB,EAA2B,IAAKsC,CAAAA,oBAAhC,EAAsD,IAAtD,CAAtH;AAAmL,UAAKjB,CAAAA,OAAL,IAAgBP,WAAYhB,CAAAA,EAAZ,CAAe,QAAf,EAAyB,IAAKwC,CAAAA,oBAA9B,EAAoD,IAApD,CAAhB;AALvR;AAcrEC,UAAM,EAAG;AACP,UAAKzB,CAAAA,WAAY0B,CAAAA,QAAjB,IAA6B,IAAK1B,CAAAA,WAAY0B,CAAAA,QAASD,CAAAA,MAA1B,EAA7B;AADO;AAQTD,wBAAoB,CAACxB,WAAD,CAAc;AAChC,UAAI,IAAKO,CAAAA,OAAT,CAAkB;AAChB,YAAI,CAAC,IAAKP,CAAAA,WAAYU,CAAAA,KAAtB;AACE;AADF;AAEA,YAAKD,CAAAA,MAAOkB,CAAAA,KAAZ,GAAoB3B,WAAY2B,CAAAA,KAAhC;AAAuC,YAAKlB,CAAAA,MAAOmB,CAAAA,MAAZ,GAAqB5B,WAAY4B,CAAAA,MAAjC;AAAyC,YAAKlB,CAAAA,KAAL,GAAa,CAAA,CAAb;AAAiB,YAAKmB,CAAAA,SAAL,EAAA;AAHjF,OAAlB;AAKE,YAAK5B,CAAAA,KAAL,GAAa,IAAKQ,CAAAA,MAAlB;AALF;AAMA,UAAKrB,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AAPgC;AAclCN,WAAO,CAACgD,WAAD,CAAc;AACf,UAAK9B,CAAAA,WAAT,KACM8B,WAI8H,KAH1H,CAAE,SAAAJ,WAAF,CACsF,GADvE,IAAK1B,CAAAA,WACkE,EAA5F0B,WAAUK,EAAAA,GAAkF,IAA3EvC,KAAMwC,CAAAA,YAAN,CAAmBN,WAASK,CAAAA,GAA5B,CAA2E,IAAvClC,OAAQoC,CAAAA,eAAR,CAAwBP,WAASK,CAAAA,GAAjC,CAAuC,EAAA,IAAK/B,CAAAA,WAAYlB,CAAAA,OAAjB,EAEoC,GAAlI,IAAKkB,CAAAA,WAAYkC,CAAAA,GAAjB,CAAqB,QAArB,EAA+B,IAAKV,CAAAA,oBAApC,EAA0D,IAA1D,CAAkI,EAAjE,IAAKxB,CAAAA,WAAYkC,CAAAA,GAAjB,CAAqB,QAArB,EAA+B,IAAKV,CAAAA,oBAApC,EAA0D,IAA1D,CAAiE,EAAA,IAAKxB,CAAAA,WAAL,GAAmB,IALvJ;AAOwD,UAAKE,CAAAA,IAAL,GAAlB,IAAKC,CAAAA,IAAa,GAApC,IAAKS,CAAAA,IAA+B,GAAxD,IAAKH,CAAAA,MAAmD,GAA1C,IAA0C;AAAkB,UAAKC,CAAAA,KAAL,GAAa,CAAA,CAAb;AAAiBb,aAAQoC,CAAAA,eAAR,CAAwB,IAAxB,CAAA;AAA+B,UAAKV,CAAAA,eAAL,GAAuB,IAAvB;AAA6B,UAAKZ,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AAAqB,UAAKvB,CAAAA,IAAL,CAAU,WAAV,EAAuB,IAAvB,CAAA;AAA8B,UAAK+C,CAAAA,kBAAL,EAAA;AARvL;AAcrBC,SAAK,EAAG;AAAA,YACAC,cAAc,IAAK5B,CAAAA,MAAO2B,CAAAA,KAAZ,EADd;AAAA,UACmCE,aAAa,IAAK7B,CAAAA,MAAL,KAAgB,IAAKP,CAAAA,IAArB,GAA4BmC,WAA5B,GAA0C,IAAKnC,CAAAA,IAAKkC,CAAAA,KAAV,EAD1F;AAC6GG,gBAAAA,GAAgB,IAAI1C,OAAJ,CACjI,IAAKG,CAAAA,WAD4H,EAEjI,CAAC,IAAKO,CAAAA,OAF2H,IAEhH8B,WAFgH,EAGjIC,UAHiI,EAIjI,IAAKnC,CAAAA,IAAMiC,EAAAA,KAAX,EAJiI,EAKjI,IAAKhC,CAAAA,MAL4H,EAMjI,IAAKa,CAAAA,aAN4H,EAOjI,IAAKI,CAAAA,cAP4H,CAAhBkB;AASnH,aAAO,IAAKhC,CAAAA,OAAL,KAAiBgC,UAAc9B,CAAAA,MAA/B,GAAwC4B,WAAxC,GAAsDE,UAA7D;AAVM;AAgBRV,aAAS,EAAG;AACV,UAAKjB,CAAAA,IAAL,KAAchB,WAAd,KAA8B,IAAKgB,CAAAA,IAAnC,GAA0C,IAAIjB,UAAWA,CAAAA,UAAf,EAA1C;AAAwE,UAAKiB,CAAAA,IAAK4B,CAAAA,GAAV,CAAc,IAAK/B,CAAAA,MAAnB,EAA2B,IAAKT,CAAAA,WAAhC,EAA6C,IAAKI,CAAAA,MAAlD,CAAA;AAA2D,UAAKkB,CAAAA,SAAL,EAAA;AADzH;AAaLmB,eAAI,CAACC,MAAD,EAASC,OAAA,GAAU,EAAnB,EAAuBC,MAAA,GAASrD,QAASA,CAAAA,QAASsD,CAAAA,oBAAlD,CAAwE;AACjF,YAAMC,UAA2B,QAA3BA,IAAU,MAAOJ,OAAvB;AACA,UAAIK,OAAJ;AACID,aAAJ,GACEC,OADF,GACYL,MADZ,GAESA,MAAJ,YAAsBjD,WAAYA,CAAAA,WAAlC,IACEiD,MAAOK,CAAAA,OAIZ,KAFEL,MAAOK,CAAAA,OAAsC,GAA3B,GADHJ,OAASK,EAAAA,YACN,IADsB,QACtB,IAAYxD,KAAMyD,CAAAA,GAAN,EAAZ,EAA2B,EAAAxD,WAAYA,CAAAA,WAAYyD,CAAAA,UAAxB,CAAmCR,MAAnC,EAA2CA,MAAOK,CAAAA,OAAlD,CAE/C,GAAAA,OAAA,GAAUL,MAAOK,CAAAA,OALd,KAOEL,MAAOS,CAAAA,OAIZ,KAFET,MAAOS,CAAAA,OAET,GAFoB,GADHR,OAASK,EAAAA,YACN,IADsB,QACtB,IAAYxD,KAAMyD,CAAAA,GAAN,EAAZ,EAEpB,GAAAF,OAAA,GAAUL,MAAOS,CAAAA,OAXd,CAFL;AAeA,UAAIC,UAAU5D,KAAMwC,CAAAA,YAAN,CAAmBe,OAAnB,CAAd;AACA,UAAID,OAAJ,IAAeF,MAAf,IAAyB,CAACQ,OAA1B;AACE,cAAUpC,KAAJ,CAAW,gBAAe+B,OAAf,mCAAX,CAAN;AADF;AAEA,aAAQK,OAAD,IAAcV,MAAd,YAAgCjD,WAAYA,CAAAA,WAA5C,GAAiW,CAAC2D,OAAlW,IAA6WV,MAA7W,YAA+XjD,WAAYA,CAAAA,WAA3Y,KAA2Z2D,OAAA,GAAU,IAAIvD,OAAJ,CAAY6C,MAAZ,CAAV,EAA+B7C,OAAQqD,CAAAA,UAAR,CAAmBE,OAAnB,EAA4BL,OAA5B,CAA1b,KAA4DJ,OAAQU,CAAAA,UAAR,KAAuBV,OAAQU,CAAAA,UAA/B,GAA4C7D,KAAM8D,CAAAA,kBAAN,CAAyBZ,MAAzB,CAA5C,GAA+EU,OAA/E,GAAyF,IAAIvD,OAAJ,CAAY,IAAIJ,WAAYA,CAAAA,WAAhB,CAA4BiD,MAA5B,EAAoCC,OAApC,CAAZ,CAAzF,EAAoJS,OAAQpD,CAAAA,WAAY+C,CAAAA,OAAxK,GAAkLA,OAAlL,EAA2LtD,WAAYA,CAAAA,WAAYyD,CAAAA,UAAxB,CAAmCE,OAAQpD,CAAAA,WAA3C,EAAwD+C,OAAxD,CAA3L,EAA6PlD,OAAQqD,CAAAA,UAAR,CAAmBE,OAAnB,EAA4BL,OAA5B,CAAzT,CAAA,EAAieK,OAAxe;AArBiF;AA+B5EG,kBAAO,CAACxB,GAAD,EAAMY,OAAN,CAAe;AAAA,YACrBa,kBAAkBC,MAAOC,CAAAA,MAAP,CAAc,CAAEC,SAAU,CAAA,CAAZ,CAAd,EAAgChB,OAASa,EAAAA,eAAzC,CADG,EACwDJ,UAAUvD,OAAQ4C,CAAAA,IAAR,CAAaV,GAAb,EAAkB0B,MAAOC,CAAAA,MAAP,CAAc,CAAEF,eAAF,CAAd,EAAmCb,OAAnC,CAAlB,EAA+D,CAAA,CAA/D,CADlE;AACsIjB,SAAAA,GAAW0B,OAAQpD,CAAAA,WAAY0B,CAAAA,QAA/BA;AACjK,aAAO0B,OAAQpD,CAAAA,WAAYU,CAAAA,KAApB,GAA4BkD,OAAQC,CAAAA,OAAR,CAAgBT,OAAhB,CAA5B,GAAuD1B,GAASoC,CAAAA,IAAT,EAAgBC,CAAAA,IAAhB,CAAqB,EAAA,IAAMH,OAAQC,CAAAA,OAAR,CAAgBT,OAAhB,CAA3B,CAA9D;AAF2B;AAsBtBY,qBAAU,CAACC,MAAD,EAAStC,KAAT,EAAgBC,MAAhB,EAAwBe,OAAxB,CAAiC;AAChD,aAAO,IAAI9C,OAAJ,CAAYJ,WAAYA,CAAAA,WAAYuE,CAAAA,UAAxB,CAAmCC,MAAnC,EAA2CtC,KAA3C,EAAkDC,MAAlD,EAA0De,OAA1D,CAAZ,CAAP;AADgD;AAY3CuB,qBAAU,CAACxB,MAAD,EAASyB,QAAT,EAAmBC,IAAnB,EAAyBzB,OAAzB,CAAkC;AAC3C3C,YAAAA,GAAc,IAAIP,WAAYA,CAAAA,WAAhB,CAA4BiD,MAA5B,EAAoCe,MAAOC,CAAAA,MAAP,CAAc,CACpEW,UAAW5E,WAAYA,CAAAA,WAAY6E,CAAAA,cAAeD,CAAAA,SADkB,EAEpEhB,WAAY7D,KAAM8D,CAAAA,kBAAN,CAAyBa,QAAzB,CAFwD,CAAd,EAGrDxB,OAHqD,CAApC,CAAd3C;AAAN,OAGc,CAAE,SAAA0B,OAAF,CAHd,GAG6B1B,MAH7B;AAIA0B,aAAA,YAAoBhC,aAAcA,CAAAA,aAAlC,KAAoDgC,OAASK,CAAAA,GAA7D,GAAmEoC,QAAnE;AACA,YAAMf,UAAU,IAAIvD,OAAJ,CAAYG,MAAZ,CAAhB;AACA,aAAOoE,IAAA,KAASA,IAAT,GAAgBD,QAAhB,GAA2B1E,WAAYA,CAAAA,WAAYyD,CAAAA,UAAxB,CAAmCE,OAAQpD,CAAAA,WAA3C,EAAwDoE,IAAxD,CAA3B,EAA0FvE,OAAQqD,CAAAA,UAAR,CAAmBE,OAAnB,EAA4BgB,IAA5B,CAA1F,EAA6HA,IAA7H,KAAsID,QAAtI,KAAmJ1E,WAAYA,CAAAA,WAAYyD,CAAAA,UAAxB,CAAmCE,OAAQpD,CAAAA,WAA3C,EAAwDmE,QAAxD,CAAA,EAAmEtE,OAAQqD,CAAAA,UAAR,CAAmBE,OAAnB,EAA4Be,QAA5B,CAAtN,GAA8Pf,OAAQpD,CAAAA,WAAYU,CAAAA,KAApB,GAA4BkD,OAAQC,CAAAA,OAAR,CAAgBT,OAAhB,CAA5B,GAAuD,IAAIQ,OAAJ,CAAaC,OAAD,IAAa;AACnVT,eAAQpD,CAAAA,WAAYd,CAAAA,IAApB,CAAyB,QAAzB,EAAmC,EAAA,IAAM2E,OAAA,CAAQT,OAAR,CAAzC,CAAA;AADmV,OAAzB,CAA5T;AAPiD;AAgB5CF,qBAAU,CAACE,OAAD,EAAUmB,EAAV,CAAc;AAC7BA,QAAA,KAAOnB,OAAQ7B,CAAAA,eAAgBiD,CAAAA,QAAxB,CAAiCD,EAAjC,CAAA,IAAwCnB,OAAQ7B,CAAAA,eAAgBkD,CAAAA,IAAxB,CAA6BF,EAA7B,CAAxC,EAA0E/E,KAAMwC,CAAAA,YAAN,CAAmBuC,EAAnB,CAA1E,IAAoG/E,KAAMwC,CAAAA,YAAN,CAAmBuC,EAAnB,CAApG,KAA+HnB,OAA/H,IAA0IsB,OAAQC,CAAAA,IAAR,CAAc,0CAAyCJ,EAAzC,6BAAd,CAA1I,EAAmO/E,KAAMwC,CAAAA,YAAN,CAAmBuC,EAAnB,CAAnO,GAA4PnB,OAAnQ;AAD6B;AAQxBnB,0BAAe,CAACmB,OAAD,CAAU;AAC9B,UAAsB,QAAtB,IAAI,MAAOA,QAAX,CAAgC;AAC9B,YAAMwB,mBAAmBpF,KAAMwC,CAAAA,YAAN,CAAmBoB,OAAnB,CAAzB;AACA,YAAIwB,gBAAJ,CAAsB;AACpB,gBAAMC,QAAQD,gBAAiBrD,CAAAA,eAAgBuD,CAAAA,OAAjC,CAAyC1B,OAAzC,CAAd;AACA,iBAAe,CAAC,CAAT,GAAAyB,KAAA,IAAcD,gBAAiBrD,CAAAA,eAAgBwD,CAAAA,MAAjC,CAAwCF,KAAxC,EAA+C,CAA/C,CAAd,EAAiE,OAAOrF,KAAMwC,CAAAA,YAAN,CAAmBoB,OAAnB,CAAxE,EAAqGwB,gBAA5G;AAFoB;AAFQ,OAAhC,KAMO,KAAIxB,OAAS7B,EAAAA,eAAb,CAA8B;AACnC,aAASyD,gBAAT,GAAa,CAAb,EAAgBA,gBAAhB,GAAoB5B,OAAQ7B,CAAAA,eAAgB0D,CAAAA,MAA5C,EAAoD,EAAED,gBAAtD;AACExF,eAAMwC,CAAAA,YAAN,CAAmBoB,OAAQ7B,CAAAA,eAAR,CAAwByD,gBAAxB,CAAnB,CAAA,KAAmD5B,OAAnD,IAA8D,OAAO5D,KAAMwC,CAAAA,YAAN,CAAmBoB,OAAQ7B,CAAAA,eAAR,CAAwByD,gBAAxB,CAAnB,CAArE;AADF;AAEA,eAAO5B,OAAQ7B,CAAAA,eAAgB0D,CAAAA,MAAxB,GAAiC,CAAjC,EAAoC7B,OAA3C;AAHmC;AAKrC,aAAO,IAAP;AAZ8B;AAkB5B,kBAAa,EAAA;AACf,aAAO,IAAKpD,CAAAA,WAAYqD,CAAAA,UAAxB;AADe;AAOb,aAAQ,EAAA;AACV,aAAO,IAAK5C,CAAAA,MAAZ;AADU;AAGR,aAAK,CAACR,KAAD,CAAQ;AACf,UAAKQ,CAAAA,MAAL,GAAcR,KAAd;AAAqB,UAAKM,CAAAA,OAAL,GAAe,CAAA,CAAf;AADN,YAET,CAAEY,CAAF,EAAKC,CAAL,EAAQO,KAAR,EAAeC,MAAf,CAAA,GAA0B3B,KAFjB,EAEwBiF,UAAU/D,CAAV+D,GAAcvD,KAAduD,GAAsB,IAAKlF,CAAAA,WAAY2B,CAAAA,KAF/D,EAEsEwD,UAAU/D,CAAV+D,GAAcvD,MAAduD,GAAuB,IAAKnF,CAAAA,WAAY4B,CAAAA,MAF9G;AAGf,UAAIsD,OAAJ,IAAeC,OAAf;AAEE,cAAUnE,KAAJ,CAAW,yEADiDoE,MAAKjE,CAALiE,MAAYzD,KAAZyD,MAAuBjE,CAAvBiE,GAA2BzD,KAA3ByD,MAAsC,IAAKpF,CAAAA,WAAY2B,CAAAA,KAAvDyD,EACjD,IADIF,OAAAG,IAAWF,OAAXE,GAAqB,KAArBA,GAA6B,IACjC,IAD2HC,MAAKlE,CAALkE,MAAY1D,MAAZ0D,MAAwBlE,CAAxBkE,GAA4B1D,MAA5B0D,MAAwC,IAAKtF,CAAAA,WAAY4B,CAAAA,MAAzD0D,EAC3H,EAAX,CAAN;AAFF;AAIA,UAAK5E,CAAAA,KAAL,GAAaiB,KAAb,IAAsBC,MAAtB,IAAgC,IAAK5B,CAAAA,WAAYU,CAAAA,KAAjD;AAAyD,UAAKP,CAAAA,IAAN,IAAe,IAAKC,CAAAA,MAApB,KAA+B,IAAKF,CAAAA,IAApC,GAA2CD,KAA3C;AAAmD,UAAKS,CAAAA,KAAL,IAAc,IAAKmB,CAAAA,SAAL,EAAd;AAP5F;AAgBb,cAAS,EAAA;AACX,aAAO,IAAKf,CAAAA,OAAZ;AADW;AAGT,cAAM,CAACV,MAAD,CAAS;AACjB,UAAKU,CAAAA,OAAL,GAAeV,MAAf;AAAuB,UAAKM,CAAAA,KAAL,IAAc,IAAKmB,CAAAA,SAAL,EAAd;AADN;AAIf,aAAQ,EAAA;AACV,aAAO,IAAK3B,CAAAA,IAAKyB,CAAAA,KAAjB;AADU;AAIR,cAAS,EAAA;AACX,aAAO,IAAKzB,CAAAA,IAAK0B,CAAAA,MAAjB;AADW;AAIb2D,qBAAiB,EAAG;AAClB,aAAO,IAAKvF,CAAAA,WAAZ;AADkB;AAIT,oBAAQ,EAAA;AACjB,aAAOH,OAAQ2F,CAAAA,MAAR,KAAmB3F,OAAQ2F,CAAAA,MAAR,GAAiB,IAAI3F,OAAJ,CAAY,IAAIJ,WAAYA,CAAAA,WAAhB,EAAZ,CAAjB,EAA6Db,iBAAA,CAAkBiB,OAAQ2F,CAAAA,MAA1B,CAA7D,EAAgG5G,iBAAA,CAAkBiB,OAAQ2F,CAAAA,MAAOxF,CAAAA,WAAjC,CAAnH,GAAmKH,OAAQ2F,CAAAA,MAAlL;AADiB;AAIR,oBAAQ,EAAA;AACjB,UAAI,CAAC3F,OAAQ4F,CAAAA,MAAb,CAAqB;AAAA,cACbC,SAASnG,QAASA,CAAAA,QAASoG,CAAAA,OAAQC,CAAAA,YAA1B,CAAuC,EAAvC,EAA2C,EAA3C,CADI,EAC4CC,UAAUH,MAAOI,CAAAA,UAAP,CAAkB,IAAlB,CADtD;AAEnBJ,cAAO/D,CAAAA,KAAP,GAAe,EAAf;AAAmB+D,cAAO9D,CAAAA,MAAP,GAAgB,EAAhB;AAAoBiE,eAAQE,CAAAA,SAAR,GAAoB,OAApB;AAA6BF,eAAQG,CAAAA,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,EAAvB,EAA2B,EAA3B,CAAA;AAAgCnG,eAAQ4F,CAAAA,MAAR,GAAiB,IAAI5F,OAAJ,CAAYJ,WAAYA,CAAAA,WAAYgD,CAAAA,IAAxB,CAA6BiD,MAA7B,CAAZ,CAAjB;AAAoE9G,yBAAA,CAAkBiB,OAAQ4F,CAAAA,MAA1B,CAAA;AAAmC7G,yBAAA,CAAkBiB,OAAQ4F,CAAAA,MAAOzF,CAAAA,WAAjC,CAAA;AAFxL;AAIrB,aAAOH,OAAQ4F,CAAAA,MAAf;AALiB;AArPrB;AA6PA9G,SAAQkB,CAAAA,OAAR,GAAkBA,OAAlB;AAxQgH,CAAhH;;",
"sources":["node_modules/@pixi/core/lib/textures/Texture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$Texture\"] = function(global,require,module,exports) {\n\"use strict\";\nvar math = require(\"@pixi/math\"), settings = require(\"@pixi/settings\"), utils = require(\"@pixi/utils\"), BaseTexture = require(\"./BaseTexture.js\"), ImageResource = require(\"./resources/ImageResource.js\"), TextureUvs = require(\"./TextureUvs.js\");\nconst DEFAULT_UVS = new TextureUvs.TextureUvs();\nfunction removeAllHandlers(tex) {\n  tex.destroy = function() {\n  }, tex.on = function() {\n  }, tex.once = function() {\n  }, tex.emit = function() {\n  };\n}\nclass Texture extends utils.EventEmitter {\n  /**\n   * @param baseTexture - The base texture source to create the texture from\n   * @param frame - The rectangle frame of the texture to show\n   * @param orig - The area of original texture\n   * @param trim - Trimmed rectangle of original texture\n   * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}\n   * @param anchor - Default anchor point used for sprite placement / rotation\n   * @param borders - Default borders used for 9-slice scaling. See {@link PIXI.NineSlicePlane}\n   */\n  constructor(baseTexture, frame, orig, trim, rotate, anchor, borders) {\n    if (super(), this.noFrame = !1, frame || (this.noFrame = !0, frame = new math.Rectangle(0, 0, 1, 1)), baseTexture instanceof Texture && (baseTexture = baseTexture.baseTexture), this.baseTexture = baseTexture, this._frame = frame, this.trim = trim, this.valid = !1, this.destroyed = !1, this._uvs = DEFAULT_UVS, this.uvMatrix = null, this.orig = orig || frame, this._rotate = Number(rotate || 0), rotate === !0)\n      this._rotate = 2;\n    else if (this._rotate % 2 !== 0)\n      throw new Error(\"attempt to use diamond-shaped UVs. If you are sure, set rotation manually\");\n    this.defaultAnchor = anchor ? new math.Point(anchor.x, anchor.y) : new math.Point(0, 0), this.defaultBorders = borders, this._updateID = 0, this.textureCacheIds = [], baseTexture.valid ? this.noFrame ? baseTexture.valid && this.onBaseTextureUpdated(baseTexture) : this.frame = frame : baseTexture.once(\"loaded\", this.onBaseTextureUpdated, this), this.noFrame && baseTexture.on(\"update\", this.onBaseTextureUpdated, this);\n  }\n  /**\n   * Updates this texture on the gpu.\n   *\n   * Calls the TextureResource update.\n   *\n   * If you adjusted `frame` manually, please call `updateUvs()` instead.\n   */\n  update() {\n    this.baseTexture.resource && this.baseTexture.resource.update();\n  }\n  /**\n   * Called when the base texture is updated\n   * @protected\n   * @param baseTexture - The base texture.\n   */\n  onBaseTextureUpdated(baseTexture) {\n    if (this.noFrame) {\n      if (!this.baseTexture.valid)\n        return;\n      this._frame.width = baseTexture.width, this._frame.height = baseTexture.height, this.valid = !0, this.updateUvs();\n    } else\n      this.frame = this._frame;\n    this.emit(\"update\", this);\n  }\n  /**\n   * Destroys this texture\n   * @param [destroyBase=false] - Whether to destroy the base texture as well\n   * @fires PIXI.Texture#destroyed\n   */\n  destroy(destroyBase) {\n    if (this.baseTexture) {\n      if (destroyBase) {\n        const { resource } = this.baseTexture;\n        resource?.url && utils.TextureCache[resource.url] && Texture.removeFromCache(resource.url), this.baseTexture.destroy();\n      }\n      this.baseTexture.off(\"loaded\", this.onBaseTextureUpdated, this), this.baseTexture.off(\"update\", this.onBaseTextureUpdated, this), this.baseTexture = null;\n    }\n    this._frame = null, this._uvs = null, this.trim = null, this.orig = null, this.valid = !1, Texture.removeFromCache(this), this.textureCacheIds = null, this.destroyed = !0, this.emit(\"destroyed\", this), this.removeAllListeners();\n  }\n  /**\n   * Creates a new texture object that acts the same as this one.\n   * @returns - The new texture\n   */\n  clone() {\n    const clonedFrame = this._frame.clone(), clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone(), clonedTexture = new Texture(\n      this.baseTexture,\n      !this.noFrame && clonedFrame,\n      clonedOrig,\n      this.trim?.clone(),\n      this.rotate,\n      this.defaultAnchor,\n      this.defaultBorders\n    );\n    return this.noFrame && (clonedTexture._frame = clonedFrame), clonedTexture;\n  }\n  /**\n   * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n   * Call it after changing the frame\n   */\n  updateUvs() {\n    this._uvs === DEFAULT_UVS && (this._uvs = new TextureUvs.TextureUvs()), this._uvs.set(this._frame, this.baseTexture, this.rotate), this._updateID++;\n  }\n  /**\n   * Helper function that creates a new Texture based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   * @param {string|PIXI.BaseTexture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source -\n   *        Source or array of sources to create texture from\n   * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n   * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n   * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n   * @returns {PIXI.Texture} The newly created texture\n   */\n  static from(source, options = {}, strict = settings.settings.STRICT_TEXTURE_CACHE) {\n    const isFrame = typeof source == \"string\";\n    let cacheId = null;\n    if (isFrame)\n      cacheId = source;\n    else if (source instanceof BaseTexture.BaseTexture) {\n      if (!source.cacheId) {\n        const prefix = options?.pixiIdPrefix || \"pixiid\";\n        source.cacheId = `${prefix}-${utils.uid()}`, BaseTexture.BaseTexture.addToCache(source, source.cacheId);\n      }\n      cacheId = source.cacheId;\n    } else {\n      if (!source._pixiId) {\n        const prefix = options?.pixiIdPrefix || \"pixiid\";\n        source._pixiId = `${prefix}_${utils.uid()}`;\n      }\n      cacheId = source._pixiId;\n    }\n    let texture = utils.TextureCache[cacheId];\n    if (isFrame && strict && !texture)\n      throw new Error(`The cacheId \"${cacheId}\" does not exist in TextureCache.`);\n    return !texture && !(source instanceof BaseTexture.BaseTexture) ? (options.resolution || (options.resolution = utils.getResolutionOfUrl(source)), texture = new Texture(new BaseTexture.BaseTexture(source, options)), texture.baseTexture.cacheId = cacheId, BaseTexture.BaseTexture.addToCache(texture.baseTexture, cacheId), Texture.addToCache(texture, cacheId)) : !texture && source instanceof BaseTexture.BaseTexture && (texture = new Texture(source), Texture.addToCache(texture, cacheId)), texture;\n  }\n  /**\n   * Useful for loading textures via URLs. Use instead of `Texture.from` because\n   * it does a better job of handling failed URLs more effectively. This also ignores\n   * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\n   * @param url - The remote URL or array of URLs to load.\n   * @param options - Optional options to include\n   * @returns - A Promise that resolves to a Texture.\n   */\n  static fromURL(url, options) {\n    const resourceOptions = Object.assign({ autoLoad: !1 }, options?.resourceOptions), texture = Texture.from(url, Object.assign({ resourceOptions }, options), !1), resource = texture.baseTexture.resource;\n    return texture.baseTexture.valid ? Promise.resolve(texture) : resource.load().then(() => Promise.resolve(texture));\n  }\n  /**\n   * Create a new Texture with a BufferResource from a typed array.\n   * @param buffer - The optional array to use. If no data is provided, a new Float32Array is created.\n   * @param width - Width of the resource\n   * @param height - Height of the resource\n   * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n   *        Default properties are different from the constructor's defaults.\n   * @param {PIXI.FORMATS} [options.format] - The format is not given, the type is inferred from the\n   *        type of the buffer: `RGBA` if Float32Array, Int8Array, Uint8Array, or Uint8ClampedArray,\n   *        otherwise `RGBA_INTEGER`.\n   * @param {PIXI.TYPES} [options.type] - The type is not given, the type is inferred from the\n   *        type of the buffer. Maps Float32Array to `FLOAT`, Int32Array to `INT`, Uint32Array to\n   *        `UNSIGNED_INT`, Int16Array to `SHORT`, Uint16Array to `UNSIGNED_SHORT`, Int8Array to `BYTE`,\n   *        Uint8Array/Uint8ClampedArray to `UNSIGNED_BYTE`.\n   * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.NPM]\n   * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.SCALE_MODES.NEAREST]\n   * @returns - The resulting new BaseTexture\n   */\n  static fromBuffer(buffer, width, height, options) {\n    return new Texture(BaseTexture.BaseTexture.fromBuffer(buffer, width, height, options));\n  }\n  /**\n   * Create a texture from a source and add to the cache.\n   * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas|string} source - The input source.\n   * @param imageUrl - File name of texture, for cache and resolving resolution.\n   * @param name - Human readable name for the texture cache. If no name is\n   *        specified, only `imageUrl` will be used as the cache ID.\n   * @param options\n   * @returns - Output texture\n   */\n  static fromLoader(source, imageUrl, name, options) {\n    const baseTexture = new BaseTexture.BaseTexture(source, Object.assign({\n      scaleMode: BaseTexture.BaseTexture.defaultOptions.scaleMode,\n      resolution: utils.getResolutionOfUrl(imageUrl)\n    }, options)), { resource } = baseTexture;\n    resource instanceof ImageResource.ImageResource && (resource.url = imageUrl);\n    const texture = new Texture(baseTexture);\n    return name || (name = imageUrl), BaseTexture.BaseTexture.addToCache(texture.baseTexture, name), Texture.addToCache(texture, name), name !== imageUrl && (BaseTexture.BaseTexture.addToCache(texture.baseTexture, imageUrl), Texture.addToCache(texture, imageUrl)), texture.baseTexture.valid ? Promise.resolve(texture) : new Promise((resolve) => {\n      texture.baseTexture.once(\"loaded\", () => resolve(texture));\n    });\n  }\n  /**\n   * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n   * @param texture - The Texture to add to the cache.\n   * @param id - The id that the Texture will be stored against.\n   */\n  static addToCache(texture, id) {\n    id && (texture.textureCacheIds.includes(id) || texture.textureCacheIds.push(id), utils.TextureCache[id] && utils.TextureCache[id] !== texture && console.warn(`Texture added to the cache with an id [${id}] that already had an entry`), utils.TextureCache[id] = texture);\n  }\n  /**\n   * Remove a Texture from the global TextureCache.\n   * @param texture - id of a Texture to be removed, or a Texture instance itself\n   * @returns - The Texture that was removed\n   */\n  static removeFromCache(texture) {\n    if (typeof texture == \"string\") {\n      const textureFromCache = utils.TextureCache[texture];\n      if (textureFromCache) {\n        const index = textureFromCache.textureCacheIds.indexOf(texture);\n        return index > -1 && textureFromCache.textureCacheIds.splice(index, 1), delete utils.TextureCache[texture], textureFromCache;\n      }\n    } else if (texture?.textureCacheIds) {\n      for (let i = 0; i < texture.textureCacheIds.length; ++i)\n        utils.TextureCache[texture.textureCacheIds[i]] === texture && delete utils.TextureCache[texture.textureCacheIds[i]];\n      return texture.textureCacheIds.length = 0, texture;\n    }\n    return null;\n  }\n  /**\n   * Returns resolution of baseTexture\n   * @readonly\n   */\n  get resolution() {\n    return this.baseTexture.resolution;\n  }\n  /**\n   * The frame specifies the region of the base texture that this texture uses.\n   * Please call `updateUvs()` after you change coordinates of `frame` manually.\n   */\n  get frame() {\n    return this._frame;\n  }\n  set frame(frame) {\n    this._frame = frame, this.noFrame = !1;\n    const { x, y, width, height } = frame, xNotFit = x + width > this.baseTexture.width, yNotFit = y + height > this.baseTexture.height;\n    if (xNotFit || yNotFit) {\n      const relationship = xNotFit && yNotFit ? \"and\" : \"or\", errorX = `X: ${x} + ${width} = ${x + width} > ${this.baseTexture.width}`, errorY = `Y: ${y} + ${height} = ${y + height} > ${this.baseTexture.height}`;\n      throw new Error(`Texture Error: frame does not fit inside the base Texture dimensions: ${errorX} ${relationship} ${errorY}`);\n    }\n    this.valid = width && height && this.baseTexture.valid, !this.trim && !this.rotate && (this.orig = frame), this.valid && this.updateUvs();\n  }\n  /**\n   * Indicates whether the texture is rotated inside the atlas\n   * set to 2 to compensate for texture packer rotation\n   * set to 6 to compensate for spine packer rotation\n   * can be used to rotate or mirror sprites\n   * See {@link PIXI.groupD8} for explanation\n   */\n  get rotate() {\n    return this._rotate;\n  }\n  set rotate(rotate) {\n    this._rotate = rotate, this.valid && this.updateUvs();\n  }\n  /** The width of the Texture in pixels. */\n  get width() {\n    return this.orig.width;\n  }\n  /** The height of the Texture in pixels. */\n  get height() {\n    return this.orig.height;\n  }\n  /** Utility function for BaseTexture|Texture cast. */\n  castToBaseTexture() {\n    return this.baseTexture;\n  }\n  /** An empty texture, used often to not have to create multiple empty textures. Can not be destroyed. */\n  static get EMPTY() {\n    return Texture._EMPTY || (Texture._EMPTY = new Texture(new BaseTexture.BaseTexture()), removeAllHandlers(Texture._EMPTY), removeAllHandlers(Texture._EMPTY.baseTexture)), Texture._EMPTY;\n  }\n  /** A white texture of 16x16 size, used for graphics and other things Can not be destroyed. */\n  static get WHITE() {\n    if (!Texture._WHITE) {\n      const canvas = settings.settings.ADAPTER.createCanvas(16, 16), context = canvas.getContext(\"2d\");\n      canvas.width = 16, canvas.height = 16, context.fillStyle = \"white\", context.fillRect(0, 0, 16, 16), Texture._WHITE = new Texture(BaseTexture.BaseTexture.from(canvas)), removeAllHandlers(Texture._WHITE), removeAllHandlers(Texture._WHITE.baseTexture);\n    }\n    return Texture._WHITE;\n  }\n}\nexports.Texture = Texture;\n//# sourceMappingURL=Texture.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","removeAllHandlers","tex","destroy","tex.destroy","on","tex.on","once","tex.once","emit","tex.emit","math","settings","utils","BaseTexture","ImageResource","TextureUvs","DEFAULT_UVS","Texture","EventEmitter","constructor","baseTexture","frame","orig","trim","rotate","anchor","borders","noFrame","Rectangle","_frame","valid","destroyed","_uvs","uvMatrix","_rotate","Number","Error","defaultAnchor","Point","x","y","defaultBorders","_updateID","textureCacheIds","onBaseTextureUpdated","update","resource","width","height","updateUvs","destroyBase","url","TextureCache","removeFromCache","off","removeAllListeners","clone","clonedFrame","clonedOrig","clonedTexture","set","from","source","options","strict","STRICT_TEXTURE_CACHE","isFrame","cacheId","pixiIdPrefix","uid","addToCache","_pixiId","texture","resolution","getResolutionOfUrl","fromURL","resourceOptions","Object","assign","autoLoad","Promise","resolve","load","then","fromBuffer","buffer","fromLoader","imageUrl","name","scaleMode","defaultOptions","id","includes","push","console","warn","textureFromCache","index","indexOf","splice","i","length","xNotFit","yNotFit","errorX","relationship","errorY","castToBaseTexture","_EMPTY","_WHITE","canvas","ADAPTER","createCanvas","context","getContext","fillStyle","fillRect"]
}
