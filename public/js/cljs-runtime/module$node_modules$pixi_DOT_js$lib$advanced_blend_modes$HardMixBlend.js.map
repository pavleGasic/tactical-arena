{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$HardMixBlend.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,GAA0F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG9HC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACAC,SAAAA,GAAkBJ,OAAA,CAAQ,yEAAR,CAAlBI;AAEJ,cAAA;AACA,OAAMC,aAAN,QAA2BD,QAAgBA,CAAAA,eAA3C;AACEE,eAAW,EAAG;AACZ,WAAA,CAAM,CACJC,GAAI,CACFC,UAAY,4kBADV;AAiBFC,WAAO,yHAjBL,CADA,EAsBJC,IAAK,CACHF,UAAY,ypBADT;AAiBHC,WAAO,4IAjBJ,CAtBD,CAAN,CAAA;AADY;AADhB;AAiDAJ,cAAaM,CAAAA,SAAb,GAAyB,CACvBC,KAAM,UADiB,EAEvBC,KAAMV,MAAWW,CAAAA,aAAcC,CAAAA,SAFR,CAAzB;AAKAb,SAAQG,CAAAA,YAAR,GAAuBA,YAAvB;AA7DkI,CAAlI;;",
"sources":["node_modules/pixi_DOT_js/lib/advanced-blend-modes/HardMixBlend.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$HardMixBlend\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../extensions/Extensions.js');\nvar BlendModeFilter = require('../filters/blend-modes/BlendModeFilter.js');\n\n\"use strict\";\nclass HardMixBlend extends BlendModeFilter.BlendModeFilter {\n  constructor() {\n    super({\n      gl: {\n        functions: `\n                float hardMix(float base, float blend)\n                {\n                    return (base + blend >= 1.0) ? 1.0 : 0.0;\n                }\n\n                vec3 blendHardMix(vec3 base, vec3 blend,  float opacity)\n                {\n                    vec3 blended = vec3(\n                        hardMix(base.r, blend.r),\n                        hardMix(base.g, blend.g),\n                        hardMix(base.b, blend.b)\n                    );\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            `,\n        main: `\n                finalColor = vec4(blendHardMix(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n            `\n      },\n      gpu: {\n        functions: `\n                fn hardMix(base: f32, blend: f32) -> f32\n                {\n                    return select(0.0, 1.0, base + blend >= 1.0);\n                }\n\n                fn blendHardMix(base:vec3<f32>,  blend:vec3<f32>,  opacity:f32) -> vec3<f32>\n                {\n                    let blended: vec3<f32> = vec3<f32>(\n                        hardMix(base.r, blend.r),\n                        hardMix(base.g, blend.g),\n                        hardMix(base.b, blend.b)\n                    );\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            `,\n        main: `\n                out = vec4<f32>(blendHardMix(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n            `\n      }\n    });\n  }\n}\n/** @ignore */\nHardMixBlend.extension = {\n  name: \"hard-mix\",\n  type: Extensions.ExtensionType.BlendMode\n};\n\nexports.HardMixBlend = HardMixBlend;\n//# sourceMappingURL=HardMixBlend.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","BlendModeFilter","HardMixBlend","constructor","gl","functions","main","gpu","extension","name","type","ExtensionType","BlendMode"]
}
