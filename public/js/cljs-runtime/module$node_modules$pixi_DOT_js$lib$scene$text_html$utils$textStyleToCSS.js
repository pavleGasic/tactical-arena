shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$textStyleToCSS = function(global, require, module, exports) {
  function dropShadowToCSS(dropShadowStyle) {
    const color = Color.Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa(), position = `${Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance)}px ${Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance)}px`;
    return 0 < dropShadowStyle.blur ? `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}` : `text-shadow: ${position} ${color}`;
  }
  function strokeToCSS(stroke) {
    return [`-webkit-text-stroke-width: ${stroke.width}px`, `-webkit-text-stroke-color: ${Color.Color.shared.setValue(stroke.color).toHex()}`, `text-stroke-width: ${stroke.width}px`, `text-stroke-color: ${Color.Color.shared.setValue(stroke.color).toHex()}`, "paint-order: stroke"].join(";");
  }
  var Color = require("module$node_modules$pixi_DOT_js$lib$color$Color");
  "use strict";
  const templates = {fontSize:"font-size: {{VALUE}}px", fontFamily:"font-family: {{VALUE}}", fontWeight:"font-weight: {{VALUE}}", fontStyle:"font-style: {{VALUE}}", fontVariant:"font-variant: {{VALUE}}", letterSpacing:"letter-spacing: {{VALUE}}px", align:"text-align: {{VALUE}}", padding:"padding: {{VALUE}}px", whiteSpace:"white-space: {{VALUE}}", lineHeight:"line-height: {{VALUE}}px", wordWrapWidth:"max-width: {{VALUE}}px"}, transform = {fill:value => `color: ${Color.Color.shared.setValue(value).toHex()}`, 
  breakWords:value => `word-wrap: ${value ? "break-all" : "break-word"}`, stroke:strokeToCSS, dropShadow:dropShadowToCSS};
  exports.textStyleToCSS = function(style) {
    var stroke = style._stroke;
    stroke = [`div { ${[`color: ${Color.Color.shared.setValue(style._fill.color).toHex()}`, `font-size: ${style.fontSize}px`, `font-family: ${style.fontFamily}`, `font-weight: ${style.fontWeight}`, `font-style: ${style.fontStyle}`, `font-variant: ${style.fontVariant}`, `letter-spacing: ${style.letterSpacing}px`, `text-align: ${style.align}`, `padding: ${style.padding}px`, `white-space: ${"pre" === style.whiteSpace && style.wordWrap ? "pre-wrap" : style.whiteSpace}`, ...(style.lineHeight ? [`line-height: ${style.lineHeight}px`] : 
    []), ...(style.wordWrap ? [`word-wrap: ${style.breakWords ? "break-all" : "break-word"}`, `max-width: ${style.wordWrapWidth}px`] : []), ...(stroke ? [strokeToCSS(stroke)] : []), ...(style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : []), ...style.cssOverrides].join(";")} }`];
    style = style.tagStyles;
    for (const i in style) {
      const tagStyle = style[i], cssTagStyle = [];
      for (const j in tagStyle) {
        transform[j] ? cssTagStyle.push(transform[j](tagStyle[j])) : templates[j] && cssTagStyle.push(templates[j].replace("{{VALUE}}", tagStyle[j]));
      }
      stroke.push(`${i} { ${cssTagStyle.join(";")} }`);
    }
    return stroke.join(" ");
  };
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$textStyleToCSS.js.map
