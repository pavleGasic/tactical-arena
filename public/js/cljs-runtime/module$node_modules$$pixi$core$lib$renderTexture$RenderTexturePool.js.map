{
"version":3,
"file":"module$node_modules$$pixi$core$lib$renderTexture$RenderTexturePool.js",
"lineCount":70,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/renderTexture/RenderTexturePool.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$renderTexture$RenderTexturePool\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), utils = require(\"@pixi/utils\"), BaseRenderTexture = require(\"./BaseRenderTexture.js\"), RenderTexture = require(\"./RenderTexture.js\");\nclass RenderTexturePool {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\n   */\n  constructor(textureOptions) {\n    this.texturePool = {}, this.textureOptions = textureOptions || {}, this.enableFullScreen = !1, this._pixelsWidth = 0, this._pixelsHeight = 0;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param realWidth - Width of texture in pixels.\n   * @param realHeight - Height of texture in pixels.\n   * @param multisample - Number of samples of the framebuffer.\n   */\n  createTexture(realWidth, realHeight, multisample = constants.MSAA_QUALITY.NONE) {\n    const baseRenderTexture = new BaseRenderTexture.BaseRenderTexture(Object.assign({\n      width: realWidth,\n      height: realHeight,\n      resolution: 1,\n      multisample\n    }, this.textureOptions));\n    return new RenderTexture.RenderTexture(baseRenderTexture);\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param multisample - Number of samples of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalTexture(minWidth, minHeight, resolution = 1, multisample = constants.MSAA_QUALITY.NONE) {\n    let key;\n    minWidth = Math.max(Math.ceil(minWidth * resolution - 1e-6), 1), minHeight = Math.max(Math.ceil(minHeight * resolution - 1e-6), 1), !this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight ? (minWidth = utils.nextPow2(minWidth), minHeight = utils.nextPow2(minHeight), key = ((minWidth & 65535) << 16 | minHeight & 65535) >>> 0, multisample > 1 && (key += multisample * 4294967296)) : key = multisample > 1 ? -multisample : -1, this.texturePool[key] || (this.texturePool[key] = []);\n    let renderTexture = this.texturePool[key].pop();\n    return renderTexture || (renderTexture = this.createTexture(minWidth, minHeight, multisample)), renderTexture.filterPoolKey = key, renderTexture.setResolution(resolution), renderTexture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   *\n   * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\n   * @param input - renderTexture from which size and resolution will be copied\n   * @param resolution - override resolution of the renderTexture\n   *  It overrides, it does not multiply\n   * @param multisample - number of samples of the renderTexture\n   */\n  getFilterTexture(input, resolution, multisample) {\n    const filterTexture = this.getOptimalTexture(\n      input.width,\n      input.height,\n      resolution || input.resolution,\n      multisample || constants.MSAA_QUALITY.NONE\n    );\n    return filterTexture.filterFrame = input.filterFrame, filterTexture;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = renderTexture.filterPoolKey;\n    renderTexture.filterFrame = null, this.texturePool[key].push(renderTexture);\n  }\n  /**\n   * Alias for returnTexture, to be compliant with FilterSystem interface.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnFilterTexture(renderTexture) {\n    this.returnTexture(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    if (destroyTextures = destroyTextures !== !1, destroyTextures)\n      for (const i in this.texturePool) {\n        const textures = this.texturePool[i];\n        if (textures)\n          for (let j = 0; j < textures.length; j++)\n            textures[j].destroy(!0);\n      }\n    this.texturePool = {};\n  }\n  /**\n   * If screen size was changed, drops all screen-sized textures,\n   * sets new screen size, sets `enableFullScreen` to true\n   *\n   * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\n   * @param size - Initial size of screen.\n   */\n  setScreenSize(size) {\n    if (!(size.width === this._pixelsWidth && size.height === this._pixelsHeight)) {\n      this.enableFullScreen = size.width > 0 && size.height > 0;\n      for (const i in this.texturePool) {\n        if (!(Number(i) < 0))\n          continue;\n        const textures = this.texturePool[i];\n        if (textures)\n          for (let j = 0; j < textures.length; j++)\n            textures[j].destroy(!0);\n        this.texturePool[i] = [];\n      }\n      this._pixelsWidth = size.width, this._pixelsHeight = size.height;\n    }\n  }\n}\nRenderTexturePool.SCREEN_KEY = -1;\nexports.RenderTexturePool = RenderTexturePool;\n//# sourceMappingURL=RenderTexturePool.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","utils","BaseRenderTexture","RenderTexture","RenderTexturePool","constructor","textureOptions","texturePool","enableFullScreen","_pixelsHeight","_pixelsWidth","createTexture","realWidth","realHeight","multisample","MSAA_QUALITY","NONE","baseRenderTexture","Object","assign","width","height","resolution","getOptimalTexture","minWidth","minHeight","key","Math","max","ceil","nextPow2","renderTexture","pop","filterPoolKey","setResolution","getFilterTexture","input","filterTexture","filterFrame","returnTexture","push","returnFilterTexture","clear","destroyTextures","i","textures","j","length","destroy","setScreenSize","size","Number","SCREEN_KEY"]
}
