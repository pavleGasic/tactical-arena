{
"version":3,
"file":"module$node_modules$$pixi$utils$lib$data$interleaveTypedArrays.js",
"lineCount":26,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,GAAmF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE3H,MAAIC,gBAAgBH,OAAA,CAAQ,wDAAR,CAApB;AACA,QAAMI,MAAM,CAAEC,YAAF,EAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,UAAzC,CAAZ;AAmBAN,SAAQO,CAAAA,qBAAR,GAlBAA,QAA8B,CAACC,MAAD,EAASC,KAAT,CAAgB;AAAA,QACxCC,UAAU,CAD8B;AAC5C,QAAiBC,SAAS,CAA1B;AACA,UAAMC,QAAQ,EAAd;AACA,SAAK,IAAIC,aAAI,CAAb,EAAgBA,UAAhB,GAAoBL,MAAOM,CAAAA,MAA3B,EAAmCD,UAAA,EAAnC;AACEF,YAAoB,IAAVF,KAAA,CAAMI,UAAN,CAAU,EAAAH,OAAA,IAAWF,MAAA,CAAOK,UAAP,CAAUC,CAAAA,MAArB;AADtB;AAEMC,WAAAA,GAAS,IAAIC,WAAJ,CAA0B,CAA1B,GAAgBN,OAAhB,CAATK;AACUE,cAAAA,GAAe,CAAfA;AAChB,SAAK,IAAIJ,IAAI,CAAb,EAAgBA,CAAhB,GAAoBL,MAAOM,CAAAA,MAA3B,EAAmCD,CAAA,EAAnC,CAAwC;AAAA,YAChCK,OAAOT,KAAA,CAAMI,CAAN,CADyB,EACfM,QAAQX,MAAA,CAAOK,CAAP,CADO;AACIO,UAAAA,MAAOnB,aAAcA,CAAAA,aAAd,CAA4BkB,KAA5B,CAAPC;AAC1CR,WAAA,CAAMQ,GAAN,CAAA,KAAgBR,KAAA,CAAMQ,GAAN,CAAhB,GAA8B,IAAIlB,GAAA,CAAIkB,GAAJ,CAAJ,CAAcL,OAAd,CAA9B;AAAsDM,SAAA,GAAMT,KAAA,CAAMQ,GAAN,CAAN;AACtD,WAAK,IAAIE,IAAI,CAAb,EAAgBA,CAAhB,GAAoBH,KAAML,CAAAA,MAA1B,EAAkCQ,CAAA,EAAlC;AAEED,WAAA,EADoBC,CACpB,GADwBJ,IACxB,GAD+B,CAC/B,IADoCP,MACpC,GAD6CM,UAC7C,GADmEK,CACnE,GADuEJ,IACvE,CAAA,GAA0BC,KAAA,CAAMG,CAAN,CAA1B;AAFF;AAIAL,gBAAA,IAAgBC,IAAhB;AAPsC;AASxC,WAAO,IAAIf,YAAJ,CAAiBY,OAAjB,CAAP;AAhB4C,GAkB9C;AAtB2H,CAA3H;;",
"sources":["node_modules/@pixi/utils/lib/data/interleaveTypedArrays.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$utils$lib$data$interleaveTypedArrays\"] = function(global,require,module,exports) {\n\"use strict\";\nvar getBufferType = require(\"./getBufferType.js\");\nconst map = { Float32Array, Uint32Array, Int32Array, Uint8Array };\nfunction interleaveTypedArrays(arrays, sizes) {\n  let outSize = 0, stride = 0;\n  const views = {};\n  for (let i = 0; i < arrays.length; i++)\n    stride += sizes[i], outSize += arrays[i].length;\n  const buffer = new ArrayBuffer(outSize * 4);\n  let out = null, littleOffset = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const size = sizes[i], array = arrays[i], type = getBufferType.getBufferType(array);\n    views[type] || (views[type] = new map[type](buffer)), out = views[type];\n    for (let j = 0; j < array.length; j++) {\n      const indexStart = (j / size | 0) * stride + littleOffset, index = j % size;\n      out[indexStart + index] = array[j];\n    }\n    littleOffset += size;\n  }\n  return new Float32Array(buffer);\n}\nexports.interleaveTypedArrays = interleaveTypedArrays;\n//# sourceMappingURL=interleaveTypedArrays.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getBufferType","map","Float32Array","Uint32Array","Int32Array","Uint8Array","interleaveTypedArrays","arrays","sizes","outSize","stride","views","i","length","buffer","ArrayBuffer","littleOffset","size","array","type","out","j"]
}
