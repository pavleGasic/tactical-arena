shadow$provide.module$node_modules$$pixi$mesh_extras$lib$SimplePlane = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index"), mesh = require("module$node_modules$$pixi$mesh$lib$index"), PlaneGeometry = require("module$node_modules$$pixi$mesh_extras$lib$geometry$PlaneGeometry");
  class SimplePlane extends mesh.Mesh {
    constructor(texture, verticesX, verticesY) {
      verticesX = new PlaneGeometry.PlaneGeometry(texture.width, texture.height, verticesX, verticesY);
      verticesY = new mesh.MeshMaterial(core.Texture.WHITE);
      super(verticesX, verticesY);
      this.texture = texture;
      this.autoResize = !0;
    }
    textureUpdated() {
      this._textureID = this.shader.texture._updateID;
      const geometry = this.geometry, {width, height} = this.shader.texture;
      this.autoResize && (geometry.width !== width || geometry.height !== height) && (geometry.width = this.shader.texture.width, geometry.height = this.shader.texture.height, geometry.build());
    }
    set texture(value) {
      this.shader.texture !== value && (this.shader.texture = value, this._textureID = -1, value.baseTexture.valid ? this.textureUpdated() : value.once("update", this.textureUpdated, this));
    }
    get texture() {
      return this.shader.texture;
    }
    _render(renderer) {
      this._textureID !== this.shader.texture._updateID && this.textureUpdated();
      super._render(renderer);
    }
    destroy(options) {
      this.shader.texture.off("update", this.textureUpdated, this);
      super.destroy(options);
    }
  }
  exports.SimplePlane = SimplePlane;
};

//# sourceMappingURL=module$node_modules$$pixi$mesh_extras$lib$SimplePlane.js.map
