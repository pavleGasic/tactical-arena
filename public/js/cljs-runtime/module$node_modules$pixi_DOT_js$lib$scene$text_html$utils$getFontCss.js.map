{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$getFontCss.js",
"lineCount":17,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,GAAyF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGjI,MAAIC,QAAQH,OAAA,CAAQ,wDAAR,CAAZ,EACII,cAAcJ,OAAA,CAAQ,uEAAR,CADlB;AAGA,cAAA;AACA,QAAMK,wBAAwC,IAAIC,GAAJ,EAA9C;AAwBAJ,SAAQG,CAAAA,qBAAR,GAAgCA,qBAAhC;AACAH,SAAQK,CAAAA,UAAR,GAxBAA,cAAyB,CAACC,YAAD,EAAeC,KAAf,EAAsBC,cAAtB,CAAsC;AACvDC,gBAAAA,GAAeH,YAAaI,CAAAA,MAAb,CAAqBC,UAAD,IAAgBV,KAAMA,CAAAA,KAAMW,CAAAA,GAAZ,CAAiB,GAAED,UAAF,UAAjB,CAApC,CAA8EE,CAAAA,GAA9E,CAAkF,CAACF,UAAD,EAAaG,CAAb,CAAA,IAAmB;AACxH,UAAI,CAACX,qBAAsBS,CAAAA,GAAtB,CAA0BD,UAA1B,CAAL,CAA4C;AAC1C,cAAM,CAAEI,GAAF,CAAA,GAAUd,KAAMA,CAAAA,KAAMe,CAAAA,GAAZ,CAAiB,GAAEL,UAAF,UAAjB,CAAhB;AACU,SAAV,KAAIG,CAAJ,GACEX,qBAAsBc,CAAAA,GAAtB,CAA0BN,UAA1B,EAAsCT,WAAYA,CAAAA,WAAZ,CAAwB,CAC5DgB,WAAYX,KAAMW,CAAAA,UAD0C,EAE5DC,UAAWZ,KAAMY,CAAAA,SAF2C,EAG5DR,UAH4D,CAAxB,EAInCI,GAJmC,CAAtC,CADF,GAOEZ,qBAAsBc,CAAAA,GAAtB,CAA0BN,UAA1B,EAAsCT,WAAYA,CAAAA,WAAZ,CAAwB,CAC5DgB,WAAYV,cAAeU,CAAAA,UADiC,EAE5DC,UAAWX,cAAeW,CAAAA,SAFkC,EAG5DR,UAH4D,CAAxB,EAInCI,GAJmC,CAAtC,CAPF;AAF0C;AAgB5C,aAAOZ,qBAAsBa,CAAAA,GAAtB,CAA0BL,UAA1B,CAAP;AAjBwH,KAArG,CAAfF;AAmBN,WAAyCW,CAAjC,MAAMC,OAAQC,CAAAA,GAAR,CAAYb,YAAZ,CAA2BW,EAAAA,IAAlC,CAAuC,IAAvC,CAAP;AApB6D,GAwB/D;AAhCiI,CAAjI;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-html/utils/getFontCss.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$getFontCss\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Cache = require('../../../assets/cache/Cache.js');\nvar loadFontCSS = require('./loadFontCSS.js');\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS.loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS.loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexports.FontStylePromiseCache = FontStylePromiseCache;\nexports.getFontCss = getFontCss;\n//# sourceMappingURL=getFontCss.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Cache","loadFontCSS","FontStylePromiseCache","Map","getFontCss","fontFamilies","style","defaultOptions","fontPromises","filter","fontFamily","has","map","i","url","get","set","fontWeight","fontStyle","join","Promise","all"]
}
