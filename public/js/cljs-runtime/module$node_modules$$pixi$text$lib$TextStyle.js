shadow$provide.module$node_modules$$pixi$text$lib$TextStyle = function(global, require, module, exports) {
  function getColor(color) {
    const temp = core.Color.shared, format = color2 => {
      color2 = temp.setValue(color2);
      return 1 === color2.alpha ? color2.toHex() : color2.toRgbaString();
    };
    return Array.isArray(color) ? color.map(format) : format(color);
  }
  function deepCopyProperties(target, source, propertyObj) {
    for (const prop in propertyObj) {
      Array.isArray(source[prop]) ? target[prop] = source[prop].slice() : target[prop] = source[prop];
    }
  }
  global = require("module$node_modules$$pixi$text$lib$const");
  var core = require("module$node_modules$$pixi$core$lib$index");
  const genericFontFamilies = "serif sans-serif monospace cursive fantasy system-ui".split(" ");
  require = (() => {
    const node_modules$$pixi$text$lib$TextStyle$classdecl$var21 = class {
      constructor(style) {
        this.styleID = 0;
        this.reset();
        deepCopyProperties(this, style, style);
      }
      clone() {
        const clonedProperties = {};
        return deepCopyProperties(clonedProperties, this, node_modules$$pixi$text$lib$TextStyle$classdecl$var21.defaultStyle), new node_modules$$pixi$text$lib$TextStyle$classdecl$var21(clonedProperties);
      }
      reset() {
        deepCopyProperties(this, node_modules$$pixi$text$lib$TextStyle$classdecl$var21.defaultStyle, node_modules$$pixi$text$lib$TextStyle$classdecl$var21.defaultStyle);
      }
      get align() {
        return this._align;
      }
      set align(align) {
        this._align !== align && (this._align = align, this.styleID++);
      }
      get breakWords() {
        return this._breakWords;
      }
      set breakWords(breakWords) {
        this._breakWords !== breakWords && (this._breakWords = breakWords, this.styleID++);
      }
      get dropShadow() {
        return this._dropShadow;
      }
      set dropShadow(dropShadow) {
        this._dropShadow !== dropShadow && (this._dropShadow = dropShadow, this.styleID++);
      }
      get dropShadowAlpha() {
        return this._dropShadowAlpha;
      }
      set dropShadowAlpha(dropShadowAlpha) {
        this._dropShadowAlpha !== dropShadowAlpha && (this._dropShadowAlpha = dropShadowAlpha, this.styleID++);
      }
      get dropShadowAngle() {
        return this._dropShadowAngle;
      }
      set dropShadowAngle(dropShadowAngle) {
        this._dropShadowAngle !== dropShadowAngle && (this._dropShadowAngle = dropShadowAngle, this.styleID++);
      }
      get dropShadowBlur() {
        return this._dropShadowBlur;
      }
      set dropShadowBlur(dropShadowBlur) {
        this._dropShadowBlur !== dropShadowBlur && (this._dropShadowBlur = dropShadowBlur, this.styleID++);
      }
      get dropShadowColor() {
        return this._dropShadowColor;
      }
      set dropShadowColor(dropShadowColor) {
        dropShadowColor = getColor(dropShadowColor);
        this._dropShadowColor !== dropShadowColor && (this._dropShadowColor = dropShadowColor, this.styleID++);
      }
      get dropShadowDistance() {
        return this._dropShadowDistance;
      }
      set dropShadowDistance(dropShadowDistance) {
        this._dropShadowDistance !== dropShadowDistance && (this._dropShadowDistance = dropShadowDistance, this.styleID++);
      }
      get fill() {
        return this._fill;
      }
      set fill(fill) {
        fill = getColor(fill);
        this._fill !== fill && (this._fill = fill, this.styleID++);
      }
      get fillGradientType() {
        return this._fillGradientType;
      }
      set fillGradientType(fillGradientType) {
        this._fillGradientType !== fillGradientType && (this._fillGradientType = fillGradientType, this.styleID++);
      }
      get fillGradientStops() {
        return this._fillGradientStops;
      }
      set fillGradientStops(fillGradientStops) {
        a: {
          var JSCompiler_inline_result = this._fillGradientStops;
          if (Array.isArray(JSCompiler_inline_result) && Array.isArray(fillGradientStops) && JSCompiler_inline_result.length === fillGradientStops.length) {
            for (let i = 0; i < JSCompiler_inline_result.length; ++i) {
              if (JSCompiler_inline_result[i] !== fillGradientStops[i]) {
                JSCompiler_inline_result = !1;
                break a;
              }
            }
            JSCompiler_inline_result = !0;
          } else {
            JSCompiler_inline_result = !1;
          }
        }
        JSCompiler_inline_result || (this._fillGradientStops = fillGradientStops, this.styleID++);
      }
      get fontFamily() {
        return this._fontFamily;
      }
      set fontFamily(fontFamily) {
        this.fontFamily !== fontFamily && (this._fontFamily = fontFamily, this.styleID++);
      }
      get fontSize() {
        return this._fontSize;
      }
      set fontSize(fontSize) {
        this._fontSize !== fontSize && (this._fontSize = fontSize, this.styleID++);
      }
      get fontStyle() {
        return this._fontStyle;
      }
      set fontStyle(fontStyle) {
        this._fontStyle !== fontStyle && (this._fontStyle = fontStyle, this.styleID++);
      }
      get fontVariant() {
        return this._fontVariant;
      }
      set fontVariant(fontVariant) {
        this._fontVariant !== fontVariant && (this._fontVariant = fontVariant, this.styleID++);
      }
      get fontWeight() {
        return this._fontWeight;
      }
      set fontWeight(fontWeight) {
        this._fontWeight !== fontWeight && (this._fontWeight = fontWeight, this.styleID++);
      }
      get letterSpacing() {
        return this._letterSpacing;
      }
      set letterSpacing(letterSpacing) {
        this._letterSpacing !== letterSpacing && (this._letterSpacing = letterSpacing, this.styleID++);
      }
      get lineHeight() {
        return this._lineHeight;
      }
      set lineHeight(lineHeight) {
        this._lineHeight !== lineHeight && (this._lineHeight = lineHeight, this.styleID++);
      }
      get leading() {
        return this._leading;
      }
      set leading(leading) {
        this._leading !== leading && (this._leading = leading, this.styleID++);
      }
      get lineJoin() {
        return this._lineJoin;
      }
      set lineJoin(lineJoin) {
        this._lineJoin !== lineJoin && (this._lineJoin = lineJoin, this.styleID++);
      }
      get miterLimit() {
        return this._miterLimit;
      }
      set miterLimit(miterLimit) {
        this._miterLimit !== miterLimit && (this._miterLimit = miterLimit, this.styleID++);
      }
      get padding() {
        return this._padding;
      }
      set padding(padding) {
        this._padding !== padding && (this._padding = padding, this.styleID++);
      }
      get stroke() {
        return this._stroke;
      }
      set stroke(stroke) {
        stroke = getColor(stroke);
        this._stroke !== stroke && (this._stroke = stroke, this.styleID++);
      }
      get strokeThickness() {
        return this._strokeThickness;
      }
      set strokeThickness(strokeThickness) {
        this._strokeThickness !== strokeThickness && (this._strokeThickness = strokeThickness, this.styleID++);
      }
      get textBaseline() {
        return this._textBaseline;
      }
      set textBaseline(textBaseline) {
        this._textBaseline !== textBaseline && (this._textBaseline = textBaseline, this.styleID++);
      }
      get trim() {
        return this._trim;
      }
      set trim(trim) {
        this._trim !== trim && (this._trim = trim, this.styleID++);
      }
      get whiteSpace() {
        return this._whiteSpace;
      }
      set whiteSpace(whiteSpace) {
        this._whiteSpace !== whiteSpace && (this._whiteSpace = whiteSpace, this.styleID++);
      }
      get wordWrap() {
        return this._wordWrap;
      }
      set wordWrap(wordWrap) {
        this._wordWrap !== wordWrap && (this._wordWrap = wordWrap, this.styleID++);
      }
      get wordWrapWidth() {
        return this._wordWrapWidth;
      }
      set wordWrapWidth(wordWrapWidth) {
        this._wordWrapWidth !== wordWrapWidth && (this._wordWrapWidth = wordWrapWidth, this.styleID++);
      }
      toFontString() {
        const fontSizeString = "number" == typeof this.fontSize ? `${this.fontSize}px` : this.fontSize;
        let fontFamilies = this.fontFamily;
        Array.isArray(this.fontFamily) || (fontFamilies = this.fontFamily.split(","));
        for (let i = fontFamilies.length - 1; 0 <= i; i--) {
          let fontFamily = fontFamilies[i].trim();
          /(["'])[^'"]+\1/.test(fontFamily) || genericFontFamilies.includes(fontFamily) || (fontFamily = `"${fontFamily}"`);
          fontFamilies[i] = fontFamily;
        }
        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(",")}`;
      }
    };
    return node_modules$$pixi$text$lib$TextStyle$classdecl$var21;
  })();
  require.defaultStyle = {align:"left", breakWords:!1, dropShadow:!1, dropShadowAlpha:1, dropShadowAngle:Math.PI / 6, dropShadowBlur:0, dropShadowColor:"black", dropShadowDistance:5, fill:"black", fillGradientType:global.TEXT_GRADIENT.LINEAR_VERTICAL, fillGradientStops:[], fontFamily:"Arial", fontSize:26, fontStyle:"normal", fontVariant:"normal", fontWeight:"normal", leading:0, letterSpacing:0, lineHeight:0, lineJoin:"miter", miterLimit:10, padding:0, stroke:"black", strokeThickness:0, textBaseline:"alphabetic", 
  trim:!1, whiteSpace:"pre", wordWrap:!1, wordWrapWidth:100};
  exports.TextStyle = require;
};

//# sourceMappingURL=module$node_modules$$pixi$text$lib$TextStyle.js.map
