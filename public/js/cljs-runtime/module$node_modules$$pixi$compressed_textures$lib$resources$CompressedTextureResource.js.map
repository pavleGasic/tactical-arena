{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$resources$CompressedTextureResource.js",
"lineCount":70,
"mappings":"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",
"sources":["node_modules/@pixi/compressed-textures/lib/resources/CompressedTextureResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$resources$CompressedTextureResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar _const = require(\"../const.js\"), BlobResource = require(\"./BlobResource.js\");\nclass CompressedTextureResource extends BlobResource.BlobResource {\n  /**\n   * @param source - the buffer/URL holding the compressed texture data\n   * @param options\n   * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n   * @param {number} options.width - the image width in pixels.\n   * @param {number} options.height - the image height in pixels.\n   * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n   * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n   *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n   */\n  constructor(source, options) {\n    super(source, options), this.format = options.format, this.levels = options.levels || 1, this._width = options.width, this._height = options.height, this._extension = CompressedTextureResource._formatToExtension(this.format), (options.levelBuffers || this.buffer) && (this._levelBuffers = options.levelBuffers || CompressedTextureResource._createLevelBuffers(\n      source instanceof Uint8Array ? source : this.buffer.uint8View,\n      this.format,\n      this.levels,\n      4,\n      4,\n      // PVRTC has 8x4 blocks in 2bpp mode\n      this.width,\n      this.height\n    ));\n  }\n  /**\n   * @override\n   * @param renderer - A reference to the current renderer\n   * @param _texture - the texture\n   * @param _glTexture - texture instance for this webgl context\n   */\n  upload(renderer, _texture, _glTexture) {\n    const gl = renderer.gl;\n    if (!renderer.context.extensions[this._extension])\n      throw new Error(`${this._extension} textures are not supported on the current machine`);\n    if (!this._levelBuffers)\n      return !1;\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n    for (let i = 0, j = this.levels; i < j; i++) {\n      const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n      gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n    }\n    return !0;\n  }\n  /** @protected */\n  onBlobLoaded() {\n    this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n      this.buffer.uint8View,\n      this.format,\n      this.levels,\n      4,\n      4,\n      // PVRTC has 8x4 blocks in 2bpp mode\n      this.width,\n      this.height\n    );\n  }\n  /**\n   * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n   * @private\n   * @param format - the compression format to get the extension for.\n   */\n  static _formatToExtension(format) {\n    if (format >= 33776 && format <= 33779)\n      return \"s3tc\";\n    if (format >= 35916 && format <= 35919)\n      return \"s3tc_sRGB\";\n    if (format >= 37488 && format <= 37497)\n      return \"etc\";\n    if (format >= 35840 && format <= 35843)\n      return \"pvrtc\";\n    if (format === 36196)\n      return \"etc1\";\n    if (format === 35986 || format === 35987 || format === 34798)\n      return \"atc\";\n    if (format >= 36492 && format <= 36495)\n      return \"bptc\";\n    if (format === 37808)\n      return \"astc\";\n    throw new Error(`Invalid (compressed) texture format given: ${format}`);\n  }\n  /**\n   * Pre-creates buffer views for each mipmap level\n   * @private\n   * @param buffer -\n   * @param format - compression formats\n   * @param levels - mipmap levels\n   * @param blockWidth -\n   * @param blockHeight -\n   * @param imageWidth - width of the image in pixels\n   * @param imageHeight - height of the image in pixels\n   */\n  static _createLevelBuffers(buffer, format, levels, blockWidth, blockHeight, imageWidth, imageHeight) {\n    const buffers = new Array(levels);\n    let offset = buffer.byteOffset, levelWidth = imageWidth, levelHeight = imageHeight, alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1), alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1), levelSize = alignedLevelWidth * alignedLevelHeight * _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    for (let i = 0; i < levels; i++)\n      buffers[i] = {\n        levelID: i,\n        levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n        levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n        levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n      }, offset += levelSize, levelWidth = levelWidth >> 1 || 1, levelHeight = levelHeight >> 1 || 1, alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1), alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1), levelSize = alignedLevelWidth * alignedLevelHeight * _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    return buffers;\n  }\n}\nexports.CompressedTextureResource = CompressedTextureResource;\n//# sourceMappingURL=CompressedTextureResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","BlobResource","CompressedTextureResource","constructor","source","options","format","levels","_width","width","_height","height","_extension","_formatToExtension","levelBuffers","buffer","_levelBuffers","_createLevelBuffers","Uint8Array","uint8View","upload","renderer","_texture","_glTexture","gl","context","extensions","Error","pixelStorei","UNPACK_ALIGNMENT","i","j","levelID","levelWidth","levelHeight","levelBuffer","compressedTexImage2D","TEXTURE_2D","onBlobLoaded","blockWidth","blockHeight","imageWidth","imageHeight","buffers","Array","offset","byteOffset","alignedLevelWidth","alignedLevelHeight","levelSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL"]
}
