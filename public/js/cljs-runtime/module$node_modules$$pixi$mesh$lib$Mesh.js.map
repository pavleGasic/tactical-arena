{
"version":3,
"file":"module$node_modules$$pixi$mesh$lib$Mesh.js",
"lineCount":147,
"mappings":"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",
"sources":["node_modules/@pixi/mesh/lib/Mesh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$mesh$lib$Mesh\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), display = require(\"@pixi/display\"), MeshBatchUvs = require(\"./MeshBatchUvs.js\");\nconst tempPoint = new core.Point(), tempPolygon = new core.Polygon(), _Mesh = class _Mesh2 extends display.Container {\n  /**\n   * @param geometry - The geometry the mesh will use.\n   * @param {PIXI.MeshMaterial} shader - The shader the mesh will use.\n   * @param state - The state that the WebGL context is required to be in to render the mesh\n   *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n   * @param drawMode - The drawMode, can be any of the {@link PIXI.DRAW_MODES} constants.\n   */\n  constructor(geometry, shader, state, drawMode = core.DRAW_MODES.TRIANGLES) {\n    super(), this.geometry = geometry, this.shader = shader, this.state = state || core.State.for2d(), this.drawMode = drawMode, this.start = 0, this.size = 0, this.uvs = null, this.indices = null, this.vertexData = new Float32Array(1), this.vertexDirty = -1, this._transformID = -1, this._roundPixels = core.settings.ROUND_PIXELS, this.batchUvs = null;\n  }\n  /**\n   * Includes vertex positions, face indices, normals, colors, UVs, and\n   * custom attributes within buffers, reducing the cost of passing all\n   * this data to the GPU. Can be shared between multiple Mesh objects.\n   */\n  get geometry() {\n    return this._geometry;\n  }\n  set geometry(value) {\n    this._geometry !== value && (this._geometry && (this._geometry.refCount--, this._geometry.refCount === 0 && this._geometry.dispose()), this._geometry = value, this._geometry && this._geometry.refCount++, this.vertexDirty = -1);\n  }\n  /**\n   * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n   * @readonly\n   */\n  get uvBuffer() {\n    return this.geometry.buffers[1];\n  }\n  /**\n   * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n   * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n   * @readonly\n   */\n  get verticesBuffer() {\n    return this.geometry.buffers[0];\n  }\n  /** Alias for {@link PIXI.Mesh#shader}. */\n  set material(value) {\n    this.shader = value;\n  }\n  get material() {\n    return this.shader;\n  }\n  /**\n   * The blend mode to be applied to the Mesh. Apply a value of\n   * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n   * @default PIXI.BLEND_MODES.NORMAL;\n   */\n  set blendMode(value) {\n    this.state.blendMode = value;\n  }\n  get blendMode() {\n    return this.state.blendMode;\n  }\n  /**\n   * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n   * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n   * The main disadvantage is movement of objects may appear less smooth.\n   * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n   * @default false\n   */\n  set roundPixels(value) {\n    this._roundPixels !== value && (this._transformID = -1), this._roundPixels = value;\n  }\n  get roundPixels() {\n    return this._roundPixels;\n  }\n  /**\n   * The multiply tint applied to the Mesh. This is a hex value. A value of\n   * `0xFFFFFF` will remove any tint effect.\n   *\n   * Null for non-MeshMaterial shaders\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    return \"tint\" in this.shader ? this.shader.tint : null;\n  }\n  set tint(value) {\n    this.shader.tint = value;\n  }\n  /**\n   * The tint color as a RGB integer\n   * @ignore\n   */\n  get tintValue() {\n    return this.shader.tintValue;\n  }\n  /** The texture that the Mesh uses. Null for non-MeshMaterial shaders */\n  get texture() {\n    return \"texture\" in this.shader ? this.shader.texture : null;\n  }\n  set texture(value) {\n    this.shader.texture = value;\n  }\n  /**\n   * Standard renderer draw.\n   * @param renderer - Instance to renderer.\n   */\n  _render(renderer) {\n    const vertices = this.geometry.buffers[0].data;\n    this.shader.batchable && this.drawMode === core.DRAW_MODES.TRIANGLES && vertices.length < _Mesh2.BATCHABLE_SIZE * 2 ? this._renderToBatch(renderer) : this._renderDefault(renderer);\n  }\n  /**\n   * Standard non-batching way of rendering.\n   * @param renderer - Instance to renderer.\n   */\n  _renderDefault(renderer) {\n    const shader = this.shader;\n    shader.alpha = this.worldAlpha, shader.update && shader.update(), renderer.batch.flush(), shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(!0), renderer.shader.bind(shader), renderer.state.set(this.state), renderer.geometry.bind(this.geometry, shader), renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n  }\n  /**\n   * Rendering by using the Batch system.\n   * @param renderer - Instance to renderer.\n   */\n  _renderToBatch(renderer) {\n    const geometry = this.geometry, shader = this.shader;\n    shader.uvMatrix && (shader.uvMatrix.update(), this.calculateUvs()), this.calculateVertices(), this.indices = geometry.indexBuffer.data, this._tintRGB = shader._tintRGB, this._texture = shader.texture;\n    const pluginName = this.material.pluginName;\n    renderer.batch.setObjectRenderer(renderer.plugins[pluginName]), renderer.plugins[pluginName].render(this);\n  }\n  /** Updates vertexData field based on transform and vertices. */\n  calculateVertices() {\n    const verticesBuffer = this.geometry.buffers[0], vertices = verticesBuffer.data, vertexDirtyId = verticesBuffer._updateID;\n    if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n      return;\n    this._transformID = this.transform._worldID, this.vertexData.length !== vertices.length && (this.vertexData = new Float32Array(vertices.length));\n    const wt = this.transform.worldTransform, a = wt.a, b = wt.b, c = wt.c, d = wt.d, tx = wt.tx, ty = wt.ty, vertexData = this.vertexData;\n    for (let i = 0; i < vertexData.length / 2; i++) {\n      const x = vertices[i * 2], y = vertices[i * 2 + 1];\n      vertexData[i * 2] = a * x + c * y + tx, vertexData[i * 2 + 1] = b * x + d * y + ty;\n    }\n    if (this._roundPixels) {\n      const resolution = core.settings.RESOLUTION;\n      for (let i = 0; i < vertexData.length; ++i)\n        vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n    }\n    this.vertexDirty = vertexDirtyId;\n  }\n  /** Updates uv field based on from geometry uv's or batchUvs. */\n  calculateUvs() {\n    const geomUvs = this.geometry.buffers[1], shader = this.shader;\n    shader.uvMatrix.isSimple ? this.uvs = geomUvs.data : (this.batchUvs || (this.batchUvs = new MeshBatchUvs.MeshBatchUvs(geomUvs, shader.uvMatrix)), this.batchUvs.update(), this.uvs = this.batchUvs.data);\n  }\n  /**\n   * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n   * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n   */\n  _calculateBounds() {\n    this.calculateVertices(), this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n  }\n  /**\n   * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n   * @param point - The point to test.\n   * @returns - The result of the test.\n   */\n  containsPoint(point) {\n    if (!this.getBounds().contains(point.x, point.y))\n      return !1;\n    this.worldTransform.applyInverse(point, tempPoint);\n    const vertices = this.geometry.getBuffer(\"aVertexPosition\").data, points = tempPolygon.points, indices = this.geometry.getIndex().data, len = indices.length, step = this.drawMode === 4 ? 3 : 1;\n    for (let i = 0; i + 2 < len; i += step) {\n      const ind0 = indices[i] * 2, ind1 = indices[i + 1] * 2, ind2 = indices[i + 2] * 2;\n      if (points[0] = vertices[ind0], points[1] = vertices[ind0 + 1], points[2] = vertices[ind1], points[3] = vertices[ind1 + 1], points[4] = vertices[ind2], points[5] = vertices[ind2 + 1], tempPolygon.contains(tempPoint.x, tempPoint.y))\n        return !0;\n    }\n    return !1;\n  }\n  destroy(options) {\n    super.destroy(options), this._cachedTexture && (this._cachedTexture.destroy(), this._cachedTexture = null), this.geometry = null, this.shader = null, this.state = null, this.uvs = null, this.indices = null, this.vertexData = null;\n  }\n};\n_Mesh.BATCHABLE_SIZE = 100;\nlet Mesh = _Mesh;\nexports.Mesh = Mesh;\n//# sourceMappingURL=Mesh.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","display","MeshBatchUvs","tempPoint","Point","tempPolygon","Polygon","_Mesh","Container","constructor","geometry","shader","state","drawMode","DRAW_MODES","TRIANGLES","State","for2d","size","start","indices","uvs","vertexData","Float32Array","_transformID","vertexDirty","_roundPixels","settings","ROUND_PIXELS","batchUvs","_geometry","value","refCount","dispose","buffers","blendMode","tint","tintValue","texture","_render","renderer","vertices","data","batchable","length","_Mesh2","BATCHABLE_SIZE","_renderToBatch","_renderDefault","alpha","worldAlpha","update","batch","flush","uniforms","translationMatrix","transform","worldTransform","toArray","bind","set","draw","instanceCount","uvMatrix","calculateUvs","calculateVertices","indexBuffer","_tintRGB","_texture","pluginName","material","setObjectRenderer","plugins","render","verticesBuffer","vertexDirtyId","_updateID","_worldID","wt","a","b","c","d","tx","ty","i","x","y","resolution","RESOLUTION","Math","round","geomUvs","isSimple","_calculateBounds","_bounds","addVertexData","containsPoint","point","getBounds","contains","applyInverse","getBuffer","points","getIndex","len","step","ind0","ind1","ind2","destroy","options","_cachedTexture","Mesh"]
}
