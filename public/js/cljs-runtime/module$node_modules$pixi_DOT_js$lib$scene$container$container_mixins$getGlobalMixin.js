shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$getGlobalMixin = function(global, require, module, exports) {
  function bgr2rgb(color) {
    return ((color & 255) << 16) + (color & 65280) + (color >> 16 & 255);
  }
  var getGlobalBounds = require("module$node_modules$pixi_DOT_js$lib$scene$container$bounds$getGlobalBounds"), matrixAndBoundsPool = require("module$node_modules$pixi_DOT_js$lib$scene$container$bounds$utils$matrixAndBoundsPool"), multiplyColors = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$multiplyColors");
  "use strict";
  exports.bgr2rgb = bgr2rgb;
  exports.getGlobalMixin = {getGlobalAlpha(skipUpdate) {
    if (skipUpdate) {
      return this.renderGroup ? this.renderGroup.worldAlpha : this.parentRenderGroup ? this.parentRenderGroup.worldAlpha * this.alpha : this.alpha;
    }
    skipUpdate = this.alpha;
    let current = this.parent;
    for (; current;) {
      skipUpdate *= current.alpha, current = current.parent;
    }
    return skipUpdate;
  }, getGlobalTransform(matrix, skipUpdate) {
    if (skipUpdate) {
      return matrix.copyFrom(this.worldTransform);
    }
    this.updateLocalTransform();
    skipUpdate = getGlobalBounds.updateTransformBackwards(this, matrixAndBoundsPool.matrixPool.get().identity());
    matrix.appendFrom(this.localTransform, skipUpdate);
    matrixAndBoundsPool.matrixPool.return(skipUpdate);
    return matrix;
  }, getGlobalTint(skipUpdate) {
    if (skipUpdate) {
      return this.renderGroup ? bgr2rgb(this.renderGroup.worldColor) : this.parentRenderGroup ? bgr2rgb(multiplyColors.multiplyColors(this.localColor, this.parentRenderGroup.worldColor)) : this.tint;
    }
    skipUpdate = this.localColor;
    let parent = this.parent;
    for (; parent;) {
      skipUpdate = multiplyColors.multiplyColors(skipUpdate, parent.localColor), parent = parent.parent;
    }
    return bgr2rgb(skipUpdate);
  }};
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$getGlobalMixin.js.map
