{
"version":3,
"file":"module$node_modules$$pixi$text_bitmap$lib$formats$XMLFormat.js",
"lineCount":34,
"mappings":"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",
"sources":["node_modules/@pixi/text-bitmap/lib/formats/XMLFormat.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text_bitmap$lib$formats$XMLFormat\"] = function(global,require,module,exports) {\n\"use strict\";\nvar BitmapFontData = require(\"../BitmapFontData.js\");\nclass XMLFormat {\n  /**\n   * Check if resource refers to xml font data.\n   * @param data\n   * @returns - True if resource could be treated as font data, false otherwise.\n   */\n  static test(data) {\n    const xml = data;\n    return typeof data != \"string\" && \"getElementsByTagName\" in data && xml.getElementsByTagName(\"page\").length && xml.getElementsByTagName(\"info\")[0].getAttribute(\"face\") !== null;\n  }\n  /**\n   * Convert the XML into BitmapFontData that we can use.\n   * @param xml\n   * @returns - Data to use for BitmapFont\n   */\n  static parse(xml) {\n    const data = new BitmapFontData.BitmapFontData(), info = xml.getElementsByTagName(\"info\"), common = xml.getElementsByTagName(\"common\"), page = xml.getElementsByTagName(\"page\"), char = xml.getElementsByTagName(\"char\"), kerning = xml.getElementsByTagName(\"kerning\"), distanceField = xml.getElementsByTagName(\"distanceField\");\n    for (let i = 0; i < info.length; i++)\n      data.info.push({\n        face: info[i].getAttribute(\"face\"),\n        size: parseInt(info[i].getAttribute(\"size\"), 10)\n      });\n    for (let i = 0; i < common.length; i++)\n      data.common.push({\n        lineHeight: parseInt(common[i].getAttribute(\"lineHeight\"), 10)\n      });\n    for (let i = 0; i < page.length; i++)\n      data.page.push({\n        id: parseInt(page[i].getAttribute(\"id\"), 10) || 0,\n        file: page[i].getAttribute(\"file\")\n      });\n    for (let i = 0; i < char.length; i++) {\n      const letter = char[i];\n      data.char.push({\n        id: parseInt(letter.getAttribute(\"id\"), 10),\n        page: parseInt(letter.getAttribute(\"page\"), 10) || 0,\n        x: parseInt(letter.getAttribute(\"x\"), 10),\n        y: parseInt(letter.getAttribute(\"y\"), 10),\n        width: parseInt(letter.getAttribute(\"width\"), 10),\n        height: parseInt(letter.getAttribute(\"height\"), 10),\n        xoffset: parseInt(letter.getAttribute(\"xoffset\"), 10),\n        yoffset: parseInt(letter.getAttribute(\"yoffset\"), 10),\n        xadvance: parseInt(letter.getAttribute(\"xadvance\"), 10)\n      });\n    }\n    for (let i = 0; i < kerning.length; i++)\n      data.kerning.push({\n        first: parseInt(kerning[i].getAttribute(\"first\"), 10),\n        second: parseInt(kerning[i].getAttribute(\"second\"), 10),\n        amount: parseInt(kerning[i].getAttribute(\"amount\"), 10)\n      });\n    for (let i = 0; i < distanceField.length; i++)\n      data.distanceField.push({\n        fieldType: distanceField[i].getAttribute(\"fieldType\"),\n        distanceRange: parseInt(distanceField[i].getAttribute(\"distanceRange\"), 10)\n      });\n    return data;\n  }\n}\nexports.XMLFormat = XMLFormat;\n//# sourceMappingURL=XMLFormat.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","BitmapFontData","XMLFormat","test","data","getElementsByTagName","length","getAttribute","parse","xml","info","common","page","char","kerning","distanceField","i","push","face","size","parseInt","lineHeight","id","file","letter","x","y","width","height","xoffset","yoffset","xadvance","first","second","amount","fieldType","distanceRange"]
}
