{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextStyle.js",
"lineCount":53,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-html/HTMLTextStyle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextStyle\"] = function(global,require,module,exports) {\n'use strict';\n\nvar warn = require('../../utils/logging/warn.js');\nvar TextStyle = require('../text/TextStyle.js');\nvar generateTextStyleKey = require('../text/utils/generateTextStyleKey.js');\nvar textStyleToCSS = require('./utils/textStyleToCSS.js');\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle.TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey.generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS.textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn.warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn.warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexports.HTMLTextStyle = HTMLTextStyle;\n//# sourceMappingURL=HTMLTextStyle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","warn","TextStyle","generateTextStyleKey","textStyleToCSS","HTMLTextStyle","constructor","options","_cssOverrides","cssOverrides","tagStyles","value","Array","update","_generateKey","_styleKey","join","_cssStyle","clone","align","breakWords","dropShadow","fill","_fill","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","padding","stroke","_stroke","whiteSpace","wordWrap","wordWrapWidth","addOverride","toAdd","filter","v","includes","length","push","removeOverride","toRemove"]
}
