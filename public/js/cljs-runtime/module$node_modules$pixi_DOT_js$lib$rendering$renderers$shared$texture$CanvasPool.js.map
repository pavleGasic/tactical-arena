{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$CanvasPool.js",
"lineCount":40,
"mappings":"AAAAA,cAAA,CAAA,iFAAA,GAAsG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG9I,MAAIC,UAAUH,OAAA,CAAQ,yDAAR,CAAd,EACII,OAAOJ,OAAA,CAAQ,qDAAR,CADX;AAGA,cAAA;AACA,OAAMK,gBAAN;AACEC,eAAW,CAACC,aAAD,CAAgB;AACzB,UAAKC,CAAAA,WAAL,GAAmCC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAnC;AACA,UAAKH,CAAAA,aAAL,GAAqBA,aAArB,IAAsC,EAAtC;AACA,UAAKI,CAAAA,gBAAL,GAAwB,CAAA,CAAxB;AAHyB;AAU3BC,2BAAuB,CAACC,UAAD,EAAaC,WAAb,CAA0B;AAC/C,YAAMC,SAASZ,OAAQa,CAAAA,UAAWC,CAAAA,GAAnB,EAAyBC,CAAAA,YAAzB,EAAf;AACAH,YAAOI,CAAAA,KAAP,GAAeN,UAAf;AACAE,YAAOK,CAAAA,MAAP,GAAgBN,WAAhB;AACMO,gBAAAA,GAAUN,MAAOO,CAAAA,UAAP,CAAkB,IAAlB,CAAVD;AACN,aAAO,CAAEN,MAAF,EAAUM,QAAAA,UAAV,CAAP;AAL+C;AAcjDE,8BAA0B,CAACC,QAAD,EAAWC,SAAX,EAAsBC,UAAA,GAAa,CAAnC,CAAsC;AAC9DF,cAAA,GAAWG,IAAKC,CAAAA,IAAL,CAAUJ,QAAV,GAAqBE,UAArB,GAAkC,IAAlC,CAAX;AACAD,eAAA,GAAYE,IAAKC,CAAAA,IAAL,CAAUH,SAAV,GAAsBC,UAAtB,GAAmC,IAAnC,CAAZ;AACAF,cAAA,GAAWpB,IAAKyB,CAAAA,QAAL,CAAcL,QAAd,CAAX;AACAC,eAAA,GAAYrB,IAAKyB,CAAAA,QAAL,CAAcJ,SAAd,CAAZ;AACMK,gBAAAA,IAAON,QAAPM,IAAmB,EAAnBA,KAA0BL,SAA1BK,IAAuC,CAAvCA;AACD,UAAKtB,CAAAA,WAAL,CAAiBsB,UAAjB,CAAL,KACE,IAAKtB,CAAAA,WAAL,CAAiBsB,UAAjB,CADF,GAC0B,EAD1B;AAIA,OADIC,UACJ,GADuB,IAAKvB,CAAAA,WAAL,CAAiBsB,UAAjB,CAAsBE,CAAAA,GAAtB,EACvB,MACED,UADF,GACqB,IAAKnB,CAAAA,uBAAL,CAA6BY,QAA7B,EAAuCC,SAAvC,CADrB;AAGA,aAAOM,UAAP;AAb8D;AAmBhEE,0BAAsB,CAACF,gBAAD,CAAmB;AAEvC,YAAM,CAAEZ,KAAF,EAASC,MAAT,CAAA,GADSW,gBAAiBhB,CAAAA,MAChC,EACMe,OAAOX,KAAPW,IAAgB,EAAhBA,KAAuBV,MAAvBU,IAAiC,CAAjCA,CADN;AAEAC,sBAAiBV,CAAAA,OAAQa,CAAAA,SAAzB,CAAmC,CAAnC,EAAsC,CAAtC,EAAyCf,KAAzC,EAAgDC,MAAhD,CAAA;AACA,UAAKZ,CAAAA,WAAL,CAAiBsB,GAAjB,CAAsBK,CAAAA,IAAtB,CAA2BJ,gBAA3B,CAAA;AALuC;AAOzCK,SAAK,EAAG;AACN,UAAK5B,CAAAA,WAAL,GAAmB,EAAnB;AADM;AAnDV;AAuDM6B,QAAAA,GAAa,IAAIhC,eAAJ,EAAbgC;AAENnC,SAAQmC,CAAAA,UAAR,GAAqBA,MAArB;AACAnC,SAAQG,CAAAA,eAAR,GAA0BA,eAA1B;AAjE8I,CAA9I;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/CanvasPool.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$CanvasPool\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../../environment/adapter.js');\nvar pow2 = require('../../../../maths/misc/pow2.js');\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = adapter.DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = pow2.nextPow2(minWidth);\n    minHeight = pow2.nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const canvas = canvasAndContext.canvas;\n    const { width, height } = canvas;\n    const key = (width << 17) + (height << 1);\n    canvasAndContext.context.clearRect(0, 0, width, height);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexports.CanvasPool = CanvasPool;\nexports.CanvasPoolClass = CanvasPoolClass;\n//# sourceMappingURL=CanvasPool.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adapter","pow2","CanvasPoolClass","constructor","canvasOptions","_canvasPool","Object","create","enableFullScreen","_createCanvasAndContext","pixelWidth","pixelHeight","canvas","DOMAdapter","get","createCanvas","width","height","context","getContext","getOptimalCanvasAndContext","minWidth","minHeight","resolution","Math","ceil","nextPow2","key","canvasAndContext","pop","returnCanvasAndContext","clearRect","push","clear","CanvasPool"]
}
