shadow$provide.module$node_modules$$pixi$react$lib$helpers$diffProps = function(global, require, module, exports) {
  var EventPropNames = require("module$node_modules$$pixi$react$lib$constants$EventPropNames"), compare = require("module$node_modules$$pixi$react$lib$helpers$compare"), gentleCloneProps = require("module$node_modules$$pixi$react$lib$helpers$gentleCloneProps");
  "use strict";
  exports.diffProps = function(newProps, oldProps = {}, remove = !1) {
    const newPropsRest = gentleCloneProps.gentleCloneProps(newProps), oldPropsRest = gentleCloneProps.gentleCloneProps(oldProps);
    newProps = Object.entries(newPropsRest);
    const changes = [];
    if (remove) {
      for (remove = Object.keys(oldPropsRest), oldProps = 0; oldProps < remove.length;) {
        const propKey = remove[oldProps];
        propKey in newPropsRest || newProps.unshift([propKey, "__defaultremove"]);
        oldProps += 1;
      }
    }
    newProps.forEach(([key, value]) => {
      if (!compare.isEqual(value, oldPropsRest[key])) {
        if (key in EventPropNames.ReactToPixiEventPropNames) {
          changes.push([key, value, !0, []]);
        } else {
          var entries2 = [];
          key.includes("-") && (entries2 = key.split("-"));
          changes.push([key, value, !1, entries2]);
          for (const prop in newPropsRest) {
            value = newPropsRest[prop], prop.startsWith(`${key}-`) && changes.push([prop, value, !1, prop.split("-")]);
          }
        }
      }
    });
    return {changes};
  };
};

//# sourceMappingURL=module$node_modules$$pixi$react$lib$helpers$diffProps.js.map
