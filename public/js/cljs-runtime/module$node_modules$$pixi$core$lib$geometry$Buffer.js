shadow$provide.module$node_modules$$pixi$core$lib$geometry$Buffer = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index"), runner = require("module$node_modules$$pixi$runner$lib$index");
  let UID = 0;
  class Buffer {
    constructor(data, _static = !0, index = !1) {
      this.data = data || new Float32Array(1);
      this._glBuffers = {};
      this._updateID = 0;
      this.index = index;
      this.static = _static;
      this.id = UID++;
      this.disposeRunner = new runner.Runner("disposeBuffer");
    }
    update(data) {
      data instanceof Array && (data = new Float32Array(data));
      this.data = data || this.data;
      this._updateID++;
    }
    dispose() {
      this.disposeRunner.emit(this, !1);
    }
    destroy() {
      this.dispose();
      this.data = null;
    }
    set index(value) {
      this.type = value ? constants.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER : constants.BUFFER_TYPE.ARRAY_BUFFER;
    }
    get index() {
      return this.type === constants.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
    }
    static from(data) {
      return data instanceof Array && (data = new Float32Array(data)), new Buffer(data);
    }
  }
  exports.Buffer = Buffer;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$geometry$Buffer.js.map
