{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$CubeResource.js",
"lineCount":53,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/resources/CubeResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$CubeResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), AbstractMultiResource = require(\"./AbstractMultiResource.js\");\nconst _CubeResource = class _CubeResource2 extends AbstractMultiResource.AbstractMultiResource {\n  /**\n   * @param {Array<string|PIXI.Resource>} [source] - Collection of URLs or resources\n   *        to use as the sides of the cube.\n   * @param options - ImageResource options\n   * @param {number} [options.width] - Width of resource\n   * @param {number} [options.height] - Height of resource\n   * @param {number} [options.autoLoad=true] - Whether to auto-load resources\n   * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,\n   *   whether to copy them or use\n   */\n  constructor(source, options) {\n    const { width, height, autoLoad, linkBaseTexture } = options || {};\n    if (source && source.length !== _CubeResource2.SIDES)\n      throw new Error(`Invalid length. Got ${source.length}, expected 6`);\n    super(6, { width, height });\n    for (let i = 0; i < _CubeResource2.SIDES; i++)\n      this.items[i].target = constants.TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + i;\n    this.linkBaseTexture = linkBaseTexture !== !1, source && this.initFromArray(source, options), autoLoad !== !1 && this.load();\n  }\n  /**\n   * Add binding.\n   * @param baseTexture - parent base texture\n   */\n  bind(baseTexture) {\n    super.bind(baseTexture), baseTexture.target = constants.TARGETS.TEXTURE_CUBE_MAP;\n  }\n  addBaseTextureAt(baseTexture, index, linkBaseTexture) {\n    if (linkBaseTexture === void 0 && (linkBaseTexture = this.linkBaseTexture), !this.items[index])\n      throw new Error(`Index ${index} is out of bounds`);\n    if (!this.linkBaseTexture || baseTexture.parentTextureArray || Object.keys(baseTexture._glTextures).length > 0)\n      if (baseTexture.resource)\n        this.addResourceAt(baseTexture.resource, index);\n      else\n        throw new Error(\"CubeResource does not support copying of renderTexture.\");\n    else\n      baseTexture.target = constants.TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + index, baseTexture.parentTextureArray = this.baseTexture, this.items[index] = baseTexture;\n    return baseTexture.valid && !this.valid && this.resize(baseTexture.realWidth, baseTexture.realHeight), this.items[index] = baseTexture, this;\n  }\n  /**\n   * Upload the resource\n   * @param renderer\n   * @param _baseTexture\n   * @param glTexture\n   * @returns {boolean} true is success\n   */\n  upload(renderer, _baseTexture, glTexture) {\n    const dirty = this.itemDirtyIds;\n    for (let i = 0; i < _CubeResource2.SIDES; i++) {\n      const side = this.items[i];\n      (dirty[i] < side.dirtyId || glTexture.dirtyId < _baseTexture.dirtyId) && (side.valid && side.resource ? (side.resource.upload(renderer, side, glTexture), dirty[i] = side.dirtyId) : dirty[i] < -1 && (renderer.gl.texImage2D(\n        side.target,\n        0,\n        glTexture.internalFormat,\n        _baseTexture.realWidth,\n        _baseTexture.realHeight,\n        0,\n        _baseTexture.format,\n        glTexture.type,\n        null\n      ), dirty[i] = -1));\n    }\n    return !0;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @returns {boolean} `true` if source is an array of 6 elements\n   */\n  static test(source) {\n    return Array.isArray(source) && source.length === _CubeResource2.SIDES;\n  }\n};\n_CubeResource.SIDES = 6;\nlet CubeResource = _CubeResource;\nexports.CubeResource = CubeResource;\n//# sourceMappingURL=CubeResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","AbstractMultiResource","constructor","source","options","width","height","autoLoad","linkBaseTexture","length","_CubeResource2","SIDES","Error","i","items","target","TARGETS","TEXTURE_CUBE_MAP_POSITIVE_X","initFromArray","load","bind","baseTexture","TEXTURE_CUBE_MAP","addBaseTextureAt","index","parentTextureArray","Object","keys","_glTextures","resource","addResourceAt","valid","resize","realWidth","realHeight","upload","renderer","_baseTexture","glTexture","dirty","itemDirtyIds","side","dirtyId","gl","texImage2D","internalFormat","format","type","test","Array","isArray","_CubeResource","CubeResource"]
}
