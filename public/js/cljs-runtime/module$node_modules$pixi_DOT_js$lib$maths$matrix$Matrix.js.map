{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$maths$matrix$Matrix.js",
"lineCount":197,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/maths/matrix/Matrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$maths$matrix$Matrix\"] = function(global,require,module,exports) {\n'use strict';\n\nvar _const = require('../misc/const.js');\nvar Point = require('../point/Point.js');\n\n\"use strict\";\nclass Matrix {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    /** An array of the current matrix. Only populated when `toArray` is called */\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   * @param array - The array that the matrix will be populated from.\n   */\n  fromArray(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  }\n  /**\n   * Sets the matrix properties.\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @returns This matrix. Good for chaining method calls.\n   */\n  set(a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  }\n  /**\n   * Creates an array from the current Matrix object.\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @returns The newly created array which contains the matrix\n   */\n  toArray(transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n    const array = out || this.array;\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n    return array;\n  }\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   * @param pos - The origin\n   * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {Point} The new point, transformed through this matrix\n   */\n  apply(pos, newPos) {\n    newPos = newPos || new Point.Point();\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  }\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   * @param pos - The origin\n   * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {Point} The new point, inverse-transformed through this matrix\n   */\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point.Point();\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const tx = this.tx;\n    const ty = this.ty;\n    const id = 1 / (a * d + c * -b);\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = d * id * x + -c * id * y + (ty * c - tx * d) * id;\n    newPos.y = a * id * y + -b * id * x + (-ty * a + tx * b) * id;\n    return newPos;\n  }\n  /**\n   * Translates the matrix on the x and y.\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @returns This matrix. Good for chaining method calls.\n   */\n  translate(x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  }\n  /**\n   * Applies a scale transformation to the matrix.\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @returns This matrix. Good for chaining method calls.\n   */\n  scale(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  }\n  /**\n   * Applies a rotation transformation to the matrix.\n   * @param angle - The angle in radians.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  rotate(angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const a1 = this.a;\n    const c1 = this.c;\n    const tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  }\n  /**\n   * Appends the given Matrix to this Matrix.\n   * @param matrix - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  append(matrix) {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  }\n  /**\n   * Appends two matrix's and sets the result to this matrix. AB = A * B\n   * @param a - The matrix to append.\n   * @param b - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  appendFrom(a, b) {\n    const a1 = a.a;\n    const b1 = a.b;\n    const c1 = a.c;\n    const d1 = a.d;\n    const tx = a.tx;\n    const ty = a.ty;\n    const a2 = b.a;\n    const b2 = b.b;\n    const c2 = b.c;\n    const d2 = b.d;\n    this.a = a1 * a2 + b1 * c2;\n    this.b = a1 * b2 + b1 * d2;\n    this.c = c1 * a2 + d1 * c2;\n    this.d = c1 * b2 + d1 * d2;\n    this.tx = tx * a2 + ty * c2 + b.tx;\n    this.ty = tx * b2 + ty * d2 + b.ty;\n    return this;\n  }\n  /**\n   * Sets the matrix based on all the available properties\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @returns This matrix. Good for chaining method calls.\n   */\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  }\n  /**\n   * Prepends the given Matrix to this Matrix.\n   * @param matrix - The matrix to prepend\n   * @returns This matrix. Good for chaining method calls.\n   */\n  prepend(matrix) {\n    const tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a;\n      const c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  }\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   * @param transform - The transform to apply the properties to.\n   * @returns The transform with the newly applied properties\n   */\n  decompose(transform) {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const pivot = transform.pivot;\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n    const delta = Math.abs(skewX + skewY);\n    if (delta < 1e-5 || Math.abs(_const.PI_2 - delta) < 1e-5) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n    transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n    transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n    return transform;\n  }\n  /**\n   * Inverts this matrix\n   * @returns This matrix. Good for chaining method calls.\n   */\n  invert() {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    const tx1 = this.tx;\n    const n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  }\n  /** Checks if this matrix is an identity matrix */\n  isIdentity() {\n    return this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1 && this.tx === 0 && this.ty === 0;\n  }\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  identity() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  }\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   * @returns A copy of this matrix. Good for chaining method calls.\n   */\n  clone() {\n    const matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   * @param matrix - The matrix to copy to.\n   * @returns The matrix given in parameter with its values updated.\n   */\n  copyTo(matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   * @param matrix - The matrix to copy from.\n   * @returns this\n   */\n  copyFrom(matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  }\n  /**\n   * check to see if two matrices are the same\n   * @param matrix - The matrix to compare to.\n   */\n  equals(matrix) {\n    return matrix.a === this.a && matrix.b === this.b && matrix.c === this.c && matrix.d === this.d && matrix.tx === this.tx && matrix.ty === this.ty;\n  }\n  toString() {\n    return `[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n  }\n  /**\n   * A default (identity) matrix.\n   *\n   * This is a shared object, if you want to modify it consider creating a new `Matrix`\n   * @readonly\n   */\n  static get IDENTITY() {\n    return identityMatrix.identity();\n  }\n  /**\n   * A static Matrix that can be used to avoid creating new objects.\n   * Will always ensure the matrix is reset to identity when requested.\n   * Use this object for fast but temporary calculations, as it may be mutated later on.\n   * This is a different object to the `IDENTITY` object and so can be modified without changing `IDENTITY`.\n   * @readonly\n   */\n  static get shared() {\n    return tempMatrix.identity();\n  }\n}\nconst tempMatrix = new Matrix();\nconst identityMatrix = new Matrix();\n\nexports.Matrix = Matrix;\n//# sourceMappingURL=Matrix.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","Point","Matrix","constructor","a","b","c","d","tx","ty","array","fromArray","set","toArray","transpose","out","Float32Array","apply","pos","newPos","x","y","applyInverse","id","translate","scale","rotate","angle","cos","Math","sin","a1","c1","tx1","append","matrix","b1","d1","appendFrom","a2","b2","c2","d2","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","pivot","atan2","delta","abs","PI_2","skew","sqrt","position","invert","n","isIdentity","identity","clone","copyTo","copyFrom","equals","toString","identityMatrix","tempMatrix"]
}
