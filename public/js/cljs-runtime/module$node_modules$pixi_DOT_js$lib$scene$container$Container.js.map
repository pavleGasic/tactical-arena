{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$Container.js",
"lineCount":322,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/Container.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$Container\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar Color = require('../../color/Color.js');\nvar cullingMixin = require('../../culling/cullingMixin.js');\nvar Extensions = require('../../extensions/Extensions.js');\nvar Matrix = require('../../maths/matrix/Matrix.js');\nvar _const = require('../../maths/misc/const.js');\nvar ObservablePoint = require('../../maths/point/ObservablePoint.js');\nvar uid = require('../../utils/data/uid.js');\nvar deprecation = require('../../utils/logging/deprecation.js');\nvar PoolGroup = require('../../utils/pool/PoolGroup.js');\nvar cacheAsTextureMixin = require('./container-mixins/cacheAsTextureMixin.js');\nvar childrenHelperMixin = require('./container-mixins/childrenHelperMixin.js');\nvar collectRenderablesMixin = require('./container-mixins/collectRenderablesMixin.js');\nvar effectsMixin = require('./container-mixins/effectsMixin.js');\nvar findMixin = require('./container-mixins/findMixin.js');\nvar getFastGlobalBoundsMixin = require('./container-mixins/getFastGlobalBoundsMixin.js');\nvar getGlobalMixin = require('./container-mixins/getGlobalMixin.js');\nvar measureMixin = require('./container-mixins/measureMixin.js');\nvar onRenderMixin = require('./container-mixins/onRenderMixin.js');\nvar sortMixin = require('./container-mixins/sortMixin.js');\nvar toLocalGlobalMixin = require('./container-mixins/toLocalGlobalMixin.js');\nvar RenderGroup = require('./RenderGroup.js');\nvar assignWithIgnore = require('./utils/assignWithIgnore.js');\n\n\"use strict\";\nconst defaultSkew = new ObservablePoint.ObservablePoint(null);\nconst defaultPivot = new ObservablePoint.ObservablePoint(null);\nconst defaultScale = new ObservablePoint.ObservablePoint(null, 1, 1);\nconst UPDATE_COLOR = 1;\nconst UPDATE_BLEND = 2;\nconst UPDATE_VISIBLE = 4;\nconst UPDATE_TRANSFORM = 8;\nclass Container extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    /** unique id for this container */\n    this.uid = uid.uid(\"renderable\");\n    /** @private */\n    this._updateFlags = 15;\n    // the render group this container owns\n    /** @private */\n    this.renderGroup = null;\n    // the render group this container belongs to\n    /** @private */\n    this.parentRenderGroup = null;\n    // the index of the container in the render group\n    /** @private */\n    this.parentRenderGroupIndex = 0;\n    // set to true if the container has changed. It is reset once the changes have been applied\n    // by the transform system\n    // its here to stop ensure that when things change, only one update gets registers with the transform system\n    /** @private */\n    this.didChange = false;\n    // same as above, but for the renderable\n    /** @private */\n    this.didViewUpdate = false;\n    // how deep is the container relative to its render group..\n    // unless the element is the root render group - it will be relative to its parent\n    /** @private */\n    this.relativeRenderGroupDepth = 0;\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    this.children = [];\n    /** The display object container that contains this display object. */\n    this.parent = null;\n    // used internally for changing up the render order.. mainly for masks and filters\n    // TODO setting this should cause a rebuild??\n    /** @private */\n    this.includeInBuild = true;\n    /** @private */\n    this.measurable = true;\n    /** @private */\n    this.isSimple = true;\n    // / /////////////Transform related props//////////////\n    // used by the transform system to check if a container needs to be updated that frame\n    // if the tick matches the current transform system tick, it is not updated again\n    /**\n     * @internal\n     * @ignore\n     */\n    this.updateTick = -1;\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     * @readonly\n     */\n    this.localTransform = new Matrix.Matrix();\n    /**\n     * The relative group transform is a transform relative to the render group it belongs too. It will include all parent\n     * transforms and up to the render group (think of it as kind of like a stage - but the stage can be nested).\n     * If this container is is self a render group matrix will be relative to its parent render group\n     * @readonly\n     */\n    this.relativeGroupTransform = new Matrix.Matrix();\n    /**\n     * The group transform is a transform relative to the render group it belongs too.\n     * If this container is render group then this will be an identity matrix. other wise it\n     * will be the same as the relativeGroupTransform.\n     * Use this value when actually rendering things to the screen\n     * @readonly\n     */\n    this.groupTransform = this.relativeGroupTransform;\n    /** If the object has been destroyed via destroy(). If true, it should not be used. */\n    this.destroyed = false;\n    // transform data..\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @internal\n     * @ignore\n     */\n    this._position = new ObservablePoint.ObservablePoint(this, 0, 0);\n    /**\n     * The scale factor of the object.\n     * @internal\n     * @ignore\n     */\n    this._scale = defaultScale;\n    /**\n     * The pivot point of the container that it rotates around.\n     * @internal\n     * @ignore\n     */\n    this._pivot = defaultPivot;\n    /**\n     * The skew amount, on the x and y axis.\n     * @internal\n     * @ignore\n     */\n    this._skew = defaultSkew;\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._cx = 1;\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._sx = 0;\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._cy = 0;\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._sy = 1;\n    /**\n     * The rotation amount.\n     * @internal\n     * @ignore\n     */\n    this._rotation = 0;\n    // / COLOR related props //////////////\n    // color stored as ABGR\n    this.localColor = 16777215;\n    this.localAlpha = 1;\n    this.groupAlpha = 1;\n    // A\n    this.groupColor = 16777215;\n    // BGR\n    this.groupColorAlpha = 4294967295;\n    // ABGR\n    // / BLEND related props //////////////\n    /**\n     * @internal\n     * @ignore\n     */\n    this.localBlendMode = \"inherit\";\n    /**\n     * @internal\n     * @ignore\n     */\n    this.groupBlendMode = \"normal\";\n    // / VISIBILITY related props //////////////\n    // visibility\n    // 0b11\n    // first bit is visible, second bit is renderable\n    /**\n     * This property holds three bits: culled, visible, renderable\n     * the third bit represents culling (0 = culled, 1 = not culled) 0b100\n     * the second bit represents visibility (0 = not visible, 1 = visible) 0b010\n     * the first bit represents renderable (0 = not renderable, 1 = renderable) 0b001\n     * @internal\n     * @ignore\n     */\n    this.localDisplayStatus = 7;\n    // 0b11 | 0b10 | 0b01 | 0b00\n    /**\n     * @internal\n     * @ignore\n     */\n    this.globalDisplayStatus = 7;\n    /**\n     * A value that increments each time the containe is modified\n     * eg children added, removed etc\n     * @ignore\n     */\n    this._didContainerChangeTick = 0;\n    /**\n     * A value that increments each time the container view is modified\n     * eg texture swap, geometry change etc\n     * @ignore\n     */\n    this._didViewChangeTick = 0;\n    /**\n     * property that tracks if the container transform has changed\n     * @ignore\n     */\n    this._didLocalTransformChangeId = -1;\n    this.effects = [];\n    assignWithIgnore.assignWithIgnore(this, options, {\n      children: true,\n      parent: true,\n      effects: true\n    });\n    options.children?.forEach((child) => this.addChild(child));\n    options.parent?.addChild(this);\n  }\n  /**\n   * Mixes all enumerable properties and methods from a source object to Container.\n   * @param source - The source of properties and methods to mix in.\n   * @deprecated since 8.8.0\n   */\n  static mixin(source) {\n    deprecation.deprecation(\"8.8.0\", \"Container.mixin is deprecated, please use extensions.mixin instead.\");\n    Extensions.extensions.mixin(Container, source);\n  }\n  // = 'default';\n  /**\n   * We now use the _didContainerChangeTick and _didViewChangeTick to track changes\n   * @deprecated since 8.2.6\n   * @ignore\n   */\n  set _didChangeId(value) {\n    this._didViewChangeTick = value >> 12 & 4095;\n    this._didContainerChangeTick = value & 4095;\n  }\n  get _didChangeId() {\n    return this._didContainerChangeTick & 4095 | (this._didViewChangeTick & 4095) << 12;\n  }\n  /**\n   * Adds one or more children to the container.\n   *\n   * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n   * @param {...Container} children - The Container(s) to add to the container\n   * @returns {Container} - The first child that was added.\n   */\n  addChild(...children) {\n    if (!this.allowChildren) {\n      deprecation.deprecation(deprecation.v8_0_0, \"addChild: Only Containers will be allowed to add children in v8.0.0\");\n    }\n    if (children.length > 1) {\n      for (let i = 0; i < children.length; i++) {\n        this.addChild(children[i]);\n      }\n      return children[0];\n    }\n    const child = children[0];\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (child.parent === this) {\n      this.children.splice(this.children.indexOf(child), 1);\n      this.children.push(child);\n      if (renderGroup) {\n        renderGroup.structureDidChange = true;\n      }\n      return child;\n    }\n    if (child.parent) {\n      child.parent.removeChild(child);\n    }\n    this.children.push(child);\n    if (this.sortableChildren)\n      this.sortDirty = true;\n    child.parent = this;\n    child.didChange = true;\n    child._updateFlags = 15;\n    if (renderGroup) {\n      renderGroup.addChild(child);\n    }\n    this.emit(\"childAdded\", child, this, this.children.length - 1);\n    child.emit(\"added\", this);\n    this._didViewChangeTick++;\n    if (child._zIndex !== 0) {\n      child.depthOfChildModified();\n    }\n    return child;\n  }\n  /**\n   * Removes one or more children from the container.\n   * @param {...Container} children - The Container(s) to remove\n   * @returns {Container} The first child that was removed.\n   */\n  removeChild(...children) {\n    if (children.length > 1) {\n      for (let i = 0; i < children.length; i++) {\n        this.removeChild(children[i]);\n      }\n      return children[0];\n    }\n    const child = children[0];\n    const index = this.children.indexOf(child);\n    if (index > -1) {\n      this._didViewChangeTick++;\n      this.children.splice(index, 1);\n      if (this.renderGroup) {\n        this.renderGroup.removeChild(child);\n      } else if (this.parentRenderGroup) {\n        this.parentRenderGroup.removeChild(child);\n      }\n      if (child.parentRenderLayer) {\n        child.parentRenderLayer.detach(child);\n      }\n      child.parent = null;\n      this.emit(\"childRemoved\", child, this, index);\n      child.emit(\"removed\", this);\n    }\n    return child;\n  }\n  /** @ignore */\n  _onUpdate(point) {\n    if (point) {\n      if (point === this._skew) {\n        this._updateSkew();\n      }\n    }\n    this._didContainerChangeTick++;\n    if (this.didChange)\n      return;\n    this.didChange = true;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.onChildUpdate(this);\n    }\n  }\n  set isRenderGroup(value) {\n    if (!!this.renderGroup === value)\n      return;\n    if (value) {\n      this.enableRenderGroup();\n    } else {\n      this.disableRenderGroup();\n    }\n  }\n  /**\n   * Returns true if this container is a render group.\n   * This means that it will be rendered as a separate pass, with its own set of instructions\n   */\n  get isRenderGroup() {\n    return !!this.renderGroup;\n  }\n  /**\n   * Calling this enables a render group for this container.\n   * This means it will be rendered as a separate set of instructions.\n   * The transform of the container will also be handled on the GPU rather than the CPU.\n   */\n  enableRenderGroup() {\n    if (this.renderGroup)\n      return;\n    const parentRenderGroup = this.parentRenderGroup;\n    parentRenderGroup?.removeChild(this);\n    this.renderGroup = PoolGroup.BigPool.get(RenderGroup.RenderGroup, this);\n    this.groupTransform = Matrix.Matrix.IDENTITY;\n    parentRenderGroup?.addChild(this);\n    this._updateIsSimple();\n  }\n  /** This will disable the render group for this container. */\n  disableRenderGroup() {\n    if (!this.renderGroup)\n      return;\n    const parentRenderGroup = this.parentRenderGroup;\n    parentRenderGroup?.removeChild(this);\n    PoolGroup.BigPool.return(this.renderGroup);\n    this.renderGroup = null;\n    this.groupTransform = this.relativeGroupTransform;\n    parentRenderGroup?.addChild(this);\n    this._updateIsSimple();\n  }\n  /** @ignore */\n  _updateIsSimple() {\n    this.isSimple = !this.renderGroup && this.effects.length === 0;\n  }\n  /**\n   * Current transform of the object based on world (parent) factors.\n   * @readonly\n   */\n  get worldTransform() {\n    this._worldTransform || (this._worldTransform = new Matrix.Matrix());\n    if (this.renderGroup) {\n      this._worldTransform.copyFrom(this.renderGroup.worldTransform);\n    } else if (this.parentRenderGroup) {\n      this._worldTransform.appendFrom(this.relativeGroupTransform, this.parentRenderGroup.worldTransform);\n    }\n    return this._worldTransform;\n  }\n  /**\n   * The position of the container on the x axis relative to the local coordinates of the parent.\n   * An alias to position.x\n   */\n  get x() {\n    return this._position.x;\n  }\n  set x(value) {\n    this._position.x = value;\n  }\n  /**\n   * The position of the container on the y axis relative to the local coordinates of the parent.\n   * An alias to position.y\n   */\n  get y() {\n    return this._position.y;\n  }\n  set y(value) {\n    this._position.y = value;\n  }\n  /**\n   * The coordinate of the object relative to the local coordinates of the parent.\n   * @since 4.0.0\n   */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position.copyFrom(value);\n  }\n  /**\n   * The rotation of the object in radians.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    if (this._rotation !== value) {\n      this._rotation = value;\n      this._onUpdate(this._skew);\n    }\n  }\n  /**\n   * The angle of the object in degrees.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get angle() {\n    return this.rotation * _const.RAD_TO_DEG;\n  }\n  set angle(value) {\n    this.rotation = value * _const.DEG_TO_RAD;\n  }\n  /**\n   * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n   * is the projection of `pivot` in the parent's local space.\n   *\n   * By default, the pivot is the origin (0, 0).\n   * @since 4.0.0\n   */\n  get pivot() {\n    if (this._pivot === defaultPivot) {\n      this._pivot = new ObservablePoint.ObservablePoint(this, 0, 0);\n    }\n    return this._pivot;\n  }\n  set pivot(value) {\n    if (this._pivot === defaultPivot) {\n      this._pivot = new ObservablePoint.ObservablePoint(this, 0, 0);\n    }\n    typeof value === \"number\" ? this._pivot.set(value) : this._pivot.copyFrom(value);\n  }\n  /**\n   * The skew factor for the object in radians.\n   * @since 4.0.0\n   */\n  get skew() {\n    if (this._skew === defaultSkew) {\n      this._skew = new ObservablePoint.ObservablePoint(this, 0, 0);\n    }\n    return this._skew;\n  }\n  set skew(value) {\n    if (this._skew === defaultSkew) {\n      this._skew = new ObservablePoint.ObservablePoint(this, 0, 0);\n    }\n    this._skew.copyFrom(value);\n  }\n  /**\n   * The scale factors of this object along the local coordinate axes.\n   *\n   * The default scale is (1, 1).\n   * @since 4.0.0\n   */\n  get scale() {\n    if (this._scale === defaultScale) {\n      this._scale = new ObservablePoint.ObservablePoint(this, 1, 1);\n    }\n    return this._scale;\n  }\n  set scale(value) {\n    if (this._scale === defaultScale) {\n      this._scale = new ObservablePoint.ObservablePoint(this, 0, 0);\n    }\n    typeof value === \"number\" ? this._scale.set(value) : this._scale.copyFrom(value);\n  }\n  /**\n   * The width of the Container, setting this will actually modify the scale to achieve the value set.\n   * @memberof scene.Container#\n   */\n  get width() {\n    return Math.abs(this.scale.x * this.getLocalBounds().width);\n  }\n  set width(value) {\n    const localWidth = this.getLocalBounds().width;\n    this._setWidth(value, localWidth);\n  }\n  /**\n   * The height of the Container, setting this will actually modify the scale to achieve the value set.\n   * @memberof scene.Container#\n   */\n  get height() {\n    return Math.abs(this.scale.y * this.getLocalBounds().height);\n  }\n  set height(value) {\n    const localHeight = this.getLocalBounds().height;\n    this._setHeight(value, localHeight);\n  }\n  /**\n   * Retrieves the size of the container as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the container.\n   * @memberof scene.Container#\n   */\n  getSize(out) {\n    if (!out) {\n      out = {};\n    }\n    const bounds = this.getLocalBounds();\n    out.width = Math.abs(this.scale.x * bounds.width);\n    out.height = Math.abs(this.scale.y * bounds.height);\n    return out;\n  }\n  /**\n   * Sets the size of the container to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   * @memberof scene.Container#\n   */\n  setSize(value, height) {\n    const size = this.getLocalBounds();\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, size.width);\n    height !== void 0 && this._setHeight(height, size.height);\n  }\n  /** Called when the skew or the rotation changes. */\n  _updateSkew() {\n    const rotation = this._rotation;\n    const skew = this._skew;\n    this._cx = Math.cos(rotation + skew._y);\n    this._sx = Math.sin(rotation + skew._y);\n    this._cy = -Math.sin(rotation - skew._x);\n    this._sy = Math.cos(rotation - skew._x);\n  }\n  /**\n   * Updates the transform properties of the container (accepts partial values).\n   * @param {object} opts - The options for updating the transform.\n   * @param {number} opts.x - The x position of the container.\n   * @param {number} opts.y - The y position of the container.\n   * @param {number} opts.scaleX - The scale factor on the x-axis.\n   * @param {number} opts.scaleY - The scale factor on the y-axis.\n   * @param {number} opts.rotation - The rotation of the container, in radians.\n   * @param {number} opts.skewX - The skew factor on the x-axis.\n   * @param {number} opts.skewY - The skew factor on the y-axis.\n   * @param {number} opts.pivotX - The x coordinate of the pivot point.\n   * @param {number} opts.pivotY - The y coordinate of the pivot point.\n   */\n  updateTransform(opts) {\n    this.position.set(\n      typeof opts.x === \"number\" ? opts.x : this.position.x,\n      typeof opts.y === \"number\" ? opts.y : this.position.y\n    );\n    this.scale.set(\n      typeof opts.scaleX === \"number\" ? opts.scaleX || 1 : this.scale.x,\n      typeof opts.scaleY === \"number\" ? opts.scaleY || 1 : this.scale.y\n    );\n    this.rotation = typeof opts.rotation === \"number\" ? opts.rotation : this.rotation;\n    this.skew.set(\n      typeof opts.skewX === \"number\" ? opts.skewX : this.skew.x,\n      typeof opts.skewY === \"number\" ? opts.skewY : this.skew.y\n    );\n    this.pivot.set(\n      typeof opts.pivotX === \"number\" ? opts.pivotX : this.pivot.x,\n      typeof opts.pivotY === \"number\" ? opts.pivotY : this.pivot.y\n    );\n    return this;\n  }\n  /**\n   * Updates the local transform using the given matrix.\n   * @param matrix - The matrix to use for updating the transform.\n   */\n  setFromMatrix(matrix) {\n    matrix.decompose(this);\n  }\n  /** Updates the local transform. */\n  updateLocalTransform() {\n    const localTransformChangeId = this._didContainerChangeTick;\n    if (this._didLocalTransformChangeId === localTransformChangeId)\n      return;\n    this._didLocalTransformChangeId = localTransformChangeId;\n    const lt = this.localTransform;\n    const scale = this._scale;\n    const pivot = this._pivot;\n    const position = this._position;\n    const sx = scale._x;\n    const sy = scale._y;\n    const px = pivot._x;\n    const py = pivot._y;\n    lt.a = this._cx * sx;\n    lt.b = this._sx * sx;\n    lt.c = this._cy * sy;\n    lt.d = this._sy * sy;\n    lt.tx = position._x - (px * lt.a + py * lt.c);\n    lt.ty = position._y - (px * lt.b + py * lt.d);\n  }\n  // / ///// color related stuff\n  set alpha(value) {\n    if (value === this.localAlpha)\n      return;\n    this.localAlpha = value;\n    this._updateFlags |= UPDATE_COLOR;\n    this._onUpdate();\n  }\n  /** The opacity of the object. */\n  get alpha() {\n    return this.localAlpha;\n  }\n  set tint(value) {\n    const tempColor = Color.Color.shared.setValue(value ?? 16777215);\n    const bgr = tempColor.toBgrNumber();\n    if (bgr === this.localColor)\n      return;\n    this.localColor = bgr;\n    this._updateFlags |= UPDATE_COLOR;\n    this._onUpdate();\n  }\n  /**\n   * The tint applied to the sprite. This is a hex value.\n   *\n   * A value of 0xFFFFFF will remove any tint effect.\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    return getGlobalMixin.bgr2rgb(this.localColor);\n  }\n  // / //////////////// blend related stuff\n  set blendMode(value) {\n    if (this.localBlendMode === value)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_BLEND;\n    this.localBlendMode = value;\n    this._onUpdate();\n  }\n  /**\n   * The blend mode to be applied to the sprite. Apply a value of `'normal'` to reset the blend mode.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this.localBlendMode;\n  }\n  // / ///////// VISIBILITY / RENDERABLE /////////////////\n  /** The visibility of the object. If false the object will not be drawn, and the transform will not be updated. */\n  get visible() {\n    return !!(this.localDisplayStatus & 2);\n  }\n  set visible(value) {\n    const valueNumber = value ? 2 : 0;\n    if ((this.localDisplayStatus & 2) === valueNumber)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 2;\n    this._onUpdate();\n  }\n  /** @ignore */\n  get culled() {\n    return !(this.localDisplayStatus & 4);\n  }\n  /** @ignore */\n  set culled(value) {\n    const valueNumber = value ? 0 : 4;\n    if ((this.localDisplayStatus & 4) === valueNumber)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 4;\n    this._onUpdate();\n  }\n  /** Can this object be rendered, if false the object will not be drawn but the transform will still be updated. */\n  get renderable() {\n    return !!(this.localDisplayStatus & 1);\n  }\n  set renderable(value) {\n    const valueNumber = value ? 1 : 0;\n    if ((this.localDisplayStatus & 1) === valueNumber)\n      return;\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 1;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._onUpdate();\n  }\n  /** Whether or not the object should be rendered. */\n  get isRenderable() {\n    return this.localDisplayStatus === 7 && this.groupAlpha > 0;\n  }\n  /**\n   * Removes all internal references and listeners as well as removes children from the display list.\n   * Do not use a Container after calling `destroy`.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for children with textures e.g. Sprites. If options.children\n   * is set to true it should destroy the texture of the child sprite\n   * @param {boolean} [options.textureSource=false] - Only used for children with textures e.g. Sprites.\n   * If options.children is set to true it should destroy the texture source of the child sprite\n   * @param {boolean} [options.context=false] - Only used for children with graphicsContexts e.g. Graphics.\n   * If options.children is set to true it should destroy the context of the child graphics\n   */\n  destroy(options = false) {\n    if (this.destroyed)\n      return;\n    this.destroyed = true;\n    let oldChildren;\n    if (this.children.length) {\n      oldChildren = this.removeChildren(0, this.children.length);\n    }\n    this.removeFromParent();\n    this.parent = null;\n    this._maskEffect = null;\n    this._filterEffect = null;\n    this.effects = null;\n    this._position = null;\n    this._scale = null;\n    this._pivot = null;\n    this._skew = null;\n    this.emit(\"destroyed\", this);\n    this.removeAllListeners();\n    const destroyChildren = typeof options === \"boolean\" ? options : options?.children;\n    if (destroyChildren && oldChildren) {\n      for (let i = 0; i < oldChildren.length; ++i) {\n        oldChildren[i].destroy(options);\n      }\n    }\n    this.renderGroup?.destroy();\n    this.renderGroup = null;\n  }\n}\nExtensions.extensions.mixin(\n  Container,\n  childrenHelperMixin.childrenHelperMixin,\n  getFastGlobalBoundsMixin.getFastGlobalBoundsMixin,\n  toLocalGlobalMixin.toLocalGlobalMixin,\n  onRenderMixin.onRenderMixin,\n  measureMixin.measureMixin,\n  effectsMixin.effectsMixin,\n  findMixin.findMixin,\n  sortMixin.sortMixin,\n  cullingMixin.cullingMixin,\n  cacheAsTextureMixin.cacheAsTextureMixin,\n  getGlobalMixin.getGlobalMixin,\n  collectRenderablesMixin.collectRenderablesMixin\n);\n\nexports.Container = Container;\nexports.UPDATE_BLEND = UPDATE_BLEND;\nexports.UPDATE_COLOR = UPDATE_COLOR;\nexports.UPDATE_TRANSFORM = UPDATE_TRANSFORM;\nexports.UPDATE_VISIBLE = UPDATE_VISIBLE;\n//# sourceMappingURL=Container.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","Color","cullingMixin","Extensions","Matrix","_const","ObservablePoint","uid","deprecation","PoolGroup","cacheAsTextureMixin","childrenHelperMixin","collectRenderablesMixin","effectsMixin","findMixin","getFastGlobalBoundsMixin","getGlobalMixin","measureMixin","onRenderMixin","sortMixin","toLocalGlobalMixin","RenderGroup","assignWithIgnore","defaultSkew","defaultPivot","defaultScale","Container","constructor","options","_updateFlags","parentRenderGroup","renderGroup","parentRenderGroupIndex","didViewUpdate","didChange","relativeRenderGroupDepth","children","parent","isSimple","measurable","includeInBuild","updateTick","localTransform","groupTransform","relativeGroupTransform","destroyed","_position","_scale","_pivot","_skew","_cx","_cy","_sx","_sy","_rotation","localColor","groupAlpha","localAlpha","groupColor","groupColorAlpha","localBlendMode","groupBlendMode","globalDisplayStatus","localDisplayStatus","_didViewChangeTick","_didContainerChangeTick","_didLocalTransformChangeId","effects","forEach","child","addChild","mixin","source","extensions","value","allowChildren","v8_0_0","length","i","splice","indexOf","push","structureDidChange","removeChild","sortableChildren","sortDirty","emit","_zIndex","depthOfChildModified","index","parentRenderLayer","detach","_onUpdate","point","_updateSkew","onChildUpdate","enableRenderGroup","disableRenderGroup","BigPool","get","IDENTITY","_updateIsSimple","return","_worldTransform","copyFrom","worldTransform","appendFrom","x","y","rotation","RAD_TO_DEG","DEG_TO_RAD","set","Math","abs","scale","getLocalBounds","width","localWidth","_setWidth","height","localHeight","_setHeight","getSize","out","bounds","setSize","size","skew","cos","_y","sin","_x","updateTransform","opts","position","scaleX","scaleY","skewX","skewY","pivot","pivotX","pivotY","setFromMatrix","matrix","decompose","updateLocalTransform","localTransformChangeId","lt","sx","sy","px","py","a","b","c","d","tx","ty","UPDATE_COLOR","bgr","shared","setValue","tempColor","toBgrNumber","bgr2rgb","UPDATE_BLEND","valueNumber","UPDATE_VISIBLE","destroy","oldChildren","removeChildren","removeFromParent","_filterEffect","_maskEffect","removeAllListeners","destroyChildren","UPDATE_TRANSFORM"]
}
