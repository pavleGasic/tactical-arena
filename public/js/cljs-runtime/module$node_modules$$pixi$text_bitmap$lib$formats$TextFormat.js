shadow$provide.module$node_modules$$pixi$text_bitmap$lib$formats$TextFormat = function(global, require, module, exports) {
  var BitmapFontData = require("module$node_modules$$pixi$text_bitmap$lib$BitmapFontData");
  class TextFormat {
    static test(data) {
      return "string" == typeof data && data.startsWith("info face\x3d");
    }
    static parse(txt) {
      txt = txt.match(/^[a-z]+\s+.+$/gm);
      const rawData = {info:[], common:[], page:[], char:[], chars:[], kerning:[], kernings:[], distanceField:[]};
      for (const i in txt) {
        const name = txt[i].match(/^[a-z]+/gm)[0], attributeList = txt[i].match(/[a-zA-Z]+=([^\s"']+|"([^"]*)")/gm), itemData = {};
        for (const i2 in attributeList) {
          var split = attributeList[i2].split("\x3d");
          const key = split[0];
          split = split[1].replace(/"/gm, "");
          const floatValue = parseFloat(split);
          split = isNaN(floatValue) ? split : floatValue;
          itemData[key] = split;
        }
        rawData[name].push(itemData);
      }
      const font = new BitmapFontData.BitmapFontData();
      return rawData.info.forEach(info => font.info.push({face:info.face, size:parseInt(info.size, 10)})), rawData.common.forEach(common => font.common.push({lineHeight:parseInt(common.lineHeight, 10)})), rawData.page.forEach(page => font.page.push({id:parseInt(page.id, 10), file:page.file})), rawData.char.forEach(char => font.char.push({id:parseInt(char.id, 10), page:parseInt(char.page, 10), x:parseInt(char.x, 10), y:parseInt(char.y, 10), width:parseInt(char.width, 10), height:parseInt(char.height, 
      10), xoffset:parseInt(char.xoffset, 10), yoffset:parseInt(char.yoffset, 10), xadvance:parseInt(char.xadvance, 10)})), rawData.kerning.forEach(kerning => font.kerning.push({first:parseInt(kerning.first, 10), second:parseInt(kerning.second, 10), amount:parseInt(kerning.amount, 10)})), rawData.distanceField.forEach(df => font.distanceField.push({distanceRange:parseInt(df.distanceRange, 10), fieldType:df.fieldType})), font;
    }
  }
  exports.TextFormat = TextFormat;
};

//# sourceMappingURL=module$node_modules$$pixi$text_bitmap$lib$formats$TextFormat.js.map
