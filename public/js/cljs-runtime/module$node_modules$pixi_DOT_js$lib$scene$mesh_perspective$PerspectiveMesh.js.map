{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$PerspectiveMesh.js",
"lineCount":38,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh-perspective/PerspectiveMesh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$PerspectiveMesh\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Texture = require('../../rendering/renderers/shared/texture/Texture.js');\nvar definedProps = require('../container/utils/definedProps.js');\nvar Mesh = require('../mesh/shared/Mesh.js');\nvar PerspectivePlaneGeometry = require('./PerspectivePlaneGeometry.js');\n\n\"use strict\";\nconst _PerspectiveMesh = class _PerspectiveMesh extends Mesh.Mesh {\n  /**\n   * @param options - Options to be applied to PerspectiveMesh\n   */\n  constructor(options) {\n    options = { ..._PerspectiveMesh.defaultOptions, ...options };\n    const { texture, verticesX, verticesY, ...rest } = options;\n    const planeGeometry = new PerspectivePlaneGeometry.PerspectivePlaneGeometry(definedProps.definedProps({\n      width: texture.width,\n      height: texture.height,\n      verticesX,\n      verticesY\n    }));\n    super(definedProps.definedProps({ ...rest, geometry: planeGeometry }));\n    this._texture = texture;\n    this.geometry.setCorners(\n      options.x0,\n      options.y0,\n      options.x1,\n      options.y1,\n      options.x2,\n      options.y2,\n      options.x3,\n      options.y3\n    );\n  }\n  /** Update the geometry when the texture is updated */\n  textureUpdated() {\n    const geometry = this.geometry;\n    if (!geometry)\n      return;\n    const { width, height } = this.texture;\n    if (geometry.width !== width || geometry.height !== height) {\n      geometry.width = width;\n      geometry.height = height;\n      geometry.updateProjection();\n    }\n  }\n  set texture(value) {\n    if (this._texture === value)\n      return;\n    super.texture = value;\n    this.textureUpdated();\n  }\n  /** The texture that the mesh uses */\n  get texture() {\n    return this._texture;\n  }\n  /**\n   * Set the corners of the quad to the given coordinates\n   * The mesh will then calculate the perspective so it looks correct!\n   * @param x0 - x coordinate of the first corner\n   * @param y0 - y coordinate of the first corner\n   * @param x1 - x coordinate of the second corner\n   * @param y1 - y coordinate of the second corner\n   * @param x2 - x coordinate of the third corner\n   * @param y2 - y coordinate of the third corner\n   * @param x3 - x coordinate of the fourth corner\n   * @param y3 - y coordinate of the fourth corner\n   */\n  setCorners(x0, y0, x1, y1, x2, y2, x3, y3) {\n    this.geometry.setCorners(x0, y0, x1, y1, x2, y2, x3, y3);\n  }\n};\n/** default options for the mesh */\n_PerspectiveMesh.defaultOptions = {\n  texture: Texture.Texture.WHITE,\n  verticesX: 10,\n  verticesY: 10,\n  x0: 0,\n  y0: 0,\n  x1: 100,\n  y1: 0,\n  x2: 100,\n  y2: 100,\n  x3: 0,\n  y3: 100\n};\nlet PerspectiveMesh = _PerspectiveMesh;\n\nexports.PerspectiveMesh = PerspectiveMesh;\n//# sourceMappingURL=PerspectiveMesh.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Texture","definedProps","Mesh","PerspectivePlaneGeometry","constructor","options","_PerspectiveMesh","defaultOptions","texture","verticesX","verticesY","rest","planeGeometry","width","height","geometry","_texture","setCorners","x0","y0","x1","y1","x2","y2","x3","y3","textureUpdated","updateProjection","value","WHITE","PerspectiveMesh"]
}
