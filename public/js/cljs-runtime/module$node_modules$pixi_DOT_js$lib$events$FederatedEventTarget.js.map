{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$events$FederatedEventTarget.js",
"lineCount":43,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/events/FederatedEventTarget.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$events$FederatedEventTarget\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventSystem = require('./EventSystem.js');\nvar FederatedEvent = require('./FederatedEvent.js');\n\n\"use strict\";\nconst FederatedContainer = {\n  /**\n   * Property-based event handler for the `click` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onclick = (event) => {\n   *  //some function here that happens on click\n   * }\n   */\n  onclick: null,\n  /**\n   * Property-based event handler for the `mousedown` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onmousedown = (event) => {\n   *  //some function here that happens on mousedown\n   * }\n   */\n  onmousedown: null,\n  /**\n   * Property-based event handler for the `mouseenter` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onmouseenter = (event) => {\n   *  //some function here that happens on mouseenter\n   * }\n   */\n  onmouseenter: null,\n  /**\n   * Property-based event handler for the `mouseleave` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onmouseleave = (event) => {\n   *  //some function here that happens on mouseleave\n   * }\n   */\n  onmouseleave: null,\n  /**\n   * Property-based event handler for the `mousemove` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onmousemove = (event) => {\n   *  //some function here that happens on mousemove\n   * }\n   */\n  onmousemove: null,\n  /**\n   * Property-based event handler for the `globalmousemove` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onglobalmousemove = (event) => {\n   *  //some function here that happens on globalmousemove\n   * }\n   */\n  onglobalmousemove: null,\n  /**\n   * Property-based event handler for the `mouseout` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onmouseout = (event) => {\n   *  //some function here that happens on mouseout\n   * }\n   */\n  onmouseout: null,\n  /**\n   * Property-based event handler for the `mouseover` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onmouseover = (event) => {\n   *  //some function here that happens on mouseover\n   * }\n   */\n  onmouseover: null,\n  /**\n   * Property-based event handler for the `mouseup` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onmouseup = (event) => {\n   *  //some function here that happens on mouseup\n   * }\n   */\n  onmouseup: null,\n  /**\n   * Property-based event handler for the `mouseupoutside` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onmouseupoutside = (event) => {\n   *  //some function here that happens on mouseupoutside\n   * }\n   */\n  onmouseupoutside: null,\n  /**\n   * Property-based event handler for the `pointercancel` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointercancel = (event) => {\n   *  //some function here that happens on pointercancel\n   * }\n   */\n  onpointercancel: null,\n  /**\n   * Property-based event handler for the `pointerdown` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointerdown = (event) => {\n   *  //some function here that happens on pointerdown\n   * }\n   */\n  onpointerdown: null,\n  /**\n   * Property-based event handler for the `pointerenter` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointerenter = (event) => {\n   *  //some function here that happens on pointerenter\n   * }\n   */\n  onpointerenter: null,\n  /**\n   * Property-based event handler for the `pointerleave` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointerleave = (event) => {\n   *  //some function here that happens on pointerleave\n   * }\n   */\n  onpointerleave: null,\n  /**\n   * Property-based event handler for the `pointermove` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointermove = (event) => {\n   *  //some function here that happens on pointermove\n   * }\n   */\n  onpointermove: null,\n  /**\n   * Property-based event handler for the `globalpointermove` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onglobalpointermove = (event) => {\n   *  //some function here that happens on globalpointermove\n   * }\n   */\n  onglobalpointermove: null,\n  /**\n   * Property-based event handler for the `pointerout` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointerout = (event) => {\n   *  //some function here that happens on pointerout\n   * }\n   */\n  onpointerout: null,\n  /**\n   * Property-based event handler for the `pointerover` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointerover = (event) => {\n   *  //some function here that happens on pointerover\n   * }\n   */\n  onpointerover: null,\n  /**\n   * Property-based event handler for the `pointertap` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointertap = (event) => {\n   *  //some function here that happens on pointertap\n   * }\n   */\n  onpointertap: null,\n  /**\n   * Property-based event handler for the `pointerup` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointerup = (event) => {\n   *  //some function here that happens on pointerup\n   * }\n   */\n  onpointerup: null,\n  /**\n   * Property-based event handler for the `pointerupoutside` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onpointerupoutside = (event) => {\n   *  //some function here that happens on pointerupoutside\n   * }\n   */\n  onpointerupoutside: null,\n  /**\n   * Property-based event handler for the `rightclick` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onrightclick = (event) => {\n   *  //some function here that happens on rightclick\n   * }\n   */\n  onrightclick: null,\n  /**\n   * Property-based event handler for the `rightdown` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onrightdown = (event) => {\n   *  //some function here that happens on rightdown\n   * }\n   */\n  onrightdown: null,\n  /**\n   * Property-based event handler for the `rightup` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onrightup = (event) => {\n   *  //some function here that happens on rightup\n   * }\n   */\n  onrightup: null,\n  /**\n   * Property-based event handler for the `rightupoutside` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onrightupoutside = (event) => {\n   *  //some function here that happens on rightupoutside\n   * }\n   */\n  onrightupoutside: null,\n  /**\n   * Property-based event handler for the `tap` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.ontap = (event) => {\n   *  //some function here that happens on tap\n   * }\n   */\n  ontap: null,\n  /**\n   * Property-based event handler for the `touchcancel` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.ontouchcancel = (event) => {\n   *  //some function here that happens on touchcancel\n   * }\n   */\n  ontouchcancel: null,\n  /**\n   * Property-based event handler for the `touchend` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.ontouchend = (event) => {\n   *  //some function here that happens on touchend\n   * }\n   */\n  ontouchend: null,\n  /**\n   * Property-based event handler for the `touchendoutside` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.ontouchendoutside = (event) => {\n   *  //some function here that happens on touchendoutside\n   * }\n   */\n  ontouchendoutside: null,\n  /**\n   * Property-based event handler for the `touchmove` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.ontouchmove = (event) => {\n   *  //some function here that happens on touchmove\n   * }\n   */\n  ontouchmove: null,\n  /**\n   * Property-based event handler for the `globaltouchmove` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onglobaltouchmove = (event) => {\n   *  //some function here that happens on globaltouchmove\n   * }\n   */\n  onglobaltouchmove: null,\n  /**\n   * Property-based event handler for the `touchstart` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.ontouchstart = (event) => {\n   *  //some function here that happens on touchstart\n   * }\n   */\n  ontouchstart: null,\n  /**\n   * Property-based event handler for the `wheel` event.\n   * @memberof scene.Container#\n   * @default null\n   * @example\n   * this.onwheel = (event) => {\n   *  //some function here that happens on wheel\n   * }\n   */\n  onwheel: null,\n  /**\n   * Enable interaction events for the Container. Touch, pointer and mouse\n   * @memberof scene.Container#\n   */\n  get interactive() {\n    return this.eventMode === \"dynamic\" || this.eventMode === \"static\";\n  },\n  set interactive(value) {\n    this.eventMode = value ? \"static\" : \"passive\";\n  },\n  /**\n   * @ignore\n   */\n  _internalEventMode: void 0,\n  /**\n   * Enable interaction events for the Container. Touch, pointer and mouse.\n   * There are 5 types of interaction settings:\n   * - `'none'`: Ignores all interaction events, even on its children.\n   * - `'passive'`: **(default)** Does not emit events and ignores all hit testing on itself and non-interactive children.\n   * Interactive children will still emit events.\n   * - `'auto'`: Does not emit events but is hit tested if parent is interactive. Same as `interactive = false` in v7\n   * - `'static'`: Emit events and is hit tested. Same as `interaction = true` in v7\n   * - `'dynamic'`: Emits events and is hit tested but will also receive mock interaction events fired from a ticker to\n   * allow for interaction when the mouse isn't moving\n   * @example\n   * import { Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.eventMode = 'static';\n   * sprite.on('tap', (event) => {\n   *     // Handle event\n   * });\n   * @memberof scene.Container#\n   * @since 7.2.0\n   */\n  get eventMode() {\n    return this._internalEventMode ?? EventSystem.EventSystem.defaultEventMode;\n  },\n  set eventMode(value) {\n    this._internalEventMode = value;\n  },\n  /**\n   * Determines if the container is interactive or not\n   * @returns {boolean} Whether the container is interactive or not\n   * @memberof scene.Container#\n   * @since 7.2.0\n   * @example\n   * import { Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.eventMode = 'static';\n   * sprite.isInteractive(); // true\n   *\n   * sprite.eventMode = 'dynamic';\n   * sprite.isInteractive(); // true\n   *\n   * sprite.eventMode = 'none';\n   * sprite.isInteractive(); // false\n   *\n   * sprite.eventMode = 'passive';\n   * sprite.isInteractive(); // false\n   *\n   * sprite.eventMode = 'auto';\n   * sprite.isInteractive(); // false\n   */\n  isInteractive() {\n    return this.eventMode === \"static\" || this.eventMode === \"dynamic\";\n  },\n  /**\n   * Determines if the children to the container can be clicked/touched\n   * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n   * @memberof scene.Container#\n   */\n  interactiveChildren: true,\n  /**\n   * Interaction shape. Children will be hit first, then this shape will be checked.\n   * Setting this will cause this shape to be checked in hit tests rather than the container's bounds.\n   * @example\n   * import { Rectangle, Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.hitArea = new Rectangle(0, 0, 100, 100);\n   * @member {IHitArea}\n   * @memberof scene.Container#\n   */\n  hitArea: null,\n  /**\n   * Unlike `on` or `addListener` which are methods from EventEmitter, `addEventListener`\n   * seeks to be compatible with the DOM's `addEventListener` with support for options.\n   * @memberof scene.Container\n   * @param type - The type of event to listen to.\n   * @param listener - The listener callback or object.\n   * @param options - Listener options, used for capture phase.\n   * @example\n   * // Tell the user whether they did a single, double, triple, or nth click.\n   * button.addEventListener('click', {\n   *     handleEvent(e): {\n   *         let prefix;\n   *\n   *         switch (e.detail) {\n   *             case 1: prefix = 'single'; break;\n   *             case 2: prefix = 'double'; break;\n   *             case 3: prefix = 'triple'; break;\n   *             default: prefix = e.detail + 'th'; break;\n   *         }\n   *\n   *         console.log('That was a ' + prefix + 'click');\n   *     }\n   * });\n   *\n   * // But skip the first click!\n   * button.parent.addEventListener('click', function blockClickOnce(e) {\n   *     e.stopImmediatePropagation();\n   *     button.parent.removeEventListener('click', blockClickOnce, true);\n   * }, {\n   *     capture: true,\n   * });\n   */\n  addEventListener(type, listener, options) {\n    const capture = typeof options === \"boolean\" && options || typeof options === \"object\" && options.capture;\n    const signal = typeof options === \"object\" ? options.signal : void 0;\n    const once = typeof options === \"object\" ? options.once === true : false;\n    const context = typeof listener === \"function\" ? void 0 : listener;\n    type = capture ? `${type}capture` : type;\n    const listenerFn = typeof listener === \"function\" ? listener : listener.handleEvent;\n    const emitter = this;\n    if (signal) {\n      signal.addEventListener(\"abort\", () => {\n        emitter.off(type, listenerFn, context);\n      });\n    }\n    if (once) {\n      emitter.once(type, listenerFn, context);\n    } else {\n      emitter.on(type, listenerFn, context);\n    }\n  },\n  /**\n   * Unlike `off` or `removeListener` which are methods from EventEmitter, `removeEventListener`\n   * seeks to be compatible with the DOM's `removeEventListener` with support for options.\n   * @memberof scene.Container\n   * @param type - The type of event the listener is bound to.\n   * @param listener - The listener callback or object.\n   * @param options - The original listener options. This is required to deregister a capture phase listener.\n   */\n  removeEventListener(type, listener, options) {\n    const capture = typeof options === \"boolean\" && options || typeof options === \"object\" && options.capture;\n    const context = typeof listener === \"function\" ? void 0 : listener;\n    type = capture ? `${type}capture` : type;\n    listener = typeof listener === \"function\" ? listener : listener.handleEvent;\n    this.off(type, listener, context);\n  },\n  /**\n   * Dispatch the event on this {@link Container} using the event's {@link EventBoundary}.\n   *\n   * The target of the event is set to `this` and the `defaultPrevented` flag is cleared before dispatch.\n   * @memberof scene.Container\n   * @param e - The event to dispatch.\n   * @returns Whether the {@link FederatedEvent.preventDefault preventDefault}() method was not invoked.\n   * @example\n   * // Reuse a click event!\n   * button.dispatchEvent(clickEvent);\n   */\n  dispatchEvent(e) {\n    if (!(e instanceof FederatedEvent.FederatedEvent)) {\n      throw new Error(\"Container cannot propagate events outside of the Federated Events API\");\n    }\n    e.defaultPrevented = false;\n    e.path = null;\n    e.target = this;\n    e.manager.dispatchEvent(e);\n    return !e.defaultPrevented;\n  }\n};\n\nexports.FederatedContainer = FederatedContainer;\n//# sourceMappingURL=FederatedEventTarget.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventSystem","FederatedEvent","FederatedContainer","onclick","onmousedown","onmouseenter","onmouseleave","onmousemove","onglobalmousemove","onmouseout","onmouseover","onmouseup","onmouseupoutside","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onglobalpointermove","onpointerout","onpointerover","onpointertap","onpointerup","onpointerupoutside","onrightclick","onrightdown","onrightup","onrightupoutside","ontap","ontouchcancel","ontouchend","ontouchendoutside","ontouchmove","onglobaltouchmove","ontouchstart","onwheel","interactive","eventMode","value","_internalEventMode","defaultEventMode","isInteractive","interactiveChildren","hitArea","addEventListener","type","listener","options","signal","once","context","capture","listenerFn","handleEvent","emitter","off","on","removeEventListener","dispatchEvent","e","Error","defaultPrevented","path","target","manager"]
}
