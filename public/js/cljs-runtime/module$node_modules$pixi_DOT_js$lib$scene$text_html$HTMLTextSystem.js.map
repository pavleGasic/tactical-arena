{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextSystem.js",
"lineCount":65,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-html/HTMLTextSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../extensions/Extensions.js');\nvar CanvasPool = require('../../rendering/renderers/shared/texture/CanvasPool.js');\nvar TexturePool = require('../../rendering/renderers/shared/texture/TexturePool.js');\nvar types = require('../../rendering/renderers/types.js');\nvar isSafari = require('../../utils/browser/isSafari.js');\nvar warn = require('../../utils/logging/warn.js');\nvar PoolGroup = require('../../utils/pool/PoolGroup.js');\nvar getPo2TextureFromSource = require('../text/utils/getPo2TextureFromSource.js');\nvar HTMLTextRenderData = require('./HTMLTextRenderData.js');\nvar HTMLTextStyle = require('./HTMLTextStyle.js');\nvar extractFontFamilies = require('./utils/extractFontFamilies.js');\nvar getFontCss = require('./utils/getFontCss.js');\nvar getSVGUrl = require('./utils/getSVGUrl.js');\nvar getTemporaryCanvasFromImage = require('./utils/getTemporaryCanvasFromImage.js');\nvar loadSVGImage = require('./utils/loadSVGImage.js');\nvar measureHtmlText = require('./utils/measureHtmlText.js');\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === types.RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = PoolGroup.BigPool.get(HTMLTextRenderData.HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies.extractFontFamilies(text, style);\n    const fontCSS = await getFontCss.getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText.measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl.getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage.loadSVGImage(image, svgURL, isSafari.isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage.getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource.getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    PoolGroup.BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn.warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem,\n    Extensions.ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexports.HTMLTextSystem = HTMLTextSystem;\n//# sourceMappingURL=HTMLTextSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","CanvasPool","TexturePool","types","isSafari","warn","PoolGroup","getPo2TextureFromSource","HTMLTextRenderData","HTMLTextStyle","extractFontFamilies","getFontCss","getSVGUrl","getTemporaryCanvasFromImage","loadSVGImage","measureHtmlText","HTMLTextSystem","constructor","renderer","_activeTextures","_renderer","_createCanvas","type","RendererType","WEBGPU","getTexture","options","_buildTexturePromise","text","resolution","style","getManagedTexture","textKey","_increaseReferenceCount","promise","then","texture","usageCount","htmlTextData","BigPool","get","fontFamilies","fontCSS","defaultTextStyle","measured","height","Math","ceil","max","padding","image","width","uvSafeOffset","svgURL","length","canvasAndContext","canvas","initSource","source","returnCanvasAndContext","return","decreaseReferenceCount","activeTexture","_cleanUp","catch","returnTexture","resource","uploadMethodId","getReferenceCount","destroy","extension","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name","defaultFontOptions","fontFamily","fontStyle","fontWeight"]
}
