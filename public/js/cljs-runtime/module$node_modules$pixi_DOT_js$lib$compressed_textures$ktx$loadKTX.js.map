{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx$loadKTX.js",
"lineCount":19,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,GAAwF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG5HC,QAAAA,GAAeH,OAAA,CAAQ,wEAAR,CAAfG;AACJ,MAAIC,gBAAgBJ,OAAA,CAAQ,wFAAR,CAApB,EACIK,iBAAiBL,OAAA,CAAQ,iEAAR,CADrB;AAEIM,QAAAA,GAAaN,OAAA,CAAQ,2DAAR,CAAbM;AACJ,MAAIC,mBAAmBP,OAAA,CAAQ,iGAAR,CAAvB,EACIQ,6BAA6BR,OAAA,CAAQ,yGAAR,CADjC,EAEIS,WAAWT,OAAA,CAAQ,sEAAR,CAFf;AAIA,cAAA;AA4BAE,SAAQQ,CAAAA,OAAR,GA3BgBA,CACdC,UAAW,CACTC,KAAMN,MAAWO,CAAAA,aAAcC,CAAAA,UADtB,EAETC,SAAUZ,MAAaa,CAAAA,oBAAqBC,CAAAA,IAFnC,EAGTC,KAAM,SAHG,CADGR,EAMdQ,KAAM,SANQR,EAOdS,IAAI,CAACC,GAAD,CAAM;AACR,WAAOf,cAAeA,CAAAA,cAAf,CAA8Be,GAA9B,EAAmC,MAAnC,CAAP;AADQ,GAPIV,EAURW,UAAI,CAACD,GAAD,EAAME,MAAN,EAAcC,MAAd,CAAsB;AACxBC,UAAAA,GAAoB,MAAMhB,0BAA2BA,CAAAA,0BAA3B,EAA1BgB;AAEN,UAAMC,iBAAiB,MAAkBC,CADrBC,MAAMC,KAAA,CAAMR,GAAN,CACeM,EAAAA,WAAZ,EAA7B;AACMG,UAAAA,GAAiBpB,QAASA,CAAAA,QAAT,CAAkBgB,cAAlB,EAAkCD,MAAlC,CAAjBK;AACAC,UAAAA,GAA0B,IAAIvB,gBAAiBA,CAAAA,gBAArB,CAAsCsB,MAAtC,CAA1BC;AACN,WAAO1B,aAAcA,CAAAA,aAAd,CAA4B0B,MAA5B,EAAqDP,MAArD,EAA6DH,GAA7D,CAAP;AAN8B,GAVlBV,EAkBdqB,MAAM,CAACC,OAAD,CAAU;AACVC,SAAMC,CAAAA,OAAN,CAAcF,OAAd,CAAJ,GACEA,OAAQG,CAAAA,OAAR,CAAiBC,CAAD,IAAOA,CAAEC,CAAAA,OAAF,CAAU,CAAA,CAAV,CAAvB,CADF,GAGEL,OAAQK,CAAAA,OAAR,CAAgB,CAAA,CAAhB,CAHF;AADc,GAlBF3B,CA2BhB;AAvCgI,CAAhI;;",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/ktx/loadKTX.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx$loadKTX\"] = function(global,require,module,exports) {\n'use strict';\n\nvar LoaderParser = require('../../assets/loader/parsers/LoaderParser.js');\nvar createTexture = require('../../assets/loader/parsers/textures/utils/createTexture.js');\nvar checkExtension = require('../../assets/utils/checkExtension.js');\nvar Extensions = require('../../extensions/Extensions.js');\nvar CompressedSource = require('../../rendering/renderers/shared/texture/sources/CompressedSource.js');\nvar getSupportedTextureFormats = require('../../rendering/renderers/shared/texture/utils/getSupportedTextureFormats.js');\nvar parseKTX = require('./parseKTX.js');\n\n\"use strict\";\nconst loadKTX = {\n  extension: {\n    type: Extensions.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.High,\n    name: \"loadKTX\"\n  },\n  name: \"loadKTX\",\n  test(url) {\n    return checkExtension.checkExtension(url, \".ktx\");\n  },\n  async load(url, _asset, loader) {\n    const supportedTextures = await getSupportedTextureFormats.getSupportedTextureFormats();\n    const ktxResponse = await fetch(url);\n    const ktxArrayBuffer = await ktxResponse.arrayBuffer();\n    const textureOptions = parseKTX.parseKTX(ktxArrayBuffer, supportedTextures);\n    const compressedTextureSource = new CompressedSource.CompressedSource(textureOptions);\n    return createTexture.createTexture(compressedTextureSource, loader, url);\n  },\n  unload(texture) {\n    if (Array.isArray(texture)) {\n      texture.forEach((t) => t.destroy(true));\n    } else {\n      texture.destroy(true);\n    }\n  }\n};\n\nexports.loadKTX = loadKTX;\n//# sourceMappingURL=loadKTX.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","LoaderParser","createTexture","checkExtension","Extensions","CompressedSource","getSupportedTextureFormats","parseKTX","loadKTX","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","load","_asset","loader","supportedTextures","ktxArrayBuffer","arrayBuffer","ktxResponse","fetch","textureOptions","compressedTextureSource","unload","texture","Array","isArray","forEach","t","destroy"]
}
