{
"version":3,
"file":"module$node_modules$$pixi$text_bitmap$lib$utils$resolveCharacters.js",
"lineCount":30,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,GAAsF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE9H,MAAIC,wBAAwBH,OAAA,CAAQ,uEAAR,CAA5B;AAqBAE,SAAQE,CAAAA,iBAAR,GApBAA,QAA0B,CAACC,KAAD,CAAQ;AAChB,YAAhB,IAAA,MAAOA,MAAP,KAA6BA,KAA7B,GAAqC,CAACA,KAAD,CAArC;AACA,UAAMC,SAAS,EAAf;AACA,SAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIH,KAAMI,CAAAA,MAA1B,EAAkCF,CAAlC,GAAsCC,CAAtC,EAAyCD,CAAA,EAAzC,CAA8C;AAC5C,UAAMG,OAAOL,KAAA,CAAME,CAAN,CAAb;AACA,UAAII,KAAMC,CAAAA,OAAN,CAAcF,IAAd,CAAJ,CAAyB;AACvB,YAAoB,CAApB,KAAIA,IAAKD,CAAAA,MAAT;AACE,gBAAUI,KAAJ,CAAW,iEAAgEH,IAAKD,CAAAA,MAArE,GAAX,CAAN;AADF;AADuB,cAGjBK,YAAYJ,IAAA,CAAK,CAAL,CAAQK,CAAAA,UAAR,CAAmB,CAAnB,CAHK;AAGkBC,YAAAA,GAAUN,IAAA,CAAK,CAAL,CAAQK,CAAAA,UAAR,CAAmB,CAAnB,CAAVC;AACzC,YAAIA,IAAJ,GAAcF,SAAd;AACE,gBAAUD,KAAJ,CAAU,wCAAV,CAAN;AADF;AAEA,aAAK,IAAII,KAAKH,SAAT,EAAoBI,KAAKF,IAA9B,EAAuCC,EAAvC,IAA6CC,EAA7C,EAAiDD,EAAA,EAAjD;AACEX,gBAAOa,CAAAA,IAAP,CAAYC,MAAOC,CAAAA,YAAP,CAAoBJ,EAApB,CAAZ,CAAA;AADF;AANuB,OAAzB;AASEX,cAAOa,CAAAA,IAAP,CAAY,GAAGhB,qBAAsBA,CAAAA,qBAAtB,CAA4CO,IAA5C,CAAf,CAAA;AATF;AAF4C;AAa9C,QAAsB,CAAtB,KAAIJ,MAAOG,CAAAA,MAAX;AACE,YAAUI,KAAJ,CAAU,oDAAV,CAAN;AADF;AAEA,WAAOP,MAAP;AAlBgC,GAoBlC;AAvB8H,CAA9H;;",
"sources":["node_modules/@pixi/text-bitmap/lib/utils/resolveCharacters.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text_bitmap$lib$utils$resolveCharacters\"] = function(global,require,module,exports) {\n\"use strict\";\nvar splitTextToCharacters = require(\"./splitTextToCharacters.js\");\nfunction resolveCharacters(chars) {\n  typeof chars == \"string\" && (chars = [chars]);\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2)\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      const startCode = item[0].charCodeAt(0), endCode = item[1].charCodeAt(0);\n      if (endCode < startCode)\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++)\n        result.push(String.fromCharCode(i2));\n    } else\n      result.push(...splitTextToCharacters.splitTextToCharacters(item));\n  }\n  if (result.length === 0)\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  return result;\n}\nexports.resolveCharacters = resolveCharacters;\n//# sourceMappingURL=resolveCharacters.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","splitTextToCharacters","resolveCharacters","chars","result","i","j","length","item","Array","isArray","Error","startCode","charCodeAt","endCode","i2","j2","push","String","fromCharCode"]
}
