{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$LinearLightBlend.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,GAA8F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGlIC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACAC,SAAAA,GAAkBJ,OAAA,CAAQ,yEAAR,CAAlBI;AAEJ,cAAA;AACA,OAAMC,iBAAN,QAA+BD,QAAgBA,CAAAA,eAA/C;AACEE,eAAW,EAAG;AACZ,WAAA,CAAM,CACJC,GAAI,CACFC,UAAY,+3BADV;AAwBFC,WAAO,iIAxBL,CADA,EA6BJC,IAAK,CACHF,UAAY,ihCADT;AA4BHC,WAAO,uJA5BJ,CA7BD,CAAN,CAAA;AADY;AADhB;AAmEAJ,kBAAiBM,CAAAA,SAAjB,GAA6B,CAC3BC,KAAM,cADqB,EAE3BC,KAAMV,MAAWW,CAAAA,aAAcC,CAAAA,SAFJ,CAA7B;AAKAb,SAAQG,CAAAA,gBAAR,GAA2BA,gBAA3B;AA/EsI,CAAtI;;",
"sources":["node_modules/pixi_DOT_js/lib/advanced-blend-modes/LinearLightBlend.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$LinearLightBlend\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../extensions/Extensions.js');\nvar BlendModeFilter = require('../filters/blend-modes/BlendModeFilter.js');\n\n\"use strict\";\nclass LinearLightBlend extends BlendModeFilter.BlendModeFilter {\n  constructor() {\n    super({\n      gl: {\n        functions: `\n                float linearBurn(float base, float blend) {\n                    return max(0.0, base + blend - 1.0);\n                }\n\n                float linearDodge(float base, float blend) {\n                    return min(1.0, base + blend);\n                }\n\n                float linearLight(float base, float blend) {\n                    return (blend <= 0.5) ? linearBurn(base,2.0*blend) : linearBurn(base,2.0*(blend-0.5));\n                }\n\n                vec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n                    vec3 blended = vec3(\n                        linearLight(base.r, blend.r),\n                        linearLight(base.g, blend.g),\n                        linearLight(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            `,\n        main: `\n                finalColor = vec4(blendLinearLight(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n                `\n      },\n      gpu: {\n        functions: `\n                fn linearBurn(base: f32, blend: f32) -> f32\n                {\n                    return max(0.0, base + blend - 1.0);\n                }\n\n                fn linearDodge(base: f32, blend: f32) -> f32\n                {\n                    return min(1.0, base + blend);\n                }\n\n                fn linearLight(base: f32, blend: f32) -> f32\n                {\n                    return select(linearBurn(base,2.0*(blend-0.5)), linearBurn(base,2.0*blend), blend <= 0.5);\n                }\n\n                fn blendLinearLightOpacity(base:vec3<f32>,  blend:vec3<f32>,  opacity:f32) -> vec3<f32>\n                {\n                    let blended = vec3<f32>(\n                        linearLight(base.r, blend.r),\n                        linearLight(base.g, blend.g),\n                        linearLight(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            `,\n        main: `\n                out = vec4<f32>(blendLinearLightOpacity(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n            `\n      }\n    });\n  }\n}\n/** @ignore */\nLinearLightBlend.extension = {\n  name: \"linear-light\",\n  type: Extensions.ExtensionType.BlendMode\n};\n\nexports.LinearLightBlend = LinearLightBlend;\n//# sourceMappingURL=LinearLightBlend.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","BlendModeFilter","LinearLightBlend","constructor","gl","functions","main","gpu","extension","name","type","ExtensionType","BlendMode"]
}
