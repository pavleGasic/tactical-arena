{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$measureMixin.js",
"lineCount":25,
"mappings":"AAAAA,cAAA,CAAA,iFAAA,GAAsG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG1IC,QAAAA,GAASH,OAAA,CAAQ,yDAAR,CAATG;AACJ,MAAIC,SAASJ,OAAA,CAAQ,mEAAR,CAAb,EACIK,kBAAkBL,OAAA,CAAQ,4EAAR,CADtB,EAEIM,iBAAiBN,OAAA,CAAQ,2EAAR,CAFrB,EAGIO,yBAAyBP,OAAA,CAAQ,kFAAR,CAH7B;AAKA,cAAA;AACA,QAAMQ,aAAa,IAAIL,MAAOA,CAAAA,MAAX,EAAnB;AA6DAD,SAAQO,CAAAA,YAAR,GA5DqBA,CACnBC,oBAAqB,CAAC,CADHD,EAEnBE,sBAAuB,IAFJF,EAGnBG,SAAS,CAACC,KAAD,EAAQC,UAAR,CAAoB;AAC3B,UAAMC,OAAOC,IAAKD,CAAAA,IAAL,CAAU,IAAKE,CAAAA,KAAMC,CAAAA,CAArB,CAAPH,IAAkC,CAAxC;AAEE,QAAKE,CAAAA,KAAMC,CAAAA,CAAX,GADiB,CAAnB,KAAIJ,UAAJ,GACiBD,KADjB,GACyBC,UADzB,GACsCC,IADtC,GAGiBA,IAFf;AAHyB,GAHVN,EAWnBU,UAAU,CAACN,KAAD,EAAQO,WAAR,CAAqB;AAC7B,UAAML,OAAOC,IAAKD,CAAAA,IAAL,CAAU,IAAKE,CAAAA,KAAMI,CAAAA,CAArB,CAAPN,IAAkC,CAAxC;AAEE,QAAKE,CAAAA,KAAMI,CAAAA,CAAX,GADkB,CAApB,KAAID,WAAJ,GACiBP,KADjB,GACyBO,WADzB,GACuCL,IADvC,GAGiBA,IAFf;AAH2B,GAXZN,EAwBnBH,cAAc,EAAG;AACV,QAAKK,CAAAA,qBAAV,KACE,IAAKA,CAAAA,qBADP,GAC+B,CAC3BW,KAAM,EADqB,EAE3BC,MAAO,CAFoB,EAG3BC,UAAW,CAAA,CAHgB,EAI3BC,YAAa,IAAIrB,MAAOA,CAAAA,MAAX,EAJc,CAD/B;AAQA,UAAMsB,uBAAuB,IAAKf,CAAAA,qBAAlC;AACAe,wBAAqBH,CAAAA,KAArB,GAA6B,CAA7B;AACAG,wBAAqBF,CAAAA,SAArB,GAAiC,CAAA,CAAjC;AACIE,wBAAqBJ,CAAAA,IAArB,CAA0B,CAA1B,CAAJ,KAAqC,IAAKK,CAAAA,kBAA1C,KACED,oBAAqBF,CAAAA,SACrB,GADiC,CAAA,CACjC,EAAAE,oBAAqBJ,CAAAA,IAArB,CAA0B,CAA1B,CAAA,GAA+B,IAAKK,CAAAA,kBAFtC;AAIApB,0BAAuBA,CAAAA,sBAAvB,CAA8C,IAA9C,EAAoDmB,oBAApD,CAAA;AACIA,wBAAqBF,CAAAA,SAAzB,IACElB,cAAeA,CAAAA,cAAf,CAA8B,IAA9B,EAAoCoB,oBAAqBD,CAAAA,WAAzD,EAAsEjB,UAAtE,CADF;AAGA,WAAOkB,oBAAqBD,CAAAA,WAA5B;AApBe,GAxBEhB,EAuDnBmB,SAAS,CAACC,UAAD,EAAaC,MAAb,CAAqB;AAC5B,WAAOzB,eAAgBA,CAAAA,eAAhB,CAAgC,IAAhC,EAAsCwB,UAAtC,EAAkDC,MAAlD,IAA4D,IAAI1B,MAAOA,CAAAA,MAAX,EAA5D,CAAP;AAD4B,GAvDXK,CA4DrB;AAvE8I,CAA9I;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/container-mixins/measureMixin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$measureMixin\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar Bounds = require('../bounds/Bounds.js');\nvar getGlobalBounds = require('../bounds/getGlobalBounds.js');\nvar getLocalBounds = require('../bounds/getLocalBounds.js');\nvar checkChildrenDidChange = require('../utils/checkChildrenDidChange.js');\n\n\"use strict\";\nconst tempMatrix = new Matrix.Matrix();\nconst measureMixin = {\n  _localBoundsCacheId: -1,\n  _localBoundsCacheData: null,\n  _setWidth(value, localWidth) {\n    const sign = Math.sign(this.scale.x) || 1;\n    if (localWidth !== 0) {\n      this.scale.x = value / localWidth * sign;\n    } else {\n      this.scale.x = sign;\n    }\n  },\n  _setHeight(value, localHeight) {\n    const sign = Math.sign(this.scale.y) || 1;\n    if (localHeight !== 0) {\n      this.scale.y = value / localHeight * sign;\n    } else {\n      this.scale.y = sign;\n    }\n  },\n  /**\n   * Retrieves the local bounds of the container as a Bounds object.\n   * @returns - The bounding area.\n   * @memberof scene.Container#\n   */\n  getLocalBounds() {\n    if (!this._localBoundsCacheData) {\n      this._localBoundsCacheData = {\n        data: [],\n        index: 1,\n        didChange: false,\n        localBounds: new Bounds.Bounds()\n      };\n    }\n    const localBoundsCacheData = this._localBoundsCacheData;\n    localBoundsCacheData.index = 1;\n    localBoundsCacheData.didChange = false;\n    if (localBoundsCacheData.data[0] !== this._didViewChangeTick) {\n      localBoundsCacheData.didChange = true;\n      localBoundsCacheData.data[0] = this._didViewChangeTick;\n    }\n    checkChildrenDidChange.checkChildrenDidChange(this, localBoundsCacheData);\n    if (localBoundsCacheData.didChange) {\n      getLocalBounds.getLocalBounds(this, localBoundsCacheData.localBounds, tempMatrix);\n    }\n    return localBoundsCacheData.localBounds;\n  },\n  /**\n   * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link Rectangle}.\n   * @param skipUpdate - Setting to `true` will stop the transforms of the scene graph from\n   *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n   *  nice performance boost.\n   * @param bounds - Optional bounds to store the result of the bounds calculation.\n   * @returns - The minimum axis-aligned rectangle in world space that fits around this object.\n   * @memberof scene.Container#\n   */\n  getBounds(skipUpdate, bounds) {\n    return getGlobalBounds.getGlobalBounds(this, skipUpdate, bounds || new Bounds.Bounds());\n  }\n};\n\nexports.measureMixin = measureMixin;\n//# sourceMappingURL=measureMixin.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matrix","Bounds","getGlobalBounds","getLocalBounds","checkChildrenDidChange","tempMatrix","measureMixin","_localBoundsCacheId","_localBoundsCacheData","_setWidth","value","localWidth","sign","Math","scale","x","_setHeight","localHeight","y","data","index","didChange","localBounds","localBoundsCacheData","_didViewChangeTick","getBounds","skipUpdate","bounds"]
}
