{
"version":3,
"file":"module$node_modules$$pixi$graphics$lib$const.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,GAAiE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAErGC,YAA6B,CAACC,UAAD,KAAiBA,UAAWC,CAAAA,KAAX,GAAmB,OAAnB,EAA4BD,UAAWE,CAAAA,KAAvC,GAA+C,OAA/C,EAAwDF,UAAWG,CAAAA,KAAnE,GAA2E,OAA3E,EAAoFH,UAArG,EAAD,CAAmHD,SAAnH,IAAgI,EAAhI,CAFyE,EAE4DK,WAA4B,CAACC,SAAD,KAAgBA,SAAUC,CAAAA,IAAV,GAAiB,MAAjB,EAAyBD,SAAUF,CAAAA,KAAnC,GAA2C,OAA3C,EAAoDE,SAAUE,CAAAA,MAA9D,GAAuE,QAAvE,EAAiFF,SAAjG,EAAD,CAA8GD,QAA9G,IAA0H,EAA1H,CAFvF;AAGnGI,QAAAA,GAAS,CACbC,SAAU,CAAA,CADG,EAEbC,UAAW,EAFE,EAGbC,YAAa,CAHA,EAIbC,YAAa,IAJA,EAKbC,QAAS,IALI,EAMbC,cAAc,CAACC,MAAD,EAASC,eAAA,GAAkB,EAA3B,CAA+B;AAC3C,QAAI,CAAC,IAAKP,CAAAA,QAAV,IAAsB,CAACM,MAAvB,IAAiCE,KAAA,CAAMF,MAAN,CAAjC;AACE,aAAOC,eAAP;AADF;AAEIE,UAAAA,GAASC,IAAKC,CAAAA,IAAL,CAAUL,MAAV,GAAmB,IAAKL,CAAAA,SAAxB,CAATQ;AACJ,WAAOA,MAAA,GAAS,IAAKP,CAAAA,WAAd,GAA4BO,MAA5B,GAAqC,IAAKP,CAAAA,WAA1C,GAAwDO,MAAxD,GAAiE,IAAKN,CAAAA,WAAtE,KAAsFM,MAAtF,GAA+F,IAAKN,CAAAA,WAApG,CAAA,EAAkHM,MAAzH;AAJ2C,GANhC,CAATV;AAaNV,SAAQuB,CAAAA,eAAR,GADqBb,MACrB;AACAV,SAAQM,CAAAA,QAAR,GAAmBA,QAAnB;AACAN,SAAQC,CAAAA,SAAR,GAAoBA,SAApB;AACAD,SAAQU,CAAAA,MAAR,GAAiBA,MAAjB;AAnByG,CAAzG;;",
"sources":["node_modules/@pixi/graphics/lib/const.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$graphics$lib$const\"] = function(global,require,module,exports) {\n\"use strict\";\nvar LINE_JOIN = /* @__PURE__ */ ((LINE_JOIN2) => (LINE_JOIN2.MITER = \"miter\", LINE_JOIN2.BEVEL = \"bevel\", LINE_JOIN2.ROUND = \"round\", LINE_JOIN2))(LINE_JOIN || {}), LINE_CAP = /* @__PURE__ */ ((LINE_CAP2) => (LINE_CAP2.BUTT = \"butt\", LINE_CAP2.ROUND = \"round\", LINE_CAP2.SQUARE = \"square\", LINE_CAP2))(LINE_CAP || {});\nconst curves = {\n  adaptive: !0,\n  maxLength: 10,\n  minSegments: 8,\n  maxSegments: 2048,\n  epsilon: 1e-4,\n  _segmentsCount(length, defaultSegments = 20) {\n    if (!this.adaptive || !length || isNaN(length))\n      return defaultSegments;\n    let result = Math.ceil(length / this.maxLength);\n    return result < this.minSegments ? result = this.minSegments : result > this.maxSegments && (result = this.maxSegments), result;\n  }\n}, GRAPHICS_CURVES = curves;\nexports.GRAPHICS_CURVES = GRAPHICS_CURVES;\nexports.LINE_CAP = LINE_CAP;\nexports.LINE_JOIN = LINE_JOIN;\nexports.curves = curves;\n//# sourceMappingURL=const.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","LINE_JOIN","LINE_JOIN2","MITER","BEVEL","ROUND","LINE_CAP","LINE_CAP2","BUTT","SQUARE","curves","adaptive","maxLength","minSegments","maxSegments","epsilon","_segmentsCount","length","defaultSegments","isNaN","result","Math","ceil","GRAPHICS_CURVES"]
}
