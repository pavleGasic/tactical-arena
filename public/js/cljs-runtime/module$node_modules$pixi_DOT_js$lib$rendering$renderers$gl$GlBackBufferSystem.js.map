{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlBackBufferSystem.js",
"lineCount":50,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/GlBackBufferSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlBackBufferSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar warn = require('../../../utils/logging/warn.js');\nvar Geometry = require('../shared/geometry/Geometry.js');\nvar Shader = require('../shared/shader/Shader.js');\nvar State = require('../shared/state/State.js');\nvar TextureSource = require('../shared/texture/sources/TextureSource.js');\nvar Texture = require('../shared/texture/Texture.js');\nvar GlProgram = require('./shader/GlProgram.js');\n\n\"use strict\";\nconst bigTriangleGeometry = new Geometry.Geometry({\n  attributes: {\n    aPosition: [\n      -1,\n      -1,\n      // Bottom left corner\n      3,\n      -1,\n      // Bottom right corner, extending beyond right edge\n      -1,\n      3\n      // Top left corner, extending beyond top edge\n    ]\n  }\n});\nconst _GlBackBufferSystem = class _GlBackBufferSystem {\n  constructor(renderer) {\n    /** if true, the back buffer is used */\n    this.useBackBuffer = false;\n    this._useBackBufferThisRender = false;\n    this._renderer = renderer;\n  }\n  init(options = {}) {\n    const { useBackBuffer, antialias } = { ..._GlBackBufferSystem.defaultOptions, ...options };\n    this.useBackBuffer = useBackBuffer;\n    this._antialias = antialias;\n    if (!this._renderer.context.supports.msaa) {\n      warn.warn(\"antialiasing, is not supported on when using the back buffer\");\n      this._antialias = false;\n    }\n    this._state = State.State.for2d();\n    const bigTriangleProgram = new GlProgram.GlProgram({\n      vertex: `\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }`,\n      fragment: `\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }`,\n      name: \"big-triangle\"\n    });\n    this._bigTriangleShader = new Shader.Shader({\n      glProgram: bigTriangleProgram,\n      resources: {\n        uTexture: Texture.Texture.WHITE.source\n      }\n    });\n  }\n  /**\n   * This is called before the RenderTargetSystem is started. This is where\n   * we replace the target with the back buffer if required.\n   * @param options - The options for this render.\n   */\n  renderStart(options) {\n    const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n    this._useBackBufferThisRender = this.useBackBuffer && !!renderTarget.isRoot;\n    if (this._useBackBufferThisRender) {\n      const renderTarget2 = this._renderer.renderTarget.getRenderTarget(options.target);\n      this._targetTexture = renderTarget2.colorTexture;\n      options.target = this._getBackBufferTexture(renderTarget2.colorTexture);\n    }\n  }\n  renderEnd() {\n    this._presentBackBuffer();\n  }\n  _presentBackBuffer() {\n    const renderer = this._renderer;\n    renderer.renderTarget.finishRenderPass();\n    if (!this._useBackBufferThisRender)\n      return;\n    renderer.renderTarget.bind(this._targetTexture, false);\n    this._bigTriangleShader.resources.uTexture = this._backBufferTexture.source;\n    renderer.encoder.draw({\n      geometry: bigTriangleGeometry,\n      shader: this._bigTriangleShader,\n      state: this._state\n    });\n  }\n  _getBackBufferTexture(targetSourceTexture) {\n    this._backBufferTexture = this._backBufferTexture || new Texture.Texture({\n      source: new TextureSource.TextureSource({\n        width: targetSourceTexture.width,\n        height: targetSourceTexture.height,\n        resolution: targetSourceTexture._resolution,\n        antialias: this._antialias\n      })\n    });\n    this._backBufferTexture.source.resize(\n      targetSourceTexture.width,\n      targetSourceTexture.height,\n      targetSourceTexture._resolution\n    );\n    return this._backBufferTexture;\n  }\n  /** destroys the back buffer */\n  destroy() {\n    if (this._backBufferTexture) {\n      this._backBufferTexture.destroy();\n      this._backBufferTexture = null;\n    }\n  }\n};\n/** @ignore */\n_GlBackBufferSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem\n  ],\n  name: \"backBuffer\",\n  priority: 1\n};\n/** default options for the back buffer system */\n_GlBackBufferSystem.defaultOptions = {\n  /** if true will use the back buffer where required */\n  useBackBuffer: false\n};\nlet GlBackBufferSystem = _GlBackBufferSystem;\n\nexports.GlBackBufferSystem = GlBackBufferSystem;\n//# sourceMappingURL=GlBackBufferSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","warn","Geometry","Shader","State","TextureSource","Texture","GlProgram","bigTriangleGeometry","attributes","aPosition","constructor","renderer","_useBackBufferThisRender","useBackBuffer","_renderer","init","options","antialias","_GlBackBufferSystem","defaultOptions","_antialias","context","supports","msaa","_state","for2d","bigTriangleProgram","vertex","fragment","name","_bigTriangleShader","glProgram","resources","uTexture","WHITE","source","renderStart","renderTarget","getRenderTarget","target","isRoot","renderTarget2","_targetTexture","colorTexture","_getBackBufferTexture","renderEnd","_presentBackBuffer","finishRenderPass","bind","_backBufferTexture","encoder","draw","geometry","shader","state","targetSourceTexture","width","height","resolution","_resolution","resize","destroy","extension","type","ExtensionType","WebGLSystem","priority","GlBackBufferSystem"]
}
