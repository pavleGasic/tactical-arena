{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx2$utils$convertFormatIfRequired.js",
"lineCount":21,
"mappings":"AAAAA,cAAA,CAAA,0FAAA,GAA+G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAyBvJC,UAASA,iBAAgB,CAACC,WAAD,CAAc;AACrC,UAAMC,aAAaD,WAAYE,CAAAA,UAAzBD,GAAsC,CAA5C,EACME,uBAAuB,IAAIC,WAAJ,CAAgBH,UAAhB,CAD7B;AAEA,SAAK,IAAII,IAAI,CAAb,EAAgBA,CAAhB,GAAoBJ,UAApB,EAAgC,EAAEI,CAAlC;AACEF,0BAAA,CAAqBE,CAArB,CAAA,GAA0BL,WAAA,CAAgB,CAAhB,GAAYK,CAAZ,CAA1B,IAAgDL,WAAA,CAAgB,CAAhB,GAAYK,CAAZ,GAAoB,CAApB,CAAhD,IAA0E,CAA1E,KAAgFL,WAAA,CAAgB,CAAhB,GAAYK,CAAZ,GAAoB,CAApB,CAAhF,IAA0G,EAA1G,IAAgH,UAAhH;AADF;AAGA,WAAO,IAAIC,UAAJ,CAAeH,oBAAqBI,CAAAA,MAApC,CAAP;AANqC;AArBvC,QAAMC,aAAa,CACjBC,UAAW,CACTC,gBAAiB,YADR,EAETC,gBAAiBZ,gBAFR,CADM,EAKjB,iBAAkB,CAChBW,gBAAiB,iBADD,EAEhBC,gBAAiBZ,gBAFD,CALD,CAAnB;AA8BAD,SAAQc,CAAAA,uBAAR,GApBAA,QAAgC,CAACC,cAAD,CAAiB;AAC/C,UAAMC,SAASD,cAAeC,CAAAA,MAA9B;AACA,QAAIN,UAAA,CAAWM,MAAX,CAAJ,CAAwB;AACtB,YAAMH,kBAAkBH,UAAA,CAAWM,MAAX,CAAmBH,CAAAA,eAA3C,EACMI,eAAeF,cAAeG,CAAAA,QADpC;AAEA,WAAK,IAAIX,IAAI,CAAb,EAAgBA,CAAhB,GAAoBU,YAAaE,CAAAA,MAAjC,EAAyCZ,CAAA,EAAzC;AACEU,oBAAA,CAAaV,CAAb,CAAA,GAAkBM,eAAA,CAAgBI,YAAA,CAAaV,CAAb,CAAhB,CAAlB;AADF;AAGAQ,oBAAeC,CAAAA,MAAf,GAAwBN,UAAA,CAAWM,MAAX,CAAmBJ,CAAAA,eAA3C;AANsB;AAFuB,GAoBjD;AAlCuJ,CAAvJ;;",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/ktx2/utils/convertFormatIfRequired.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx2$utils$convertFormatIfRequired\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst converters = {\n  rgb8unorm: {\n    convertedFormat: \"rgba8unorm\",\n    convertFunction: convertRGBtoRGBA\n  },\n  \"rgb8unorm-srgb\": {\n    convertedFormat: \"rgba8unorm-srgb\",\n    convertFunction: convertRGBtoRGBA\n  }\n};\nfunction convertFormatIfRequired(textureOptions) {\n  const format = textureOptions.format;\n  if (converters[format]) {\n    const convertFunction = converters[format].convertFunction;\n    const levelBuffers = textureOptions.resource;\n    for (let i = 0; i < levelBuffers.length; i++) {\n      levelBuffers[i] = convertFunction(levelBuffers[i]);\n    }\n    textureOptions.format = converters[format].convertedFormat;\n  }\n}\nfunction convertRGBtoRGBA(levelBuffer) {\n  const pixelCount = levelBuffer.byteLength / 3;\n  const levelBufferWithAlpha = new Uint32Array(pixelCount);\n  for (let i = 0; i < pixelCount; ++i) {\n    levelBufferWithAlpha[i] = levelBuffer[i * 3] + (levelBuffer[i * 3 + 1] << 8) + (levelBuffer[i * 3 + 2] << 16) + 4278190080;\n  }\n  return new Uint8Array(levelBufferWithAlpha.buffer);\n}\n\nexports.convertFormatIfRequired = convertFormatIfRequired;\n//# sourceMappingURL=convertFormatIfRequired.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","convertRGBtoRGBA","levelBuffer","pixelCount","byteLength","levelBufferWithAlpha","Uint32Array","i","Uint8Array","buffer","converters","rgb8unorm","convertedFormat","convertFunction","convertFormatIfRequired","textureOptions","format","levelBuffers","resource","length"]
}
