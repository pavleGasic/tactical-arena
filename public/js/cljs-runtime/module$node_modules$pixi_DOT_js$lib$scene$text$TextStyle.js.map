{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text$TextStyle.js",
"lineCount":227,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text/TextStyle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text$TextStyle\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar Color = require('../../color/Color.js');\nvar deprecation = require('../../utils/logging/deprecation.js');\nvar FillGradient = require('../graphics/shared/fill/FillGradient.js');\nvar FillPattern = require('../graphics/shared/fill/FillPattern.js');\nvar GraphicsContext = require('../graphics/shared/GraphicsContext.js');\nvar convertFillInputToFillStyle = require('../graphics/shared/utils/convertFillInputToFillStyle.js');\nvar generateTextStyleKey = require('./utils/generateTextStyleKey.js');\n\n\"use strict\";\nconst _TextStyle = class _TextStyle extends EventEmitter {\n  constructor(style = {}) {\n    super();\n    convertV7Tov8Style(style);\n    const fullStyle = { ..._TextStyle.defaultTextStyle, ...style };\n    for (const key in fullStyle) {\n      const thisKey = key;\n      this[thisKey] = fullStyle[key];\n    }\n    this.update();\n  }\n  /**\n   * Alignment for multiline text, does not affect single line text.\n   * @member {'left'|'center'|'right'|'justify'}\n   */\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    this._align = value;\n    this.update();\n  }\n  /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n  get breakWords() {\n    return this._breakWords;\n  }\n  set breakWords(value) {\n    this._breakWords = value;\n    this.update();\n  }\n  /** Set a drop shadow for the text. */\n  get dropShadow() {\n    return this._dropShadow;\n  }\n  set dropShadow(value) {\n    if (value !== null && typeof value === \"object\") {\n      this._dropShadow = this._createProxy({ ..._TextStyle.defaultDropShadow, ...value });\n    } else {\n      this._dropShadow = value ? this._createProxy({ ..._TextStyle.defaultDropShadow }) : null;\n    }\n    this.update();\n  }\n  /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(value) {\n    this._fontFamily = value;\n    this.update();\n  }\n  /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n  get fontSize() {\n    return this._fontSize;\n  }\n  set fontSize(value) {\n    if (typeof value === \"string\") {\n      this._fontSize = parseInt(value, 10);\n    } else {\n      this._fontSize = value;\n    }\n    this.update();\n  }\n  /**\n   * The font style.\n   * @member {'normal'|'italic'|'oblique'}\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(value) {\n    this._fontStyle = value.toLowerCase();\n    this.update();\n  }\n  /**\n   * The font variant.\n   * @member {'normal'|'small-caps'}\n   */\n  get fontVariant() {\n    return this._fontVariant;\n  }\n  set fontVariant(value) {\n    this._fontVariant = value;\n    this.update();\n  }\n  /**\n   * The font weight.\n   * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(value) {\n    this._fontWeight = value;\n    this.update();\n  }\n  /** The space between lines. */\n  get leading() {\n    return this._leading;\n  }\n  set leading(value) {\n    this._leading = value;\n    this.update();\n  }\n  /** The amount of spacing between letters, default is 0. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    this._letterSpacing = value;\n    this.update();\n  }\n  /** The line height, a number that represents the vertical space that a letter uses. */\n  get lineHeight() {\n    return this._lineHeight;\n  }\n  set lineHeight(value) {\n    this._lineHeight = value;\n    this.update();\n  }\n  /**\n   * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n   * by adding padding to all sides of the text.\n   */\n  get padding() {\n    return this._padding;\n  }\n  set padding(value) {\n    this._padding = value;\n    this.update();\n  }\n  /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n  get trim() {\n    return this._trim;\n  }\n  set trim(value) {\n    this._trim = value;\n    this.update();\n  }\n  /**\n   * The baseline of the text that is rendered.\n   * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  get textBaseline() {\n    return this._textBaseline;\n  }\n  set textBaseline(value) {\n    this._textBaseline = value;\n    this.update();\n  }\n  /**\n   * How newlines and spaces should be handled.\n   * Default is 'pre' (preserve, preserve).\n   *\n   *  value       | New lines     |   Spaces\n   *  ---         | ---           |   ---\n   * 'normal'     | Collapse      |   Collapse\n   * 'pre'        | Preserve      |   Preserve\n   * 'pre-line'   | Preserve      |   Collapse\n   * @member {'normal'|'pre'|'pre-line'}\n   */\n  get whiteSpace() {\n    return this._whiteSpace;\n  }\n  set whiteSpace(value) {\n    this._whiteSpace = value;\n    this.update();\n  }\n  /** Indicates if word wrap should be used. */\n  get wordWrap() {\n    return this._wordWrap;\n  }\n  set wordWrap(value) {\n    this._wordWrap = value;\n    this.update();\n  }\n  /** The width at which text will wrap, it needs wordWrap to be set to true. */\n  get wordWrapWidth() {\n    return this._wordWrapWidth;\n  }\n  set wordWrapWidth(value) {\n    this._wordWrapWidth = value;\n    this.update();\n  }\n  /**\n   * The fill style that will be used to color the text.\n   * This can be:\n   * - A color string like 'red', '#00FF00', or 'rgba(255,0,0,0.5)'\n   * - A hex number like 0xff0000 for red\n   * - A FillStyle object with properties like { color: 0xff0000, alpha: 0.5 }\n   * - A FillGradient for gradient fills\n   * - A FillPattern for pattern/texture fills\n   *\n   * When using a FillGradient, vertical gradients (angle of 90 degrees) are applied per line of text,\n   * while gradients at any other angle are spread across the entire text body as a whole.\n   * @example\n   * // Vertical gradient applied per line\n   * const verticalGradient = new FillGradient(0, 0, 0, 1)\n   *     .addColorStop(0, 0xff0000)\n   *     .addColorStop(1, 0x0000ff);\n   *\n   * const text = new Text({\n   *     text: 'Line 1\\nLine 2',\n   *     style: { fill: verticalGradient }\n   * });\n   *\n   * To manage the gradient in a global scope, set the textureSpace property of the FillGradient to 'global'.\n   * @type {string|number|FillStyle|FillGradient|FillPattern}\n   */\n  get fill() {\n    return this._originalFill;\n  }\n  set fill(value) {\n    if (value === this._originalFill)\n      return;\n    this._originalFill = value;\n    if (this._isFillStyle(value)) {\n      this._originalFill = this._createProxy({ ...GraphicsContext.GraphicsContext.defaultFillStyle, ...value }, () => {\n        this._fill = convertFillInputToFillStyle.toFillStyle(\n          { ...this._originalFill },\n          GraphicsContext.GraphicsContext.defaultFillStyle\n        );\n      });\n    }\n    this._fill = convertFillInputToFillStyle.toFillStyle(\n      value === 0 ? \"black\" : value,\n      GraphicsContext.GraphicsContext.defaultFillStyle\n    );\n    this.update();\n  }\n  /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n  get stroke() {\n    return this._originalStroke;\n  }\n  set stroke(value) {\n    if (value === this._originalStroke)\n      return;\n    this._originalStroke = value;\n    if (this._isFillStyle(value)) {\n      this._originalStroke = this._createProxy({ ...GraphicsContext.GraphicsContext.defaultStrokeStyle, ...value }, () => {\n        this._stroke = convertFillInputToFillStyle.toStrokeStyle(\n          { ...this._originalStroke },\n          GraphicsContext.GraphicsContext.defaultStrokeStyle\n        );\n      });\n    }\n    this._stroke = convertFillInputToFillStyle.toStrokeStyle(value, GraphicsContext.GraphicsContext.defaultStrokeStyle);\n    this.update();\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey.generateTextStyleKey(this);\n    return this._styleKey;\n  }\n  update() {\n    this._styleKey = null;\n    this.emit(\"update\", this);\n  }\n  /** Resets all properties to the default values */\n  reset() {\n    const defaultStyle = _TextStyle.defaultTextStyle;\n    for (const key in defaultStyle) {\n      this[key] = defaultStyle[key];\n    }\n  }\n  get styleKey() {\n    return this._styleKey || this._generateKey();\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * @returns New cloned TextStyle object\n   */\n  clone() {\n    return new _TextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      leading: this.leading,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      textBaseline: this.textBaseline,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth\n    });\n  }\n  /**\n   * Destroys this text style.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n   */\n  destroy(options = false) {\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fill?.texture) {\n        this._fill.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalFill?.texture) {\n        this._originalFill.texture.destroy(destroyTextureSource);\n      }\n      if (this._stroke?.texture) {\n        this._stroke.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalStroke?.texture) {\n        this._originalStroke.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fill = null;\n    this._stroke = null;\n    this.dropShadow = null;\n    this._originalStroke = null;\n    this._originalFill = null;\n  }\n  _createProxy(value, cb) {\n    return new Proxy(value, {\n      set: (target, property, newValue) => {\n        target[property] = newValue;\n        cb?.(property, newValue);\n        this.update();\n        return true;\n      }\n    });\n  }\n  _isFillStyle(value) {\n    return (value ?? null) !== null && !(Color.Color.isColorLike(value) || value instanceof FillGradient.FillGradient || value instanceof FillPattern.FillPattern);\n  }\n};\n/** The default drop shadow settings */\n_TextStyle.defaultDropShadow = {\n  /** Set alpha for the drop shadow */\n  alpha: 1,\n  /** Set a angle of the drop shadow */\n  angle: Math.PI / 6,\n  /** Set a shadow blur radius */\n  blur: 0,\n  /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n  color: \"black\",\n  /** Set a distance of the drop shadow */\n  distance: 5\n};\n/** The default text style settings */\n_TextStyle.defaultTextStyle = {\n  /**\n   * See {@link TextStyle.align}\n   * @type {'left'|'center'|'right'|'justify'}\n   */\n  align: \"left\",\n  /** See {@link TextStyle.breakWords} */\n  breakWords: false,\n  /** See {@link TextStyle.dropShadow} */\n  dropShadow: null,\n  /**\n   * See {@link TextStyle.fill}\n   * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  fill: \"black\",\n  /**\n   * See {@link TextStyle.fontFamily}\n   * @type {string|string[]}\n   */\n  fontFamily: \"Arial\",\n  /**\n   * See {@link TextStyle.fontSize}\n   * @type {number|string}\n   */\n  fontSize: 26,\n  /**\n   * See {@link TextStyle.fontStyle}\n   * @type {'normal'|'italic'|'oblique'}\n   */\n  fontStyle: \"normal\",\n  /**\n   * See {@link TextStyle.fontVariant}\n   * @type {'normal'|'small-caps'}\n   */\n  fontVariant: \"normal\",\n  /**\n   * See {@link TextStyle.fontWeight}\n   * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  fontWeight: \"normal\",\n  /** See {@link TextStyle.leading} */\n  leading: 0,\n  /** See {@link TextStyle.letterSpacing} */\n  letterSpacing: 0,\n  /** See {@link TextStyle.lineHeight} */\n  lineHeight: 0,\n  /** See {@link TextStyle.padding} */\n  padding: 0,\n  /**\n   * See {@link TextStyle.stroke}\n   * @type {string|number}\n   */\n  stroke: null,\n  /**\n   * See {@link TextStyle.textBaseline}\n   * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  textBaseline: \"alphabetic\",\n  /** See {@link TextStyle.trim} */\n  trim: false,\n  /**\n   * See {@link TextStyle.whiteSpace}\n   * @type {'normal'|'pre'|'pre-line'}\n   */\n  whiteSpace: \"pre\",\n  /** See {@link TextStyle.wordWrap} */\n  wordWrap: false,\n  /** See {@link TextStyle.wordWrapWidth} */\n  wordWrapWidth: 100\n};\nlet TextStyle = _TextStyle;\nfunction convertV7Tov8Style(style) {\n  const oldStyle = style;\n  if (typeof oldStyle.dropShadow === \"boolean\" && oldStyle.dropShadow) {\n    const defaults = TextStyle.defaultDropShadow;\n    style.dropShadow = {\n      alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n      angle: oldStyle.dropShadowAngle ?? defaults.angle,\n      blur: oldStyle.dropShadowBlur ?? defaults.blur,\n      color: oldStyle.dropShadowColor ?? defaults.color,\n      distance: oldStyle.dropShadowDistance ?? defaults.distance\n    };\n  }\n  if (oldStyle.strokeThickness !== void 0) {\n    deprecation.deprecation(deprecation.v8_0_0, \"strokeThickness is now a part of stroke\");\n    const color = oldStyle.stroke;\n    let obj = {};\n    if (Color.Color.isColorLike(color)) {\n      obj.color = color;\n    } else if (color instanceof FillGradient.FillGradient || color instanceof FillPattern.FillPattern) {\n      obj.fill = color;\n    } else if (Object.hasOwnProperty.call(color, \"color\") || Object.hasOwnProperty.call(color, \"fill\")) {\n      obj = color;\n    } else {\n      throw new Error(\"Invalid stroke value.\");\n    }\n    style.stroke = {\n      ...obj,\n      width: oldStyle.strokeThickness\n    };\n  }\n  if (Array.isArray(oldStyle.fillGradientStops)) {\n    deprecation.deprecation(deprecation.v8_0_0, \"gradient fill is now a fill pattern: `new FillGradient(...)`\");\n    let fontSize;\n    if (style.fontSize == null) {\n      style.fontSize = TextStyle.defaultTextStyle.fontSize;\n    } else if (typeof style.fontSize === \"string\") {\n      fontSize = parseInt(style.fontSize, 10);\n    } else {\n      fontSize = style.fontSize;\n    }\n    const gradientFill = new FillGradient.FillGradient({\n      start: { x: 0, y: 0 },\n      end: { x: 0, y: (fontSize || 0) * 1.7 }\n    });\n    const fills = oldStyle.fillGradientStops.map((color) => Color.Color.shared.setValue(color).toNumber());\n    fills.forEach((number, index) => {\n      const ratio = index / (fills.length - 1);\n      gradientFill.addColorStop(ratio, number);\n    });\n    style.fill = {\n      fill: gradientFill\n    };\n  }\n}\n\nexports.TextStyle = TextStyle;\n//# sourceMappingURL=TextStyle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","convertV7Tov8Style","style","dropShadow","defaults","TextStyle","defaultDropShadow","alpha","dropShadowAlpha","angle","dropShadowAngle","blur","dropShadowBlur","color","dropShadowColor","distance","dropShadowDistance","strokeThickness","deprecation","v8_0_0","stroke","obj","Color","isColorLike","FillGradient","FillPattern","fill","Object","hasOwnProperty","call","Error","width","Array","isArray","fillGradientStops","fontSize","defaultTextStyle","parseInt","gradientFill","start","x","y","end","fills","map","shared","setValue","toNumber","forEach","number","index","addColorStop","length","EventEmitter","GraphicsContext","convertFillInputToFillStyle","generateTextStyleKey","constructor","fullStyle","_TextStyle","key","update","_align","value","_breakWords","_dropShadow","_createProxy","_fontFamily","_fontSize","_fontStyle","toLowerCase","_fontVariant","_fontWeight","_leading","_letterSpacing","_lineHeight","_padding","_trim","_textBaseline","_whiteSpace","_wordWrap","_wordWrapWidth","_originalFill","_isFillStyle","defaultFillStyle","_fill","toFillStyle","_originalStroke","defaultStrokeStyle","_stroke","toStrokeStyle","_generateKey","_styleKey","emit","reset","defaultStyle","clone","align","breakWords","fontFamily","fontStyle","fontVariant","fontWeight","leading","letterSpacing","lineHeight","padding","textBaseline","whiteSpace","wordWrap","wordWrapWidth","destroy","options","removeAllListeners","destroyTexture","texture","destroyTextureSource","textureSource","cb","Proxy","set","target","property","newValue","Math","PI","trim"]
}
