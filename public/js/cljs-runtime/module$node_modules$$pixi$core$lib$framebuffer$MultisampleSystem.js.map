{
"version":3,
"file":"module$node_modules$$pixi$core$lib$framebuffer$MultisampleSystem.js",
"lineCount":27,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,GAAqF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAEzHC,YAAYH,OAAA,CAAQ,+CAAR,CAF6G;AAEjFI,QAAAA,GAAaJ,OAAA,CAAQ,gDAAR,CAAbI;AAC5C,OAAMC,kBAAN;AACEC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKA,CAAAA,QAAL,GAAgBA,QAAhB;AADoB;AAGtBC,iBAAa,CAACC,EAAD,CAAK;AAChB,UAAIC,OAAJ;AACA,UAA2C,CAA3C,KAAI,IAAKH,CAAAA,QAASI,CAAAA,OAAQC,CAAAA,YAA1B,CAA8C;AAC5C,YAAMC,cAAcJ,EAAGK,CAAAA,YAAH,CAAgBL,EAAGM,CAAAA,mBAAnB,CAApB;AACAN,UAAGO,CAAAA,eAAH,CAAmBP,EAAGQ,CAAAA,WAAtB,EAAmC,IAAnC,CAAA;AAA0CP,eAAA,GAAUD,EAAGK,CAAAA,YAAH,CAAgBL,EAAGS,CAAAA,OAAnB,CAAV;AAAuCT,UAAGO,CAAAA,eAAH,CAAmBP,EAAGQ,CAAAA,WAAtB,EAAmCJ,WAAnC,CAAA;AAFrC,OAA9C;AAIQA,mBACgF,GADlEJ,EAAGK,CAAAA,YAAH,CAAgBL,EAAGU,CAAAA,wBAAnB,CACkE,EAAtFV,EAAGO,CAAAA,eAAH,CAAmBP,EAAGW,CAAAA,gBAAtB,EAAwC,IAAxC,CAAsF,EAAvCV,OAAuC,GAA7BD,EAAGK,CAAAA,YAAH,CAAgBL,EAAGS,CAAAA,OAAnB,CAA6B,EAAAT,EAAGO,CAAAA,eAAH,CAAmBP,EAAGW,CAAAA,gBAAtB,EAAwCP,WAAxC,CAAA;AALxF;AAOAH,aAAA,IAAWP,SAAUkB,CAAAA,YAAaC,CAAAA,IAAlC,GAAyC,IAAKC,CAAAA,WAA9C,GAA4DpB,SAAUkB,CAAAA,YAAaC,CAAAA,IAAnF,GAA0FZ,OAAA,IAAWP,SAAUkB,CAAAA,YAAaG,CAAAA,MAAlC,GAA2C,IAAKD,CAAAA,WAAhD,GAA8DpB,SAAUkB,CAAAA,YAAaG,CAAAA,MAArF,GAA8Fd,OAAA,IAAWP,SAAUkB,CAAAA,YAAaI,CAAAA,GAAlC,GAAwC,IAAKF,CAAAA,WAA7C,GAA2DpB,SAAUkB,CAAAA,YAAaI,CAAAA,GAAlF,GAAwF,IAAKF,CAAAA,WAA7F,GAA2GpB,SAAUkB,CAAAA,YAAaK,CAAAA,IAA1T;AATgB;AAWlBC,WAAO,EAAG;;AAfZ;AAkBAtB,mBAAkBuB,CAAAA,SAAlB,GAA8B,CAC5BC,KAAMzB,MAAW0B,CAAAA,aAAcC,CAAAA,cADH,EAE5BC,KAAM,cAFsB,CAA9B;AAIA5B,QAAWA,CAAAA,UAAW6B,CAAAA,GAAtB,CAA0B5B,iBAA1B,CAAA;AACAH,SAAQG,CAAAA,iBAAR,GAA4BA,iBAA5B;AA1B6H,CAA7H;;",
"sources":["node_modules/@pixi/core/lib/framebuffer/MultisampleSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$framebuffer$MultisampleSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), extensions = require(\"@pixi/extensions\");\nclass MultisampleSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  contextChange(gl) {\n    let samples;\n    if (this.renderer.context.webGLVersion === 1) {\n      const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null), samples = gl.getParameter(gl.SAMPLES), gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    } else {\n      const framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);\n      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null), samples = gl.getParameter(gl.SAMPLES), gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);\n    }\n    samples >= constants.MSAA_QUALITY.HIGH ? this.multisample = constants.MSAA_QUALITY.HIGH : samples >= constants.MSAA_QUALITY.MEDIUM ? this.multisample = constants.MSAA_QUALITY.MEDIUM : samples >= constants.MSAA_QUALITY.LOW ? this.multisample = constants.MSAA_QUALITY.LOW : this.multisample = constants.MSAA_QUALITY.NONE;\n  }\n  destroy() {\n  }\n}\nMultisampleSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"_multisample\"\n};\nextensions.extensions.add(MultisampleSystem);\nexports.MultisampleSystem = MultisampleSystem;\n//# sourceMappingURL=MultisampleSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","extensions","MultisampleSystem","constructor","renderer","contextChange","gl","samples","context","webGLVersion","framebuffer","getParameter","FRAMEBUFFER_BINDING","bindFramebuffer","FRAMEBUFFER","SAMPLES","DRAW_FRAMEBUFFER_BINDING","DRAW_FRAMEBUFFER","MSAA_QUALITY","HIGH","multisample","MEDIUM","LOW","NONE","destroy","extension","type","ExtensionType","RendererSystem","name","add"]
}
