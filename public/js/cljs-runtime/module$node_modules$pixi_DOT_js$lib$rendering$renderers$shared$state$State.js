shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$State = function(global, require, module, exports) {
  const blendModeIds = {normal:0, add:1, multiply:2, screen:3, overlay:4, erase:5, "normal-npm":6, "add-npm":7, "screen-npm":8, min:9, max:10}, node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$State$classdecl$var14 = class {
    constructor() {
      this.data = 0;
      this.blendMode = "normal";
      this.polygonOffset = 0;
      this.depthMask = this.blend = !0;
    }
    get blend() {
      return !!(this.data & 1);
    }
    set blend(value) {
      !!(this.data & 1) !== value && (this.data ^= 1);
    }
    get offsets() {
      return !!(this.data & 2);
    }
    set offsets(value) {
      !!(this.data & 2) !== value && (this.data ^= 2);
    }
    set cullMode(value) {
      "none" === value ? this.culling = !1 : (this.culling = !0, this.clockwiseFrontFace = "front" === value);
    }
    get cullMode() {
      return this.culling ? this.clockwiseFrontFace ? "front" : "back" : "none";
    }
    get culling() {
      return !!(this.data & 4);
    }
    set culling(value) {
      !!(this.data & 4) !== value && (this.data ^= 4);
    }
    get depthTest() {
      return !!(this.data & 8);
    }
    set depthTest(value) {
      !!(this.data & 8) !== value && (this.data ^= 8);
    }
    get depthMask() {
      return !!(this.data & 32);
    }
    set depthMask(value) {
      !!(this.data & 32) !== value && (this.data ^= 32);
    }
    get clockwiseFrontFace() {
      return !!(this.data & 16);
    }
    set clockwiseFrontFace(value) {
      !!(this.data & 16) !== value && (this.data ^= 16);
    }
    get blendMode() {
      return this._blendMode;
    }
    set blendMode(value) {
      this.blend = "none" !== value;
      this._blendMode = value;
      this._blendModeId = blendModeIds[value] || 0;
    }
    get polygonOffset() {
      return this._polygonOffset;
    }
    set polygonOffset(value) {
      this.offsets = !!value;
      this._polygonOffset = value;
    }
    toString() {
      return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;
    }
    static for2d() {
      const state = new node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$State$classdecl$var14();
      state.depthTest = !1;
      state.blend = !0;
      return state;
    }
  };
  global = node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$State$classdecl$var14;
  global.default2d = global.for2d();
  exports.State = global;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$State.js.map
