{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$prepare$PrepareUpload.js",
"lineCount":32,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,GAA8E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGtH,MAAIC,gBAAgBH,OAAA,CAAQ,8FAAR,CAApB,EACII,kBAAkBJ,OAAA,CAAQ,2EAAR,CADtB,EAEIK,OAAOL,OAAA,CAAQ,qDAAR,CAFX,EAGIM,aAAaN,OAAA,CAAQ,kEAAR,CAHjB,EAIIO,WAAWP,OAAA,CAAQ,8DAAR,CAJf;AAKIQ,QAAAA,GAAeR,OAAA,CAAQ,0DAAR,CAAfQ;AAEJ,cAAA;AACA,OAAMC,cAAN,QAA4BD,OAAaA,CAAAA,YAAzC;AAKEE,mBAAe,CAACC,IAAD,CAAO;AAChBA,UAAJ,YAAoBR,aAAcA,CAAAA,aAAlC,GACE,IAAKS,CAAAA,mBAAL,CAAyBD,IAAzB,CADF,GAEWA,IAAJ,YAAoBN,IAAKA,CAAAA,IAAzB,GACL,IAAKQ,CAAAA,UAAL,CAAgBF,IAAhB,CADK,GAEIA,IAAJ,YAAoBJ,QAASA,CAAAA,QAA7B,GACL,IAAKO,CAAAA,cAAL,CAAoBH,IAApB,CADK,GAEIA,IAAJ,YAAoBL,UAAWA,CAAAA,UAA/B,GACL,IAAKS,CAAAA,gBAAL,CAAsBJ,IAAtB,CADK,GAEIA,IAFJ,YAEoBP,eAAgBA,CAAAA,eAFpC,IAGL,IAAKY,CAAAA,qBAAL,CAA2BL,IAA3B,CATF;AADoB;AAatBC,uBAAmB,CAACK,aAAD,CAAgB;AACjC,UAAKC,CAAAA,QAASC,CAAAA,OAAQC,CAAAA,UAAtB,CAAiCH,aAAjC,CAAA;AADiC;AAGnCJ,cAAU,CAACQ,KAAD,CAAQ;AAChB,UAAKH,CAAAA,QAASI,CAAAA,WAAYC,CAAAA,IAAKC,CAAAA,WAA/B,CAA2CH,KAA3C,CAAA;AADgB;AAGlBN,oBAAgB,CAACM,KAAD,CAAQ;AACtB,UAAKH,CAAAA,QAASI,CAAAA,WAAYG,CAAAA,UAAWD,CAAAA,WAArC,CAAiDH,KAAjD,CAAA;AADsB;AAGxBP,kBAAc,CAACO,KAAD,CAAQ;AACpB,UAAKH,CAAAA,QAASI,CAAAA,WAAYI,CAAAA,QAASF,CAAAA,WAAnC,CAA+CH,KAA/C,CAAA;AADoB;AAOtBL,yBAAqB,CAACW,eAAD,CAAkB;AACrC,UAAKT,CAAAA,QAASS,CAAAA,eAAgBC,CAAAA,aAA9B,CAA4CD,eAA5C,CAAA;AACA,OAAM,CAAE,aAAAE,eAAF,CAAN,GAAyBF,eAAzB;AACA,WAAK,MAAMG,WAAX,IAA0BD,eAA1B;AAC6B,iBAA3B,KAAIC,WAAYC,CAAAA,MAAhB,IACQ,CAAE,MAAAC,eAAF,CACN,GADkBF,WAAYG,CAAAA,IAC9B,EAAA,IAAKrB,CAAAA,mBAAL,CAAyBoB,eAAME,CAAAA,MAA/B,CAFF,IAGkC,MAHlC,KAGWJ,WAAYC,CAAAA,MAHvB,KAIQ,CAAE,QAAAZ,eAAF,CACN,GADoBW,WAAYG,CAAAA,IAAKE,CAAAA,KACrC,EAAA,IAAKvB,CAAAA,mBAAL,CAAyBO,eAAQe,CAAAA,MAAjC,CALF,CAAA;AADF;AASA,aAAO,IAAP;AAZqC;AAlCzC;AAkDAhC,SAAQO,CAAAA,aAAR,GAAwBA,aAAxB;AA7DsH,CAAtH;;",
"sources":["node_modules/pixi_DOT_js/lib/prepare/PrepareUpload.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$prepare$PrepareUpload\"] = function(global,require,module,exports) {\n'use strict';\n\nvar TextureSource = require('../rendering/renderers/shared/texture/sources/TextureSource.js');\nvar GraphicsContext = require('../scene/graphics/shared/GraphicsContext.js');\nvar Text = require('../scene/text/Text.js');\nvar BitmapText = require('../scene/text-bitmap/BitmapText.js');\nvar HTMLText = require('../scene/text-html/HTMLText.js');\nvar PrepareQueue = require('./PrepareQueue.js');\n\n\"use strict\";\nclass PrepareUpload extends PrepareQueue.PrepareQueue {\n  /**\n   * Upload the given queue item\n   * @param item\n   */\n  uploadQueueItem(item) {\n    if (item instanceof TextureSource.TextureSource) {\n      this.uploadTextureSource(item);\n    } else if (item instanceof Text.Text) {\n      this.uploadText(item);\n    } else if (item instanceof HTMLText.HTMLText) {\n      this.uploadHTMLText(item);\n    } else if (item instanceof BitmapText.BitmapText) {\n      this.uploadBitmapText(item);\n    } else if (item instanceof GraphicsContext.GraphicsContext) {\n      this.uploadGraphicsContext(item);\n    }\n  }\n  uploadTextureSource(textureSource) {\n    this.renderer.texture.initSource(textureSource);\n  }\n  uploadText(_text) {\n    this.renderer.renderPipes.text.initGpuText(_text);\n  }\n  uploadBitmapText(_text) {\n    this.renderer.renderPipes.bitmapText.initGpuText(_text);\n  }\n  uploadHTMLText(_text) {\n    this.renderer.renderPipes.htmlText.initGpuText(_text);\n  }\n  /**\n   * Resolve the given graphics context and return an item for the queue\n   * @param graphicsContext\n   */\n  uploadGraphicsContext(graphicsContext) {\n    this.renderer.graphicsContext.getGpuContext(graphicsContext);\n    const { instructions } = graphicsContext;\n    for (const instruction of instructions) {\n      if (instruction.action === \"texture\") {\n        const { image } = instruction.data;\n        this.uploadTextureSource(image.source);\n      } else if (instruction.action === \"fill\") {\n        const { texture } = instruction.data.style;\n        this.uploadTextureSource(texture.source);\n      }\n    }\n    return null;\n  }\n}\n\nexports.PrepareUpload = PrepareUpload;\n//# sourceMappingURL=PrepareUpload.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","TextureSource","GraphicsContext","Text","BitmapText","HTMLText","PrepareQueue","PrepareUpload","uploadQueueItem","item","uploadTextureSource","uploadText","uploadHTMLText","uploadBitmapText","uploadGraphicsContext","textureSource","renderer","texture","initSource","_text","renderPipes","text","initGpuText","bitmapText","htmlText","graphicsContext","getGpuContext","instructions","instruction","action","image","data","source","style"]
}
