{
"version":3,
"file":"module$node_modules$$pixi$graphics$lib$Graphics.js",
"lineCount":295,
"mappings":"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",
"sources":["node_modules/@pixi/graphics/lib/Graphics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$graphics$lib$Graphics\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), display = require(\"@pixi/display\"), _const = require(\"./const.js\"), GraphicsGeometry = require(\"./GraphicsGeometry.js\"), FillStyle = require(\"./styles/FillStyle.js\"), LineStyle = require(\"./styles/LineStyle.js\");\nrequire(\"./utils/index.js\");\nvar QuadraticUtils = require(\"./utils/QuadraticUtils.js\"), BezierUtils = require(\"./utils/BezierUtils.js\"), ArcUtils = require(\"./utils/ArcUtils.js\");\nconst DEFAULT_SHADERS = {}, _Graphics = class _Graphics2 extends display.Container {\n  /**\n   * @param geometry - Geometry to use, if omitted will create a new GraphicsGeometry instance.\n   */\n  constructor(geometry = null) {\n    super(), this.shader = null, this.pluginName = \"batch\", this.currentPath = null, this.batches = [], this.batchTint = -1, this.batchDirty = -1, this.vertexData = null, this._fillStyle = new FillStyle.FillStyle(), this._lineStyle = new LineStyle.LineStyle(), this._matrix = null, this._holeMode = !1, this.state = core.State.for2d(), this._geometry = geometry || new GraphicsGeometry.GraphicsGeometry(), this._geometry.refCount++, this._transformID = -1, this._tintColor = new core.Color(16777215), this.blendMode = core.BLEND_MODES.NORMAL;\n  }\n  /**\n   * Includes vertex positions, face indices, normals, colors, UVs, and\n   * custom attributes within buffers, reducing the cost of passing all\n   * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n   * @readonly\n   */\n  get geometry() {\n    return this._geometry;\n  }\n  /**\n   * Creates a new Graphics object with the same values as this one.\n   * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n   * @returns - A clone of the graphics object\n   */\n  clone() {\n    return this.finishPoly(), new _Graphics2(this._geometry);\n  }\n  /**\n   * The blend mode to be applied to the graphic shape. Apply a value of\n   * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.  Note that, since each\n   * primitive in the GraphicsGeometry list is rendered sequentially, modes\n   * such as `PIXI.BLEND_MODES.ADD` and `PIXI.BLEND_MODES.MULTIPLY` will\n   * be applied per-primitive.\n   * @default PIXI.BLEND_MODES.NORMAL\n   */\n  set blendMode(value) {\n    this.state.blendMode = value;\n  }\n  get blendMode() {\n    return this.state.blendMode;\n  }\n  /**\n   * The tint applied to each graphic shape. This is a hex value. A value of\n   * 0xFFFFFF will remove any tint effect.\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    return this._tintColor.value;\n  }\n  set tint(value) {\n    this._tintColor.setValue(value);\n  }\n  /**\n   * The current fill style.\n   * @readonly\n   */\n  get fill() {\n    return this._fillStyle;\n  }\n  /**\n   * The current line style.\n   * @readonly\n   */\n  get line() {\n    return this._lineStyle;\n  }\n  lineStyle(options = null, color = 0, alpha, alignment = 0.5, native = !1) {\n    return typeof options == \"number\" && (options = { width: options, color, alpha, alignment, native }), this.lineTextureStyle(options);\n  }\n  /**\n   * Like line style but support texture for line fill.\n   * @param [options] - Collection of options for setting line style.\n   * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n   * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n   * @param {PIXI.ColorSource} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n   *  Default 0xFFFFFF if texture present.\n   * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n   * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n   * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n   *        WebGL only.\n   * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n   * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n   * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n   * @param {number}[options.miterLimit=10] - miter limit ratio\n   * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n  lineTextureStyle(options) {\n    const defaultLineStyleOptions = {\n      width: 0,\n      texture: core.Texture.WHITE,\n      color: options?.texture ? 16777215 : 0,\n      matrix: null,\n      alignment: 0.5,\n      native: !1,\n      cap: _const.LINE_CAP.BUTT,\n      join: _const.LINE_JOIN.MITER,\n      miterLimit: 10\n    };\n    options = Object.assign(defaultLineStyleOptions, options), this.normalizeColor(options), this.currentPath && this.startPoly();\n    const visible = options.width > 0 && options.alpha > 0;\n    return visible ? (options.matrix && (options.matrix = options.matrix.clone(), options.matrix.invert()), Object.assign(this._lineStyle, { visible }, options)) : this._lineStyle.reset(), this;\n  }\n  /**\n   * Start a polygon object internally.\n   * @protected\n   */\n  startPoly() {\n    if (this.currentPath) {\n      const points = this.currentPath.points, len = this.currentPath.points.length;\n      len > 2 && (this.drawShape(this.currentPath), this.currentPath = new core.Polygon(), this.currentPath.closeStroke = !1, this.currentPath.points.push(points[len - 2], points[len - 1]));\n    } else\n      this.currentPath = new core.Polygon(), this.currentPath.closeStroke = !1;\n  }\n  /**\n   * Finish the polygon object.\n   * @protected\n   */\n  finishPoly() {\n    this.currentPath && (this.currentPath.points.length > 2 ? (this.drawShape(this.currentPath), this.currentPath = null) : this.currentPath.points.length = 0);\n  }\n  /**\n   * Moves the current drawing position to x, y.\n   * @param x - the X coordinate to move to\n   * @param y - the Y coordinate to move to\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  moveTo(x, y) {\n    return this.startPoly(), this.currentPath.points[0] = x, this.currentPath.points[1] = y, this;\n  }\n  /**\n   * Draws a line using the current line style from the current drawing position to (x, y);\n   * The current drawing position is then set to (x, y).\n   * @param x - the X coordinate to draw to\n   * @param y - the Y coordinate to draw to\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  lineTo(x, y) {\n    this.currentPath || this.moveTo(0, 0);\n    const points = this.currentPath.points, fromX = points[points.length - 2], fromY = points[points.length - 1];\n    return (fromX !== x || fromY !== y) && points.push(x, y), this;\n  }\n  /**\n   * Initialize the curve\n   * @param x\n   * @param y\n   */\n  _initCurve(x = 0, y = 0) {\n    this.currentPath ? this.currentPath.points.length === 0 && (this.currentPath.points = [x, y]) : this.moveTo(x, y);\n  }\n  /**\n   * Calculate the points for a quadratic bezier curve and then draws it.\n   * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n   * @param cpX - Control point x\n   * @param cpY - Control point y\n   * @param toX - Destination point x\n   * @param toY - Destination point y\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  quadraticCurveTo(cpX, cpY, toX, toY) {\n    this._initCurve();\n    const points = this.currentPath.points;\n    return points.length === 0 && this.moveTo(0, 0), QuadraticUtils.QuadraticUtils.curveTo(cpX, cpY, toX, toY, points), this;\n  }\n  /**\n   * Calculate the points for a bezier curve and then draws it.\n   * @param cpX - Control point x\n   * @param cpY - Control point y\n   * @param cpX2 - Second Control point x\n   * @param cpY2 - Second Control point y\n   * @param toX - Destination point x\n   * @param toY - Destination point y\n   * @returns This Graphics object. Good for chaining method calls\n   */\n  bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {\n    return this._initCurve(), BezierUtils.BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points), this;\n  }\n  /**\n   * The `arcTo` method creates an arc/curve between two tangents on the canvas.\n   * The first tangent is from the start point to the first control point,\n   * and the second tangent is from the first control point to the second control point.\n   * Note that the second control point is not necessarily the end point of the arc.\n   *\n   * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n   * @param x1 - The x-coordinate of the first control point of the arc\n   * @param y1 - The y-coordinate of the first control point of the arc\n   * @param x2 - The x-coordinate of the second control point of the arc\n   * @param y2 - The y-coordinate of the second control point of the arc\n   * @param radius - The radius of the arc\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    this._initCurve(x1, y1);\n    const points = this.currentPath.points, result = ArcUtils.ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n    if (result) {\n      const { cx, cy, radius: radius2, startAngle, endAngle, anticlockwise } = result;\n      this.arc(cx, cy, radius2, startAngle, endAngle, anticlockwise);\n    }\n    return this;\n  }\n  /**\n   * The arc method creates an arc/curve (used to create circles, or parts of circles).\n   * @param cx - The x-coordinate of the center of the circle\n   * @param cy - The y-coordinate of the center of the circle\n   * @param radius - The radius of the circle\n   * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n   *  of the arc's circle)\n   * @param endAngle - The ending angle, in radians\n   * @param anticlockwise - Specifies whether the drawing should be\n   *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n   *  indicates counter-clockwise.\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  arc(cx, cy, radius, startAngle, endAngle, anticlockwise = !1) {\n    if (startAngle === endAngle)\n      return this;\n    if (!anticlockwise && endAngle <= startAngle ? endAngle += core.PI_2 : anticlockwise && startAngle <= endAngle && (startAngle += core.PI_2), endAngle - startAngle === 0)\n      return this;\n    const startX = cx + Math.cos(startAngle) * radius, startY = cy + Math.sin(startAngle) * radius, eps = this._geometry.closePointEps;\n    let points = this.currentPath ? this.currentPath.points : null;\n    if (points) {\n      const xDiff = Math.abs(points[points.length - 2] - startX), yDiff = Math.abs(points[points.length - 1] - startY);\n      xDiff < eps && yDiff < eps || points.push(startX, startY);\n    } else\n      this.moveTo(startX, startY), points = this.currentPath.points;\n    return ArcUtils.ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points), this;\n  }\n  /**\n   * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n   * (such as lineTo() or drawCircle()) use when drawing.\n   * @param {PIXI.ColorSource} color - the color of the fill\n   * @param alpha - the alpha of the fill, will override the color's alpha\n   * @returns - This Graphics object. Suitable for chaining method calls\n   */\n  beginFill(color = 0, alpha) {\n    return this.beginTextureFill({ texture: core.Texture.WHITE, color, alpha });\n  }\n  /**\n   * Normalize the color input from options for line style or fill\n   * @param {PIXI.IFillStyleOptions} options - Fill style object.\n   */\n  normalizeColor(options) {\n    const temp = core.Color.shared.setValue(options.color ?? 0);\n    options.color = temp.toNumber(), options.alpha ?? (options.alpha = temp.alpha);\n  }\n  /**\n   * Begin the texture fill.\n   * Note: The wrap mode of the texture is forced to REPEAT on render.\n   * @param options - Fill style object.\n   * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n   * @param {PIXI.ColorSource} [options.color=0xffffff] - Background to fill behind texture\n   * @param {number} [options.alpha] - Alpha of fill, overrides the color's alpha\n   * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n   * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n  beginTextureFill(options) {\n    const defaultOptions = {\n      texture: core.Texture.WHITE,\n      color: 16777215,\n      matrix: null\n    };\n    options = Object.assign(defaultOptions, options), this.normalizeColor(options), this.currentPath && this.startPoly();\n    const visible = options.alpha > 0;\n    return visible ? (options.matrix && (options.matrix = options.matrix.clone(), options.matrix.invert()), Object.assign(this._fillStyle, { visible }, options)) : this._fillStyle.reset(), this;\n  }\n  /**\n   * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  endFill() {\n    return this.finishPoly(), this._fillStyle.reset(), this;\n  }\n  /**\n   * Draws a rectangle shape.\n   * @param x - The X coord of the top-left of the rectangle\n   * @param y - The Y coord of the top-left of the rectangle\n   * @param width - The width of the rectangle\n   * @param height - The height of the rectangle\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  drawRect(x, y, width, height) {\n    return this.drawShape(new core.Rectangle(x, y, width, height));\n  }\n  /**\n   * Draw a rectangle shape with rounded/beveled corners.\n   * @param x - The X coord of the top-left of the rectangle\n   * @param y - The Y coord of the top-left of the rectangle\n   * @param width - The width of the rectangle\n   * @param height - The height of the rectangle\n   * @param radius - Radius of the rectangle corners\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  drawRoundedRect(x, y, width, height, radius) {\n    return this.drawShape(new core.RoundedRectangle(x, y, width, height, radius));\n  }\n  /**\n   * Draws a circle.\n   * @param x - The X coordinate of the center of the circle\n   * @param y - The Y coordinate of the center of the circle\n   * @param radius - The radius of the circle\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  drawCircle(x, y, radius) {\n    return this.drawShape(new core.Circle(x, y, radius));\n  }\n  /**\n   * Draws an ellipse.\n   * @param x - The X coordinate of the center of the ellipse\n   * @param y - The Y coordinate of the center of the ellipse\n   * @param width - The half width of the ellipse\n   * @param height - The half height of the ellipse\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  drawEllipse(x, y, width, height) {\n    return this.drawShape(new core.Ellipse(x, y, width, height));\n  }\n  /**\n   * Draws a polygon using the given path.\n   * @param {number[]|PIXI.IPointData[]|PIXI.Polygon} path - The path data used to construct the polygon.\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  drawPolygon(...path) {\n    let points, closeStroke = !0;\n    const poly = path[0];\n    poly.points ? (closeStroke = poly.closeStroke, points = poly.points) : Array.isArray(path[0]) ? points = path[0] : points = path;\n    const shape = new core.Polygon(points);\n    return shape.closeStroke = closeStroke, this.drawShape(shape), this;\n  }\n  /**\n   * Draw any shape.\n   * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  drawShape(shape) {\n    return this._holeMode ? this._geometry.drawHole(shape, this._matrix) : this._geometry.drawShape(\n      shape,\n      this._fillStyle.clone(),\n      this._lineStyle.clone(),\n      this._matrix\n    ), this;\n  }\n  /**\n   * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n   * @returns - This Graphics object. Good for chaining method calls\n   */\n  clear() {\n    return this._geometry.clear(), this._lineStyle.reset(), this._fillStyle.reset(), this._boundsID++, this._matrix = null, this._holeMode = !1, this.currentPath = null, this;\n  }\n  /**\n   * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n   * masked with gl.scissor.\n   * @returns - True if only 1 rect.\n   */\n  isFastRect() {\n    const data = this._geometry.graphicsData;\n    return data.length === 1 && data[0].shape.type === core.SHAPES.RECT && !data[0].matrix && !data[0].holes.length && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n  }\n  /**\n   * Renders the object using the WebGL renderer\n   * @param renderer - The renderer\n   */\n  _render(renderer) {\n    this.finishPoly();\n    const geometry = this._geometry;\n    geometry.updateBatches(), geometry.batchable ? (this.batchDirty !== geometry.batchDirty && this._populateBatches(), this._renderBatched(renderer)) : (renderer.batch.flush(), this._renderDirect(renderer));\n  }\n  /** Populating batches for rendering. */\n  _populateBatches() {\n    const geometry = this._geometry, blendMode = this.blendMode, len = geometry.batches.length;\n    this.batchTint = -1, this._transformID = -1, this.batchDirty = geometry.batchDirty, this.batches.length = len, this.vertexData = new Float32Array(geometry.points);\n    for (let i = 0; i < len; i++) {\n      const gI = geometry.batches[i], color = gI.style.color, vertexData = new Float32Array(\n        this.vertexData.buffer,\n        gI.attribStart * 4 * 2,\n        gI.attribSize * 2\n      ), uvs = new Float32Array(\n        geometry.uvsFloat32.buffer,\n        gI.attribStart * 4 * 2,\n        gI.attribSize * 2\n      ), indices = new Uint16Array(\n        geometry.indicesUint16.buffer,\n        gI.start * 2,\n        gI.size\n      ), batch = {\n        vertexData,\n        blendMode,\n        indices,\n        uvs,\n        _batchRGB: core.Color.shared.setValue(color).toRgbArray(),\n        _tintRGB: color,\n        _texture: gI.style.texture,\n        alpha: gI.style.alpha,\n        worldAlpha: 1\n      };\n      this.batches[i] = batch;\n    }\n  }\n  /**\n   * Renders the batches using the BathedRenderer plugin\n   * @param renderer - The renderer\n   */\n  _renderBatched(renderer) {\n    if (this.batches.length) {\n      renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]), this.calculateVertices(), this.calculateTints();\n      for (let i = 0, l = this.batches.length; i < l; i++) {\n        const batch = this.batches[i];\n        batch.worldAlpha = this.worldAlpha * batch.alpha, renderer.plugins[this.pluginName].render(batch);\n      }\n    }\n  }\n  /**\n   * Renders the graphics direct\n   * @param renderer - The renderer\n   */\n  _renderDirect(renderer) {\n    const shader = this._resolveDirectShader(renderer), geometry = this._geometry, worldAlpha = this.worldAlpha, uniforms = shader.uniforms, drawCalls = geometry.drawCalls;\n    uniforms.translationMatrix = this.transform.worldTransform, core.Color.shared.setValue(this._tintColor).premultiply(worldAlpha).toArray(uniforms.tint), renderer.shader.bind(shader), renderer.geometry.bind(geometry, shader), renderer.state.set(this.state);\n    for (let i = 0, l = drawCalls.length; i < l; i++)\n      this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n  }\n  /**\n   * Renders specific DrawCall\n   * @param renderer\n   * @param drawCall\n   */\n  _renderDrawCallDirect(renderer, drawCall) {\n    const { texArray, type, size, start } = drawCall, groupTextureCount = texArray.count;\n    for (let j = 0; j < groupTextureCount; j++)\n      renderer.texture.bind(texArray.elements[j], j);\n    renderer.geometry.draw(type, size, start);\n  }\n  /**\n   * Resolves shader for direct rendering\n   * @param renderer - The renderer\n   */\n  _resolveDirectShader(renderer) {\n    let shader = this.shader;\n    const pluginName = this.pluginName;\n    if (!shader) {\n      if (!DEFAULT_SHADERS[pluginName]) {\n        const { maxTextures } = renderer.plugins[pluginName], sampleValues = new Int32Array(maxTextures);\n        for (let i = 0; i < maxTextures; i++)\n          sampleValues[i] = i;\n        const uniforms = {\n          tint: new Float32Array([1, 1, 1, 1]),\n          translationMatrix: new core.Matrix(),\n          default: core.UniformGroup.from({ uSamplers: sampleValues }, !0)\n        }, program = renderer.plugins[pluginName]._shader.program;\n        DEFAULT_SHADERS[pluginName] = new core.Shader(program, uniforms);\n      }\n      shader = DEFAULT_SHADERS[pluginName];\n    }\n    return shader;\n  }\n  /**\n   * Retrieves the bounds of the graphic shape as a rectangle object.\n   * @see PIXI.GraphicsGeometry#bounds\n   */\n  _calculateBounds() {\n    this.finishPoly();\n    const geometry = this._geometry;\n    if (!geometry.graphicsData.length)\n      return;\n    const { minX, minY, maxX, maxY } = geometry.bounds;\n    this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n  }\n  /**\n   * Tests if a point is inside this graphics object\n   * @param point - the point to test\n   * @returns - the result of the test\n   */\n  containsPoint(point) {\n    return this.worldTransform.applyInverse(point, _Graphics2._TEMP_POINT), this._geometry.containsPoint(_Graphics2._TEMP_POINT);\n  }\n  /** Recalculate the tint by applying tint to batches using Graphics tint. */\n  calculateTints() {\n    if (this.batchTint !== this.tint) {\n      this.batchTint = this._tintColor.toNumber();\n      for (let i = 0; i < this.batches.length; i++) {\n        const batch = this.batches[i];\n        batch._tintRGB = core.Color.shared.setValue(this._tintColor).multiply(batch._batchRGB).toLittleEndianNumber();\n      }\n    }\n  }\n  /** If there's a transform update or a change to the shape of the geometry, recalculate the vertices. */\n  calculateVertices() {\n    const wtID = this.transform._worldID;\n    if (this._transformID === wtID)\n      return;\n    this._transformID = wtID;\n    const wt = this.transform.worldTransform, a = wt.a, b = wt.b, c = wt.c, d = wt.d, tx = wt.tx, ty = wt.ty, data = this._geometry.points, vertexData = this.vertexData;\n    let count = 0;\n    for (let i = 0; i < data.length; i += 2) {\n      const x = data[i], y = data[i + 1];\n      vertexData[count++] = a * x + c * y + tx, vertexData[count++] = d * y + b * x + ty;\n    }\n  }\n  /**\n   * Closes the current path.\n   * @returns - Returns itself.\n   */\n  closePath() {\n    const currentPath = this.currentPath;\n    return currentPath && (currentPath.closeStroke = !0, this.finishPoly()), this;\n  }\n  /**\n   * Apply a matrix to the positional data.\n   * @param matrix - Matrix to use for transform current shape.\n   * @returns - Returns itself.\n   */\n  setMatrix(matrix) {\n    return this._matrix = matrix, this;\n  }\n  /**\n   * Begin adding holes to the last draw shape\n   * IMPORTANT: holes must be fully inside a shape to work\n   * Also weirdness ensues if holes overlap!\n   * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n   * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n   * @returns - Returns itself.\n   */\n  beginHole() {\n    return this.finishPoly(), this._holeMode = !0, this;\n  }\n  /**\n   * End adding holes to the last draw shape.\n   * @returns - Returns itself.\n   */\n  endHole() {\n    return this.finishPoly(), this._holeMode = !1, this;\n  }\n  /**\n   * Destroys the Graphics object.\n   * @param options - Options parameter. A boolean will act as if all\n   *  options have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have\n   *  their destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n  destroy(options) {\n    this._geometry.refCount--, this._geometry.refCount === 0 && this._geometry.dispose(), this._matrix = null, this.currentPath = null, this._lineStyle.destroy(), this._lineStyle = null, this._fillStyle.destroy(), this._fillStyle = null, this._geometry = null, this.shader = null, this.vertexData = null, this.batches.length = 0, this.batches = null, super.destroy(options);\n  }\n};\n_Graphics.curves = _const.curves, /**\n* Temporary point to use for containsPoint.\n* @private\n*/\n_Graphics._TEMP_POINT = new core.Point();\nlet Graphics = _Graphics;\nexports.Graphics = Graphics;\n//# sourceMappingURL=Graphics.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","display","_const","GraphicsGeometry","FillStyle","LineStyle","QuadraticUtils","BezierUtils","ArcUtils","DEFAULT_SHADERS","_Graphics","Container","constructor","geometry","shader","pluginName","currentPath","batches","batchDirty","batchTint","vertexData","_fillStyle","_lineStyle","_matrix","_holeMode","state","State","for2d","_geometry","refCount","_transformID","_tintColor","Color","blendMode","BLEND_MODES","NORMAL","clone","finishPoly","_Graphics2","value","setValue","lineStyle","options","color","alpha","alignment","native","width","lineTextureStyle","Object","assign","defaultLineStyleOptions","texture","Texture","WHITE","matrix","cap","LINE_CAP","BUTT","join","LINE_JOIN","MITER","miterLimit","normalizeColor","startPoly","visible","invert","reset","points","len","length","drawShape","Polygon","closeStroke","push","moveTo","x","y","lineTo","fromY","fromX","_initCurve","quadraticCurveTo","cpX","cpY","toX","toY","curveTo","bezierCurveTo","cpX2","cpY2","arcTo","x1","y1","x2","y2","radius","result","cx","cy","radius2","startAngle","endAngle","anticlockwise","arc","PI_2","startX","Math","cos","startY","sin","eps","closePointEps","yDiff","abs","xDiff","beginFill","beginTextureFill","temp","shared","toNumber","defaultOptions","endFill","drawRect","height","Rectangle","drawRoundedRect","RoundedRectangle","drawCircle","Circle","drawEllipse","Ellipse","drawPolygon","path","poly","Array","isArray","shape","drawHole","clear","_boundsID","isFastRect","data","graphicsData","type","SHAPES","RECT","holes","_render","renderer","updateBatches","batchable","_populateBatches","_renderBatched","batch","flush","_renderDirect","Float32Array","i","gI","style","buffer","attribStart","attribSize","uvs","uvsFloat32","indices","Uint16Array","indicesUint16","start","size","_batchRGB","toRgbArray","_tintRGB","_texture","worldAlpha","setObjectRenderer","plugins","calculateVertices","calculateTints","l","render","_resolveDirectShader","uniforms","drawCalls","translationMatrix","transform","worldTransform","premultiply","toArray","tint","bind","set","_renderDrawCallDirect","drawCall","texArray","groupTextureCount","count","j","elements","draw","maxTextures","sampleValues","Int32Array","Matrix","default","UniformGroup","from","uSamplers","Shader","_shader","program","_calculateBounds","minX","minY","maxX","maxY","bounds","_bounds","addFrame","containsPoint","point","applyInverse","_TEMP_POINT","multiply","toLittleEndianNumber","wtID","_worldID","wt","a","b","c","d","tx","ty","closePath","setMatrix","beginHole","endHole","destroy","dispose","curves","Point","Graphics"]
}
