{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$state$GlStateSystem.js",
"lineCount":122,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/state/GlStateSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$state$GlStateSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar State = require('../../shared/state/State.js');\nvar mapWebGLBlendModesToPixi = require('./mapWebGLBlendModesToPixi.js');\n\n\"use strict\";\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _GlStateSystem = class _GlStateSystem {\n  constructor(renderer) {\n    /**\n     * Whether to invert the front face when rendering\n     * This is used for render textures where the Y-coordinate is flipped\n     * @default false\n     */\n    this._invertFrontFace = false;\n    this.gl = null;\n    this.stateId = 0;\n    this.polygonOffset = 0;\n    this.blendMode = \"none\";\n    this._blendEq = false;\n    this.map = [];\n    this.map[BLEND] = this.setBlend;\n    this.map[OFFSET] = this.setOffset;\n    this.map[CULLING] = this.setCullFace;\n    this.map[DEPTH_TEST] = this.setDepthTest;\n    this.map[WINDING] = this.setFrontFace;\n    this.map[DEPTH_MASK] = this.setDepthMask;\n    this.checks = [];\n    this.defaultState = State.State.for2d();\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  onRenderTargetChange(renderTarget) {\n    this._invertFrontFace = !renderTarget.isRoot;\n    if (this._cullFace) {\n      this.setFrontFace(this._frontFace);\n    } else {\n      this._frontFaceDirty = true;\n    }\n  }\n  contextChange(gl) {\n    this.gl = gl;\n    this.blendModesMap = mapWebGLBlendModesToPixi.mapWebGLBlendModesToPixi(gl);\n    this.resetState();\n  }\n  /**\n   * Sets the current state\n   * @param {*} state - The state to set.\n   */\n  set(state) {\n    state || (state = this.defaultState);\n    if (this.stateId !== state.data) {\n      let diff = this.stateId ^ state.data;\n      let i = 0;\n      while (diff) {\n        if (diff & 1) {\n          this.map[i].call(this, !!(state.data & 1 << i));\n        }\n        diff >>= 1;\n        i++;\n      }\n      this.stateId = state.data;\n    }\n    for (let i = 0; i < this.checks.length; i++) {\n      this.checks[i](this, state);\n    }\n  }\n  /**\n   * Sets the state, when previous state is unknown.\n   * @param {*} state - The state to set\n   */\n  forceState(state) {\n    state || (state = this.defaultState);\n    for (let i = 0; i < this.map.length; i++) {\n      this.map[i].call(this, !!(state.data & 1 << i));\n    }\n    for (let i = 0; i < this.checks.length; i++) {\n      this.checks[i](this, state);\n    }\n    this.stateId = state.data;\n  }\n  /**\n   * Sets whether to enable or disable blending.\n   * @param value - Turn on or off WebGl blending.\n   */\n  setBlend(value) {\n    this._updateCheck(_GlStateSystem._checkBlendMode, value);\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.BLEND);\n  }\n  /**\n   * Sets whether to enable or disable polygon offset fill.\n   * @param value - Turn on or off webgl polygon offset testing.\n   */\n  setOffset(value) {\n    this._updateCheck(_GlStateSystem._checkPolygonOffset, value);\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.POLYGON_OFFSET_FILL);\n  }\n  /**\n   * Sets whether to enable or disable depth test.\n   * @param value - Turn on or off webgl depth testing.\n   */\n  setDepthTest(value) {\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.DEPTH_TEST);\n  }\n  /**\n   * Sets whether to enable or disable depth mask.\n   * @param value - Turn on or off webgl depth mask.\n   */\n  setDepthMask(value) {\n    this.gl.depthMask(value);\n  }\n  /**\n   * Sets whether to enable or disable cull face.\n   * @param {boolean} value - Turn on or off webgl cull face.\n   */\n  setCullFace(value) {\n    this._cullFace = value;\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.CULL_FACE);\n    if (this._cullFace && this._frontFaceDirty) {\n      this.setFrontFace(this._frontFace);\n    }\n  }\n  /**\n   * Sets the gl front face.\n   * @param {boolean} value - true is clockwise and false is counter-clockwise\n   */\n  setFrontFace(value) {\n    this._frontFace = value;\n    this._frontFaceDirty = false;\n    const faceMode = this._invertFrontFace ? !value : value;\n    if (this._glFrontFace !== faceMode) {\n      this._glFrontFace = faceMode;\n      this.gl.frontFace(this.gl[faceMode ? \"CW\" : \"CCW\"]);\n    }\n  }\n  /**\n   * Sets the blend mode.\n   * @param {number} value - The blend mode to set to.\n   */\n  setBlendMode(value) {\n    if (!this.blendModesMap[value]) {\n      value = \"normal\";\n    }\n    if (value === this.blendMode) {\n      return;\n    }\n    this.blendMode = value;\n    const mode = this.blendModesMap[value];\n    const gl = this.gl;\n    if (mode.length === 2) {\n      gl.blendFunc(mode[0], mode[1]);\n    } else {\n      gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n    }\n    if (mode.length === 6) {\n      this._blendEq = true;\n      gl.blendEquationSeparate(mode[4], mode[5]);\n    } else if (this._blendEq) {\n      this._blendEq = false;\n      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n    }\n  }\n  /**\n   * Sets the polygon offset.\n   * @param {number} value - the polygon offset\n   * @param {number} scale - the polygon offset scale\n   */\n  setPolygonOffset(value, scale) {\n    this.gl.polygonOffset(value, scale);\n  }\n  // used\n  /** Resets all the logic and disables the VAOs. */\n  resetState() {\n    this._glFrontFace = false;\n    this._frontFace = false;\n    this._cullFace = false;\n    this._frontFaceDirty = false;\n    this._invertFrontFace = false;\n    this.gl.frontFace(this.gl.CCW);\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n    this.forceState(this.defaultState);\n    this._blendEq = true;\n    this.blendMode = \"\";\n    this.setBlendMode(\"normal\");\n  }\n  /**\n   * Checks to see which updates should be checked based on which settings have been activated.\n   *\n   * For example, if blend is enabled then we should check the blend modes each time the state is changed\n   * or if polygon fill is activated then we need to check if the polygon offset changes.\n   * The idea is that we only check what we have too.\n   * @param func - the checking function to add or remove\n   * @param value - should the check function be added or removed.\n   */\n  _updateCheck(func, value) {\n    const index = this.checks.indexOf(func);\n    if (value && index === -1) {\n      this.checks.push(func);\n    } else if (!value && index !== -1) {\n      this.checks.splice(index, 1);\n    }\n  }\n  /**\n   * A private little wrapper function that we call to check the blend mode.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static _checkBlendMode(system, state) {\n    system.setBlendMode(state.blendMode);\n  }\n  /**\n   * A private little wrapper function that we call to check the polygon offset.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static _checkPolygonOffset(system, state) {\n    system.setPolygonOffset(1, state.polygonOffset);\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this.gl = null;\n    this.checks.length = 0;\n  }\n};\n/** @ignore */\n_GlStateSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem\n  ],\n  name: \"state\"\n};\nlet GlStateSystem = _GlStateSystem;\n\nexports.GlStateSystem = GlStateSystem;\n//# sourceMappingURL=GlStateSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","State","mapWebGLBlendModesToPixi","constructor","renderer","_invertFrontFace","gl","polygonOffset","stateId","blendMode","_blendEq","map","BLEND","setBlend","OFFSET","setOffset","CULLING","setCullFace","DEPTH_TEST","setDepthTest","WINDING","setFrontFace","DEPTH_MASK","setDepthMask","checks","defaultState","for2d","renderTarget","onRenderTargetChange","add","isRoot","_cullFace","_frontFace","_frontFaceDirty","contextChange","blendModesMap","resetState","set","state","data","diff","i","call","length","forceState","value","_updateCheck","_GlStateSystem","_checkBlendMode","_checkPolygonOffset","POLYGON_OFFSET_FILL","depthMask","CULL_FACE","faceMode","_glFrontFace","frontFace","setBlendMode","mode","blendFunc","blendFuncSeparate","blendEquationSeparate","FUNC_ADD","setPolygonOffset","scale","CCW","pixelStorei","UNPACK_FLIP_Y_WEBGL","func","index","indexOf","push","splice","system","destroy","extension","type","ExtensionType","WebGLSystem","name","GlStateSystem"]
}
