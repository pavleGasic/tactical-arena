{
"version":3,
"file":"module$node_modules$$pixi$mesh_extras$lib$SimpleMesh.js",
"lineCount":24,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,GAAyE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE7GC,OAAOH,OAAA,CAAQ,0CAAR,CAFsG,EAE/EI,OAAOJ,OAAA,CAAQ,0CAAR,CAFwE;AAGjH,OAAMK,WAAN,QAAyBD,KAAKE,CAAAA,IAA9B;AAQEC,eAAW,CAACC,OAAA,GAAUL,IAAKM,CAAAA,OAAQC,CAAAA,KAAxB,EAA+BC,QAA/B,EAAyCC,GAAzC,EAA8CC,OAA9C,EAAuDC,QAAvD,CAAiE;AACpEC,cAAAA,GAAW,IAAIX,IAAKY,CAAAA,YAAT,CAAsBL,QAAtB,EAAgCC,GAAhC,EAAqCC,OAArC,CAAXE;AACNA,cAASE,CAAAA,SAAT,CAAmB,iBAAnB,CAAsCC,CAAAA,MAAtC,GAA+C,CAAA,CAA/C;AACMC,aAAAA,GAAe,IAAIf,IAAKgB,CAAAA,YAAT,CAAsBZ,OAAtB,CAAfW;AACN,WAAA,CAAMJ,QAAN,EAAgBI,OAAhB,EAA8B,IAA9B,EAAoCL,QAApC,CAAA;AAA+C,UAAKO,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AAJ2B;AAUxE,gBAAW,EAAA;AACb,aAAO,IAAKN,CAAAA,QAASE,CAAAA,SAAd,CAAwB,iBAAxB,CAA2CK,CAAAA,IAAlD;AADa;AAGX,gBAAQ,CAACC,KAAD,CAAQ;AAClB,UAAKR,CAAAA,QAASE,CAAAA,SAAd,CAAwB,iBAAxB,CAA2CK,CAAAA,IAA3C,GAAkDC,KAAlD;AADkB;AAGpBC,WAAO,CAACC,QAAD,CAAW;AAChB,UAAKJ,CAAAA,UAAL,IAAmB,IAAKN,CAAAA,QAASE,CAAAA,SAAd,CAAwB,iBAAxB,CAA2CS,CAAAA,MAA3C,EAAnB;AAAwE,WAAMF,CAAAA,OAAN,CAAcC,QAAd,CAAA;AADxD;AAxBpB;AA4BAvB,SAAQG,CAAAA,UAAR,GAAqBA,UAArB;AA/BiH,CAAjH;;",
"sources":["node_modules/@pixi/mesh-extras/lib/SimpleMesh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$mesh_extras$lib$SimpleMesh\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), mesh = require(\"@pixi/mesh\");\nclass SimpleMesh extends mesh.Mesh {\n  /**\n   * @param texture - The texture to use\n   * @param {Float32Array} [vertices] - if you want to specify the vertices\n   * @param {Float32Array} [uvs] - if you want to specify the uvs\n   * @param {Uint16Array} [indices] - if you want to specify the indices\n   * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n   */\n  constructor(texture = core.Texture.EMPTY, vertices, uvs, indices, drawMode) {\n    const geometry = new mesh.MeshGeometry(vertices, uvs, indices);\n    geometry.getBuffer(\"aVertexPosition\").static = !1;\n    const meshMaterial = new mesh.MeshMaterial(texture);\n    super(geometry, meshMaterial, null, drawMode), this.autoUpdate = !0;\n  }\n  /**\n   * Collection of vertices data.\n   * @type {Float32Array}\n   */\n  get vertices() {\n    return this.geometry.getBuffer(\"aVertexPosition\").data;\n  }\n  set vertices(value) {\n    this.geometry.getBuffer(\"aVertexPosition\").data = value;\n  }\n  _render(renderer) {\n    this.autoUpdate && this.geometry.getBuffer(\"aVertexPosition\").update(), super._render(renderer);\n  }\n}\nexports.SimpleMesh = SimpleMesh;\n//# sourceMappingURL=SimpleMesh.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","mesh","SimpleMesh","Mesh","constructor","texture","Texture","EMPTY","vertices","uvs","indices","drawMode","geometry","MeshGeometry","getBuffer","static","meshMaterial","MeshMaterial","autoUpdate","data","value","_render","renderer","update"]
}
