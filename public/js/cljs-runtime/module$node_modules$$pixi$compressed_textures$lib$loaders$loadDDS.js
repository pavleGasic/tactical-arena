shadow$provide.module$node_modules$$pixi$compressed_textures$lib$loaders$loadDDS = function(global, require, module, exports) {
  var assets = require("module$node_modules$$pixi$assets$lib$index"), core = require("module$node_modules$$pixi$core$lib$index");
  require("module$node_modules$$pixi$compressed_textures$lib$parsers$index");
  var parseDDS = require("module$node_modules$$pixi$compressed_textures$lib$parsers$parseDDS");
  global = {extension:{type:core.ExtensionType.LoadParser, priority:assets.LoaderParserPriority.High}, name:"loadDDS", test(url) {
    return assets.checkExtension(url, ".dds");
  }, async load(url, asset, loader) {
    var arrayBuffer = await (await core.settings.ADAPTER.fetch(url)).arrayBuffer();
    arrayBuffer = parseDDS.parseDDS(arrayBuffer).map(resource => {
      resource = new core.BaseTexture(resource, {mipmap:core.MIPMAP_MODES.OFF, alphaMode:core.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA, resolution:core.utils.getResolutionOfUrl(url), ...asset.data});
      return assets.createTexture(resource, loader, url);
    });
    return 1 === arrayBuffer.length ? arrayBuffer[0] : arrayBuffer;
  }, unload(texture) {
    Array.isArray(texture) ? texture.forEach(t => t.destroy(!0)) : texture.destroy(!0);
  }};
  core.extensions.add(global);
  exports.loadDDS = global;
};

//# sourceMappingURL=module$node_modules$$pixi$compressed_textures$lib$loaders$loadDDS.js.map
