{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$MeshPipe.js",
"lineCount":98,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh/shared/MeshPipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$MeshPipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar BindGroup = require('../../../rendering/renderers/gpu/shader/BindGroup.js');\nvar UniformGroup = require('../../../rendering/renderers/shared/shader/UniformGroup.js');\nvar getAdjustedBlendModeBlend = require('../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.js');\nvar PoolGroup = require('../../../utils/pool/PoolGroup.js');\nvar colorToUniform = require('../../graphics/gpu/colorToUniform.js');\nvar BatchableMesh = require('./BatchableMesh.js');\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup.UniformGroup({\n      uTransformMatrix: { value: new Matrix.Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup.BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    renderer.renderableGC.addManagedHash(this, \"_gpuBatchableMeshHash\");\n    renderer.renderableGC.addManagedHash(this, \"_meshDataHash\");\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      PoolGroup.BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend.getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    colorToUniform.color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = PoolGroup.BigPool.get(BatchableMesh.BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        PoolGroup.BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexports.MeshPipe = MeshPipe;\n//# sourceMappingURL=MeshPipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Matrix","BindGroup","UniformGroup","getAdjustedBlendModeBlend","PoolGroup","colorToUniform","BatchableMesh","MeshPipe","constructor","renderer","adaptor","localUniforms","uTransformMatrix","value","type","uColor","Float32Array","uRound","localUniformsBindGroup","_meshDataHash","Object","create","_gpuBatchableMeshHash","_destroyRenderableBound","destroyRenderable","bind","_adaptor","init","renderableGC","addManagedHash","validateRenderable","mesh","meshData","_getMeshData","wasBatched","batched","isBatched","geometry","_geometry","indices","length","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","texture","uid","_texture","_textureMatrixUpdateId","_batcher","checkAndUpdateTexture","addRenderable","instructionSet","batcher","renderPipes","batch","gpuBatchableMesh","setTexture","addToBatch","break","add","updateRenderable","updateElement","gpuMesh","BigPool","return","off","execute","isRenderable","state","blendMode","groupBlendMode","_source","uniforms","groupTransform","_roundPixels","update","color32BitToUniform","groupColorAlpha","_initMeshData","on","_initBatchableMesh","get","renderable","transform","roundPixels","destroy","i","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"]
}
