{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$ColorDodgeBlend.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,wEAAA,GAA6F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGjIC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACAC,SAAAA,GAAkBJ,OAAA,CAAQ,yEAAR,CAAlBI;AAEJ,cAAA;AACA,OAAMC,gBAAN,QAA8BD,QAAgBA,CAAAA,eAA9C;AACEE,eAAW,EAAG;AACZ,WAAA,CAAM,CACJC,GAAI,CACFC,UAAY,6kBADV;AAkBFC,WAAO,gIAlBL,CADA,EAuBJC,IAAK,CACHF,UAAY,uoBADT;AAkBHC,WAAO,uJAlBJ,CAvBD,CAAN,CAAA;AADY;AADhB;AAmDAJ,iBAAgBM,CAAAA,SAAhB,GAA4B,CAC1BC,KAAM,aADoB,EAE1BC,KAAMV,MAAWW,CAAAA,aAAcC,CAAAA,SAFL,CAA5B;AAKAb,SAAQG,CAAAA,eAAR,GAA0BA,eAA1B;AA/DqI,CAArI;;",
"sources":["node_modules/pixi_DOT_js/lib/advanced-blend-modes/ColorDodgeBlend.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$ColorDodgeBlend\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../extensions/Extensions.js');\nvar BlendModeFilter = require('../filters/blend-modes/BlendModeFilter.js');\n\n\"use strict\";\nclass ColorDodgeBlend extends BlendModeFilter.BlendModeFilter {\n  constructor() {\n    super({\n      gl: {\n        functions: `\n                float colorDodge(float base, float blend)\n                {\n                    return base / (1.0 - blend);\n                }\n\n                vec3 blendColorDodge(vec3 base, vec3 blend, float opacity)\n                {\n                    vec3 blended = vec3(\n                        colorDodge(base.r, blend.r),\n                        colorDodge(base.g, blend.g),\n                        colorDodge(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                `,\n        main: `\n                finalColor = vec4(blendColorDodge(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n                `\n      },\n      gpu: {\n        functions: `\n                fn colorDodge(base: f32, blend: f32) -> f32\n                {\n                    return base / (1.0 - blend);\n                }\n\n                fn blendColorDodge(base: vec3<f32>, blend: vec3<f32>, opacity: f32) -> vec3<f32>\n                {\n                    let blended = vec3<f32>(\n                        colorDodge(base.r, blend.r),\n                        colorDodge(base.g, blend.g),\n                        colorDodge(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                `,\n        main: `\n                    out = vec4<f32>(blendColorDodge(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n                `\n      }\n    });\n  }\n}\n/** @ignore */\nColorDodgeBlend.extension = {\n  name: \"color-dodge\",\n  type: Extensions.ExtensionType.BlendMode\n};\n\nexports.ColorDodgeBlend = ColorDodgeBlend;\n//# sourceMappingURL=ColorDodgeBlend.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","BlendModeFilter","ColorDodgeBlend","constructor","gl","functions","main","gpu","extension","name","type","ExtensionType","BlendMode"]
}
