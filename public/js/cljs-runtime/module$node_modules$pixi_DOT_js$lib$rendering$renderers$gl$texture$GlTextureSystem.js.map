{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$GlTextureSystem.js",
"lineCount":167,
"mappings":"AAAAA,cAAA,CAAA,kFAAA,GAAuG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG/I,MAAIC,UAAUH,OAAA,CAAQ,yDAAR,CAAd;AACII,QAAAA,GAAaJ,OAAA,CAAQ,2DAAR,CAAbI;AACJ,MAAIC,UAAUL,OAAA,CAAQ,gFAAR,CAAd,EACIM,YAAYN,OAAA,CAAQ,8EAAR,CADhB,EAEIO,8BAA8BP,OAAA,CAAQ,0GAAR,CAFlC,EAGIQ,oCAAoCR,OAAA,CAAQ,gHAAR,CAHxC;AAIIS,0BAAwBT,OAAA,CAAQ,oGAAR,CAJ5B,EAKIU,wBAAwBV,OAAA,CAAQ,oGAAR,CAL5B,EAMIW,mBAAmBX,OAAA,CAAQ,2FAAR,CANvB,EAOIY,sBAAsBZ,OAAA,CAAQ,8FAAR,CAP1B;AAQIa,gCAA8Bb,OAAA,CAAQ,sGAAR,CARlC,EASIc,oBAAoBd,OAAA,CAAQ,4FAAR,CATxB;AAUAA,SAAA,CAAQ,6FAAR,CAAA;AAEA,cAAA;AAEA,OAAMe,gBAAN;AACEC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKC,CAAAA,eAAL,GAAuB,EAAvB;AACA,UAAKC,CAAAA,WAAL,GAAmCC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAnC;AACA,UAAKC,CAAAA,WAAL,GAAmCF,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAnC;AACA,UAAKE,CAAAA,cAAL,GAAsB,EAAtB;AACA,UAAKC,CAAAA,sBAAL,GAA8B,CAAC,CAA/B;AACA,UAAKC,CAAAA,cAAL,GAAsCL,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAtC;AACA,UAAKK,CAAAA,QAAL,GAAgB,CACdC,MAAOlB,qBAAsBA,CAAAA,qBADf,EAEdmB,OAAQrB,2BAA4BA,CAAAA,2BAFtB,EAGdsB,MAAOnB,qBAAsBA,CAAAA,qBAHf,EAIdoB,WAAYtB,iCAAkCA,CAAAA,iCAJhC,CAAhB;AAQA,UAAKuB,CAAAA,oBAAL,GAFA,IAAKC,CAAAA,iBAEL,GAFyB,CAAA,CAEzB;AACA,UAAKC,CAAAA,SAAL,GAAiBhB,QAAjB;AACA,UAAKgB,CAAAA,SAAUC,CAAAA,YAAaC,CAAAA,cAA5B,CAA2C,IAA3C,EAAiD,aAAjD,CAAA;AACA,UAAKF,CAAAA,SAAUC,CAAAA,YAAaC,CAAAA,cAA5B,CAA2C,IAA3C,EAAiD,aAAjD,CAAA;AAlBoB;AAoBtBC,iBAAa,CAACC,EAAD,CAAK;AAChB,UAAKC,CAAAA,GAAL,GAAWD,EAAX;AACK,UAAKE,CAAAA,0BAAV,KACE,IAAKA,CAAAA,0BAEL,GAFkC1B,2BAA4BA,CAAAA,2BAA5B,CAAwDwB,EAAxD,EAA4D,IAAKJ,CAAAA,SAAUO,CAAAA,OAAQC,CAAAA,UAAnF,CAElC,EADA,IAAKC,CAAAA,gBACL,GADwB5B,iBAAkBA,CAAAA,iBAAlB,CAAoCuB,EAApC,CACxB,EAAA,IAAKM,CAAAA,kBAAL,GAA0B/B,mBAAoBA,CAAAA,mBAApB,CAAwCyB,EAAxC,CAH5B;AAKA,UAAKlB,CAAAA,WAAL,GAAmCC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAnC;AACA,UAAKC,CAAAA,WAAL,GAAmCF,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAnC;AACA,UAAKI,CAAAA,cAAL,GAAsCL,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAtC;AACA,UAAKW,CAAAA,iBAAL,GAAyB,CAAA,CAAzB;AACA,WAASY,EAAT,GAAa,CAAb,EAAoB,EAApB,GAAgBA,EAAhB,EAAwBA,EAAA,EAAxB;AACE,YAAKC,CAAAA,IAAL,CAAUxC,OAAQA,CAAAA,OAAQyC,CAAAA,KAA1B,EAAiCF,EAAjC,CAAA;AADF;AAXgB;AAelBG,cAAU,CAACC,MAAD,CAAS;AACjB,UAAKH,CAAAA,IAAL,CAAUG,MAAV,CAAA;AADiB;AAGnBH,QAAI,CAACI,OAAD,EAAUC,QAAA,GAAW,CAArB,CAAwB;AAC1B,YAAMF,SAASC,OAAQD,CAAAA,MAAvB;AACIC,aAAJ,IACE,IAAKE,CAAAA,UAAL,CAAgBH,MAAhB,EAAwBE,QAAxB,CACA,EAAI,IAAKnB,CAAAA,oBAAT,IACE,IAAKqB,CAAAA,YAAL,CAAkBJ,MAAOK,CAAAA,KAAzB,EAAgCH,QAAhC,CAHJ,KAME,IAAKC,CAAAA,UAAL,CAAgB,IAAhB,EAAsBD,QAAtB,CACA,EAAI,IAAKnB,CAAAA,oBAAT,IACE,IAAKqB,CAAAA,YAAL,CAAkB,IAAlB,EAAwBF,QAAxB,CARJ,CAAA;AAF0B;AAc5BC,cAAU,CAACH,MAAD,EAASE,QAAA,GAAW,CAApB,CAAuB;AAC/B,YAAMb,KAAK,IAAKC,CAAAA,GAAhB;AACAU,YAAOM,CAAAA,QAAP,GAAkB,IAAKrB,CAAAA,SAAUsB,CAAAA,SAAUC,CAAAA,KAA3C;AACI,UAAKjC,CAAAA,cAAL,CAAoB2B,QAApB,CAAJ,KAAsCF,MAAtC,KACE,IAAKzB,CAAAA,cAAL,CAAoB2B,QAApB,CAIA,GAJgCF,MAIhC,EAHA,IAAKS,CAAAA,iBAAL,CAAuBP,QAAvB,CAGA,EAFAF,MAEA,KAFWA,MAEX,GAFoB3C,OAAQA,CAAAA,OAAQyC,CAAAA,KAAME,CAAAA,MAE1C,GADMU,MACN,GADkB,IAAKC,CAAAA,WAAL,CAAiBX,MAAjB,CAClB,EAAAX,EAAGuB,CAAAA,WAAH,CAAeF,MAAUG,CAAAA,MAAzB,EAAiCH,MAAUT,CAAAA,OAA3C,CALF;AAH+B;AAWjCG,gBAAY,CAACC,KAAD,EAAQH,QAAA,GAAW,CAAnB,CAAsB;AAChC,YAAMb,KAAK,IAAKC,CAAAA,GAAhB;AACKe,WAAL,IAKMS,KACN,GADgB,IAAKC,CAAAA,aAAL,CAAmBV,KAAnB,CAChB,EAAI,IAAK5B,CAAAA,cAAL,CAAoByB,QAApB,CAAJ,KAAsCY,KAAtC,KACE,IAAKrC,CAAAA,cAAL,CAAoByB,QAApB,CACA,GADgCY,KAChC,EAAAzB,EAAG2B,CAAAA,WAAH,CAAed,QAAf,EAAyBY,KAAzB,CAFF,CANA,KACE,IAAKrC,CAAAA,cAAL,CAAoByB,QAApB,CACA,GADgC,IAChC,EAAAb,EAAG2B,CAAAA,WAAH,CAAed,QAAf,EAAyB,IAAzB,CAFF,CAAA;AAFgC;AAalCe,UAAM,CAAChB,OAAD,CAAU;AACRD,aAAAA,GAASC,OAAQD,CAAAA,MAAjBA;AACN,YAAMkB,gBAAgB,IAAK3C,CAAAA,cAA3B,EACMc,KAAK,IAAKC,CAAAA,GADhB;AAEA,WAAK,IAAIM,IAAI,CAAb,EAAgBA,CAAhB,GAAoBsB,aAAcC,CAAAA,MAAlC,EAA0CvB,CAAA,EAA1C;AACE,YAAIsB,aAAA,CAActB,CAAd,CAAJ,KAAyBI,OAAzB,CAAiC;AAC/B,cAAKS,CAAAA,iBAAL,CAAuBb,CAAvB,CAAA;AACA,gBAAMc,YAAY,IAAKC,CAAAA,WAAL,CAAiBX,OAAjB,CAAlB;AACAX,YAAGuB,CAAAA,WAAH,CAAeF,SAAUG,CAAAA,MAAzB,EAAiC,IAAjC,CAAA;AACAK,uBAAA,CAActB,CAAd,CAAA,GAAmB,IAAnB;AAJ+B;AADnC;AAJc;AAahBa,qBAAiB,CAACP,QAAD,CAAW;AACtB,UAAK1B,CAAAA,sBAAT,KAAoC0B,QAApC,KACE,IAAK1B,CAAAA,sBACL,GAD8B0B,QAC9B,EAAA,IAAKZ,CAAAA,GAAI8B,CAAAA,aAAT,CAAuB,IAAK9B,CAAAA,GAAI+B,CAAAA,QAAhC,GAA2CnB,QAA3C,CAFF;AAD0B;AAM5BoB,eAAW,CAACtB,MAAD,CAAS;AAElB,YAAMU,YAAY,IAAIpD,SAAUA,CAAAA,SAAd,CADP,IAAKgC,CAAAA,GAC6BiC,CAAAA,aAAH,EAAxB,CAAlB;AACAb,eAAUc,CAAAA,IAAV,GAAiB,IAAK9B,CAAAA,gBAAL,CAAsBM,MAAOyB,CAAAA,MAA7B,CAAjB;AACAf,eAAUgB,CAAAA,cAAV,GAA2B,IAAKnC,CAAAA,0BAAL,CAAgCS,MAAOyB,CAAAA,MAAvC,CAA3B;AACAf,eAAUe,CAAAA,MAAV,GAAmB,IAAK9B,CAAAA,kBAAL,CAAwBK,MAAOyB,CAAAA,MAA/B,CAAnB;AACIzB,YAAO2B,CAAAA,mBAAX,KAAmC,IAAK1C,CAAAA,SAAUO,CAAAA,OAAQoC,CAAAA,QAASC,CAAAA,gBAAnE,IAAuF7B,MAAO8B,CAAAA,YAA9F,MAEE9B,MAAO+B,CAAAA,aAFT,GAEyBC,IAAKC,CAAAA,KAAL,CAAWD,IAAKE,CAAAA,IAAL,CADTF,IAAKG,CAAAA,GAALC,CAASpC,MAAOqC,CAAAA,KAAhBD,EAAuBpC,MAAOsC,CAAAA,MAA9BF,CACS,CAAX,CAFzB,GAEmE,CAFnE;AAIA,UAAKjE,CAAAA,WAAL,CAAiB6B,MAAOuC,CAAAA,GAAxB,CAAA,GAA+B7B,SAA/B;AACK,UAAKxC,CAAAA,eAAgBsE,CAAAA,QAArB,CAA8BxC,MAA9B,CAAL,KACEA,MAAOyC,CAAAA,EAAP,CAAU,QAAV,EAAoB,IAAKC,CAAAA,cAAzB,EAAyC,IAAzC,CAMA,EALA1C,MAAOyC,CAAAA,EAAP,CAAU,QAAV,EAAoB,IAAKC,CAAAA,cAAzB,EAAyC,IAAzC,CAKA,EAJA1C,MAAOyC,CAAAA,EAAP,CAAU,aAAV,EAAyB,IAAKE,CAAAA,aAA9B,EAA6C,IAA7C,CAIA,EAHA3C,MAAOyC,CAAAA,EAAP,CAAU,SAAV,EAAqB,IAAKG,CAAAA,eAA1B,EAA2C,IAA3C,CAGA,EAFA5C,MAAOyC,CAAAA,EAAP,CAAU,QAAV,EAAoB,IAAKI,CAAAA,cAAzB,EAAyC,IAAzC,CAEA,EADA7C,MAAOyC,CAAAA,EAAP,CAAU,eAAV,EAA2B,IAAKK,CAAAA,eAAhC,EAAiD,IAAjD,CACA,EAAA,IAAK5E,CAAAA,eAAgB6E,CAAAA,IAArB,CAA0B/C,MAA1B,CAPF;AASA,UAAK0C,CAAAA,cAAL,CAAoB1C,MAApB,CAAA;AACA,UAAKgD,CAAAA,WAAL,CAAiBhD,MAAjB,EAAyB,CAAA,CAAzB,CAAA;AACA,aAAOU,SAAP;AAtBkB;AAwBpBiC,iBAAa,CAAC3C,MAAD,CAAS;AACpB,UAAKgD,CAAAA,WAAL,CAAiBhD,MAAjB,EAAyB,CAAA,CAAzB,CAAA;AADoB;AAGtBgD,eAAW,CAAChD,MAAD,EAASiD,aAAT,CAAwB;AACjC,YAAM5D,KAAK,IAAKC,CAAAA,GAAhB,EACMoB,YAAY,IAAKC,CAAAA,WAAL,CAAiBX,MAAjB,CADlB;AAEAX,QAAGuB,CAAAA,WAAH,CAAevB,EAAG6D,CAAAA,UAAlB,EAA8BxC,SAAUT,CAAAA,OAAxC,CAAA;AACA,UAAK1B,CAAAA,cAAL,CAAoB,IAAKC,CAAAA,sBAAzB,CAAA,GAAmDwB,MAAnD;AACArC,sBAAiBA,CAAAA,gBAAjB,CACEqC,MAAOK,CAAAA,KADT,EAEEhB,EAFF,EAGyB,CAHzB,GAGEW,MAAO+B,CAAAA,aAHT,EAIE,IAAK9C,CAAAA,SAAUO,CAAAA,OAAQC,CAAAA,UAAW0D,CAAAA,oBAJpC,EAKE,eALF,EAME9D,EAAG6D,CAAAA,UANL,EAQE,CAAC,IAAKjE,CAAAA,SAAUO,CAAAA,OAAQoC,CAAAA,QAASwB,CAAAA,iBARnC,IAQwD,CAACpD,MAAO8B,CAAAA,YARhE,EASEmB,aATF,CAAA;AALiC;AAiBnCJ,kBAAc,CAAC7C,MAAD,CAAS;AACrB,YAAMU,YAAY,IAAKvC,CAAAA,WAAL,CAAiB6B,MAAOuC,CAAAA,GAAxB,CAAlB;AACK7B,eAAL,KAEA,IAAKO,CAAAA,MAAL,CAAYjB,MAAZ,CAEA,EADA,IAAK7B,CAAAA,WAAL,CAAiB6B,MAAOuC,CAAAA,GAAxB,CACA,GAD+B,IAC/B,EAAA,IAAKjD,CAAAA,GAAI+D,CAAAA,aAAT,CAAuB3C,SAAUT,CAAAA,OAAjC,CAJA;AAFqB;AAQvByC,kBAAc,CAAC1C,MAAD,CAAS;AACrB,YAAMX,KAAK,IAAKC,CAAAA,GAAhB,EACMoB,YAAY,IAAKC,CAAAA,WAAL,CAAiBX,MAAjB,CADlB;AAEAX,QAAGuB,CAAAA,WAAH,CAAevB,EAAG6D,CAAAA,UAAlB,EAA8BxC,SAAUT,CAAAA,OAAxC,CAAA;AACA,UAAK1B,CAAAA,cAAL,CAAoB,IAAKC,CAAAA,sBAAzB,CAAA,GAAmDwB,MAAnD;AACA,YAAMsD,qBAA0C,6BAA1CA,KAAqBtD,MAAOuD,CAAAA,SAAlC;AACI,UAAKvE,CAAAA,iBAAT,KAA+BsE,kBAA/B,KACE,IAAKtE,CAAAA,iBACL,GADyBsE,kBACzB,EAAAjE,EAAGmE,CAAAA,WAAH,CAAenE,EAAGoE,CAAAA,8BAAlB,EAAkDH,kBAAlD,CAFF;AAII,UAAK5E,CAAAA,QAAL,CAAcsB,MAAO0D,CAAAA,cAArB,CAAJ,GACE,IAAKhF,CAAAA,QAAL,CAAcsB,MAAO0D,CAAAA,cAArB,CAAqCC,CAAAA,MAArC,CAA4C3D,MAA5C,EAAoDU,SAApD,EAA+DrB,EAA/D,EAAmE,IAAKJ,CAAAA,SAAUO,CAAAA,OAAQoE,CAAAA,YAA1F,CADF,GAGEvE,EAAGwE,CAAAA,UAAH,CAAcxE,EAAG6D,CAAAA,UAAjB,EAA6B,CAA7B,EAAgC7D,EAAGyE,CAAAA,IAAnC,EAAyC9D,MAAO+D,CAAAA,UAAhD,EAA4D/D,MAAOgE,CAAAA,WAAnE,EAAgF,CAAhF,EAAmF3E,EAAGyE,CAAAA,IAAtF,EAA4FzE,EAAG4E,CAAAA,aAA/F,EAA8G,IAA9G,CAHF;AAKA,UAAIjE,MAAO2B,CAAAA,mBAAX,IAAyD,CAAzD,GAAkC3B,MAAO+B,CAAAA,aAAzC;AACE,YAAKe,CAAAA,eAAL,CAAqB9C,MAArB,EAA6B,CAAA,CAA7B,CAAA;AADF;AAfqB;AAmBvB8C,mBAAe,CAAC9C,MAAD,EAASH,IAAA,GAAO,CAAA,CAAhB,CAAsB;AAC/BA,UAAJ,IACE,IAAKM,CAAAA,UAAL,CAAgBH,MAAhB,EAAwB,CAAxB,CADF;AAEMU,YAAAA,GAAY,IAAKC,CAAAA,WAAL,CAAiBX,MAAjB,CAAZU;AACN,UAAKpB,CAAAA,GAAI4E,CAAAA,cAAT,CAAwBxD,MAAUG,CAAAA,MAAlC,CAAA;AAJmC;AAMrC+B,mBAAe,CAAC5C,MAAD,CAAS;AACtBA,YAAOmE,CAAAA,GAAP,CAAW,SAAX,EAAsB,IAAKvB,CAAAA,eAA3B,EAA4C,IAA5C,CAAA;AACA5C,YAAOmE,CAAAA,GAAP,CAAW,QAAX,EAAqB,IAAKzB,CAAAA,cAA1B,EAA0C,IAA1C,CAAA;AACA1C,YAAOmE,CAAAA,GAAP,CAAW,QAAX,EAAqB,IAAKzB,CAAAA,cAA1B,EAA0C,IAA1C,CAAA;AACA1C,YAAOmE,CAAAA,GAAP,CAAW,QAAX,EAAqB,IAAKtB,CAAAA,cAA1B,EAA0C,IAA1C,CAAA;AACA7C,YAAOmE,CAAAA,GAAP,CAAW,aAAX,EAA0B,IAAKxB,CAAAA,aAA/B,EAA8C,IAA9C,CAAA;AACA3C,YAAOmE,CAAAA,GAAP,CAAW,eAAX,EAA4B,IAAKrB,CAAAA,eAAjC,EAAkD,IAAlD,CAAA;AACA,UAAK5E,CAAAA,eAAgBkG,CAAAA,MAArB,CAA4B,IAAKlG,CAAAA,eAAgBmG,CAAAA,OAArB,CAA6BrE,MAA7B,CAA5B,EAAkE,CAAlE,CAAA;AACA,UAAK6C,CAAAA,cAAL,CAAoB7C,MAApB,CAAA;AARsB;AAUxBsE,gBAAY,CAACjE,KAAD,CAAQ;AAClB,YAAMhB,KAAK,IAAKC,CAAAA,GAAhB,EACMiF,YAAY,IAAKjF,CAAAA,GAAIkF,CAAAA,aAAT,EADlB;AAEA,UAAKlG,CAAAA,WAAL,CAAiB+B,KAAMoE,CAAAA,WAAvB,CAAA,GAAsCF,SAAtC;AACA5G,sBAAiBA,CAAAA,gBAAjB,CACE0C,KADF,EAEEhB,EAFF,EAGmE,CAHnE,GAGE,IAAKd,CAAAA,cAAL,CAAoB,IAAKC,CAAAA,sBAAzB,CAAiDuD,CAAAA,aAHnD,EAIE,IAAK9C,CAAAA,SAAUO,CAAAA,OAAQC,CAAAA,UAAW0D,CAAAA,oBAJpC,EAKE,mBALF,EAMEoB,SANF,EAOE,CAAA,CAPF,EAQE,CAAA,CARF,CAAA;AAUA,aAAO,IAAKjG,CAAAA,WAAL,CAAiB+B,KAAMoE,CAAAA,WAAvB,CAAP;AAdkB;AAgBpB1D,iBAAa,CAACD,OAAD,CAAU;AACrB,aAAO,IAAKxC,CAAAA,WAAL,CAAiBwC,OAAQ2D,CAAAA,WAAzB,CAAP,IAAgD,IAAKH,CAAAA,YAAL,CAAkBxD,OAAlB,CAAhD;AADqB;AAGvBH,eAAW,CAACX,MAAD,CAAS;AAClB,aAAO,IAAK7B,CAAAA,WAAL,CAAiB6B,MAAOuC,CAAAA,GAAxB,CAAP,IAAuC,IAAKjB,CAAAA,WAAL,CAAiBtB,MAAjB,CAAvC;AADkB;AAGpB0E,kBAAc,CAACzE,OAAD,CAAU;AACtB,YAAM,CAAE0E,MAAF,EAAUtC,KAAV,EAAiBC,MAAjB,CAAA,GAA4B,IAAKsC,CAAAA,SAAL,CAAe3E,OAAf,CAAlC;AACM4E,aAAAA,GAAS1H,OAAQ2H,CAAAA,UAAWC,CAAAA,GAAnB,EAAyBC,CAAAA,YAAzB,EAATH;AACNA,aAAOxC,CAAAA,KAAP,GAAeA,KAAf;AACAwC,aAAOvC,CAAAA,MAAP,GAAgBA,MAAhB;AACA,YAAM2C,MAAMJ,OAAOK,CAAAA,UAAP,CAAkB,IAAlB,CAAZ;AACA,UAAID,GAAJ,CAAS;AACP,cAAME,YAAYF,GAAIG,CAAAA,eAAJ,CAAoB/C,KAApB,EAA2BC,MAA3B,CAAlB;AACA6C,iBAAUE,CAAAA,IAAKC,CAAAA,GAAf,CAAmBX,MAAnB,CAAA;AACAM,WAAIM,CAAAA,YAAJ,CAAiBJ,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B,CAAA;AAHO;AAKT,aAAON,OAAP;AAXsB;AAaxBD,aAAS,CAAC3E,OAAD,CAAU;AACjB,YAAMuF,aAAavF,OAAQD,CAAAA,MAAOwF,CAAAA,UAAlC,EACMC,QAAQxF,OAAQwF,CAAAA,KADtB,EAEMpD,QAAQL,IAAKG,CAAAA,GAAL,CAASH,IAAK0D,CAAAA,KAAL,CAAWD,KAAMpD,CAAAA,KAAjB,GAAyBmD,UAAzB,CAAT,EAA+C,CAA/C,CAFd,EAGMlD,SAASN,IAAKG,CAAAA,GAAL,CAASH,IAAK0D,CAAAA,KAAL,CAAWD,KAAMnD,CAAAA,MAAjB,GAA0BkD,UAA1B,CAAT,EAAgD,CAAhD,CAHf,EAIMb,SAAS,IAAIgB,UAAJ,CAhOKC,CAgOL,GAAiCvD,KAAjC,GAAyCC,MAAzC,CAJf;AAKA,UAAMrE,WAAW,IAAKgB,CAAAA,SAAtB;AACM4G,aAAAA,GAAe5H,QAAS4H,CAAAA,YAAaC,CAAAA,eAAtB,CAAsC7F,OAAtC,CAAf4F;AACAE,aAAAA,GAAiB9H,QAAS4H,CAAAA,YAAaG,CAAAA,kBAAtB,CAAyCH,OAAzC,CAAjBE;AACA1G,cAAAA,GAAKpB,QAASoB,CAAAA,EAAdA;AACNA,cAAG4G,CAAAA,eAAH,CAAmB5G,QAAG6G,CAAAA,WAAtB,EAAmCH,OAAeI,CAAAA,wBAAlD,CAAA;AACA9G,cAAG+G,CAAAA,UAAH,CACEpE,IAAK0D,CAAAA,KAAL,CAAWD,KAAMY,CAAAA,CAAjB,GAAqBb,UAArB,CADF,EAEExD,IAAK0D,CAAAA,KAAL,CAAWD,KAAMa,CAAAA,CAAjB,GAAqBd,UAArB,CAFF,EAGEnD,KAHF,EAIEC,MAJF,EAKEjD,QAAGyE,CAAAA,IALL,EAMEzE,QAAG4E,CAAAA,aANL,EAOEU,MAPF,CAAA;AAYA,aAAO,CAAEA,OAAQ,IAAI4B,iBAAJ,CAAsB5B,MAAO/F,CAAAA,MAA7B,CAAV,EAAgDyD,KAAhD,EAAuDC,MAAvD,CAAP;AAvBiB;AAyBnBkE,WAAO,EAAG;AACR,UAAKtI,CAAAA,eAAgBuI,CAAAA,KAArB,EAA6BC,CAAAA,OAA7B,CAAsC1G,MAAD,IAAY,IAAK4C,CAAAA,eAAL,CAAqB5C,MAArB,CAAjD,CAAA;AAEA,UAAKf,CAAAA,SAAL,GADA,IAAKf,CAAAA,eACL,GADuB,IACvB;AAHQ;AAKVyI,cAAU,EAAG;AACX,UAAKnI,CAAAA,sBAAL,GAA8B,CAAC,CAA/B;AACA,UAAKD,CAAAA,cAAeqI,CAAAA,IAApB,CAAyBvJ,OAAQA,CAAAA,OAAQyC,CAAAA,KAAME,CAAAA,MAA/C,CAAA;AACA,UAAKvB,CAAAA,cAAL,GAAsCL,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAAtC;AACA,YAAMgB,KAAK,IAAKC,CAAAA,GAAhB;AACA,UAAKN,CAAAA,iBAAL,GAAyB,CAAA,CAAzB;AACAK,QAAGmE,CAAAA,WAAH,CAAenE,EAAGoE,CAAAA,8BAAlB,EAAkD,IAAKzE,CAAAA,iBAAvD,CAAA;AANW;AAxPf;AAkQAjB,iBAAgB8I,CAAAA,SAAhB,GAA4B,CAC1BrF,KAAM,CACJpE,MAAW0J,CAAAA,aAAcC,CAAAA,WADrB,CADoB,EAI1BC,KAAM,SAJoB,CAA5B;AAOA9J,SAAQa,CAAAA,eAAR,GAA0BA,eAA1B;AA5R+I,CAA/I;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/texture/GlTextureSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$GlTextureSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../../environment/adapter.js');\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar Texture = require('../../shared/texture/Texture.js');\nvar GlTexture = require('./GlTexture.js');\nvar glUploadBufferImageResource = require('./uploaders/glUploadBufferImageResource.js');\nvar glUploadCompressedTextureResource = require('./uploaders/glUploadCompressedTextureResource.js');\nvar glUploadImageResource = require('./uploaders/glUploadImageResource.js');\nvar glUploadVideoResource = require('./uploaders/glUploadVideoResource.js');\nvar applyStyleParams = require('./utils/applyStyleParams.js');\nvar mapFormatToGlFormat = require('./utils/mapFormatToGlFormat.js');\nvar mapFormatToGlInternalFormat = require('./utils/mapFormatToGlInternalFormat.js');\nvar mapFormatToGlType = require('./utils/mapFormatToGlType.js');\nrequire('./utils/unpremultiplyAlpha.js');\n\n\"use strict\";\nconst BYTES_PER_PIXEL = 4;\nclass GlTextureSystem {\n  constructor(renderer) {\n    this.managedTextures = [];\n    this._glTextures = /* @__PURE__ */ Object.create(null);\n    this._glSamplers = /* @__PURE__ */ Object.create(null);\n    this._boundTextures = [];\n    this._activeTextureLocation = -1;\n    this._boundSamplers = /* @__PURE__ */ Object.create(null);\n    this._uploads = {\n      image: glUploadImageResource.glUploadImageResource,\n      buffer: glUploadBufferImageResource.glUploadBufferImageResource,\n      video: glUploadVideoResource.glUploadVideoResource,\n      compressed: glUploadCompressedTextureResource.glUploadCompressedTextureResource\n    };\n    this._premultiplyAlpha = false;\n    // TODO - separate samplers will be a cool thing to add, but not right now!\n    this._useSeparateSamplers = false;\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_glTextures\");\n    this._renderer.renderableGC.addManagedHash(this, \"_glSamplers\");\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    if (!this._mapFormatToInternalFormat) {\n      this._mapFormatToInternalFormat = mapFormatToGlInternalFormat.mapFormatToGlInternalFormat(gl, this._renderer.context.extensions);\n      this._mapFormatToType = mapFormatToGlType.mapFormatToGlType(gl);\n      this._mapFormatToFormat = mapFormatToGlFormat.mapFormatToGlFormat(gl);\n    }\n    this._glTextures = /* @__PURE__ */ Object.create(null);\n    this._glSamplers = /* @__PURE__ */ Object.create(null);\n    this._boundSamplers = /* @__PURE__ */ Object.create(null);\n    this._premultiplyAlpha = false;\n    for (let i = 0; i < 16; i++) {\n      this.bind(Texture.Texture.EMPTY, i);\n    }\n  }\n  initSource(source) {\n    this.bind(source);\n  }\n  bind(texture, location = 0) {\n    const source = texture.source;\n    if (texture) {\n      this.bindSource(source, location);\n      if (this._useSeparateSamplers) {\n        this._bindSampler(source.style, location);\n      }\n    } else {\n      this.bindSource(null, location);\n      if (this._useSeparateSamplers) {\n        this._bindSampler(null, location);\n      }\n    }\n  }\n  bindSource(source, location = 0) {\n    const gl = this._gl;\n    source._touched = this._renderer.textureGC.count;\n    if (this._boundTextures[location] !== source) {\n      this._boundTextures[location] = source;\n      this._activateLocation(location);\n      source || (source = Texture.Texture.EMPTY.source);\n      const glTexture = this.getGlSource(source);\n      gl.bindTexture(glTexture.target, glTexture.texture);\n    }\n  }\n  _bindSampler(style, location = 0) {\n    const gl = this._gl;\n    if (!style) {\n      this._boundSamplers[location] = null;\n      gl.bindSampler(location, null);\n      return;\n    }\n    const sampler = this._getGlSampler(style);\n    if (this._boundSamplers[location] !== sampler) {\n      this._boundSamplers[location] = sampler;\n      gl.bindSampler(location, sampler);\n    }\n  }\n  unbind(texture) {\n    const source = texture.source;\n    const boundTextures = this._boundTextures;\n    const gl = this._gl;\n    for (let i = 0; i < boundTextures.length; i++) {\n      if (boundTextures[i] === source) {\n        this._activateLocation(i);\n        const glTexture = this.getGlSource(source);\n        gl.bindTexture(glTexture.target, null);\n        boundTextures[i] = null;\n      }\n    }\n  }\n  _activateLocation(location) {\n    if (this._activeTextureLocation !== location) {\n      this._activeTextureLocation = location;\n      this._gl.activeTexture(this._gl.TEXTURE0 + location);\n    }\n  }\n  _initSource(source) {\n    const gl = this._gl;\n    const glTexture = new GlTexture.GlTexture(gl.createTexture());\n    glTexture.type = this._mapFormatToType[source.format];\n    glTexture.internalFormat = this._mapFormatToInternalFormat[source.format];\n    glTexture.format = this._mapFormatToFormat[source.format];\n    if (source.autoGenerateMipmaps && (this._renderer.context.supports.nonPowOf2mipmaps || source.isPowerOfTwo)) {\n      const biggestDimension = Math.max(source.width, source.height);\n      source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n    }\n    this._glTextures[source.uid] = glTexture;\n    if (!this.managedTextures.includes(source)) {\n      source.on(\"update\", this.onSourceUpdate, this);\n      source.on(\"resize\", this.onSourceUpdate, this);\n      source.on(\"styleChange\", this.onStyleChange, this);\n      source.on(\"destroy\", this.onSourceDestroy, this);\n      source.on(\"unload\", this.onSourceUnload, this);\n      source.on(\"updateMipmaps\", this.onUpdateMipmaps, this);\n      this.managedTextures.push(source);\n    }\n    this.onSourceUpdate(source);\n    this.updateStyle(source, false);\n    return glTexture;\n  }\n  onStyleChange(source) {\n    this.updateStyle(source, false);\n  }\n  updateStyle(source, firstCreation) {\n    const gl = this._gl;\n    const glTexture = this.getGlSource(source);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n    this._boundTextures[this._activeTextureLocation] = source;\n    applyStyleParams.applyStyleParams(\n      source.style,\n      gl,\n      source.mipLevelCount > 1,\n      this._renderer.context.extensions.anisotropicFiltering,\n      \"texParameteri\",\n      gl.TEXTURE_2D,\n      // will force a clamp to edge if the texture is not a power of two\n      !this._renderer.context.supports.nonPowOf2wrapping && !source.isPowerOfTwo,\n      firstCreation\n    );\n  }\n  onSourceUnload(source) {\n    const glTexture = this._glTextures[source.uid];\n    if (!glTexture)\n      return;\n    this.unbind(source);\n    this._glTextures[source.uid] = null;\n    this._gl.deleteTexture(glTexture.texture);\n  }\n  onSourceUpdate(source) {\n    const gl = this._gl;\n    const glTexture = this.getGlSource(source);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n    this._boundTextures[this._activeTextureLocation] = source;\n    const premultipliedAlpha = source.alphaMode === \"premultiply-alpha-on-upload\";\n    if (this._premultiplyAlpha !== premultipliedAlpha) {\n      this._premultiplyAlpha = premultipliedAlpha;\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n    }\n    if (this._uploads[source.uploadMethodId]) {\n      this._uploads[source.uploadMethodId].upload(source, glTexture, gl, this._renderer.context.webGLVersion);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    }\n    if (source.autoGenerateMipmaps && source.mipLevelCount > 1) {\n      this.onUpdateMipmaps(source, false);\n    }\n  }\n  onUpdateMipmaps(source, bind = true) {\n    if (bind)\n      this.bindSource(source, 0);\n    const glTexture = this.getGlSource(source);\n    this._gl.generateMipmap(glTexture.target);\n  }\n  onSourceDestroy(source) {\n    source.off(\"destroy\", this.onSourceDestroy, this);\n    source.off(\"update\", this.onSourceUpdate, this);\n    source.off(\"resize\", this.onSourceUpdate, this);\n    source.off(\"unload\", this.onSourceUnload, this);\n    source.off(\"styleChange\", this.onStyleChange, this);\n    source.off(\"updateMipmaps\", this.onUpdateMipmaps, this);\n    this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n    this.onSourceUnload(source);\n  }\n  _initSampler(style) {\n    const gl = this._gl;\n    const glSampler = this._gl.createSampler();\n    this._glSamplers[style._resourceId] = glSampler;\n    applyStyleParams.applyStyleParams(\n      style,\n      gl,\n      this._boundTextures[this._activeTextureLocation].mipLevelCount > 1,\n      this._renderer.context.extensions.anisotropicFiltering,\n      \"samplerParameteri\",\n      glSampler,\n      false,\n      true\n    );\n    return this._glSamplers[style._resourceId];\n  }\n  _getGlSampler(sampler) {\n    return this._glSamplers[sampler._resourceId] || this._initSampler(sampler);\n  }\n  getGlSource(source) {\n    return this._glTextures[source.uid] || this._initSource(source);\n  }\n  generateCanvas(texture) {\n    const { pixels, width, height } = this.getPixels(texture);\n    const canvas = adapter.DOMAdapter.get().createCanvas();\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx) {\n      const imageData = ctx.createImageData(width, height);\n      imageData.data.set(pixels);\n      ctx.putImageData(imageData, 0, 0);\n    }\n    return canvas;\n  }\n  getPixels(texture) {\n    const resolution = texture.source.resolution;\n    const frame = texture.frame;\n    const width = Math.max(Math.round(frame.width * resolution), 1);\n    const height = Math.max(Math.round(frame.height * resolution), 1);\n    const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    const renderer = this._renderer;\n    const renderTarget = renderer.renderTarget.getRenderTarget(texture);\n    const glRenterTarget = renderer.renderTarget.getGpuRenderTarget(renderTarget);\n    const gl = renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenterTarget.resolveTargetFramebuffer);\n    gl.readPixels(\n      Math.round(frame.x * resolution),\n      Math.round(frame.y * resolution),\n      width,\n      height,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      pixels\n    );\n    if (false) {\n      unpremultiplyAlpha(pixels);\n    }\n    return { pixels: new Uint8ClampedArray(pixels.buffer), width, height };\n  }\n  destroy() {\n    this.managedTextures.slice().forEach((source) => this.onSourceDestroy(source));\n    this.managedTextures = null;\n    this._renderer = null;\n  }\n  resetState() {\n    this._activeTextureLocation = -1;\n    this._boundTextures.fill(Texture.Texture.EMPTY.source);\n    this._boundSamplers = /* @__PURE__ */ Object.create(null);\n    const gl = this._gl;\n    this._premultiplyAlpha = false;\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this._premultiplyAlpha);\n  }\n}\n/** @ignore */\nGlTextureSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem\n  ],\n  name: \"texture\"\n};\n\nexports.GlTextureSystem = GlTextureSystem;\n//# sourceMappingURL=GlTextureSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adapter","Extensions","Texture","GlTexture","glUploadBufferImageResource","glUploadCompressedTextureResource","glUploadImageResource","glUploadVideoResource","applyStyleParams","mapFormatToGlFormat","mapFormatToGlInternalFormat","mapFormatToGlType","GlTextureSystem","constructor","renderer","managedTextures","_glTextures","Object","create","_glSamplers","_boundTextures","_activeTextureLocation","_boundSamplers","_uploads","image","buffer","video","compressed","_useSeparateSamplers","_premultiplyAlpha","_renderer","renderableGC","addManagedHash","contextChange","gl","_gl","_mapFormatToInternalFormat","context","extensions","_mapFormatToType","_mapFormatToFormat","i","bind","EMPTY","initSource","source","texture","location","bindSource","_bindSampler","style","_touched","textureGC","count","_activateLocation","glTexture","getGlSource","bindTexture","target","sampler","_getGlSampler","bindSampler","unbind","boundTextures","length","activeTexture","TEXTURE0","_initSource","createTexture","type","format","internalFormat","autoGenerateMipmaps","supports","nonPowOf2mipmaps","isPowerOfTwo","mipLevelCount","Math","floor","log2","max","biggestDimension","width","height","uid","includes","on","onSourceUpdate","onStyleChange","onSourceDestroy","onSourceUnload","onUpdateMipmaps","push","updateStyle","firstCreation","TEXTURE_2D","anisotropicFiltering","nonPowOf2wrapping","deleteTexture","premultipliedAlpha","alphaMode","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","uploadMethodId","upload","webGLVersion","texImage2D","RGBA","pixelWidth","pixelHeight","UNSIGNED_BYTE","generateMipmap","off","splice","indexOf","_initSampler","glSampler","createSampler","_resourceId","generateCanvas","pixels","getPixels","canvas","DOMAdapter","get","createCanvas","ctx","getContext","imageData","createImageData","data","set","putImageData","resolution","frame","round","Uint8Array","BYTES_PER_PIXEL","renderTarget","getRenderTarget","glRenterTarget","getGpuRenderTarget","bindFramebuffer","FRAMEBUFFER","resolveTargetFramebuffer","readPixels","x","y","Uint8ClampedArray","destroy","slice","forEach","resetState","fill","extension","ExtensionType","WebGLSystem","name"]
}
