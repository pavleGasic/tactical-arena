{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$assets$loader$Loader.js",
"lineCount":85,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/assets/loader/Loader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$assets$loader$Loader\"] = function(global,require,module,exports) {\n'use strict';\n\nvar warn = require('../../utils/logging/warn.js');\nvar path = require('../../utils/path.js');\nvar convertToList = require('../utils/convertToList.js');\nvar isSingleItem = require('../utils/isSingleItem.js');\n\n\"use strict\";\nclass Loader {\n  constructor() {\n    this._parsers = [];\n    this._parsersValidated = false;\n    /**\n     * All loader parsers registered\n     * @type {assets.LoaderParser[]}\n     */\n    this.parsers = new Proxy(this._parsers, {\n      set: (target, key, value) => {\n        this._parsersValidated = false;\n        target[key] = value;\n        return true;\n      }\n    });\n    /** Cache loading promises that ae currently active */\n    this.promiseCache = {};\n  }\n  /** function used for testing */\n  reset() {\n    this._parsersValidated = false;\n    this.promiseCache = {};\n  }\n  /**\n   * Used internally to generate a promise for the asset to be loaded.\n   * @param url - The URL to be loaded\n   * @param data - any custom additional information relevant to the asset being loaded\n   * @returns - a promise that will resolve to an Asset for example a Texture of a JSON object\n   */\n  _getLoadPromiseAndParser(url, data) {\n    const result = {\n      promise: null,\n      parser: null\n    };\n    result.promise = (async () => {\n      let asset = null;\n      let parser = null;\n      if (data.loadParser) {\n        parser = this._parserHash[data.loadParser];\n        if (!parser) {\n          warn.warn(`[Assets] specified load parser \"${data.loadParser}\" not found while loading ${url}`);\n        }\n      }\n      if (!parser) {\n        for (let i = 0; i < this.parsers.length; i++) {\n          const parserX = this.parsers[i];\n          if (parserX.load && parserX.test?.(url, data, this)) {\n            parser = parserX;\n            break;\n          }\n        }\n        if (!parser) {\n          warn.warn(`[Assets] ${url} could not be loaded as we don't know how to parse it, ensure the correct parser has been added`);\n          return null;\n        }\n      }\n      asset = await parser.load(url, data, this);\n      result.parser = parser;\n      for (let i = 0; i < this.parsers.length; i++) {\n        const parser2 = this.parsers[i];\n        if (parser2.parse) {\n          if (parser2.parse && await parser2.testParse?.(asset, data, this)) {\n            asset = await parser2.parse(asset, data, this) || asset;\n            result.parser = parser2;\n          }\n        }\n      }\n      return asset;\n    })();\n    return result;\n  }\n  async load(assetsToLoadIn, onProgress) {\n    if (!this._parsersValidated) {\n      this._validateParsers();\n    }\n    let count = 0;\n    const assets = {};\n    const singleAsset = isSingleItem.isSingleItem(assetsToLoadIn);\n    const assetsToLoad = convertToList.convertToList(assetsToLoadIn, (item) => ({\n      alias: [item],\n      src: item,\n      data: {}\n    }));\n    const total = assetsToLoad.length;\n    const promises = assetsToLoad.map(async (asset) => {\n      const url = path.path.toAbsolute(asset.src);\n      if (!assets[asset.src]) {\n        try {\n          if (!this.promiseCache[url]) {\n            this.promiseCache[url] = this._getLoadPromiseAndParser(url, asset);\n          }\n          assets[asset.src] = await this.promiseCache[url].promise;\n          if (onProgress)\n            onProgress(++count / total);\n        } catch (e) {\n          delete this.promiseCache[url];\n          delete assets[asset.src];\n          throw new Error(`[Loader.load] Failed to load ${url}.\n${e}`);\n        }\n      }\n    });\n    await Promise.all(promises);\n    return singleAsset ? assets[assetsToLoad[0].src] : assets;\n  }\n  /**\n   * Unloads one or more assets. Any unloaded assets will be destroyed, freeing up memory for your app.\n   * The parser that created the asset, will be the one that unloads it.\n   * @example\n   * // Single asset:\n   * const asset = await Loader.load('cool.png');\n   *\n   * await Loader.unload('cool.png');\n   *\n   * console.log(asset.destroyed); // true\n   * @param assetsToUnloadIn - urls that you want to unload, or a single one!\n   */\n  async unload(assetsToUnloadIn) {\n    const assetsToUnload = convertToList.convertToList(assetsToUnloadIn, (item) => ({\n      alias: [item],\n      src: item\n    }));\n    const promises = assetsToUnload.map(async (asset) => {\n      const url = path.path.toAbsolute(asset.src);\n      const loadPromise = this.promiseCache[url];\n      if (loadPromise) {\n        const loadedAsset = await loadPromise.promise;\n        delete this.promiseCache[url];\n        await loadPromise.parser?.unload?.(loadedAsset, asset, this);\n      }\n    });\n    await Promise.all(promises);\n  }\n  /** validates our parsers, right now it only checks for name conflicts but we can add more here as required! */\n  _validateParsers() {\n    this._parsersValidated = true;\n    this._parserHash = this._parsers.filter((parser) => parser.name).reduce((hash, parser) => {\n      if (!parser.name) {\n        warn.warn(`[Assets] loadParser should have a name`);\n      } else if (hash[parser.name]) {\n        warn.warn(`[Assets] loadParser name conflict \"${parser.name}\"`);\n      }\n      return { ...hash, [parser.name]: parser };\n    }, {});\n  }\n}\n\nexports.Loader = Loader;\n//# sourceMappingURL=Loader.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","warn","path","convertToList","isSingleItem","Loader","constructor","_parsers","_parsersValidated","parsers","Proxy","set","target","key","value","promiseCache","reset","_getLoadPromiseAndParser","url","data","result","promise","parser","asset","loadParser","_parserHash","i","length","parserX","load","test","parser2","parse","testParse","assetsToLoadIn","onProgress","_validateParsers","count","assets","singleAsset","assetsToLoad","item","alias","src","total","promises","map","toAbsolute","e","Error","Promise","all","unload","assetsToUnloadIn","assetsToUnload","loadPromise","loadedAsset","filter","name","reduce","hash"]
}
