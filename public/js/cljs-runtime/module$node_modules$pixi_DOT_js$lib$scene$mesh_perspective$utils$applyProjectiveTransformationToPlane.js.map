{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$utils$applyProjectiveTransformationToPlane.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,CAAA,qGAAA,GAA0H,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAiClKA,SAAQC,CAAAA,oCAAR,GA7BAA,QAA6C,CAACC,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,oBAA1B,CAAgD;AAC3F,UAAMC,SAASF,QAASG,CAAAA,OAAT,CAAiB,CAAjB,CAAf,EACMC,WAAWF,MAAOG,CAAAA,IADxB,EAEM,CAAEC,SAAF,EAAaC,SAAb,CAAA,GAA2BP,QAFjC;AAGcF,SAARU,IAAiBF,SAAjBE,GAA6B,CAA7BA;AACQT,UAARU,IAAkBF,SAAlBE,GAA8B,CAA9BA;AACFC,YAAAA,GAAQ,CAARA;AACJ,UAAMC,MAAMV,oBAAA,CAAqB,CAArB,CAAZ,EACMW,MAAMX,oBAAA,CAAqB,CAArB,CADZ,EAEMY,MAAMZ,oBAAA,CAAqB,CAArB,CAFZ,EAGMa,MAAMb,oBAAA,CAAqB,CAArB,CAHZ,EAIMc,MAAMd,oBAAA,CAAqB,CAArB,CAJZ,EAKMe,MAAMf,oBAAA,CAAqB,CAArB,CALZ,EAMMgB,MAAMhB,oBAAA,CAAqB,CAArB,CANZ,EAOMiB,MAAMjB,oBAAA,CAAqB,CAArB,CAPZ;AAQMkB,wBAAAA,GAAMlB,oBAAA,CAAqB,CAArB,CAANkB;AACN,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBhB,QAASiB,CAAAA,MAA7B,EAAqCD,CAArC,IAA0C,CAA1C,CAA6C;AAC3C,YAAME,IAAIZ,QAAJY,GAAYhB,SAAZgB,GAAwBd,KAA9B,EACMe,KAAKb,QAALa,GAAajB,SAAbiB,GAAyB,CAAzBA,IAA8Bd,MADpC,EAGMe,OAAOV,GAAPU,GAAaF,CAAbE,GAAiBT,GAAjBS,GAAuBD,CAAvBC,GAA2BR,GAHjC,EAIMS,IAAIR,GAAJQ,GAAUH,CAAVG,GAAcP,GAAdO,GAAoBF,CAApBE,GAAwBN,oBAJ9B;AAKAf,cAAA,CAASgB,CAAT,CAAA,IAHaT,GAGb,GAHmBW,CAGnB,GAHuBV,GAGvB,GAH6BW,CAG7B,GAHiCV,GAGjC,IAAqBY,CAArB;AACArB,cAAA,CAASgB,CAAT,GAAa,CAAb,CAAA,GAAkBI,IAAlB,GAAyBC,CAAzB;AACAf,cAAA,EAAA;AAR2C;AAU7CR,UAAOwB,CAAAA,MAAP,EAAA;AA1B2F,GA6B7F;AAjCkK,CAAlK;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh-perspective/utils/applyProjectiveTransformationToPlane.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$utils$applyProjectiveTransformationToPlane\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nfunction applyProjectiveTransformationToPlane(width, height, geometry, transformationMatrix) {\n  const buffer = geometry.buffers[0];\n  const vertices = buffer.data;\n  const { verticesX, verticesY } = geometry;\n  const sizeX = width / (verticesX - 1);\n  const sizeY = height / (verticesY - 1);\n  let index = 0;\n  const a00 = transformationMatrix[0];\n  const a01 = transformationMatrix[1];\n  const a02 = transformationMatrix[2];\n  const a10 = transformationMatrix[3];\n  const a11 = transformationMatrix[4];\n  const a12 = transformationMatrix[5];\n  const a20 = transformationMatrix[6];\n  const a21 = transformationMatrix[7];\n  const a22 = transformationMatrix[8];\n  for (let i = 0; i < vertices.length; i += 2) {\n    const x = index % verticesX * sizeX;\n    const y = (index / verticesX | 0) * sizeY;\n    const newX = a00 * x + a01 * y + a02;\n    const newY = a10 * x + a11 * y + a12;\n    const w = a20 * x + a21 * y + a22;\n    vertices[i] = newX / w;\n    vertices[i + 1] = newY / w;\n    index++;\n  }\n  buffer.update();\n}\n\nexports.applyProjectiveTransformationToPlane = applyProjectiveTransformationToPlane;\n//# sourceMappingURL=applyProjectiveTransformationToPlane.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","applyProjectiveTransformationToPlane","width","height","geometry","transformationMatrix","buffer","buffers","vertices","data","verticesX","verticesY","sizeX","sizeY","index","a00","a01","a02","a10","a11","a12","a20","a21","a22","i","length","x","y","newY","w","update"]
}
