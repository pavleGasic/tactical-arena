{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$shared$detectCompressed.js",
"lineCount":24,
"mappings":"AAAAA,cAAA,CAAA,+EAAA,GAAoG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAmC5IC,UAASA,6CAA4C,CAACC,OAAD,CAAU;AAC7D,UAAMC,aAAa,CAAC,OAAD,CAAnB,EACMC,UAAU,EADhB;AAEAF,WAAQG,CAAAA,OAAR,CAAiBC,MAAD,IAAY;AAE1B,OADMC,MACN,GADkBD,MAAOE,CAAAA,KAAP,CAAa,GAAb,CAAA,CAAkB,CAAlB,CAClB,KAAiB,CAACJ,OAAA,CAAQG,MAAR,CAAlB,KACEH,OAAA,CAAQG,MAAR,CACA,GADqB,CAAA,CACrB,EAAAJ,UAAWM,CAAAA,IAAX,CAAgBF,MAAhB,CAFF;AAF0B,KAA5B,CAAA;AAOAJ,cAAWO,CAAAA,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,CAAA,IAAU;AAClBC,OAAAA,GAASC,2BAA4BC,CAAAA,YAAaC,CAAAA,OAAzC,CAAiDL,CAAjD,CAATE;AACAI,OAAAA,GAASH,2BAA4BC,CAAAA,YAAaC,CAAAA,OAAzC,CAAiDJ,CAAjD,CAATK;AACN,aAAe,CAAC,CAAhB,KAAIJ,CAAJ,GACS,CADT,GAGe,CAAC,CAAhB,KAAII,CAAJ,GACS,CAAC,CADV,GAGOJ,CAHP,GAGgBI,CANhB;AAHwB,KAA1B,CAAA;AAWA,WAAOd,UAAP;AArB6D;AAhC3De,QAAAA,GAAapB,OAAA,CAAQ,2DAAR,CAAboB;AACJ,MAAIC,uCAAuCrB,OAAA,CAAQ,mHAAR,CAA3C,EACIsB,mBAAmBtB,OAAA,CAAQ,oEAAR,CADvB,EAEIuB,oBAAoBvB,OAAA,CAAQ,qEAAR,CAFxB,EAGIgB,8BAA8BhB,OAAA,CAAQ,4FAAR,CAHlC;AAKA,cAAA;AACA,MAAIwB,2BAAJ;AAiDAtB,SAAQuB,CAAAA,gBAAR,GAhDyBA,CACvBhB,UAAW,CACTiB,KAAMN,MAAWO,CAAAA,aAAcC,CAAAA,eADtB,EAETC,SAAU,CAFD,CADYJ,EAKvBK,KAAMA,KAAM,EAANA,IACA,MAAMP,iBAAkBA,CAAAA,iBAAlB,EAEV,IAAID,gBAAiBA,CAAAA,gBAAjB,EAAJ,GACS,CAAA,CADT,GAEO,CAAA,CAVcG,EAYvBM,IAAKA,KAAO3B,QAAP2B,IAAmB;AACtB,UAAMC,oCAAoC,MAAMX,oCAAqCA,CAAAA,oCAArC,EAAhD;AACAG,+BAAA,GAA8BrB,4CAAA,CAA6C6B,iCAA7C,CAA9B;AACA,WAAO,CAAC,GAAGR,2BAAJ,EAAiC,GAAGpB,OAApC,CAAP;AAHsB,GAZDqB,EAiBvBQ,OAAQA,KAAO7B,QAAP6B,IACFT,2BAAJ,GACSpB,OAAQ8B,CAAAA,MAAR,CAAgBC,CAAD,IAAO,EAAEA,CAAF,IAAOX,2BAAP,CAAtB,CADT,GAGOpB,OArBcqB,CAgDzB;AA3D4I,CAA5I;;",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/shared/detectCompressed.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$shared$detectCompressed\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../extensions/Extensions.js');\nvar getSupportedCompressedTextureFormats = require('../../rendering/renderers/shared/texture/utils/getSupportedCompressedTextureFormats.js');\nvar isWebGLSupported = require('../../utils/browser/isWebGLSupported.js');\nvar isWebGPUSupported = require('../../utils/browser/isWebGPUSupported.js');\nvar resolveCompressedTextureUrl = require('./resolveCompressedTextureUrl.js');\n\n\"use strict\";\nlet compressedTextureExtensions;\nconst detectCompressed = {\n  extension: {\n    type: Extensions.ExtensionType.DetectionParser,\n    priority: 2\n  },\n  test: async () => {\n    if (await isWebGPUSupported.isWebGPUSupported())\n      return true;\n    if (isWebGLSupported.isWebGLSupported())\n      return true;\n    return false;\n  },\n  add: async (formats) => {\n    const supportedCompressedTextureFormats = await getSupportedCompressedTextureFormats.getSupportedCompressedTextureFormats();\n    compressedTextureExtensions = extractExtensionsForCompressedTextureFormats(supportedCompressedTextureFormats);\n    return [...compressedTextureExtensions, ...formats];\n  },\n  remove: async (formats) => {\n    if (compressedTextureExtensions) {\n      return formats.filter((f) => !(f in compressedTextureExtensions));\n    }\n    return formats;\n  }\n};\nfunction extractExtensionsForCompressedTextureFormats(formats) {\n  const extensions = [\"basis\"];\n  const dupeMap = {};\n  formats.forEach((format) => {\n    const extension = format.split(\"-\")[0];\n    if (extension && !dupeMap[extension]) {\n      dupeMap[extension] = true;\n      extensions.push(extension);\n    }\n  });\n  extensions.sort((a, b) => {\n    const aIndex = resolveCompressedTextureUrl.validFormats.indexOf(a);\n    const bIndex = resolveCompressedTextureUrl.validFormats.indexOf(b);\n    if (aIndex === -1) {\n      return 1;\n    }\n    if (bIndex === -1) {\n      return -1;\n    }\n    return aIndex - bIndex;\n  });\n  return extensions;\n}\n\nexports.detectCompressed = detectCompressed;\n//# sourceMappingURL=detectCompressed.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extractExtensionsForCompressedTextureFormats","formats","extensions","dupeMap","forEach","format","extension","split","push","sort","a","b","aIndex","resolveCompressedTextureUrl","validFormats","indexOf","bIndex","Extensions","getSupportedCompressedTextureFormats","isWebGLSupported","isWebGPUSupported","compressedTextureExtensions","detectCompressed","type","ExtensionType","DetectionParser","priority","test","add","supportedCompressedTextureFormats","remove","filter","f"]
}
