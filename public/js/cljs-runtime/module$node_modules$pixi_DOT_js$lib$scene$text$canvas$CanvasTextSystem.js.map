{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text$canvas$CanvasTextSystem.js",
"lineCount":143,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text/canvas/CanvasTextSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text$canvas$CanvasTextSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Color = require('../../../color/Color.js');\nvar Extensions = require('../../../extensions/Extensions.js');\nvar pow2 = require('../../../maths/misc/pow2.js');\nvar CanvasPool = require('../../../rendering/renderers/shared/texture/CanvasPool.js');\nvar TexturePool = require('../../../rendering/renderers/shared/texture/TexturePool.js');\nvar getCanvasBoundingBox = require('../../../utils/canvas/getCanvasBoundingBox.js');\nvar deprecation = require('../../../utils/logging/deprecation.js');\nvar TextStyle = require('../TextStyle.js');\nvar getPo2TextureFromSource = require('../utils/getPo2TextureFromSource.js');\nvar CanvasTextMetrics = require('./CanvasTextMetrics.js');\nvar fontStringFromTextStyle = require('./utils/fontStringFromTextStyle.js');\nvar getCanvasFillStyle = require('./utils/getCanvasFillStyle.js');\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = pow2.nextPow2(width);\n    height = pow2.nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation.deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle.TextStyle)) {\n      options.style = new TextStyle.TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource.getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox.getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.TexturePool.returnTexture(texture);\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      this.returnTexture(activeTexture.texture);\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle.fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle.getCanvasFillStyle(style._fill, context, measured) : null;\n        if (style._stroke?.width) {\n          const padding = style._stroke.width * style._stroke.alignment;\n          context.strokeStyle = getCanvasFillStyle.getCanvasFillStyle(style._stroke, context, measured, padding);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem,\n    Extensions.ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexports.CanvasTextSystem = CanvasTextSystem;\n//# sourceMappingURL=CanvasTextSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","Extensions","pow2","CanvasPool","TexturePool","getCanvasBoundingBox","deprecation","TextStyle","getPo2TextureFromSource","CanvasTextMetrics","fontStringFromTextStyle","getCanvasFillStyle","CanvasTextSystem","constructor","_renderer","_activeTextures","getTextureSize","text","resolution","style","measured","measureText","width","Math","ceil","max","padding","height","nextPow2","getTexture","options","_textKey","texture","canvasAndContext","createTextureAndCanvas","initSource","_source","returnCanvasAndContext","getOptimalCanvasAndContext","canvas","renderTextToCanvas","trim","trimmed","frame","copyFrom","updateUvs","getManagedTexture","_resolution","_autoResolution","textKey","_getKey","_increaseReferenceCount","usageCount","returnTexture","source","resource","uploadMethodId","alphaMode","decreaseReferenceCount","activeTexture","getReferenceCount","context","font","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","resetTransform","scale","textBaseline","_stroke","strokeStyle","lineWidth","miterLimit","lineJoin","join","lineCap","cap","linePositionY","passesCount","dropShadow","i","dsOffsetText","isShadowPass","dsOffsetShadow","fillStyle","shadowOptions","dropShadowAlpha","alpha","shadowColor","shared","setValue","color","setAlpha","toRgbaString","dropShadowDistance","distance","shadowBlur","blur","shadowOffsetX","cos","angle","shadowOffsetY","sin","_fill","alignment","linePositionYShift","fontSize","strokeWidth","i2","length","linePositionX","ascent","align","_drawLetterSpacing","x","y","isStroke","letterSpacing","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","stringArray","graphemeSegmenter","previousWidth","currentChar","currentPosition","textStr","j","currentWidth","destroy","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name"]
}
