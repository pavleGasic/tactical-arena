{
"version":3,
"file":"module$node_modules$$pixi$prepare$lib$CountLimiter.js",
"lineCount":16,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,GAAuE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE/G,OAAMC,aAAN;AAIEC,eAAW,CAACC,gBAAD,CAAmB;AAC5B,UAAKA,CAAAA,gBAAL,GAAwBA,gBAAxB;AAA0C,UAAKC,CAAAA,SAAL,GAAiB,CAAjB;AADd;AAI9BC,cAAU,EAAG;AACX,UAAKD,CAAAA,SAAL,GAAiB,IAAKD,CAAAA,gBAAtB;AADW;AAObG,mBAAe,EAAG;AAChB,aAA0B,CAA1B,GAAO,IAAKF,CAAAA,SAAL,EAAP;AADgB;AAfpB;AAmBAJ,SAAQC,CAAAA,YAAR,GAAuBA,YAAvB;AArB+G,CAA/G;;",
"sources":["node_modules/@pixi/prepare/lib/CountLimiter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$prepare$lib$CountLimiter\"] = function(global,require,module,exports) {\n\"use strict\";\nclass CountLimiter {\n  /**\n   * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n   */\n  constructor(maxItemsPerFrame) {\n    this.maxItemsPerFrame = maxItemsPerFrame, this.itemsLeft = 0;\n  }\n  /** Resets any counting properties to start fresh on a new frame. */\n  beginFrame() {\n    this.itemsLeft = this.maxItemsPerFrame;\n  }\n  /**\n   * Checks to see if another item can be uploaded. This should only be called once per item.\n   * @returns If the item is allowed to be uploaded.\n   */\n  allowedToUpload() {\n    return this.itemsLeft-- > 0;\n  }\n}\nexports.CountLimiter = CountLimiter;\n//# sourceMappingURL=CountLimiter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","CountLimiter","constructor","maxItemsPerFrame","itemsLeft","beginFrame","allowedToUpload"]
}
