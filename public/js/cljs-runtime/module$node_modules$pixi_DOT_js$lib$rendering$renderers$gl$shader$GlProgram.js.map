{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlProgram.js",
"lineCount":36,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/shader/GlProgram.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlProgram\"] = function(global,require,module,exports) {\n'use strict';\n\nvar createIdFromString = require('../../shared/utils/createIdFromString.js');\nvar getMaxFragmentPrecision = require('./program/getMaxFragmentPrecision.js');\nvar addProgramDefines = require('./program/preprocessors/addProgramDefines.js');\nvar ensurePrecision = require('./program/preprocessors/ensurePrecision.js');\nvar insertVersion = require('./program/preprocessors/insertVersion.js');\nvar setProgramName = require('./program/preprocessors/setProgramName.js');\nvar stripVersion = require('./program/preprocessors/stripVersion.js');\n\n\"use strict\";\nconst processes = {\n  // strips any version headers..\n  stripVersion: stripVersion.stripVersion,\n  // adds precision string if not already present\n  ensurePrecision: ensurePrecision.ensurePrecision,\n  // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n  addProgramDefines: addProgramDefines.addProgramDefines,\n  // add the program name to the shader\n  setProgramName: setProgramName.setProgramName,\n  // add the version string to the shader header\n  insertVersion: insertVersion.insertVersion\n};\nconst programCache = /* @__PURE__ */ Object.create(null);\nconst _GlProgram = class _GlProgram {\n  /**\n   * Creates a shiny new GlProgram. Used by WebGL renderer.\n   * @param options - The options for the program.\n   */\n  constructor(options) {\n    options = { ..._GlProgram.defaultOptions, ...options };\n    const isES300 = options.fragment.indexOf(\"#version 300 es\") !== -1;\n    const preprocessorOptions = {\n      stripVersion: isES300,\n      ensurePrecision: {\n        requestedFragmentPrecision: options.preferredFragmentPrecision,\n        requestedVertexPrecision: options.preferredVertexPrecision,\n        maxSupportedVertexPrecision: \"highp\",\n        maxSupportedFragmentPrecision: getMaxFragmentPrecision.getMaxFragmentPrecision()\n      },\n      setProgramName: {\n        name: options.name\n      },\n      addProgramDefines: isES300,\n      insertVersion: isES300\n    };\n    let fragment = options.fragment;\n    let vertex = options.vertex;\n    Object.keys(processes).forEach((processKey) => {\n      const processOptions = preprocessorOptions[processKey];\n      fragment = processes[processKey](fragment, processOptions, true);\n      vertex = processes[processKey](vertex, processOptions, false);\n    });\n    this.fragment = fragment;\n    this.vertex = vertex;\n    this.transformFeedbackVaryings = options.transformFeedbackVaryings;\n    this._key = createIdFromString.createIdFromString(`${this.vertex}:${this.fragment}`, \"gl-program\");\n  }\n  /** destroys the program */\n  destroy() {\n    this.fragment = null;\n    this.vertex = null;\n    this._attributeData = null;\n    this._uniformData = null;\n    this._uniformBlockData = null;\n    this.transformFeedbackVaryings = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex}:${options.fragment}`;\n    if (!programCache[key]) {\n      programCache[key] = new _GlProgram(options);\n    }\n    return programCache[key];\n  }\n};\n/** The default options used by the program. */\n_GlProgram.defaultOptions = {\n  preferredVertexPrecision: \"highp\",\n  preferredFragmentPrecision: \"mediump\"\n};\nlet GlProgram = _GlProgram;\n\nexports.GlProgram = GlProgram;\n//# sourceMappingURL=GlProgram.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","createIdFromString","getMaxFragmentPrecision","addProgramDefines","ensurePrecision","insertVersion","setProgramName","stripVersion","processes","programCache","Object","create","constructor","options","_GlProgram","defaultOptions","isES300","fragment","indexOf","preprocessorOptions","requestedFragmentPrecision","preferredFragmentPrecision","requestedVertexPrecision","preferredVertexPrecision","maxSupportedVertexPrecision","maxSupportedFragmentPrecision","name","vertex","keys","forEach","processKey","processOptions","transformFeedbackVaryings","_key","destroy","_uniformBlockData","_uniformData","_attributeData","from","key","GlProgram"]
}
