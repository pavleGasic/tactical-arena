shadow$provide.module$node_modules$$pixi$core$lib$textures$resources$ImageBitmapResource = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index"), settings = require("module$node_modules$$pixi$settings$lib$index");
  global = require("module$node_modules$$pixi$core$lib$textures$resources$BaseImageResource");
  class ImageBitmapResource extends global.BaseImageResource {
    constructor(source, options) {
      options = options || {};
      let baseSource, url, ownsImageBitmap;
      "string" == typeof source ? (baseSource = ImageBitmapResource.EMPTY, url = source, ownsImageBitmap = !0) : (baseSource = source, url = null, ownsImageBitmap = !1);
      super(baseSource);
      this.url = url;
      this.crossOrigin = options.crossOrigin ?? !0;
      this.alphaMode = "number" == typeof options.alphaMode ? options.alphaMode : null;
      this.ownsImageBitmap = options.ownsImageBitmap ?? ownsImageBitmap;
      this._load = null;
      !1 !== options.autoLoad && this.load();
    }
    load() {
      return this._load ? this._load : (this._load = new Promise(async(resolve, reject) => {
        if (null === this.url) {
          resolve(this);
        } else {
          try {
            const response = await settings.settings.ADAPTER.fetch(this.url, {mode:this.crossOrigin ? "cors" : "no-cors"});
            if (!this.destroyed) {
              var imageBlob = await response.blob();
              if (!this.destroyed) {
                var imageBitmap = await createImageBitmap(imageBlob, {premultiplyAlpha:null === this.alphaMode || this.alphaMode === constants.ALPHA_MODES.UNPACK ? "premultiply" : "none"});
                this.destroyed ? imageBitmap.close() : (this.source = imageBitmap, this.update(), resolve(this));
              }
            }
          } catch (e) {
            this.destroyed || (reject(e), this.onError.emit(e));
          }
        }
      }), this._load);
    }
    upload(renderer, baseTexture, glTexture) {
      return this.source instanceof ImageBitmap ? ("number" == typeof this.alphaMode && (baseTexture.alphaMode = this.alphaMode), super.upload(renderer, baseTexture, glTexture)) : (this.load(), !1);
    }
    dispose() {
      this.ownsImageBitmap && this.source instanceof ImageBitmap && this.source.close();
      super.dispose();
      this._load = null;
    }
    static test(source) {
      return !!globalThis.createImageBitmap && "u" > typeof ImageBitmap && ("string" == typeof source || source instanceof ImageBitmap);
    }
    static get EMPTY() {
      return ImageBitmapResource._EMPTY = ImageBitmapResource._EMPTY ?? settings.settings.ADAPTER.createCanvas(0, 0), ImageBitmapResource._EMPTY;
    }
  }
  exports.ImageBitmapResource = ImageBitmapResource;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$textures$resources$ImageBitmapResource.js.map
