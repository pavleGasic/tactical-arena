{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildLine.js",
"lineCount":119,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/buildCommands/buildLine.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildLine\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Point = require('../../../../maths/point/Point.js');\nvar _const = require('../const.js');\nvar getOrientationOfPoints = require('../utils/getOrientationOfPoints.js');\n\n\"use strict\";\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise, verts) {\n  const ix = x - nx * innerWeight;\n  const iy = y - ny * innerWeight;\n  const ox = x + nx * outerWeight;\n  const oy = y + ny * outerWeight;\n  let exx;\n  let eyy;\n  if (clockwise) {\n    exx = ny;\n    eyy = -nx;\n  } else {\n    exx = -ny;\n    eyy = nx;\n  }\n  const eix = ix + exx;\n  const eiy = iy + eyy;\n  const eox = ox + exx;\n  const eoy = oy + eyy;\n  verts.push(eix, eiy);\n  verts.push(eox, eoy);\n  return 2;\n}\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n  const cx2p0x = sx - cx;\n  const cy2p0y = sy - cy;\n  let angle0 = Math.atan2(cx2p0x, cy2p0y);\n  let angle1 = Math.atan2(ex - cx, ey - cy);\n  if (clockwise && angle0 < angle1) {\n    angle0 += Math.PI * 2;\n  } else if (!clockwise && angle0 > angle1) {\n    angle1 += Math.PI * 2;\n  }\n  let startAngle = angle0;\n  const angleDiff = angle1 - angle0;\n  const absAngleDiff = Math.abs(angleDiff);\n  const radius = Math.sqrt(cx2p0x * cx2p0x + cy2p0y * cy2p0y);\n  const segCount = (15 * absAngleDiff * Math.sqrt(radius) / Math.PI >> 0) + 1;\n  const angleInc = angleDiff / segCount;\n  startAngle += angleInc;\n  if (clockwise) {\n    verts.push(cx, cy);\n    verts.push(sx, sy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(cx, cy);\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n    }\n    verts.push(cx, cy);\n    verts.push(ex, ey);\n  } else {\n    verts.push(sx, sy);\n    verts.push(cx, cy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n      verts.push(cx, cy);\n    }\n    verts.push(ex, ey);\n    verts.push(cx, cy);\n  }\n  return segCount * 2;\n}\nfunction buildLine(points, lineStyle, flipAlignment, closed, vertices, indices) {\n  const eps = _const.closePointEps;\n  if (points.length === 0) {\n    return;\n  }\n  const style = lineStyle;\n  let alignment = style.alignment;\n  if (lineStyle.alignment !== 0.5) {\n    let orientation = getOrientationOfPoints.getOrientationOfPoints(points);\n    if (flipAlignment)\n      orientation *= -1;\n    alignment = (alignment - 0.5) * orientation + 0.5;\n  }\n  const firstPoint = new Point.Point(points[0], points[1]);\n  const lastPoint = new Point.Point(points[points.length - 2], points[points.length - 1]);\n  const closedShape = closed;\n  const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps && Math.abs(firstPoint.y - lastPoint.y) < eps;\n  if (closedShape) {\n    points = points.slice();\n    if (closedPath) {\n      points.pop();\n      points.pop();\n      lastPoint.set(points[points.length - 2], points[points.length - 1]);\n    }\n    const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n    const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n  const verts = vertices;\n  const length = points.length / 2;\n  let indexCount = points.length;\n  const indexStart = verts.length / 2;\n  const width = style.width / 2;\n  const widthSquared = width * width;\n  const miterLimitSquared = style.miterLimit * style.miterLimit;\n  let x0 = points[0];\n  let y0 = points[1];\n  let x1 = points[2];\n  let y1 = points[3];\n  let x2 = 0;\n  let y2 = 0;\n  let perpX = -(y0 - y1);\n  let perpY = x0 - x1;\n  let perp1x = 0;\n  let perp1y = 0;\n  let dist = Math.sqrt(perpX * perpX + perpY * perpY);\n  perpX /= dist;\n  perpY /= dist;\n  perpX *= width;\n  perpY *= width;\n  const ratio = alignment;\n  const innerWeight = (1 - ratio) * 2;\n  const outerWeight = ratio * 2;\n  if (!closedShape) {\n    if (style.cap === \"round\") {\n      indexCount += round(\n        x0 - perpX * (innerWeight - outerWeight) * 0.5,\n        y0 - perpY * (innerWeight - outerWeight) * 0.5,\n        x0 - perpX * innerWeight,\n        y0 - perpY * innerWeight,\n        x0 + perpX * outerWeight,\n        y0 + perpY * outerWeight,\n        verts,\n        true\n      ) + 2;\n    } else if (style.cap === \"square\") {\n      indexCount += square(x0, y0, perpX, perpY, innerWeight, outerWeight, true, verts);\n    }\n  }\n  verts.push(\n    x0 - perpX * innerWeight,\n    y0 - perpY * innerWeight\n  );\n  verts.push(\n    x0 + perpX * outerWeight,\n    y0 + perpY * outerWeight\n  );\n  for (let i = 1; i < length - 1; ++i) {\n    x0 = points[(i - 1) * 2];\n    y0 = points[(i - 1) * 2 + 1];\n    x1 = points[i * 2];\n    y1 = points[i * 2 + 1];\n    x2 = points[(i + 1) * 2];\n    y2 = points[(i + 1) * 2 + 1];\n    perpX = -(y0 - y1);\n    perpY = x0 - x1;\n    dist = Math.sqrt(perpX * perpX + perpY * perpY);\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n    perp1x = -(y1 - y2);\n    perp1y = x1 - x2;\n    dist = Math.sqrt(perp1x * perp1x + perp1y * perp1y);\n    perp1x /= dist;\n    perp1y /= dist;\n    perp1x *= width;\n    perp1y *= width;\n    const dx0 = x1 - x0;\n    const dy0 = y0 - y1;\n    const dx1 = x1 - x2;\n    const dy1 = y2 - y1;\n    const dot = dx0 * dx1 + dy0 * dy1;\n    const cross = dy0 * dx1 - dy1 * dx0;\n    const clockwise = cross < 0;\n    if (Math.abs(cross) < 1e-3 * Math.abs(dot)) {\n      verts.push(\n        x1 - perpX * innerWeight,\n        y1 - perpY * innerWeight\n      );\n      verts.push(\n        x1 + perpX * outerWeight,\n        y1 + perpY * outerWeight\n      );\n      if (dot >= 0) {\n        if (style.join === \"round\") {\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 4;\n        } else {\n          indexCount += 2;\n        }\n        verts.push(\n          x1 - perp1x * outerWeight,\n          y1 - perp1y * outerWeight\n        );\n        verts.push(\n          x1 + perp1x * innerWeight,\n          y1 + perp1y * innerWeight\n        );\n      }\n      continue;\n    }\n    const c1 = (-perpX + x0) * (-perpY + y1) - (-perpX + x1) * (-perpY + y0);\n    const c2 = (-perp1x + x2) * (-perp1y + y1) - (-perp1x + x1) * (-perp1y + y2);\n    const px = (dx0 * c2 - dx1 * c1) / cross;\n    const py = (dy1 * c1 - dy0 * c2) / cross;\n    const pDist = (px - x1) * (px - x1) + (py - y1) * (py - y1);\n    const imx = x1 + (px - x1) * innerWeight;\n    const imy = y1 + (py - y1) * innerWeight;\n    const omx = x1 - (px - x1) * outerWeight;\n    const omy = y1 - (py - y1) * outerWeight;\n    const smallerInsideSegmentSq = Math.min(dx0 * dx0 + dy0 * dy0, dx1 * dx1 + dy1 * dy1);\n    const insideWeight = clockwise ? innerWeight : outerWeight;\n    const smallerInsideDiagonalSq = smallerInsideSegmentSq + insideWeight * insideWeight * widthSquared;\n    const insideMiterOk = pDist <= smallerInsideDiagonalSq;\n    if (insideMiterOk) {\n      if (style.join === \"bevel\" || pDist / widthSquared > miterLimitSquared) {\n        if (clockwise) {\n          verts.push(imx, imy);\n          verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n          verts.push(imx, imy);\n          verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n        } else {\n          verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n          verts.push(omx, omy);\n          verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n          verts.push(omx, omy);\n        }\n        indexCount += 2;\n      } else if (style.join === \"round\") {\n        if (clockwise) {\n          verts.push(imx, imy);\n          verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n          indexCount += round(\n            x1,\n            y1,\n            x1 + perpX * outerWeight,\n            y1 + perpY * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            true\n          ) + 4;\n          verts.push(imx, imy);\n          verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n        } else {\n          verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n          verts.push(omx, omy);\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 4;\n          verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n          verts.push(omx, omy);\n        }\n      } else {\n        verts.push(imx, imy);\n        verts.push(omx, omy);\n      }\n    } else {\n      verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n      verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n      if (style.join === \"round\") {\n        if (clockwise) {\n          indexCount += round(\n            x1,\n            y1,\n            x1 + perpX * outerWeight,\n            y1 + perpY * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            true\n          ) + 2;\n        } else {\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 2;\n        }\n      } else if (style.join === \"miter\" && pDist / widthSquared <= miterLimitSquared) {\n        if (clockwise) {\n          verts.push(omx, omy);\n          verts.push(omx, omy);\n        } else {\n          verts.push(imx, imy);\n          verts.push(imx, imy);\n        }\n        indexCount += 2;\n      }\n      verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n      verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n      indexCount += 2;\n    }\n  }\n  x0 = points[(length - 2) * 2];\n  y0 = points[(length - 2) * 2 + 1];\n  x1 = points[(length - 1) * 2];\n  y1 = points[(length - 1) * 2 + 1];\n  perpX = -(y0 - y1);\n  perpY = x0 - x1;\n  dist = Math.sqrt(perpX * perpX + perpY * perpY);\n  perpX /= dist;\n  perpY /= dist;\n  perpX *= width;\n  perpY *= width;\n  verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n  verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n  if (!closedShape) {\n    if (style.cap === \"round\") {\n      indexCount += round(\n        x1 - perpX * (innerWeight - outerWeight) * 0.5,\n        y1 - perpY * (innerWeight - outerWeight) * 0.5,\n        x1 - perpX * innerWeight,\n        y1 - perpY * innerWeight,\n        x1 + perpX * outerWeight,\n        y1 + perpY * outerWeight,\n        verts,\n        false\n      ) + 2;\n    } else if (style.cap === \"square\") {\n      indexCount += square(x1, y1, perpX, perpY, innerWeight, outerWeight, false, verts);\n    }\n  }\n  const eps2 = _const.curveEps * _const.curveEps;\n  for (let i = indexStart; i < indexCount + indexStart - 2; ++i) {\n    x0 = verts[i * 2];\n    y0 = verts[i * 2 + 1];\n    x1 = verts[(i + 1) * 2];\n    y1 = verts[(i + 1) * 2 + 1];\n    x2 = verts[(i + 2) * 2];\n    y2 = verts[(i + 2) * 2 + 1];\n    if (Math.abs(x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) < eps2) {\n      continue;\n    }\n    indices.push(i, i + 1, i + 2);\n  }\n}\n\nexports.buildLine = buildLine;\n//# sourceMappingURL=buildLine.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","square","x","y","nx","ny","innerWeight","outerWeight","clockwise","verts","eyy","exx","eox","eoy","push","round","cx","cy","sx","sy","ex","ey","cx2p0x","cy2p0y","angle0","Math","atan2","angle1","PI","angleDiff","radius","sqrt","segCount","abs","absAngleDiff","angleInc","i","angle","startAngle","sin","cos","Point","_const","getOrientationOfPoints","buildLine","points","lineStyle","flipAlignment","closed","vertices","indices","eps","closePointEps","length","alignment","orientation","firstPoint","lastPoint","closedPath","slice","pop","set","midPointX","midPointY","unshift","indexCount","indexStart","width","widthSquared","miterLimitSquared","miterLimit","x0","y0","x1","y1","perpX","perpY","dist","ratio","cap","x2","y2","perp1x","perp1y","dx0","dy0","dx1","dy1","dot","cross","join","c1","c2","px","py","pDist","imx","imy","omx","omy","insideWeight","min","smallerInsideSegmentSq","eps2","curveEps"]
}
