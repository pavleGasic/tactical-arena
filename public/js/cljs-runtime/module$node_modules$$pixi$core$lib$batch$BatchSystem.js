shadow$provide.module$node_modules$$pixi$core$lib$batch$BatchSystem = function(global, require, module, exports) {
  global = require("module$node_modules$$pixi$extensions$lib$index");
  var ObjectRenderer = require("module$node_modules$$pixi$core$lib$batch$ObjectRenderer");
  class BatchSystem {
    constructor(renderer) {
      this.renderer = renderer;
      this.currentRenderer = this.emptyRenderer = new ObjectRenderer.ObjectRenderer(renderer);
    }
    setObjectRenderer(objectRenderer) {
      this.currentRenderer !== objectRenderer && (this.currentRenderer.stop(), this.currentRenderer = objectRenderer, this.currentRenderer.start());
    }
    flush() {
      this.setObjectRenderer(this.emptyRenderer);
    }
    reset() {
      this.setObjectRenderer(this.emptyRenderer);
    }
    copyBoundTextures(arr, maxTextures) {
      const {boundTextures} = this.renderer.texture;
      for (--maxTextures; 0 <= maxTextures; --maxTextures) {
        arr[maxTextures] = boundTextures[maxTextures] || null, arr[maxTextures] && (arr[maxTextures]._batchLocation = maxTextures);
      }
    }
    boundArray(texArray, boundTextures, batchId, maxTextures) {
      const {elements, ids, count} = texArray;
      texArray = 0;
      for (let i = 0; i < count; i++) {
        const tex = elements[i];
        var loc = tex._batchLocation;
        if (0 <= loc && loc < maxTextures && boundTextures[loc] === tex) {
          ids[i] = loc;
        } else {
          for (; texArray < maxTextures;) {
            if ((loc = boundTextures[texArray]) && loc._batchEnabled === batchId && loc._batchLocation === texArray) {
              texArray++;
            } else {
              ids[i] = texArray;
              tex._batchLocation = texArray;
              boundTextures[texArray] = tex;
              break;
            }
          }
        }
      }
    }
    destroy() {
      this.renderer = null;
    }
  }
  BatchSystem.extension = {type:global.ExtensionType.RendererSystem, name:"batch"};
  global.extensions.add(BatchSystem);
  exports.BatchSystem = BatchSystem;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$batch$BatchSystem.js.map
