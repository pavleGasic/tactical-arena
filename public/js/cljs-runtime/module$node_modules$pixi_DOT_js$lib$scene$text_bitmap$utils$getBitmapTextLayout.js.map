{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$utils$getBitmapTextLayout.js",
"lineCount":78,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/utils/getBitmapTextLayout.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$utils$getBitmapTextLayout\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nfunction getBitmapTextLayout(chars, style, font, trimEnd) {\n  const layoutData = {\n    width: 0,\n    height: 0,\n    offsetY: 0,\n    scale: style.fontSize / font.baseMeasurementFontSize,\n    lines: [{\n      width: 0,\n      charPositions: [],\n      spaceWidth: 0,\n      spacesIndex: [],\n      chars: []\n    }]\n  };\n  layoutData.offsetY = font.baseLineOffset;\n  let currentLine = layoutData.lines[0];\n  let previousChar = null;\n  let firstWord = true;\n  const currentWord = {\n    spaceWord: false,\n    width: 0,\n    start: 0,\n    index: 0,\n    // use index to not modify the array as we use it a lot!\n    positions: [],\n    chars: []\n  };\n  const nextWord = (word) => {\n    const start = currentLine.width;\n    for (let j = 0; j < currentWord.index; j++) {\n      const position = word.positions[j];\n      currentLine.chars.push(word.chars[j]);\n      currentLine.charPositions.push(position + start);\n    }\n    currentLine.width += word.width;\n    firstWord = false;\n    currentWord.width = 0;\n    currentWord.index = 0;\n    currentWord.chars.length = 0;\n  };\n  const nextLine = () => {\n    let index = currentLine.chars.length - 1;\n    if (trimEnd) {\n      let lastChar = currentLine.chars[index];\n      while (lastChar === \" \") {\n        currentLine.width -= font.chars[lastChar].xAdvance;\n        lastChar = currentLine.chars[--index];\n      }\n    }\n    layoutData.width = Math.max(layoutData.width, currentLine.width);\n    currentLine = {\n      width: 0,\n      charPositions: [],\n      chars: [],\n      spaceWidth: 0,\n      spacesIndex: []\n    };\n    firstWord = true;\n    layoutData.lines.push(currentLine);\n    layoutData.height += font.lineHeight;\n  };\n  const scale = font.baseMeasurementFontSize / style.fontSize;\n  const adjustedLetterSpacing = style.letterSpacing * scale;\n  const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n  for (let i = 0; i < chars.length + 1; i++) {\n    let char;\n    const isEnd = i === chars.length;\n    if (!isEnd) {\n      char = chars[i];\n    }\n    const charData = font.chars[char] || font.chars[\" \"];\n    const isSpace = /(?:\\s)/.test(char);\n    const isWordBreak = isSpace || char === \"\\r\" || char === \"\\n\" || isEnd;\n    if (isWordBreak) {\n      const addWordToNextLine = !firstWord && style.wordWrap && currentLine.width + currentWord.width - adjustedLetterSpacing > adjustedWordWrapWidth;\n      if (addWordToNextLine) {\n        nextLine();\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      } else {\n        currentWord.start = currentLine.width;\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        if (currentLine.width !== 0) {\n          nextLine();\n        }\n      } else if (!isEnd) {\n        const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n        currentLine.width += spaceWidth;\n        currentLine.spaceWidth = spaceWidth;\n        currentLine.spacesIndex.push(currentLine.charPositions.length);\n        currentLine.chars.push(char);\n      }\n    } else {\n      const kerning = charData.kerning[previousChar] || 0;\n      const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n      currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n      currentWord.chars.push(char);\n      currentWord.width += nextCharWidth;\n    }\n    previousChar = char;\n  }\n  nextLine();\n  if (style.align === \"center\") {\n    alignCenter(layoutData);\n  } else if (style.align === \"right\") {\n    alignRight(layoutData);\n  } else if (style.align === \"justify\") {\n    alignJustify(layoutData);\n  }\n  return layoutData;\n}\nfunction alignCenter(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width / 2 - line.width / 2;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignRight(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width - line.width;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignJustify(measurementData) {\n  const width = measurementData.width;\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    let indy = 0;\n    let spaceIndex = line.spacesIndex[indy++];\n    let offset = 0;\n    const totalSpaces = line.spacesIndex.length;\n    const newSpaceWidth = (width - line.width) / totalSpaces;\n    const spaceWidth = newSpaceWidth;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      if (j === spaceIndex) {\n        spaceIndex = line.spacesIndex[indy++];\n        offset += spaceWidth;\n      }\n      line.charPositions[j] += offset;\n    }\n  }\n}\n\nexports.getBitmapTextLayout = getBitmapTextLayout;\n//# sourceMappingURL=getBitmapTextLayout.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","alignCenter","measurementData","i","lines","length","line","offset","width","j","charPositions","alignRight","alignJustify","indy","spaceIndex","spacesIndex","spaceWidth","getBitmapTextLayout","chars","style","font","trimEnd","layoutData","height","offsetY","scale","fontSize","baseMeasurementFontSize","baseLineOffset","currentLine","previousChar","firstWord","currentWord","spaceWord","start","index","positions","nextWord","word","position","push","nextLine","lastChar","xAdvance","Math","max","lineHeight","adjustedLetterSpacing","letterSpacing","adjustedWordWrapWidth","wordWrapWidth","char","isEnd","charData","test","isSpace","wordWrap","kerning","nextCharWidth","align"]
}
