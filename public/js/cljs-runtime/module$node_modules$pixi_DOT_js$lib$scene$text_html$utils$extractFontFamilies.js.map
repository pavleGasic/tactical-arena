{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$extractFontFamilies.js",
"lineCount":25,
"mappings":"AAAAA,cAAA,CAAA,6EAAA,GAAkG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAoC1IA,SAAQC,CAAAA,mBAAR,GAhCAA,QAA4B,CAACC,IAAD,EAAOC,KAAP,CAAc;AAMxCC,YAASA,cAAa,CAACC,WAAD,CAAc;AAC7BC,YAAA,CAAOD,WAAP,CAAL,KACEE,YAAaC,CAAAA,IAAb,CAAkBH,WAAlB,CACA,EAAAC,MAAA,CAAOD,WAAP,CAAA,GAAsB,CAAA,CAFxB;AADkC;AALpC,UAAMI,aAAaN,KAAMM,CAAAA,UAAzB,EACMF,eAAe,EADrB,EAEMD,SAAS,EAFf;AAIMI,QAAAA,GAAUR,IAAKS,CAAAA,KAAL,CADFC,yBACE,CAAVF;AAON,QAAIG,KAAMC,CAAAA,OAAN,CAAcL,UAAd,CAAJ;AACE,WAAK,IAAIM,IAAI,CAAb,EAAgBA,CAAhB,GAAoBN,UAAWO,CAAAA,MAA/B,EAAuCD,CAAA,EAAvC;AACEX,qBAAA,CAAcK,UAAA,CAAWM,CAAX,CAAd,CAAA;AADF;AADF;AAKEX,mBAAA,CAAcK,UAAd,CAAA;AALF;AAOIC,QAAJ,IACEA,IAAQO,CAAAA,OAAR,CAAiBN,KAAD,IAAW;AACnBN,WAAAA,GAAcM,KAAMO,CAAAA,KAAN,CAAY,GAAZ,CAAA,CAAiB,CAAjB,CAAoBC,CAAAA,IAApB,EAAdd;AACND,mBAAA,CAAcC,KAAd,CAAA;AAFyB,KAA3B,CADF;AAMA,SAAK,MAAMU,CAAX,GAAgBZ,MAAMiB,CAAAA,SAAtB;AAEEhB,mBAAA,CADoBD,KAAMiB,CAAAA,SAAN,CAAgBL,CAAhB,CAAmBN,CAAAA,UACvC,CAAA;AAFF;AAIA,WAAOF,YAAP;AA7BwC,GAgC1C;AApC0I,CAA1I;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-html/utils/extractFontFamilies.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$extractFontFamilies\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexports.extractFontFamilies = extractFontFamilies;\n//# sourceMappingURL=extractFontFamilies.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extractFontFamilies","text","style","addFontFamily","fontFamily2","dedupe","fontFamilies","push","fontFamily","matches","match","regex","Array","isArray","i","length","forEach","split","trim","tagStyles"]
}
