{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TexturePool.js",
"lineCount":60,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/TexturePool.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TexturePool\"] = function(global,require,module,exports) {\n'use strict';\n\nvar pow2 = require('../../../../maths/misc/pow2.js');\nvar TextureSource = require('./sources/TextureSource.js');\nvar Texture = require('./Texture.js');\n\n\"use strict\";\nlet count = 0;\nclass TexturePoolClass {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n   */\n  constructor(textureOptions) {\n    this._poolKeyHash = /* @__PURE__ */ Object.create(null);\n    this._texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   * @param antialias\n   */\n  createTexture(pixelWidth, pixelHeight, antialias) {\n    const textureSource = new TextureSource.TextureSource({\n      ...this.textureOptions,\n      width: pixelWidth,\n      height: pixelHeight,\n      resolution: 1,\n      antialias,\n      autoGarbageCollect: false\n    });\n    return new Texture.Texture({\n      source: textureSource,\n      label: `texturePool_${count++}`\n    });\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param frameWidth - The minimum width of the render texture.\n   * @param frameHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param antialias\n   * @returns The new render texture.\n   */\n  getOptimalTexture(frameWidth, frameHeight, resolution = 1, antialias) {\n    let po2Width = Math.ceil(frameWidth * resolution - 1e-6);\n    let po2Height = Math.ceil(frameHeight * resolution - 1e-6);\n    po2Width = pow2.nextPow2(po2Width);\n    po2Height = pow2.nextPow2(po2Height);\n    const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n    if (!this._texturePool[key]) {\n      this._texturePool[key] = [];\n    }\n    let texture = this._texturePool[key].pop();\n    if (!texture) {\n      texture = this.createTexture(po2Width, po2Height, antialias);\n    }\n    texture.source._resolution = resolution;\n    texture.source.width = po2Width / resolution;\n    texture.source.height = po2Height / resolution;\n    texture.source.pixelWidth = po2Width;\n    texture.source.pixelHeight = po2Height;\n    texture.frame.x = 0;\n    texture.frame.y = 0;\n    texture.frame.width = frameWidth;\n    texture.frame.height = frameHeight;\n    texture.updateUvs();\n    this._poolKeyHash[texture.uid] = key;\n    return texture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   * @param texture - The texture to check what size it is.\n   * @param antialias - Whether to use antialias.\n   * @returns A texture that is a power of two\n   */\n  getSameSizeTexture(texture, antialias = false) {\n    const source = texture.source;\n    return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = this._poolKeyHash[renderTexture.uid];\n    this._texturePool[key].push(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this._texturePool) {\n        const textures = this._texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this._texturePool = {};\n  }\n}\nconst TexturePool = new TexturePoolClass();\n\nexports.TexturePool = TexturePool;\nexports.TexturePoolClass = TexturePoolClass;\n//# sourceMappingURL=TexturePool.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","pow2","TextureSource","Texture","count","TexturePoolClass","constructor","textureOptions","_poolKeyHash","Object","create","_texturePool","enableFullScreen","createTexture","pixelWidth","pixelHeight","antialias","textureSource","width","height","resolution","autoGarbageCollect","source","label","getOptimalTexture","frameWidth","frameHeight","po2Width","Math","ceil","po2Height","nextPow2","key","texture","pop","_resolution","frame","x","y","updateUvs","uid","getSameSizeTexture","returnTexture","renderTexture","push","clear","destroyTextures","i","textures","j","length","destroy","TexturePool"]
}
