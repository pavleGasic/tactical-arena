{
"version":3,
"file":"module$node_modules$$pixi$text_html$lib$HTMLTextStyle.js",
"lineCount":145,
"mappings":"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",
"sources":["node_modules/@pixi/text-html/lib/HTMLTextStyle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text_html$lib$HTMLTextStyle\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), text = require(\"@pixi/text\");\nconst _HTMLTextStyle = class _HTMLTextStyle2 extends text.TextStyle {\n  constructor() {\n    super(...arguments), this._fonts = [], this._overrides = [], this._stylesheet = \"\", this.fontsDirty = !1;\n  }\n  /**\n   * Convert a TextStyle to HTMLTextStyle\n   * @param originalStyle\n   * @example\n   * import {TextStyle } from 'pixi.js';\n   * import {HTMLTextStyle} from '@pixi/text-html';\n   * const style = new TextStyle();\n   * const htmlStyle = HTMLTextStyle.from(style);\n   */\n  static from(originalStyle) {\n    return new _HTMLTextStyle2(\n      Object.keys(_HTMLTextStyle2.defaultOptions).reduce((obj, prop) => ({ ...obj, [prop]: originalStyle[prop] }), {})\n    );\n  }\n  /** Clear the current font */\n  cleanFonts() {\n    this._fonts.length > 0 && (this._fonts.forEach((font) => {\n      URL.revokeObjectURL(font.src), font.refs--, font.refs === 0 && (font.fontFace && document.fonts.delete(font.fontFace), delete _HTMLTextStyle2.availableFonts[font.originalUrl]);\n    }), this.fontFamily = \"Arial\", this._fonts.length = 0, this.styleID++, this.fontsDirty = !0);\n  }\n  /**\n   * Because of how HTMLText renders, fonts need to be imported\n   * @param url\n   * @param options\n   */\n  loadFont(url, options = {}) {\n    const { availableFonts } = _HTMLTextStyle2;\n    if (availableFonts[url]) {\n      const font = availableFonts[url];\n      return this._fonts.push(font), font.refs++, this.styleID++, this.fontsDirty = !0, Promise.resolve();\n    }\n    return core.settings.ADAPTER.fetch(url).then((response) => response.blob()).then(async (blob) => new Promise((resolve, reject) => {\n      const src = URL.createObjectURL(blob), reader = new FileReader();\n      reader.onload = () => resolve([src, reader.result]), reader.onerror = reject, reader.readAsDataURL(blob);\n    })).then(async ([src, dataSrc]) => {\n      const font = Object.assign({\n        family: core.utils.path.basename(url, core.utils.path.extname(url)),\n        weight: \"normal\",\n        style: \"normal\",\n        display: \"auto\",\n        src,\n        dataSrc,\n        refs: 1,\n        originalUrl: url,\n        fontFace: null\n      }, options);\n      availableFonts[url] = font, this._fonts.push(font), this.styleID++;\n      const fontFace = new FontFace(font.family, `url(${font.src})`, {\n        weight: font.weight,\n        style: font.style,\n        display: font.display\n      });\n      font.fontFace = fontFace, await fontFace.load(), document.fonts.add(fontFace), await document.fonts.ready, this.styleID++, this.fontsDirty = !0;\n    });\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this._overrides.includes(v));\n    toAdd.length > 0 && (this._overrides.push(...toAdd), this.styleID++);\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this._overrides.includes(v));\n    toRemove.length > 0 && (this._overrides = this._overrides.filter((v) => !toRemove.includes(v)), this.styleID++);\n  }\n  /**\n   * Internally converts all of the style properties into CSS equivalents.\n   * @param scale\n   * @returns The CSS style string, for setting `style` property of root HTMLElement.\n   */\n  toCSS(scale) {\n    return [\n      `transform: scale(${scale})`,\n      \"transform-origin: top left\",\n      \"display: inline-block\",\n      `color: ${this.normalizeColor(this.fill)}`,\n      `font-size: ${this.fontSize}px`,\n      `font-family: ${this.fontFamily}`,\n      `font-weight: ${this.fontWeight}`,\n      `font-style: ${this.fontStyle}`,\n      `font-variant: ${this.fontVariant}`,\n      `letter-spacing: ${this.letterSpacing}px`,\n      `text-align: ${this.align}`,\n      `padding: ${this.padding}px`,\n      `white-space: ${this.whiteSpace}`,\n      ...this.lineHeight ? [`line-height: ${this.lineHeight}px`] : [],\n      ...this.wordWrap ? [\n        `word-wrap: ${this.breakWords ? \"break-all\" : \"break-word\"}`,\n        `max-width: ${this.wordWrapWidth}px`\n      ] : [],\n      ...this.strokeThickness ? [\n        `-webkit-text-stroke-width: ${this.strokeThickness}px`,\n        `-webkit-text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n        `text-stroke-width: ${this.strokeThickness}px`,\n        `text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n        \"paint-order: stroke\"\n      ] : [],\n      ...this.dropShadow ? [this.dropShadowToCSS()] : [],\n      ...this._overrides\n    ].join(\";\");\n  }\n  /** Get the font CSS styles from the loaded font, If available. */\n  toGlobalCSS() {\n    return this._fonts.reduce((result, font) => `${result}\n            @font-face {\n                font-family: \"${font.family}\";\n                src: url('${font.dataSrc}');\n                font-weight: ${font.weight};\n                font-style: ${font.style};\n                font-display: ${font.display};\n            }`, this._stylesheet);\n  }\n  /** Internal stylesheet contents, useful for creating rules for rendering */\n  get stylesheet() {\n    return this._stylesheet;\n  }\n  set stylesheet(value) {\n    this._stylesheet !== value && (this._stylesheet = value, this.styleID++);\n  }\n  /**\n   * Convert numerical colors into hex-strings\n   * @param color\n   */\n  normalizeColor(color) {\n    return Array.isArray(color) && (color = core.utils.rgb2hex(color)), typeof color == \"number\" ? core.utils.hex2string(color) : color;\n  }\n  /** Convert the internal drop-shadow settings to CSS text-shadow */\n  dropShadowToCSS() {\n    let color = this.normalizeColor(this.dropShadowColor);\n    const alpha = this.dropShadowAlpha, x = Math.round(Math.cos(this.dropShadowAngle) * this.dropShadowDistance), y = Math.round(Math.sin(this.dropShadowAngle) * this.dropShadowDistance);\n    color.startsWith(\"#\") && alpha < 1 && (color += (alpha * 255 | 0).toString(16).padStart(2, \"0\"));\n    const position = `${x}px ${y}px`;\n    return this.dropShadowBlur > 0 ? `text-shadow: ${position} ${this.dropShadowBlur}px ${color}` : `text-shadow: ${position} ${color}`;\n  }\n  /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n  reset() {\n    Object.assign(this, _HTMLTextStyle2.defaultOptions);\n  }\n  /**\n   * Called after the image is loaded but before drawing to the canvas.\n   * Mostly used to handle Safari's font loading bug.\n   * @ignore\n   */\n  onBeforeDraw() {\n    const { fontsDirty: prevFontsDirty } = this;\n    return this.fontsDirty = !1, this.isSafari && this._fonts.length > 0 && prevFontsDirty ? new Promise((resolve) => setTimeout(resolve, 100)) : Promise.resolve();\n  }\n  /**\n   * Proving that Safari is the new IE\n   * @ignore\n   */\n  get isSafari() {\n    const { userAgent } = core.settings.ADAPTER.getNavigator();\n    return /^((?!chrome|android).)*safari/i.test(userAgent);\n  }\n  set fillGradientStops(_value) {\n    console.warn(\"[HTMLTextStyle] fillGradientStops is not supported by HTMLText\");\n  }\n  get fillGradientStops() {\n    return super.fillGradientStops;\n  }\n  set fillGradientType(_value) {\n    console.warn(\"[HTMLTextStyle] fillGradientType is not supported by HTMLText\");\n  }\n  get fillGradientType() {\n    return super.fillGradientType;\n  }\n  set miterLimit(_value) {\n    console.warn(\"[HTMLTextStyle] miterLimit is not supported by HTMLText\");\n  }\n  get miterLimit() {\n    return super.miterLimit;\n  }\n  set trim(_value) {\n    console.warn(\"[HTMLTextStyle] trim is not supported by HTMLText\");\n  }\n  get trim() {\n    return super.trim;\n  }\n  set textBaseline(_value) {\n    console.warn(\"[HTMLTextStyle] textBaseline is not supported by HTMLText\");\n  }\n  get textBaseline() {\n    return super.textBaseline;\n  }\n  set leading(_value) {\n    console.warn(\"[HTMLTextStyle] leading is not supported by HTMLText\");\n  }\n  get leading() {\n    return super.leading;\n  }\n  set lineJoin(_value) {\n    console.warn(\"[HTMLTextStyle] lineJoin is not supported by HTMLText\");\n  }\n  get lineJoin() {\n    return super.lineJoin;\n  }\n};\n_HTMLTextStyle.availableFonts = {}, /**\n* List of default options, these are largely the same as TextStyle,\n* with the exception of whiteSpace, which is set to 'normal' by default.\n*/\n_HTMLTextStyle.defaultOptions = {\n  /** Align */\n  align: \"left\",\n  /** Break words */\n  breakWords: !1,\n  /** Drop shadow */\n  dropShadow: !1,\n  /** Drop shadow alpha */\n  dropShadowAlpha: 1,\n  /**\n   * Drop shadow angle\n   * @type {number}\n   * @default Math.PI / 6\n   */\n  dropShadowAngle: Math.PI / 6,\n  /** Drop shadow blur */\n  dropShadowBlur: 0,\n  /** Drop shadow color */\n  dropShadowColor: \"black\",\n  /** Drop shadow distance */\n  dropShadowDistance: 5,\n  /** Fill */\n  fill: \"black\",\n  /** Font family */\n  fontFamily: \"Arial\",\n  /** Font size */\n  fontSize: 26,\n  /** Font style */\n  fontStyle: \"normal\",\n  /** Font variant */\n  fontVariant: \"normal\",\n  /** Font weight */\n  fontWeight: \"normal\",\n  /** Letter spacing */\n  letterSpacing: 0,\n  /** Line height */\n  lineHeight: 0,\n  /** Padding */\n  padding: 0,\n  /** Stroke */\n  stroke: \"black\",\n  /** Stroke thickness */\n  strokeThickness: 0,\n  /** White space */\n  whiteSpace: \"normal\",\n  /** Word wrap */\n  wordWrap: !1,\n  /** Word wrap width */\n  wordWrapWidth: 100\n};\nlet HTMLTextStyle = _HTMLTextStyle;\nexports.HTMLTextStyle = HTMLTextStyle;\n//# sourceMappingURL=HTMLTextStyle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","text","TextStyle","constructor","arguments","_fonts","_overrides","_stylesheet","fontsDirty","from","originalStyle","_HTMLTextStyle2","Object","keys","defaultOptions","reduce","obj","prop","cleanFonts","length","forEach","font","URL","revokeObjectURL","src","refs","fontFace","document","fonts","delete","availableFonts","originalUrl","fontFamily","styleID","loadFont","url","options","push","Promise","resolve","settings","ADAPTER","fetch","then","response","blob","reject","createObjectURL","reader","FileReader","onload","reader.onload","result","onerror","readAsDataURL","dataSrc","assign","family","utils","path","basename","extname","weight","style","display","FontFace","load","add","ready","addOverride","value","toAdd","filter","v","includes","removeOverride","toRemove","toCSS","scale","normalizeColor","fill","fontSize","fontWeight","fontStyle","fontVariant","letterSpacing","align","padding","whiteSpace","lineHeight","wordWrap","breakWords","wordWrapWidth","strokeThickness","stroke","dropShadow","dropShadowToCSS","join","toGlobalCSS","color","Array","isArray","rgb2hex","hex2string","dropShadowColor","alpha","dropShadowAlpha","x","Math","round","cos","dropShadowAngle","dropShadowDistance","y","sin","startsWith","toString","padStart","position","dropShadowBlur","reset","onBeforeDraw","prevFontsDirty","isSafari","setTimeout","userAgent","getNavigator","test","_value","console","warn","fillGradientStops","fillGradientType","miterLimit","trim","textBaseline","leading","lineJoin","_HTMLTextStyle","PI","HTMLTextStyle"]
}
