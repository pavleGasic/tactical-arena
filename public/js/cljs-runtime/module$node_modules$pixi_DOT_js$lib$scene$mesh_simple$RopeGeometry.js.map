{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$RopeGeometry.js",
"lineCount":83,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh-simple/RopeGeometry.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$RopeGeometry\"] = function(global,require,module,exports) {\n'use strict';\n\nvar MeshGeometry = require('../mesh/shared/MeshGeometry.js');\n\n\"use strict\";\nconst _RopeGeometry = class _RopeGeometry extends MeshGeometry.MeshGeometry {\n  /**\n   * @param options - Options to be applied to rope geometry\n   */\n  constructor(options) {\n    const { width, points, textureScale } = { ..._RopeGeometry.defaultOptions, ...options };\n    super({\n      positions: new Float32Array(points.length * 4),\n      uvs: new Float32Array(points.length * 4),\n      indices: new Uint32Array((points.length - 1) * 6)\n    });\n    this.points = points;\n    this._width = width;\n    this.textureScale = textureScale;\n    this._build();\n  }\n  /**\n   * The width (i.e., thickness) of the rope.\n   * @readonly\n   */\n  get width() {\n    return this._width;\n  }\n  /** Refreshes Rope indices and uvs */\n  _build() {\n    const points = this.points;\n    if (!points)\n      return;\n    const vertexBuffer = this.getBuffer(\"aPosition\");\n    const uvBuffer = this.getBuffer(\"aUV\");\n    const indexBuffer = this.getIndex();\n    if (points.length < 1) {\n      return;\n    }\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n    const uvs = uvBuffer.data;\n    const indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    let amount = 0;\n    let prev = points[0];\n    const textureWidth = this._width * this.textureScale;\n    const total = points.length;\n    for (let i = 0; i < total; i++) {\n      const index = i * 4;\n      if (this.textureScale > 0) {\n        const dx = prev.x - points[i].x;\n        const dy = prev.y - points[i].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        amount = i / (total - 1);\n      }\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n    let indexCount = 0;\n    for (let i = 0; i < total - 1; i++) {\n      const index = i * 2;\n      indices[indexCount++] = index;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 3;\n    }\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  }\n  /** refreshes vertices of Rope mesh */\n  updateVertices() {\n    const points = this.points;\n    if (points.length < 1) {\n      return;\n    }\n    let lastPoint = points[0];\n    let nextPoint;\n    let perpX = 0;\n    let perpY = 0;\n    const vertices = this.buffers[0].data;\n    const total = points.length;\n    const halfWidth = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n    for (let i = 0; i < total; i++) {\n      const point = points[i];\n      const index = i * 4;\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      let ratio = (1 - i / (total - 1)) * 10;\n      if (ratio > 1) {\n        ratio = 1;\n      }\n      const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      if (perpLength < 1e-6) {\n        perpX = 0;\n        perpY = 0;\n      } else {\n        perpX /= perpLength;\n        perpY /= perpLength;\n        perpX *= halfWidth;\n        perpY *= halfWidth;\n      }\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n    this.buffers[0].update();\n  }\n  /** Refreshes Rope indices and uvs */\n  update() {\n    if (this.textureScale > 0) {\n      this._build();\n    } else {\n      this.updateVertices();\n    }\n  }\n};\n/** Default options for RopeGeometry constructor. */\n_RopeGeometry.defaultOptions = {\n  /** The width (i.e., thickness) of the rope. */\n  width: 200,\n  /** An array of points that determine the rope. */\n  points: [],\n  /** Rope texture scale, if zero then the rope texture is stretched. */\n  textureScale: 0\n};\nlet RopeGeometry = _RopeGeometry;\n\nexports.RopeGeometry = RopeGeometry;\n//# sourceMappingURL=RopeGeometry.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","MeshGeometry","constructor","options","width","points","textureScale","_RopeGeometry","defaultOptions","positions","Float32Array","length","uvs","indices","Uint32Array","_width","_build","vertexBuffer","getBuffer","uvBuffer","indexBuffer","getIndex","data","Uint16Array","amount","prev","textureWidth","total","i","index","dx","x","dy","y","distance","Math","sqrt","indexCount","update","updateVertices","lastPoint","vertices","buffers","halfWidth","point","nextPoint","perpY","perpX","perpLength","RopeGeometry"]
}
