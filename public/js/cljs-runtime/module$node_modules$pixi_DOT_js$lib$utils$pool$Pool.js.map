{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$utils$pool$Pool.js",
"lineCount":40,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,GAAwE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAIhH,OAAMC,KAAN;AAMEC,eAAW,CAACC,SAAD,EAAYC,WAAZ,CAAyB;AAClC,UAAKC,CAAAA,KAAL,GAAa,EAAb;AAEA,UAAKC,CAAAA,MAAL,GADA,IAAKC,CAAAA,MACL,GADc,CACd;AACA,UAAKC,CAAAA,UAAL,GAAkBL,SAAlB;AACIC,iBAAJ,IACE,IAAKK,CAAAA,WAAL,CAAiBL,WAAjB,CADF;AALkC;AAapCK,eAAW,CAACC,KAAD,CAAQ;AACjB,WAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,KAApB,EAA2BC,CAAA,EAA3B;AACE,YAAKN,CAAAA,KAAL,CAAW,IAAKC,CAAAA,MAAL,EAAX,CAAA,GAA4B,IAAI,IAAKE,CAAAA,UAAT,EAA5B;AADF;AAGA,UAAKD,CAAAA,MAAL,IAAeG,KAAf;AAJiB;AAYnBE,OAAG,CAACC,IAAD,CAAO;AACR,UAAIC,IAAJ;AAEEA,UAAA,GADgB,CAAlB,GAAI,IAAKR,CAAAA,MAAT,GACS,IAAKD,CAAAA,KAAL,CAAW,EAAE,IAAKC,CAAAA,MAAlB,CADT,GAGS,IAAI,IAAKE,CAAAA,UAAT,EAFP;AAIFM,UAAKC,CAAAA,IAAL,GAAYF,IAAZ,CAAA;AACA,aAAOC,IAAP;AARQ;AAcVE,UAAM,CAACF,IAAD,CAAO;AACXA,UAAKG,CAAAA,KAAL,IAAA;AACA,UAAKZ,CAAAA,KAAL,CAAW,IAAKC,CAAAA,MAAL,EAAX,CAAA,GAA4BQ,IAA5B;AAFW;AAST,iBAAY,EAAA;AACd,aAAO,IAAKP,CAAAA,MAAZ;AADc;AAQZ,iBAAY,EAAA;AACd,aAAO,IAAKD,CAAAA,MAAZ;AADc;AAQZ,iBAAY,EAAA;AACd,aAAO,IAAKC,CAAAA,MAAZ,GAAqB,IAAKD,CAAAA,MAA1B;AADc;AAIhBY,SAAK,EAAG;AAEN,UAAKZ,CAAAA,MAAL,GADA,IAAKD,CAAAA,KAAMc,CAAAA,MACX,GADoB,CACpB;AAFM;AA1EV;AAgFAnB,SAAQC,CAAAA,IAAR,GAAeA,IAAf;AApFgH,CAAhH;;",
"sources":["node_modules/pixi_DOT_js/lib/utils/pool/Pool.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$utils$pool$Pool\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nclass Pool {\n  /**\n   * Constructs a new Pool.\n   * @param ClassType - The constructor of the items in the pool.\n   * @param {number} [initialSize] - The initial size of the pool.\n   */\n  constructor(ClassType, initialSize) {\n    this._pool = [];\n    this._count = 0;\n    this._index = 0;\n    this._classType = ClassType;\n    if (initialSize) {\n      this.prepopulate(initialSize);\n    }\n  }\n  /**\n   * Prepopulates the pool with a given number of items.\n   * @param total - The number of items to add to the pool.\n   */\n  prepopulate(total) {\n    for (let i = 0; i < total; i++) {\n      this._pool[this._index++] = new this._classType();\n    }\n    this._count += total;\n  }\n  /**\n   * Gets an item from the pool. Calls the item's `init` method if it exists.\n   * If there are no items left in the pool, a new one will be created.\n   * @param {unknown} [data] - Optional data to pass to the item's constructor.\n   * @returns {T} The item from the pool.\n   */\n  get(data) {\n    let item;\n    if (this._index > 0) {\n      item = this._pool[--this._index];\n    } else {\n      item = new this._classType();\n    }\n    item.init?.(data);\n    return item;\n  }\n  /**\n   * Returns an item to the pool. Calls the item's `reset` method if it exists.\n   * @param {T} item - The item to return to the pool.\n   */\n  return(item) {\n    item.reset?.();\n    this._pool[this._index++] = item;\n  }\n  /**\n   * Gets the number of items in the pool.\n   * @readonly\n   * @member {number}\n   */\n  get totalSize() {\n    return this._count;\n  }\n  /**\n   * Gets the number of items in the pool that are free to use without needing to create more.\n   * @readonly\n   * @member {number}\n   */\n  get totalFree() {\n    return this._index;\n  }\n  /**\n   * Gets the number of items in the pool that are currently in use.\n   * @readonly\n   * @member {number}\n   */\n  get totalUsed() {\n    return this._count - this._index;\n  }\n  /** clears the pool - mainly used for debugging! */\n  clear() {\n    this._pool.length = 0;\n    this._index = 0;\n  }\n}\n\nexports.Pool = Pool;\n//# sourceMappingURL=Pool.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Pool","constructor","ClassType","initialSize","_pool","_index","_count","_classType","prepopulate","total","i","get","data","item","init","return","reset","clear","length"]
}
