{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$Shader.js",
"lineCount":98,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/shader/Shader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$Shader\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar uid = require('../../../../utils/data/uid.js');\nvar GlProgram = require('../../gl/shader/GlProgram.js');\nvar BindGroup = require('../../gpu/shader/BindGroup.js');\nvar GpuProgram = require('../../gpu/shader/GpuProgram.js');\nvar types = require('../../types.js');\nvar UniformGroup = require('./UniformGroup.js');\n\n\"use strict\";\nclass Shader extends EventEmitter {\n  constructor(options) {\n    super();\n    /** A unique identifier for the shader */\n    this.uid = uid.uid(\"shader\");\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    this._uniformBindMap = /* @__PURE__ */ Object.create(null);\n    this._ownedBindGroups = [];\n    let {\n      gpuProgram,\n      glProgram,\n      groups,\n      resources,\n      compatibleRenderers,\n      groupMap\n    } = options;\n    this.gpuProgram = gpuProgram;\n    this.glProgram = glProgram;\n    if (compatibleRenderers === void 0) {\n      compatibleRenderers = 0;\n      if (gpuProgram)\n        compatibleRenderers |= types.RendererType.WEBGPU;\n      if (glProgram)\n        compatibleRenderers |= types.RendererType.WEBGL;\n    }\n    this.compatibleRenderers = compatibleRenderers;\n    const nameHash = {};\n    if (!resources && !groups) {\n      resources = {};\n    }\n    if (resources && groups) {\n      throw new Error(\"[Shader] Cannot have both resources and groups\");\n    } else if (!gpuProgram && groups && !groupMap) {\n      throw new Error(\"[Shader] No group map or WebGPU shader provided - consider using resources instead.\");\n    } else if (!gpuProgram && groups && groupMap) {\n      for (const i in groupMap) {\n        for (const j in groupMap[i]) {\n          const uniformName = groupMap[i][j];\n          nameHash[uniformName] = {\n            group: i,\n            binding: j,\n            name: uniformName\n          };\n        }\n      }\n    } else if (gpuProgram && groups && !groupMap) {\n      const groupData = gpuProgram.structsAndGroups.groups;\n      groupMap = {};\n      groupData.forEach((data) => {\n        groupMap[data.group] = groupMap[data.group] || {};\n        groupMap[data.group][data.binding] = data.name;\n        nameHash[data.name] = data;\n      });\n    } else if (resources) {\n      groups = {};\n      groupMap = {};\n      if (gpuProgram) {\n        const groupData = gpuProgram.structsAndGroups.groups;\n        groupData.forEach((data) => {\n          groupMap[data.group] = groupMap[data.group] || {};\n          groupMap[data.group][data.binding] = data.name;\n          nameHash[data.name] = data;\n        });\n      }\n      let bindTick = 0;\n      for (const i in resources) {\n        if (nameHash[i])\n          continue;\n        if (!groups[99]) {\n          groups[99] = new BindGroup.BindGroup();\n          this._ownedBindGroups.push(groups[99]);\n        }\n        nameHash[i] = { group: 99, binding: bindTick, name: i };\n        groupMap[99] = groupMap[99] || {};\n        groupMap[99][bindTick] = i;\n        bindTick++;\n      }\n      for (const i in resources) {\n        const name = i;\n        let value = resources[i];\n        if (!value.source && !value._resourceType) {\n          value = new UniformGroup.UniformGroup(value);\n        }\n        const data = nameHash[name];\n        if (data) {\n          if (!groups[data.group]) {\n            groups[data.group] = new BindGroup.BindGroup();\n            this._ownedBindGroups.push(groups[data.group]);\n          }\n          groups[data.group].setResource(value, data.binding);\n        }\n      }\n    }\n    this.groups = groups;\n    this._uniformBindMap = groupMap;\n    this.resources = this._buildResourceAccessor(groups, nameHash);\n  }\n  /**\n   * Sometimes a resource group will be provided later (for example global uniforms)\n   * In such cases, this method can be used to let the shader know about the group.\n   * @param name - the name of the resource group\n   * @param groupIndex - the index of the group (should match the webGPU shader group location)\n   * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n   */\n  addResource(name, groupIndex, bindIndex) {\n    var _a, _b;\n    (_a = this._uniformBindMap)[groupIndex] || (_a[groupIndex] = {});\n    (_b = this._uniformBindMap[groupIndex])[bindIndex] || (_b[bindIndex] = name);\n    if (!this.groups[groupIndex]) {\n      this.groups[groupIndex] = new BindGroup.BindGroup();\n      this._ownedBindGroups.push(this.groups[groupIndex]);\n    }\n  }\n  _buildResourceAccessor(groups, nameHash) {\n    const uniformsOut = {};\n    for (const i in nameHash) {\n      const data = nameHash[i];\n      Object.defineProperty(uniformsOut, data.name, {\n        get() {\n          return groups[data.group].getResource(data.binding);\n        },\n        set(value) {\n          groups[data.group].setResource(value, data.binding);\n        }\n      });\n    }\n    return uniformsOut;\n  }\n  /**\n   * Use to destroy the shader when its not longer needed.\n   * It will destroy the resources and remove listeners.\n   * @param destroyPrograms - if the programs should be destroyed as well.\n   * Make sure its not being used by other shaders!\n   */\n  destroy(destroyPrograms = false) {\n    this.emit(\"destroy\", this);\n    if (destroyPrograms) {\n      this.gpuProgram?.destroy();\n      this.glProgram?.destroy();\n    }\n    this.gpuProgram = null;\n    this.glProgram = null;\n    this.removeAllListeners();\n    this._uniformBindMap = null;\n    this._ownedBindGroups.forEach((bindGroup) => {\n      bindGroup.destroy();\n    });\n    this._ownedBindGroups = null;\n    this.resources = null;\n    this.groups = null;\n  }\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.GlProgram.from(gl);\n    }\n    return new Shader({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n}\n\nexports.Shader = Shader;\n//# sourceMappingURL=Shader.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","uid","GlProgram","BindGroup","GpuProgram","types","UniformGroup","Shader","constructor","options","_uniformBindMap","Object","create","_ownedBindGroups","gpuProgram","glProgram","groups","resources","compatibleRenderers","groupMap","RendererType","WEBGPU","WEBGL","nameHash","Error","i","j","uniformName","group","binding","name","groupData","structsAndGroups","forEach","data","bindTick","push","value","source","_resourceType","setResource","_buildResourceAccessor","addResource","groupIndex","bindIndex","_a","_b","uniformsOut","defineProperty","get","getResource","set","destroy","destroyPrograms","emit","removeAllListeners","bindGroup","from","gpu","gl","rest"]
}
