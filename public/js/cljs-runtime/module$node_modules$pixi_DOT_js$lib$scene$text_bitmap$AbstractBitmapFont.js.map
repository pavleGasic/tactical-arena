{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$AbstractBitmapFont.js",
"lineCount":50,
"mappings":"AAAAA,cAAA,CAAA,wEAAA,GAA6F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGjIC,QAAAA,GAAeH,OAAA,CAAQ,yCAAR,CAAfG;AACJ,MAAIC,cAAcJ,OAAA,CAAQ,+DAAR,CAAlB;AAEA,cAAA;AACA,OAAMK,mBAAN,QAAiCF,OAAjC;AACEG,eAAW,EAAG;AACZ,WAAA,CAAM,GAAGC,SAAT,CAAA;AAEA,UAAKC,CAAAA,KAAL,GAA6BC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAA7B;AAKA,UAAKC,CAAAA,UAAL,GAAkB,CAAlB;AAKA,UAAKC,CAAAA,UAAL,GAAkB,EAAlB;AAEA,UAAKC,CAAAA,WAAL,GAAmB,CAAEC,SAAU,CAAZ,EAAeC,OAAQ,CAAvB,EAA0BC,QAAS,CAAnC,CAAnB;AAKA,UAAKC,CAAAA,cAAL,GAAsB,CAAtB;AAEA,UAAKC,CAAAA,aAAL,GAAqB,CAAEC,KAAM,MAAR,EAAgBC,MAAO,CAAvB,CAArB;AAEA,UAAKC,CAAAA,KAAL,GAAa,EAAb;AAEA,UAAKC,CAAAA,eAAL,GAAuB,CAAA,CAAvB;AAGA,UAAKC,CAAAA,oBAAL,GADA,IAAKC,CAAAA,uBACL,GAD+B,GAC/B;AA7BY;AAmCV,YAAO,EAAA;AACTpB,iBAAYA,CAAAA,WAAZ,CAAwBA,WAAYqB,CAAAA,MAApC,EAA4C,0EAA5C,CAAA;AACA,aAAO,IAAKb,CAAAA,UAAZ;AAFS;AAQP,oBAAe,EAAA;AACjBR,iBAAYA,CAAAA,WAAZ,CAAwBA,WAAYqB,CAAAA,MAApC,EAA4C,6EAA5C,CAAA;AACA,aAAO,IAAKJ,CAAAA,KAAZ;AAFiB;AAQf,YAAO,EAAA;AACTjB,iBAAYA,CAAAA,WAAZ,CAAwBA,WAAYqB,CAAAA,MAApC,EAA4C,oFAA5C,CAAA;AACA,aAAO,IAAKZ,CAAAA,WAAYC,CAAAA,QAAxB;AAFS;AAQP,0BAAqB,EAAA;AACvBV,iBAAYA,CAAAA,WAAZ,CAAwBA,WAAYqB,CAAAA,MAApC,EAA4C,iGAA5C,CAAA;AACA,aAAO,IAAKP,CAAAA,aAAcE,CAAAA,KAA1B;AAFuB;AAQrB,yBAAoB,EAAA;AACtBhB,iBAAYA,CAAAA,WAAZ,CAAwBA,WAAYqB,CAAAA,MAApC,EAA4C,+FAA5C,CAAA;AACA,aAAO,IAAKP,CAAAA,aAAcC,CAAAA,IAA1B;AAFsB;AAIxBO,WAAO,CAACC,eAAA,GAAkB,CAAA,CAAnB,CAA0B;AAC/B,UAAKC,CAAAA,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAA;AACA,UAAKC,CAAAA,kBAAL,EAAA;AACA,WAAK,MAAMC,CAAX,GAAgB,KAAKtB,CAAAA,KAArB;AACE,YAAKA,CAAAA,KAAL,CAAWsB,CAAX,CAAcC,CAAAA,OAASL,EAAAA,OAAvB,EAAA;AADF;AAGA,UAAKlB,CAAAA,KAAL,GAAa,IAAb;AACImB,qBAAJ,KACE,IAAKN,CAAAA,KAAMW,CAAAA,OAAX,CAAoBC,IAAD,IAAUA,IAAKF,CAAAA,OAAQL,CAAAA,OAAb,CAAqB,CAAA,CAArB,CAA7B,CACA,EAAA,IAAKL,CAAAA,KAAL,GAAa,IAFf;AAP+B;AAxEnC;AAsFAnB,SAAQG,CAAAA,kBAAR,GAA6BA,kBAA7B;AA7FqI,CAArI;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/AbstractBitmapFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$AbstractBitmapFont\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar deprecation = require('../../utils/logging/deprecation.js');\n\n\"use strict\";\nclass AbstractBitmapFont extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** The map of characters by character code. */\n    this.chars = /* @__PURE__ */ Object.create(null);\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    this.lineHeight = 0;\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    this.fontFamily = \"\";\n    /** The metrics of the font face. */\n    this.fontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    this.baseLineOffset = 0;\n    /** The range and type of the distance field for this font. */\n    this.distanceField = { type: \"none\", range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    this.pages = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    this.applyFillAsTint = true;\n    /** The size of the font face in pixels. */\n    this.baseMeasurementFontSize = 100;\n    this.baseRenderedFontSize = 100;\n  }\n  /**\n   * The name of the font face.\n   * @deprecated since 8.0.0 Use `fontFamily` instead.\n   */\n  get font() {\n    deprecation.deprecation(deprecation.v8_0_0, \"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.\");\n    return this.fontFamily;\n  }\n  /**\n   * The map of base page textures (i.e., sheets of glyphs).\n   * @deprecated since 8.0.0 Use `pages` instead.\n   */\n  get pageTextures() {\n    deprecation.deprecation(deprecation.v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  /**\n   * The size of the font face in pixels.\n   * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n   */\n  get size() {\n    deprecation.deprecation(deprecation.v8_0_0, \"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.\");\n    return this.fontMetrics.fontSize;\n  }\n  /**\n   * The kind of distance field for this font or \"none\".\n   * @deprecated since 8.0.0 Use `distanceField.type` instead.\n   */\n  get distanceFieldRange() {\n    deprecation.deprecation(deprecation.v8_0_0, \"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.\");\n    return this.distanceField.range;\n  }\n  /**\n   * The range of the distance field in pixels.\n   * @deprecated since 8.0.0 Use `distanceField.range` instead.\n   */\n  get distanceFieldType() {\n    deprecation.deprecation(deprecation.v8_0_0, \"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.\");\n    return this.distanceField.type;\n  }\n  destroy(destroyTextures = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    for (const i in this.chars) {\n      this.chars[i].texture?.destroy();\n    }\n    this.chars = null;\n    if (destroyTextures) {\n      this.pages.forEach((page) => page.texture.destroy(true));\n      this.pages = null;\n    }\n  }\n}\n\nexports.AbstractBitmapFont = AbstractBitmapFont;\n//# sourceMappingURL=AbstractBitmapFont.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","deprecation","AbstractBitmapFont","constructor","arguments","chars","Object","create","lineHeight","fontFamily","fontMetrics","fontSize","ascent","descent","baseLineOffset","distanceField","type","range","pages","applyFillAsTint","baseRenderedFontSize","baseMeasurementFontSize","v8_0_0","destroy","destroyTextures","emit","removeAllListeners","i","texture","forEach","page"]
}
