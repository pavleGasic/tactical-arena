{
"version":3,
"file":"module$node_modules$$pixi$core$lib$filters$FilterSystem.js",
"lineCount":198,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/filters/FilterSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$filters$FilterSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), extensions = require(\"@pixi/extensions\"), math = require(\"@pixi/math\"), RenderTexturePool = require(\"../renderTexture/RenderTexturePool.js\"), UniformGroup = require(\"../shader/UniformGroup.js\"), Quad = require(\"../utils/Quad.js\"), QuadUv = require(\"../utils/QuadUv.js\"), FilterState = require(\"./FilterState.js\");\nconst tempPoints = [new math.Point(), new math.Point(), new math.Point(), new math.Point()], tempMatrix = new math.Matrix();\nclass FilterSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.defaultFilterStack = [{}], this.texturePool = new RenderTexturePool.RenderTexturePool(), this.statePool = [], this.quad = new Quad.Quad(), this.quadUv = new QuadUv.QuadUv(), this.tempRect = new math.Rectangle(), this.activeState = {}, this.globalUniforms = new UniformGroup.UniformGroup({\n      outputFrame: new math.Rectangle(),\n      inputSize: new Float32Array(4),\n      inputPixel: new Float32Array(4),\n      inputClamp: new Float32Array(4),\n      resolution: 1,\n      // legacy variables\n      filterArea: new Float32Array(4),\n      filterClamp: new Float32Array(4)\n    }, !0), this.forceClear = !1, this.useMaxPadding = !1;\n  }\n  init() {\n    this.texturePool.setScreenSize(this.renderer.view);\n  }\n  /**\n   * Pushes a set of filters to be applied later to the system. This will redirect further rendering into an\n   * input render-texture for the rest of the filtering pipeline.\n   * @param {PIXI.DisplayObject} target - The target of the filter to render.\n   * @param filters - The filters to apply.\n   */\n  push(target, filters) {\n    const renderer = this.renderer, filterStack = this.defaultFilterStack, state = this.statePool.pop() || new FilterState.FilterState(), renderTextureSystem = renderer.renderTexture;\n    let currentResolution, currentMultisample;\n    if (renderTextureSystem.current) {\n      const renderTexture = renderTextureSystem.current;\n      currentResolution = renderTexture.resolution, currentMultisample = renderTexture.multisample;\n    } else\n      currentResolution = renderer.resolution, currentMultisample = renderer.multisample;\n    let resolution = filters[0].resolution || currentResolution, multisample = filters[0].multisample ?? currentMultisample, padding = filters[0].padding, autoFit = filters[0].autoFit, legacy = filters[0].legacy ?? !0;\n    for (let i = 1; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution || currentResolution), multisample = Math.min(multisample, filter.multisample ?? currentMultisample), padding = this.useMaxPadding ? Math.max(padding, filter.padding) : padding + filter.padding, autoFit = autoFit && filter.autoFit, legacy = legacy || (filter.legacy ?? !0);\n    }\n    filterStack.length === 1 && (this.defaultFilterStack[0].renderTexture = renderTextureSystem.current), filterStack.push(state), state.resolution = resolution, state.multisample = multisample, state.legacy = legacy, state.target = target, state.sourceFrame.copyFrom(target.filterArea || target.getBounds(!0)), state.sourceFrame.pad(padding);\n    const sourceFrameProjected = this.tempRect.copyFrom(renderTextureSystem.sourceFrame);\n    renderer.projection.transform && this.transformAABB(\n      tempMatrix.copyFrom(renderer.projection.transform).invert(),\n      sourceFrameProjected\n    ), autoFit ? (state.sourceFrame.fit(sourceFrameProjected), (state.sourceFrame.width <= 0 || state.sourceFrame.height <= 0) && (state.sourceFrame.width = 0, state.sourceFrame.height = 0)) : state.sourceFrame.intersects(sourceFrameProjected) || (state.sourceFrame.width = 0, state.sourceFrame.height = 0), this.roundFrame(\n      state.sourceFrame,\n      renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution,\n      renderTextureSystem.sourceFrame,\n      renderTextureSystem.destinationFrame,\n      renderer.projection.transform\n    ), state.renderTexture = this.getOptimalFilterTexture(\n      state.sourceFrame.width,\n      state.sourceFrame.height,\n      resolution,\n      multisample\n    ), state.filters = filters, state.destinationFrame.width = state.renderTexture.width, state.destinationFrame.height = state.renderTexture.height;\n    const destinationFrame = this.tempRect;\n    destinationFrame.x = 0, destinationFrame.y = 0, destinationFrame.width = state.sourceFrame.width, destinationFrame.height = state.sourceFrame.height, state.renderTexture.filterFrame = state.sourceFrame, state.bindingSourceFrame.copyFrom(renderTextureSystem.sourceFrame), state.bindingDestinationFrame.copyFrom(renderTextureSystem.destinationFrame), state.transform = renderer.projection.transform, renderer.projection.transform = null, renderTextureSystem.bind(state.renderTexture, state.sourceFrame, destinationFrame), renderer.framebuffer.clear(0, 0, 0, 0);\n  }\n  /** Pops off the filter and applies it. */\n  pop() {\n    const filterStack = this.defaultFilterStack, state = filterStack.pop(), filters = state.filters;\n    this.activeState = state;\n    const globalUniforms = this.globalUniforms.uniforms;\n    globalUniforms.outputFrame = state.sourceFrame, globalUniforms.resolution = state.resolution;\n    const inputSize = globalUniforms.inputSize, inputPixel = globalUniforms.inputPixel, inputClamp = globalUniforms.inputClamp;\n    if (inputSize[0] = state.destinationFrame.width, inputSize[1] = state.destinationFrame.height, inputSize[2] = 1 / inputSize[0], inputSize[3] = 1 / inputSize[1], inputPixel[0] = Math.round(inputSize[0] * state.resolution), inputPixel[1] = Math.round(inputSize[1] * state.resolution), inputPixel[2] = 1 / inputPixel[0], inputPixel[3] = 1 / inputPixel[1], inputClamp[0] = 0.5 * inputPixel[2], inputClamp[1] = 0.5 * inputPixel[3], inputClamp[2] = state.sourceFrame.width * inputSize[2] - 0.5 * inputPixel[2], inputClamp[3] = state.sourceFrame.height * inputSize[3] - 0.5 * inputPixel[3], state.legacy) {\n      const filterArea = globalUniforms.filterArea;\n      filterArea[0] = state.destinationFrame.width, filterArea[1] = state.destinationFrame.height, filterArea[2] = state.sourceFrame.x, filterArea[3] = state.sourceFrame.y, globalUniforms.filterClamp = globalUniforms.inputClamp;\n    }\n    this.globalUniforms.update();\n    const lastState = filterStack[filterStack.length - 1];\n    if (this.renderer.framebuffer.blit(), filters.length === 1)\n      filters[0].apply(this, state.renderTexture, lastState.renderTexture, constants.CLEAR_MODES.BLEND, state), this.returnFilterTexture(state.renderTexture);\n    else {\n      let flip = state.renderTexture, flop = this.getOptimalFilterTexture(\n        flip.width,\n        flip.height,\n        state.resolution\n      );\n      flop.filterFrame = flip.filterFrame;\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        i === 1 && state.multisample > 1 && (flop = this.getOptimalFilterTexture(\n          flip.width,\n          flip.height,\n          state.resolution\n        ), flop.filterFrame = flip.filterFrame), filters[i].apply(this, flip, flop, constants.CLEAR_MODES.CLEAR, state);\n        const t = flip;\n        flip = flop, flop = t;\n      }\n      filters[i].apply(this, flip, lastState.renderTexture, constants.CLEAR_MODES.BLEND, state), i > 1 && state.multisample > 1 && this.returnFilterTexture(state.renderTexture), this.returnFilterTexture(flip), this.returnFilterTexture(flop);\n    }\n    state.clear(), this.statePool.push(state);\n  }\n  /**\n   * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.\n   * @param filterTexture - renderTexture to bind, should belong to filter pool or filter stack\n   * @param clearMode - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}\n   */\n  bindAndClear(filterTexture, clearMode = constants.CLEAR_MODES.CLEAR) {\n    const {\n      renderTexture: renderTextureSystem,\n      state: stateSystem\n    } = this.renderer;\n    if (filterTexture === this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture ? this.renderer.projection.transform = this.activeState.transform : this.renderer.projection.transform = null, filterTexture?.filterFrame) {\n      const destinationFrame = this.tempRect;\n      destinationFrame.x = 0, destinationFrame.y = 0, destinationFrame.width = filterTexture.filterFrame.width, destinationFrame.height = filterTexture.filterFrame.height, renderTextureSystem.bind(filterTexture, filterTexture.filterFrame, destinationFrame);\n    } else\n      filterTexture !== this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture ? renderTextureSystem.bind(filterTexture) : this.renderer.renderTexture.bind(\n        filterTexture,\n        this.activeState.bindingSourceFrame,\n        this.activeState.bindingDestinationFrame\n      );\n    const autoClear = stateSystem.stateId & 1 || this.forceClear;\n    (clearMode === constants.CLEAR_MODES.CLEAR || clearMode === constants.CLEAR_MODES.BLIT && autoClear) && this.renderer.framebuffer.clear(0, 0, 0, 0);\n  }\n  /**\n   * Draws a filter using the default rendering process.\n   *\n   * This should be called only by {@link PIXI.Filter#apply}.\n   * @param filter - The filter to draw.\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  applyFilter(filter, input, output, clearMode) {\n    const renderer = this.renderer;\n    renderer.state.set(filter.state), this.bindAndClear(output, clearMode), filter.uniforms.uSampler = input, filter.uniforms.filterGlobals = this.globalUniforms, renderer.shader.bind(filter), filter.legacy = !!filter.program.attributeData.aTextureCoord, filter.legacy ? (this.quadUv.map(input._frame, input.filterFrame), renderer.geometry.bind(this.quadUv), renderer.geometry.draw(constants.DRAW_MODES.TRIANGLES)) : (renderer.geometry.bind(this.quad), renderer.geometry.draw(constants.DRAW_MODES.TRIANGLE_STRIP));\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {PIXI.Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const { sourceFrame, destinationFrame } = this.activeState, { orig } = sprite._texture, mappedMatrix = outputMatrix.set(\n      destinationFrame.width,\n      0,\n      0,\n      destinationFrame.height,\n      sourceFrame.x,\n      sourceFrame.y\n    ), worldTransform = sprite.worldTransform.copyTo(math.Matrix.TEMP_MATRIX);\n    return worldTransform.invert(), mappedMatrix.prepend(worldTransform), mappedMatrix.scale(1 / orig.width, 1 / orig.height), mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y), mappedMatrix;\n  }\n  /** Destroys this Filter System. */\n  destroy() {\n    this.renderer = null, this.texturePool.clear(!1);\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture in real pixels.\n   * @param minHeight - The minimum height of the render texture in real pixels.\n   * @param resolution - The resolution of the render texture.\n   * @param multisample - Number of samples of the render texture.\n   * @returns - The new render texture.\n   */\n  getOptimalFilterTexture(minWidth, minHeight, resolution = 1, multisample = constants.MSAA_QUALITY.NONE) {\n    return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution, multisample);\n  }\n  /**\n   * Gets extra render texture to use inside current filter\n   * To be compliant with older filters, you can use params in any order\n   * @param input - renderTexture from which size and resolution will be copied\n   * @param resolution - override resolution of the renderTexture\n   * @param multisample - number of samples of the renderTexture\n   */\n  getFilterTexture(input, resolution, multisample) {\n    if (typeof input == \"number\") {\n      const swap = input;\n      input = resolution, resolution = swap;\n    }\n    input = input || this.activeState.renderTexture;\n    const filterTexture = this.texturePool.getOptimalTexture(\n      input.width,\n      input.height,\n      resolution || input.resolution,\n      multisample || constants.MSAA_QUALITY.NONE\n    );\n    return filterTexture.filterFrame = input.filterFrame, filterTexture;\n  }\n  /**\n   * Frees a render texture back into the pool.\n   * @param renderTexture - The renderTarget to free\n   */\n  returnFilterTexture(renderTexture) {\n    this.texturePool.returnTexture(renderTexture);\n  }\n  /** Empties the texture pool. */\n  emptyPool() {\n    this.texturePool.clear(!0);\n  }\n  /** Calls `texturePool.resize()`, affects fullScreen renderTextures. */\n  resize() {\n    this.texturePool.setScreenSize(this.renderer.view);\n  }\n  /**\n   * @param matrix - first param\n   * @param rect - second param\n   */\n  transformAABB(matrix, rect) {\n    const lt = tempPoints[0], lb = tempPoints[1], rt = tempPoints[2], rb = tempPoints[3];\n    lt.set(rect.left, rect.top), lb.set(rect.left, rect.bottom), rt.set(rect.right, rect.top), rb.set(rect.right, rect.bottom), matrix.apply(lt, lt), matrix.apply(lb, lb), matrix.apply(rt, rt), matrix.apply(rb, rb);\n    const x0 = Math.min(lt.x, lb.x, rt.x, rb.x), y0 = Math.min(lt.y, lb.y, rt.y, rb.y), x1 = Math.max(lt.x, lb.x, rt.x, rb.x), y1 = Math.max(lt.y, lb.y, rt.y, rb.y);\n    rect.x = x0, rect.y = y0, rect.width = x1 - x0, rect.height = y1 - y0;\n  }\n  roundFrame(frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {\n    if (!(frame.width <= 0 || frame.height <= 0 || bindingSourceFrame.width <= 0 || bindingSourceFrame.height <= 0)) {\n      if (transform) {\n        const { a, b, c, d } = transform;\n        if ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4) && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4))\n          return;\n      }\n      transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity(), transform.translate(-bindingSourceFrame.x, -bindingSourceFrame.y).scale(\n        bindingDestinationFrame.width / bindingSourceFrame.width,\n        bindingDestinationFrame.height / bindingSourceFrame.height\n      ).translate(bindingDestinationFrame.x, bindingDestinationFrame.y), this.transformAABB(transform, frame), frame.ceil(resolution), this.transformAABB(transform.invert(), frame);\n    }\n  }\n}\nFilterSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"filter\"\n};\nextensions.extensions.add(FilterSystem);\nexports.FilterSystem = FilterSystem;\n//# sourceMappingURL=FilterSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","extensions","math","RenderTexturePool","UniformGroup","Quad","QuadUv","FilterState","tempPoints","Point","tempMatrix","Matrix","FilterSystem","constructor","renderer","defaultFilterStack","texturePool","statePool","quad","quadUv","tempRect","Rectangle","activeState","globalUniforms","outputFrame","inputSize","Float32Array","inputPixel","inputClamp","resolution","filterArea","filterClamp","useMaxPadding","forceClear","init","setScreenSize","view","push","target","filters","filterStack","state","pop","renderTextureSystem","renderTexture","currentResolution","currentMultisample","current","multisample","padding","autoFit","legacy","i","length","filter","Math","min","max","sourceFrame","copyFrom","getBounds","pad","sourceFrameProjected","projection","transform","transformAABB","invert","fit","width","height","intersects","roundFrame","destinationFrame","getOptimalFilterTexture","x","y","filterFrame","bindingSourceFrame","bindingDestinationFrame","bind","framebuffer","clear","uniforms","round","update","lastState","blit","apply","CLEAR_MODES","BLEND","returnFilterTexture","flip","flop","CLEAR","t","bindAndClear","filterTexture","clearMode","stateSystem","autoClear","stateId","BLIT","applyFilter","input","output","set","uSampler","filterGlobals","shader","program","attributeData","aTextureCoord","map","_frame","geometry","draw","DRAW_MODES","TRIANGLES","TRIANGLE_STRIP","calculateSpriteMatrix","outputMatrix","sprite","orig","_texture","mappedMatrix","worldTransform","copyTo","TEMP_MATRIX","prepend","scale","translate","anchor","destroy","minWidth","minHeight","MSAA_QUALITY","NONE","getOptimalTexture","getFilterTexture","swap","returnTexture","emptyPool","resize","matrix","rect","lt","lb","rt","rb","left","top","bottom","right","x0","y0","x1","y1","frame","a","b","c","d","abs","identity","ceil","extension","type","ExtensionType","RendererSystem","name","add"]
}
