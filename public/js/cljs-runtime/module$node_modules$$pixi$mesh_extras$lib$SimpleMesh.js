shadow$provide.module$node_modules$$pixi$mesh_extras$lib$SimpleMesh = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index"), mesh = require("module$node_modules$$pixi$mesh$lib$index");
  class SimpleMesh extends mesh.Mesh {
    constructor(texture = core.Texture.EMPTY, vertices, uvs, indices, drawMode) {
      vertices = new mesh.MeshGeometry(vertices, uvs, indices);
      vertices.getBuffer("aVertexPosition").static = !1;
      texture = new mesh.MeshMaterial(texture);
      super(vertices, texture, null, drawMode);
      this.autoUpdate = !0;
    }
    get vertices() {
      return this.geometry.getBuffer("aVertexPosition").data;
    }
    set vertices(value) {
      this.geometry.getBuffer("aVertexPosition").data = value;
    }
    _render(renderer) {
      this.autoUpdate && this.geometry.getBuffer("aVertexPosition").update();
      super._render(renderer);
    }
  }
  exports.SimpleMesh = SimpleMesh;
};

//# sourceMappingURL=module$node_modules$$pixi$mesh_extras$lib$SimpleMesh.js.map
