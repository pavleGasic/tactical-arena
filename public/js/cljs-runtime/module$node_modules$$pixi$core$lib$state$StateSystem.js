shadow$provide.module$node_modules$$pixi$core$lib$state$StateSystem = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index");
  global = require("module$node_modules$$pixi$extensions$lib$index");
  var State = require("module$node_modules$$pixi$core$lib$state$State"), mapWebGLBlendModesToPixi = require("module$node_modules$$pixi$core$lib$state$utils$mapWebGLBlendModesToPixi");
  require = (() => {
    const node_modules$$pixi$core$lib$state$StateSystem$classdecl$var6 = class {
      constructor() {
        this.gl = null;
        this.polygonOffset = this.stateId = 0;
        this.blendMode = constants.BLEND_MODES.NONE;
        this._blendEq = !1;
        this.map = [];
        this.map[0] = this.setBlend;
        this.map[1] = this.setOffset;
        this.map[2] = this.setCullFace;
        this.map[3] = this.setDepthTest;
        this.map[4] = this.setFrontFace;
        this.map[5] = this.setDepthMask;
        this.checks = [];
        this.defaultState = new State.State();
        this.defaultState.blend = !0;
      }
      contextChange(gl) {
        this.gl = gl;
        this.blendModes = mapWebGLBlendModesToPixi.mapWebGLBlendModesToPixi(gl);
        this.set(this.defaultState);
        this.reset();
      }
      set(state) {
        if (state = state || this.defaultState, this.stateId !== state.data) {
          var diff = this.stateId ^ state.data;
          let i = 0;
          for (; diff;) {
            diff & 1 && this.map[i].call(this, !!(state.data & 1 << i)), diff >>= 1, i++;
          }
          this.stateId = state.data;
        }
        for (diff = 0; diff < this.checks.length; diff++) {
          this.checks[diff](this, state);
        }
      }
      forceState(state) {
        state = state || this.defaultState;
        for (var i = 0; i < this.map.length; i++) {
          this.map[i].call(this, !!(state.data & 1 << i));
        }
        for (i = 0; i < this.checks.length; i++) {
          this.checks[i](this, state);
        }
        this.stateId = state.data;
      }
      setBlend(value) {
        this.updateCheck(node_modules$$pixi$core$lib$state$StateSystem$classdecl$var6.checkBlendMode, value);
        this.gl[value ? "enable" : "disable"](this.gl.BLEND);
      }
      setOffset(value) {
        this.updateCheck(node_modules$$pixi$core$lib$state$StateSystem$classdecl$var6.checkPolygonOffset, value);
        this.gl[value ? "enable" : "disable"](this.gl.POLYGON_OFFSET_FILL);
      }
      setDepthTest(value) {
        this.gl[value ? "enable" : "disable"](this.gl.DEPTH_TEST);
      }
      setDepthMask(value) {
        this.gl.depthMask(value);
      }
      setCullFace(value) {
        this.gl[value ? "enable" : "disable"](this.gl.CULL_FACE);
      }
      setFrontFace(value) {
        this.gl.frontFace(this.gl[value ? "CW" : "CCW"]);
      }
      setBlendMode(value) {
        if (value !== this.blendMode) {
          this.blendMode = value;
          value = this.blendModes[value];
          var gl = this.gl;
          2 === value.length ? gl.blendFunc(value[0], value[1]) : gl.blendFuncSeparate(value[0], value[1], value[2], value[3]);
          6 === value.length ? (this._blendEq = !0, gl.blendEquationSeparate(value[4], value[5])) : this._blendEq && (this._blendEq = !1, gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD));
        }
      }
      setPolygonOffset(value, scale) {
        this.gl.polygonOffset(value, scale);
      }
      reset() {
        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, !1);
        this.forceState(this.defaultState);
        this._blendEq = !0;
        this.blendMode = -1;
        this.setBlendMode(0);
      }
      updateCheck(func, value) {
        const index = this.checks.indexOf(func);
        value && -1 === index ? this.checks.push(func) : !value && -1 !== index && this.checks.splice(index, 1);
      }
      static checkBlendMode(system, state) {
        system.setBlendMode(state.blendMode);
      }
      static checkPolygonOffset(system, state) {
        system.setPolygonOffset(1, state.polygonOffset);
      }
      destroy() {
        this.gl = null;
      }
    };
    return node_modules$$pixi$core$lib$state$StateSystem$classdecl$var6;
  })();
  require.extension = {type:global.ExtensionType.RendererSystem, name:"state"};
  global.extensions.add(require);
  exports.StateSystem = require;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$state$StateSystem.js.map
