{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$OverlayBlend.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,GAA0F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG9HC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACAC,SAAAA,GAAkBJ,OAAA,CAAQ,yEAAR,CAAlBI;AAEJ,cAAA;AACA,OAAMC,aAAN,QAA2BD,QAAgBA,CAAAA,eAA3C;AACEE,eAAW,EAAG;AACZ,WAAA,CAAM,CACJC,GAAI,CACFC,UAAY,knBADV;AAkBFC,WAAO,6HAlBL,CADA,EAuBJC,IAAK,CACHF,UAAY,6qBADT;AAkBHC,WAAO,gJAlBJ,CAvBD,CAAN,CAAA;AADY;AADhB;AAmDAJ,cAAaM,CAAAA,SAAb,GAAyB,CACvBC,KAAM,SADiB,EAEvBC,KAAMV,MAAWW,CAAAA,aAAcC,CAAAA,SAFR,CAAzB;AAKAb,SAAQG,CAAAA,YAAR,GAAuBA,YAAvB;AA/DkI,CAAlI;;",
"sources":["node_modules/pixi_DOT_js/lib/advanced-blend-modes/OverlayBlend.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$OverlayBlend\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../extensions/Extensions.js');\nvar BlendModeFilter = require('../filters/blend-modes/BlendModeFilter.js');\n\n\"use strict\";\nclass OverlayBlend extends BlendModeFilter.BlendModeFilter {\n  constructor() {\n    super({\n      gl: {\n        functions: `\n                float overlay(float base, float blend)\n                {\n                    return (base < 0.5) ? (2.0*base*blend) : (1.0-2.0*(1.0-base)*(1.0-blend));\n                }\n\n                vec3 blendOverlay(vec3 base, vec3 blend, float opacity)\n                {\n                    vec3 blended = vec3(\n                        overlay(base.r, blend.r),\n                        overlay(base.g, blend.g),\n                        overlay(base.b, blend.b)\n                    );\n   \n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                `,\n        main: `\n                finalColor = vec4(blendOverlay(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n                `\n      },\n      gpu: {\n        functions: `\n                fn overlay(base: f32, blend: f32) -> f32\n                {\n                    return select((1.0-2.0*(1.0-base)*(1.0-blend)), (2.0*base*blend), base < 0.5);\n                }\n\n                fn blendOverlay(base: vec3<f32>, blend: vec3<f32>, opacity: f32) -> vec3<f32>\n                {\n                    let blended = vec3<f32>(\n                        overlay(base.r, blend.r),\n                        overlay(base.g, blend.g),\n                        overlay(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                `,\n        main: `\n                out = vec4<f32>(blendOverlay(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n                `\n      }\n    });\n  }\n}\n/** @ignore */\nOverlayBlend.extension = {\n  name: \"overlay\",\n  type: Extensions.ExtensionType.BlendMode\n};\n\nexports.OverlayBlend = OverlayBlend;\n//# sourceMappingURL=OverlayBlend.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","BlendModeFilter","OverlayBlend","constructor","gl","functions","main","gpu","extension","name","type","ExtensionType","BlendMode"]
}
