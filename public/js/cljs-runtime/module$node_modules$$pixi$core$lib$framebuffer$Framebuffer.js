shadow$provide.module$node_modules$$pixi$core$lib$framebuffer$Framebuffer = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index"), runner = require("module$node_modules$$pixi$runner$lib$index"), BaseTexture = require("module$node_modules$$pixi$core$lib$textures$BaseTexture");
  class Framebuffer {
    constructor(width, height) {
      if (this.width = Math.round(width), this.height = Math.round(height), !this.width || !this.height) {
        throw Error("Framebuffer width or height is zero");
      }
      this.depth = this.stencil = !1;
      this.dirtySize = this.dirtyFormat = this.dirtyId = 0;
      this.depthTexture = null;
      this.colorTextures = [];
      this.glFramebuffers = {};
      this.disposeRunner = new runner.Runner("disposeFramebuffer");
      this.multisample = constants.MSAA_QUALITY.NONE;
    }
    get colorTexture() {
      return this.colorTextures[0];
    }
    addColorTexture(index = 0, texture) {
      return this.colorTextures[index] = texture || new BaseTexture.BaseTexture(null, {scaleMode:constants.SCALE_MODES.NEAREST, resolution:1, mipmap:constants.MIPMAP_MODES.OFF, width:this.width, height:this.height}), this.dirtyId++, this.dirtyFormat++, this;
    }
    addDepthTexture(texture) {
      return this.depthTexture = texture || new BaseTexture.BaseTexture(null, {scaleMode:constants.SCALE_MODES.NEAREST, resolution:1, width:this.width, height:this.height, mipmap:constants.MIPMAP_MODES.OFF, format:constants.FORMATS.DEPTH_COMPONENT, type:constants.TYPES.UNSIGNED_SHORT}), this.dirtyId++, this.dirtyFormat++, this;
    }
    enableDepth() {
      return this.depth = !0, this.dirtyId++, this.dirtyFormat++, this;
    }
    enableStencil() {
      return this.stencil = !0, this.dirtyId++, this.dirtyFormat++, this;
    }
    resize(width, height) {
      if (width = Math.round(width), height = Math.round(height), !width || !height) {
        throw Error("Framebuffer width and height must not be zero");
      }
      if (width !== this.width || height !== this.height) {
        this.width = width;
        this.height = height;
        this.dirtyId++;
        this.dirtySize++;
        for (var i = 0; i < this.colorTextures.length; i++) {
          const texture = this.colorTextures[i], resolution = texture.resolution;
          texture.setSize(width / resolution, height / resolution);
        }
        this.depthTexture && (i = this.depthTexture.resolution, this.depthTexture.setSize(width / i, height / i));
      }
    }
    dispose() {
      this.disposeRunner.emit(this, !1);
    }
    destroyDepthTexture() {
      this.depthTexture && (this.depthTexture.destroy(), this.depthTexture = null, ++this.dirtyId, ++this.dirtyFormat);
    }
  }
  exports.Framebuffer = Framebuffer;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$framebuffer$Framebuffer.js.map
