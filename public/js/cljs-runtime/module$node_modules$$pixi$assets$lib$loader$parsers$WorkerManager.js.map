{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$loader$parsers$WorkerManager.js",
"lineCount":65,
"mappings":"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",
"sources":["node_modules/@pixi/assets/lib/loader/parsers/WorkerManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$loader$parsers$WorkerManager\"] = function(global,require,module,exports) {\n\"use strict\";\nvar checkImageBitmap_worker = require(\"../../_virtual/checkImageBitmap.worker.js\"), loadImageBitmap_worker = require(\"../../_virtual/loadImageBitmap.worker.js\");\nlet UUID = 0, MAX_WORKERS;\nclass WorkerManagerClass {\n  constructor() {\n    this._initialized = !1, this._createdWorkers = 0, this.workerPool = [], this.queue = [], this.resolveHash = {};\n  }\n  isImageBitmapSupported() {\n    return this._isImageBitmapSupported !== void 0 ? this._isImageBitmapSupported : (this._isImageBitmapSupported = new Promise((resolve) => {\n      const { worker } = new checkImageBitmap_worker.default();\n      worker.addEventListener(\"message\", (event) => {\n        worker.terminate(), checkImageBitmap_worker.default.revokeObjectURL(), resolve(event.data);\n      });\n    }), this._isImageBitmapSupported);\n  }\n  loadImageBitmap(src) {\n    return this._run(\"loadImageBitmap\", [src]);\n  }\n  async _initWorkers() {\n    this._initialized || (this._initialized = !0);\n  }\n  getWorker() {\n    MAX_WORKERS === void 0 && (MAX_WORKERS = navigator.hardwareConcurrency || 4);\n    let worker = this.workerPool.pop();\n    return !worker && this._createdWorkers < MAX_WORKERS && (this._createdWorkers++, worker = new loadImageBitmap_worker.default().worker, worker.addEventListener(\"message\", (event) => {\n      this.complete(event.data), this.returnWorker(event.target), this.next();\n    })), worker;\n  }\n  returnWorker(worker) {\n    this.workerPool.push(worker);\n  }\n  complete(data) {\n    data.error !== void 0 ? this.resolveHash[data.uuid].reject(data.error) : this.resolveHash[data.uuid].resolve(data.data), this.resolveHash[data.uuid] = null;\n  }\n  async _run(id, args) {\n    await this._initWorkers();\n    const promise = new Promise((resolve, reject) => {\n      this.queue.push({ id, arguments: args, resolve, reject });\n    });\n    return this.next(), promise;\n  }\n  next() {\n    if (!this.queue.length)\n      return;\n    const worker = this.getWorker();\n    if (!worker)\n      return;\n    const toDo = this.queue.pop(), id = toDo.id;\n    this.resolveHash[UUID] = { resolve: toDo.resolve, reject: toDo.reject }, worker.postMessage({\n      data: toDo.arguments,\n      uuid: UUID++,\n      id\n    });\n  }\n}\nconst WorkerManager = new WorkerManagerClass();\nexports.WorkerManager = WorkerManager;\n//# sourceMappingURL=WorkerManager.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","checkImageBitmap_worker","loadImageBitmap_worker","UUID","MAX_WORKERS","WorkerManagerClass","constructor","_initialized","_createdWorkers","workerPool","queue","resolveHash","isImageBitmapSupported","_isImageBitmapSupported","Promise","resolve","worker","default","addEventListener","event","terminate","revokeObjectURL","data","loadImageBitmap","src","_run","_initWorkers","getWorker","navigator","hardwareConcurrency","pop","complete","returnWorker","target","next","push","error","uuid","reject","id","args","promise","arguments","length","toDo","postMessage","WorkerManager"]
}
