{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsContextSystem.js",
"lineCount":109,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/GraphicsContextSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsContextSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar getTextureBatchBindGroup = require('../../../rendering/batcher/gpu/getTextureBatchBindGroup.js');\nvar DefaultBatcher = require('../../../rendering/batcher/shared/DefaultBatcher.js');\nvar InstructionSet = require('../../../rendering/renderers/shared/instructions/InstructionSet.js');\nvar deprecation = require('../../../utils/logging/deprecation.js');\nvar PoolGroup = require('../../../utils/pool/PoolGroup.js');\nvar buildContextBatches = require('./utils/buildContextBatches.js');\n\n\"use strict\";\nclass GpuGraphicsContext {\n  constructor() {\n    this.batches = [];\n    this.geometryData = {\n      vertices: [],\n      uvs: [],\n      indices: []\n    };\n  }\n}\nclass GraphicsContextRenderData {\n  constructor() {\n    this.batcher = new DefaultBatcher.DefaultBatcher();\n    this.instructions = new InstructionSet.InstructionSet();\n  }\n  init() {\n    this.instructions.reset();\n  }\n  /**\n   * @deprecated since version 8.0.0\n   * Use `batcher.geometry` instead.\n   * @see {Batcher#geometry}\n   */\n  get geometry() {\n    deprecation.deprecation(deprecation.v8_3_4, \"GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead.\");\n    return this.batcher.geometry;\n  }\n}\nconst _GraphicsContextSystem = class _GraphicsContextSystem {\n  constructor(renderer) {\n    // the root context batches, used to either make a batch or geometry\n    // all graphics use this as a base\n    this._gpuContextHash = {};\n    // used for non-batchable graphics\n    this._graphicsDataContextHash = /* @__PURE__ */ Object.create(null);\n    renderer.renderableGC.addManagedHash(this, \"_gpuContextHash\");\n    renderer.renderableGC.addManagedHash(this, \"_graphicsDataContextHash\");\n  }\n  /**\n   * Runner init called, update the default options\n   * @ignore\n   */\n  init(options) {\n    _GraphicsContextSystem.defaultOptions.bezierSmoothness = options?.bezierSmoothness ?? _GraphicsContextSystem.defaultOptions.bezierSmoothness;\n  }\n  getContextRenderData(context) {\n    return this._graphicsDataContextHash[context.uid] || this._initContextRenderData(context);\n  }\n  // Context management functions\n  updateGpuContext(context) {\n    let gpuContext = this._gpuContextHash[context.uid] || this._initContext(context);\n    if (context.dirty) {\n      if (gpuContext) {\n        this._cleanGraphicsContextData(context);\n      } else {\n        gpuContext = this._initContext(context);\n      }\n      buildContextBatches.buildContextBatches(context, gpuContext);\n      const batchMode = context.batchMode;\n      if (context.customShader || batchMode === \"no-batch\") {\n        gpuContext.isBatchable = false;\n      } else if (batchMode === \"auto\") {\n        gpuContext.isBatchable = gpuContext.geometryData.vertices.length < 400;\n      }\n      context.dirty = false;\n    }\n    return gpuContext;\n  }\n  getGpuContext(context) {\n    return this._gpuContextHash[context.uid] || this._initContext(context);\n  }\n  _initContextRenderData(context) {\n    const graphicsData = PoolGroup.BigPool.get(GraphicsContextRenderData);\n    const { batches, geometryData } = this._gpuContextHash[context.uid];\n    const vertexSize = geometryData.vertices.length;\n    const indexSize = geometryData.indices.length;\n    for (let i = 0; i < batches.length; i++) {\n      batches[i].applyTransform = false;\n    }\n    const batcher = graphicsData.batcher;\n    batcher.ensureAttributeBuffer(vertexSize);\n    batcher.ensureIndexBuffer(indexSize);\n    batcher.begin();\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batcher.add(batch);\n    }\n    batcher.finish(graphicsData.instructions);\n    const geometry = batcher.geometry;\n    geometry.indexBuffer.setDataWithSize(batcher.indexBuffer, batcher.indexSize, true);\n    geometry.buffers[0].setDataWithSize(batcher.attributeBuffer.float32View, batcher.attributeSize, true);\n    const drawBatches = batcher.batches;\n    for (let i = 0; i < drawBatches.length; i++) {\n      const batch = drawBatches[i];\n      batch.bindGroup = getTextureBatchBindGroup.getTextureBatchBindGroup(batch.textures.textures, batch.textures.count);\n    }\n    this._graphicsDataContextHash[context.uid] = graphicsData;\n    return graphicsData;\n  }\n  _initContext(context) {\n    const gpuContext = new GpuGraphicsContext();\n    gpuContext.context = context;\n    this._gpuContextHash[context.uid] = gpuContext;\n    context.on(\"destroy\", this.onGraphicsContextDestroy, this);\n    return this._gpuContextHash[context.uid];\n  }\n  onGraphicsContextDestroy(context) {\n    this._cleanGraphicsContextData(context);\n    context.off(\"destroy\", this.onGraphicsContextDestroy, this);\n    this._gpuContextHash[context.uid] = null;\n  }\n  _cleanGraphicsContextData(context) {\n    const gpuContext = this._gpuContextHash[context.uid];\n    if (!gpuContext.isBatchable) {\n      if (this._graphicsDataContextHash[context.uid]) {\n        PoolGroup.BigPool.return(this.getContextRenderData(context));\n        this._graphicsDataContextHash[context.uid] = null;\n      }\n    }\n    if (gpuContext.batches) {\n      gpuContext.batches.forEach((batch) => {\n        PoolGroup.BigPool.return(batch);\n      });\n    }\n  }\n  destroy() {\n    for (const i in this._gpuContextHash) {\n      if (this._gpuContextHash[i]) {\n        this.onGraphicsContextDestroy(this._gpuContextHash[i].context);\n      }\n    }\n  }\n};\n/** @ignore */\n_GraphicsContextSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem,\n    Extensions.ExtensionType.CanvasSystem\n  ],\n  name: \"graphicsContext\"\n};\n/** The default options for the GraphicsContextSystem. */\n_GraphicsContextSystem.defaultOptions = {\n  /**\n   * A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother)\n   * @default 0.5\n   */\n  bezierSmoothness: 0.5\n};\nlet GraphicsContextSystem = _GraphicsContextSystem;\n\nexports.GpuGraphicsContext = GpuGraphicsContext;\nexports.GraphicsContextRenderData = GraphicsContextRenderData;\nexports.GraphicsContextSystem = GraphicsContextSystem;\n//# sourceMappingURL=GraphicsContextSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","getTextureBatchBindGroup","DefaultBatcher","InstructionSet","deprecation","PoolGroup","buildContextBatches","GpuGraphicsContext","constructor","batches","geometryData","vertices","uvs","indices","GraphicsContextRenderData","batcher","instructions","init","reset","v8_3_4","geometry","renderer","_gpuContextHash","_graphicsDataContextHash","Object","create","renderableGC","addManagedHash","options","_GraphicsContextSystem","defaultOptions","bezierSmoothness","getContextRenderData","context","uid","_initContextRenderData","updateGpuContext","gpuContext","_initContext","dirty","_cleanGraphicsContextData","batchMode","customShader","isBatchable","length","getGpuContext","graphicsData","BigPool","get","vertexSize","indexSize","i","applyTransform","ensureAttributeBuffer","ensureIndexBuffer","begin","add","batch","finish","indexBuffer","setDataWithSize","buffers","attributeBuffer","float32View","attributeSize","drawBatches","bindGroup","textures","count","on","onGraphicsContextDestroy","off","return","forEach","destroy","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name","GraphicsContextSystem"]
}
