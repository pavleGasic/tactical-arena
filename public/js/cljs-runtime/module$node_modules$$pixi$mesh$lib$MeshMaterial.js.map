{
"version":3,
"file":"module$node_modules$$pixi$mesh$lib$MeshMaterial.js",
"lineCount":50,
"mappings":"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",
"sources":["node_modules/@pixi/mesh/lib/MeshMaterial.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$mesh$lib$MeshMaterial\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), mesh$1 = require(\"./shader/mesh.frag.js\"), mesh = require(\"./shader/mesh.vert.js\");\nclass MeshMaterial extends core.Shader {\n  /**\n   * @param uSampler - Texture that material uses to render.\n   * @param options - Additional options\n   * @param {number} [options.alpha=1] - Default alpha.\n   * @param {PIXI.ColorSource} [options.tint=0xFFFFFF] - Default tint.\n   * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n   * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n   * @param {object} [options.uniforms] - Custom uniforms.\n   */\n  constructor(uSampler, options) {\n    const uniforms = {\n      uSampler,\n      alpha: 1,\n      uTextureMatrix: core.Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    };\n    options = Object.assign({\n      tint: 16777215,\n      alpha: 1,\n      pluginName: \"batch\"\n    }, options), options.uniforms && Object.assign(uniforms, options.uniforms), super(options.program || core.Program.from(mesh.default, mesh$1.default), uniforms), this._colorDirty = !1, this.uvMatrix = new core.TextureMatrix(uSampler), this.batchable = options.program === void 0, this.pluginName = options.pluginName, this._tintColor = new core.Color(options.tint), this._tintRGB = this._tintColor.toLittleEndianNumber(), this._colorDirty = !0, this.alpha = options.alpha;\n  }\n  /** Reference to the texture being rendered. */\n  get texture() {\n    return this.uniforms.uSampler;\n  }\n  set texture(value) {\n    this.uniforms.uSampler !== value && (!this.uniforms.uSampler.baseTexture.alphaMode != !value.baseTexture.alphaMode && (this._colorDirty = !0), this.uniforms.uSampler = value, this.uvMatrix.texture = value);\n  }\n  /**\n   * This gets automatically set by the object using this.\n   * @default 1\n   */\n  set alpha(value) {\n    value !== this._alpha && (this._alpha = value, this._colorDirty = !0);\n  }\n  get alpha() {\n    return this._alpha;\n  }\n  /**\n   * Multiply tint for the material.\n   * @default 0xFFFFFF\n   */\n  set tint(value) {\n    value !== this.tint && (this._tintColor.setValue(value), this._tintRGB = this._tintColor.toLittleEndianNumber(), this._colorDirty = !0);\n  }\n  get tint() {\n    return this._tintColor.value;\n  }\n  /**\n   * Get the internal number from tint color\n   * @ignore\n   */\n  get tintValue() {\n    return this._tintColor.toNumber();\n  }\n  /** Gets called automatically by the Mesh. Intended to be overridden for custom {@link PIXI.MeshMaterial} objects. */\n  update() {\n    if (this._colorDirty) {\n      this._colorDirty = !1;\n      const applyToChannels = this.texture.baseTexture.alphaMode;\n      core.Color.shared.setValue(this._tintColor).premultiply(this._alpha, applyToChannels).toArray(this.uniforms.uColor);\n    }\n    this.uvMatrix.update() && (this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord);\n  }\n}\nexports.MeshMaterial = MeshMaterial;\n//# sourceMappingURL=MeshMaterial.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","mesh$1","mesh","MeshMaterial","Shader","constructor","uSampler","options","uniforms","alpha","uTextureMatrix","Matrix","IDENTITY","uColor","Float32Array","Object","assign","tint","pluginName","program","Program","from","default","_colorDirty","uvMatrix","TextureMatrix","batchable","_tintColor","Color","_tintRGB","toLittleEndianNumber","value","baseTexture","alphaMode","texture","_alpha","setValue","toNumber","update","applyToChannels","shared","premultiply","toArray","mapCoord"]
}
