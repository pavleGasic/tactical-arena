{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$gl$GlGraphicsAdaptor.js",
"lineCount":38,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/gl/GlGraphicsAdaptor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$gl$GlGraphicsAdaptor\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar maxRecommendedTextures = require('../../../rendering/batcher/gl/utils/maxRecommendedTextures.js');\nvar compileHighShaderToProgram = require('../../../rendering/high-shader/compileHighShaderToProgram.js');\nvar colorBit = require('../../../rendering/high-shader/shader-bits/colorBit.js');\nvar generateTextureBatchBit = require('../../../rendering/high-shader/shader-bits/generateTextureBatchBit.js');\nvar localUniformBit = require('../../../rendering/high-shader/shader-bits/localUniformBit.js');\nvar roundPixelsBit = require('../../../rendering/high-shader/shader-bits/roundPixelsBit.js');\nvar getBatchSamplersUniformGroup = require('../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.js');\nvar Shader = require('../../../rendering/renderers/shared/shader/Shader.js');\nvar UniformGroup = require('../../../rendering/renderers/shared/shader/UniformGroup.js');\n\n\"use strict\";\nclass GlGraphicsAdaptor {\n  init() {\n    const uniforms = new UniformGroup.UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix.Matrix(), type: \"mat3x3<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = maxRecommendedTextures.getMaxTexturesPerBatch();\n    const glProgram = compileHighShaderToProgram.compileHighShaderGlProgram({\n      name: \"graphics\",\n      bits: [\n        colorBit.colorBitGl,\n        generateTextureBatchBit.generateTextureBatchBitGl(maxTextures),\n        localUniformBit.localUniformBitGl,\n        roundPixelsBit.roundPixelsBitGl\n      ]\n    });\n    this.shader = new Shader.Shader({\n      glProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup.getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n  execute(graphicsPipe, renderable) {\n    const context = renderable.context;\n    const shader = context.customShader || this.shader;\n    const renderer = graphicsPipe.renderer;\n    const contextSystem = renderer.graphicsContext;\n    const {\n      batcher,\n      instructions\n    } = contextSystem.getContextRenderData(context);\n    shader.groups[0] = renderer.globalUniforms.bindGroup;\n    renderer.state.set(graphicsPipe.state);\n    renderer.shader.bind(shader);\n    renderer.geometry.bind(batcher.geometry, shader.glProgram);\n    const batches = instructions.instructions;\n    for (let i = 0; i < instructions.instructionSize; i++) {\n      const batch = batches[i];\n      if (batch.size) {\n        for (let j = 0; j < batch.textures.count; j++) {\n          renderer.texture.bind(batch.textures.textures[j], j);\n        }\n        renderer.geometry.draw(batch.topology, batch.size, batch.start);\n      }\n    }\n  }\n  destroy() {\n    this.shader.destroy(true);\n    this.shader = null;\n  }\n}\n/** @ignore */\nGlGraphicsAdaptor.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipesAdaptor\n  ],\n  name: \"graphics\"\n};\n\nexports.GlGraphicsAdaptor = GlGraphicsAdaptor;\n//# sourceMappingURL=GlGraphicsAdaptor.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Matrix","maxRecommendedTextures","compileHighShaderToProgram","colorBit","generateTextureBatchBit","localUniformBit","roundPixelsBit","getBatchSamplersUniformGroup","Shader","UniformGroup","GlGraphicsAdaptor","init","uniforms","uColor","value","Float32Array","type","uTransformMatrix","uRound","maxTextures","getMaxTexturesPerBatch","glProgram","compileHighShaderGlProgram","name","bits","colorBitGl","generateTextureBatchBitGl","localUniformBitGl","roundPixelsBitGl","shader","resources","localUniforms","batchSamplers","execute","graphicsPipe","renderable","context","customShader","renderer","batcher","instructions","graphicsContext","getContextRenderData","groups","globalUniforms","bindGroup","state","set","bind","geometry","batches","i","instructionSize","batch","size","j","textures","count","texture","draw","topology","start","destroy","extension","ExtensionType","WebGLPipesAdaptor"]
}
