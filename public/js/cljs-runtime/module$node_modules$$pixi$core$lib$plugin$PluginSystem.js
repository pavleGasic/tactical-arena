shadow$provide.module$node_modules$$pixi$core$lib$plugin$PluginSystem = function(global, require, module, exports) {
  global = require("module$node_modules$$pixi$extensions$lib$index");
  var utils = require("module$node_modules$$pixi$utils$lib$index");
  class PluginSystem {
    constructor(renderer) {
      this.renderer = renderer;
      this.plugins = {};
      Object.defineProperties(this.plugins, {extract:{enumerable:!1, get() {
        return utils.deprecation("7.0.0", "renderer.plugins.extract has moved to renderer.extract"), renderer.extract;
      }}, prepare:{enumerable:!1, get() {
        return utils.deprecation("7.0.0", "renderer.plugins.prepare has moved to renderer.prepare"), renderer.prepare;
      }}, interaction:{enumerable:!1, get() {
        return utils.deprecation("7.0.0", "renderer.plugins.interaction has been deprecated, use renderer.events"), renderer.events;
      }}});
    }
    init() {
      const staticMap = this.rendererPlugins;
      for (const o in staticMap) {
        this.plugins[o] = new staticMap[o](this.renderer);
      }
    }
    destroy() {
      for (const o in this.plugins) {
        this.plugins[o].destroy(), this.plugins[o] = null;
      }
    }
  }
  PluginSystem.extension = {type:[global.ExtensionType.RendererSystem, global.ExtensionType.CanvasRendererSystem], name:"_plugin"};
  global.extensions.add(PluginSystem);
  exports.PluginSystem = PluginSystem;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$plugin$PluginSystem.js.map
