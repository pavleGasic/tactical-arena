{
"version":3,
"file":"module$node_modules$$pixi$core$lib$batch$ObjectRenderer.js",
"lineCount":21,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,GAA4E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEpH,OAAMC,eAAN;AAIEC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKA,CAAAA,QAAL,GAAgBA,QAAhB;AADoB;AAItBC,SAAK,EAAG;;AAGRC,WAAO,EAAG;AACR,UAAKF,CAAAA,QAAL,GAAgB,IAAhB;AADQ;AASVG,SAAK,EAAG;;AAGRC,QAAI,EAAG;AACL,UAAKH,CAAAA,KAAL,EAAA;AADK;AAQPI,UAAM,CAACC,OAAD,CAAU;;AA/BlB;AAkCAT,SAAQC,CAAAA,cAAR,GAAyBA,cAAzB;AApCoH,CAApH;;",
"sources":["node_modules/@pixi/core/lib/batch/ObjectRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$batch$ObjectRenderer\"] = function(global,require,module,exports) {\n\"use strict\";\nclass ObjectRenderer {\n  /**\n   * @param renderer - The renderer this manager works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  /** Stub method that should be used to empty the current batch by rendering objects now. */\n  flush() {\n  }\n  /** Generic destruction method that frees all resources. This should be called by subclasses. */\n  destroy() {\n    this.renderer = null;\n  }\n  /**\n   * Stub method that initializes any state required before\n   * rendering starts. It is different from the `prerender`\n   * signal, which occurs every frame, in that it is called\n   * whenever an object requests _this_ renderer specifically.\n   */\n  start() {\n  }\n  /** Stops the renderer. It should free up any state and become dormant. */\n  stop() {\n    this.flush();\n  }\n  /**\n   * Keeps the object to render. It doesn't have to be\n   * rendered immediately.\n   * @param {PIXI.DisplayObject} _object - The object to render.\n   */\n  render(_object) {\n  }\n}\nexports.ObjectRenderer = ObjectRenderer;\n//# sourceMappingURL=ObjectRenderer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ObjectRenderer","constructor","renderer","flush","destroy","start","stop","render","_object"]
}
