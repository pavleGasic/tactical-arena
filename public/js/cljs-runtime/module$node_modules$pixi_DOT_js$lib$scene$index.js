shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$index = function(global, require, module, exports) {
  var Bounds = require("module$node_modules$pixi_DOT_js$lib$scene$container$bounds$Bounds"), getFastGlobalBounds = require("module$node_modules$pixi_DOT_js$lib$scene$container$bounds$getFastGlobalBounds"), getGlobalBounds = require("module$node_modules$pixi_DOT_js$lib$scene$container$bounds$getGlobalBounds"), getLocalBounds = require("module$node_modules$pixi_DOT_js$lib$scene$container$bounds$getLocalBounds"), getRenderableBounds = require("module$node_modules$pixi_DOT_js$lib$scene$container$bounds$getRenderableBounds"), 
  matrixAndBoundsPool = require("module$node_modules$pixi_DOT_js$lib$scene$container$bounds$utils$matrixAndBoundsPool"), cacheAsTextureMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$cacheAsTextureMixin"), childrenHelperMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$childrenHelperMixin"), collectRenderablesMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$collectRenderablesMixin"), effectsMixin = 
  require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$effectsMixin"), findMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$findMixin"), getFastGlobalBoundsMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$getFastGlobalBoundsMixin"), getGlobalMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$getGlobalMixin"), measureMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$measureMixin"), 
  onRenderMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$onRenderMixin"), sortMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$sortMixin"), toLocalGlobalMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$toLocalGlobalMixin"), Container = require("module$node_modules$pixi_DOT_js$lib$scene$container$Container"), CustomRenderPipe = require("module$node_modules$pixi_DOT_js$lib$scene$container$CustomRenderPipe");
  require("module$node_modules$pixi_DOT_js$lib$scene$container$destroyTypes");
  require("module$node_modules$pixi_DOT_js$lib$scene$container$Effect");
  var RenderContainer = require("module$node_modules$pixi_DOT_js$lib$scene$container$RenderContainer"), RenderGroup = require("module$node_modules$pixi_DOT_js$lib$scene$container$RenderGroup"), RenderGroupPipe = require("module$node_modules$pixi_DOT_js$lib$scene$container$RenderGroupPipe"), RenderGroupSystem = require("module$node_modules$pixi_DOT_js$lib$scene$container$RenderGroupSystem"), assignWithIgnore = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$assignWithIgnore"), checkChildrenDidChange = 
  require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$checkChildrenDidChange"), clearList = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$clearList"), collectAllRenderables = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$collectAllRenderables"), definedProps = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$definedProps"), executeInstructions = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$executeInstructions"), 
  mixHexColors = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$mixHexColors"), multiplyColors = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$multiplyColors"), multiplyHexColors = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$multiplyHexColors"), updateLocalTransform = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$updateLocalTransform"), updateRenderGroupTransforms = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$updateRenderGroupTransforms"), 
  updateWorldTransform = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$updateWorldTransform"), validateRenderables = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$validateRenderables"), GlGraphicsAdaptor = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$gl$GlGraphicsAdaptor"), colorToUniform = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$gpu$colorToUniform"), GpuGraphicsAdaptor = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$gpu$GpuGraphicsAdaptor"), 
  BatchableGraphics = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$BatchableGraphics"), buildAdaptiveBezier = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildAdaptiveBezier"), buildAdaptiveQuadratic = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildAdaptiveQuadratic"), buildArc = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildArc"), buildArcTo = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildArcTo"), 
  buildArcToSvg = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildArcToSvg"), buildCircle = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildCircle"), buildLine = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildLine"), buildPixelLine = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildPixelLine"), buildPolygon = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildPolygon"), 
  buildRectangle = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildRectangle"), buildTriangle = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildTriangle");
  require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$ShapeBuildCommand");
  var _const = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$const"), FillGradient = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$fill$FillGradient"), FillPattern = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$fill$FillPattern");
  require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$FillTypes");
  var Graphics = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$Graphics"), GraphicsContext = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsContext"), GraphicsContextSystem = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsContextSystem"), GraphicsPipe = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsPipe"), GraphicsPath = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$path$GraphicsPath"), 
  roundShape = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$path$roundShape"), ShapePath = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$path$ShapePath"), parseSVGDefinitions = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$svg$parseSVGDefinitions"), parseSVGFloatAttribute = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$svg$parseSVGFloatAttribute"), parseSVGPath = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$svg$parseSVGPath"), 
  parseSVGStyle = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$svg$parseSVGStyle"), SVGParser = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$svg$SVGParser"), extractSvgUrlId = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$svg$utils$extractSvgUrlId"), buildContextBatches = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$utils$buildContextBatches"), buildGeometryFromPath = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$utils$buildGeometryFromPath"), 
  convertFillInputToFillStyle = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$utils$convertFillInputToFillStyle"), generateTextureFillMatrix = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$utils$generateTextureFillMatrix"), getOrientationOfPoints = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$utils$getOrientationOfPoints"), triangulateWithHoles = require("module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$utils$triangulateWithHoles"), 
  RenderLayer = require("module$node_modules$pixi_DOT_js$lib$scene$layers$RenderLayer"), PerspectiveMesh = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$PerspectiveMesh"), PerspectivePlaneGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$PerspectivePlaneGeometry"), applyProjectiveTransformationToPlane = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$utils$applyProjectiveTransformationToPlane"), compute2DProjections = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$utils$compute2DProjections"), 
  MeshPlane = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_plane$MeshPlane"), PlaneGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_plane$PlaneGeometry"), MeshRope = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$MeshRope"), MeshSimple = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$MeshSimple"), RopeGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$RopeGeometry"), GlMeshAdaptor = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$gl$GlMeshAdaptor"), 
  GpuMeshAdapter = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$gpu$GpuMeshAdapter"), BatchableMesh = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$BatchableMesh"), getTextureDefaultMatrix = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$getTextureDefaultMatrix"), Mesh = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$Mesh"), MeshGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$MeshGeometry"), MeshPipe = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$MeshPipe"), 
  GlParticleContainerAdaptor = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$gl$GlParticleContainerAdaptor"), GpuParticleContainerAdaptor = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$gpu$GpuParticleContainerAdaptor"), GlParticleContainerPipe = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$GlParticleContainerPipe"), GpuParticleContainerPipe = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$GpuParticleContainerPipe"), 
  Particle = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle"), ParticleBuffer = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$ParticleBuffer"), ParticleContainer = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$ParticleContainer"), ParticleContainerPipe = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$ParticleContainerPipe"), particleData = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$particleData"), 
  ParticleShader = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$shader$ParticleShader"), createIndicesForQuads = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$utils$createIndicesForQuads"), generateParticleUpdateFunction = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$utils$generateParticleUpdateFunction"), AnimatedSprite = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_animated$AnimatedSprite"), 
  NineSliceGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceGeometry"), NineSliceSprite = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSprite"), NineSliceSpritePipe = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSpritePipe"), tilingBit = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$shader$tilingBit"), TilingSpriteShader = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$shader$TilingSpriteShader"), 
  TilingSprite = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$TilingSprite"), TilingSpritePipe = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$TilingSpritePipe"), applyMatrix = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$utils$applyMatrix"), QuadGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$utils$QuadGeometry"), setPositions = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$utils$setPositions"), 
  setUvs = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$utils$setUvs"), BatchableSprite = require("module$node_modules$pixi_DOT_js$lib$scene$sprite$BatchableSprite"), Sprite = require("module$node_modules$pixi_DOT_js$lib$scene$sprite$Sprite"), SpritePipe = require("module$node_modules$pixi_DOT_js$lib$scene$sprite$SpritePipe"), AbstractBitmapFont = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$AbstractBitmapFont"), bitmapFontTextParser = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$asset$bitmapFontTextParser"), 
  bitmapFontXMLParser = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$asset$bitmapFontXMLParser"), bitmapFontXMLStringParser = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$asset$bitmapFontXMLStringParser"), loadBitmapFont = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$asset$loadBitmapFont"), BitmapFont = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapFont"), BitmapFontManager = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapFontManager"), 
  BitmapText = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapText"), BitmapTextPipe = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapTextPipe"), DynamicBitmapFont = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$DynamicBitmapFont"), getBitmapTextLayout = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$utils$getBitmapTextLayout"), resolveCharacters = require("module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$utils$resolveCharacters"), 
  HTMLText = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLText"), HTMLTextPipe = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextPipe"), HTMLTextRenderData = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextRenderData"), HTMLTextStyle = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextStyle"), HTMLTextSystem = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextSystem"), extractFontFamilies = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$extractFontFamilies"), 
  getFontCss = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$getFontCss"), getSVGUrl = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$getSVGUrl"), getTemporaryCanvasFromImage = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$getTemporaryCanvasFromImage"), loadFontAsBase64 = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$loadFontAsBase64"), loadFontCSS = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$loadFontCSS"), 
  loadSVGImage = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$loadSVGImage"), measureHtmlText = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$measureHtmlText"), textStyleToCSS = require("module$node_modules$pixi_DOT_js$lib$scene$text_html$utils$textStyleToCSS"), AbstractText = require("module$node_modules$pixi_DOT_js$lib$scene$text$AbstractText"), CanvasTextMetrics = require("module$node_modules$pixi_DOT_js$lib$scene$text$canvas$CanvasTextMetrics"), CanvasTextPipe = 
  require("module$node_modules$pixi_DOT_js$lib$scene$text$canvas$CanvasTextPipe"), CanvasTextSystem = require("module$node_modules$pixi_DOT_js$lib$scene$text$canvas$CanvasTextSystem"), fontStringFromTextStyle = require("module$node_modules$pixi_DOT_js$lib$scene$text$canvas$utils$fontStringFromTextStyle"), getCanvasFillStyle = require("module$node_modules$pixi_DOT_js$lib$scene$text$canvas$utils$getCanvasFillStyle"), SdfShader = require("module$node_modules$pixi_DOT_js$lib$scene$text$sdfShader$SdfShader"), 
  localUniformMSDFBit = require("module$node_modules$pixi_DOT_js$lib$scene$text$sdfShader$shader_bits$localUniformMSDFBit"), mSDFBit = require("module$node_modules$pixi_DOT_js$lib$scene$text$sdfShader$shader_bits$mSDFBit"), Text = require("module$node_modules$pixi_DOT_js$lib$scene$text$Text"), TextStyle = require("module$node_modules$pixi_DOT_js$lib$scene$text$TextStyle"), ensureTextStyle = require("module$node_modules$pixi_DOT_js$lib$scene$text$utils$ensureTextStyle"), generateTextStyleKey = require("module$node_modules$pixi_DOT_js$lib$scene$text$utils$generateTextStyleKey"), 
  getPo2TextureFromSource = require("module$node_modules$pixi_DOT_js$lib$scene$text$utils$getPo2TextureFromSource"), updateTextBounds = require("module$node_modules$pixi_DOT_js$lib$scene$text$utils$updateTextBounds"), ViewContainer = require("module$node_modules$pixi_DOT_js$lib$scene$view$ViewContainer"), particles = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$shader$particles_frag"), particles$1 = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$shader$particles_vert"), 
  particles$2 = require("module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$shader$particles_wgsl");
  "use strict";
  exports.Bounds = Bounds.Bounds;
  exports.getFastGlobalBounds = getFastGlobalBounds.getFastGlobalBounds;
  exports._getGlobalBounds = getGlobalBounds._getGlobalBounds;
  exports.getGlobalBounds = getGlobalBounds.getGlobalBounds;
  exports.updateTransformBackwards = getGlobalBounds.updateTransformBackwards;
  exports.getLocalBounds = getLocalBounds.getLocalBounds;
  exports.getParent = getLocalBounds.getParent;
  exports.getGlobalRenderableBounds = getRenderableBounds.getGlobalRenderableBounds;
  exports.boundsPool = matrixAndBoundsPool.boundsPool;
  exports.matrixPool = matrixAndBoundsPool.matrixPool;
  exports.cacheAsTextureMixin = cacheAsTextureMixin.cacheAsTextureMixin;
  exports.childrenHelperMixin = childrenHelperMixin.childrenHelperMixin;
  exports.collectRenderablesMixin = collectRenderablesMixin.collectRenderablesMixin;
  exports.effectsMixin = effectsMixin.effectsMixin;
  exports.findMixin = findMixin.findMixin;
  exports.getFastGlobalBoundsMixin = getFastGlobalBoundsMixin.getFastGlobalBoundsMixin;
  exports.bgr2rgb = getGlobalMixin.bgr2rgb;
  exports.getGlobalMixin = getGlobalMixin.getGlobalMixin;
  exports.measureMixin = measureMixin.measureMixin;
  exports.onRenderMixin = onRenderMixin.onRenderMixin;
  exports.sortMixin = sortMixin.sortMixin;
  exports.toLocalGlobalMixin = toLocalGlobalMixin.toLocalGlobalMixin;
  exports.Container = Container.Container;
  exports.UPDATE_BLEND = Container.UPDATE_BLEND;
  exports.UPDATE_COLOR = Container.UPDATE_COLOR;
  exports.UPDATE_TRANSFORM = Container.UPDATE_TRANSFORM;
  exports.UPDATE_VISIBLE = Container.UPDATE_VISIBLE;
  exports.CustomRenderPipe = CustomRenderPipe.CustomRenderPipe;
  exports.RenderContainer = RenderContainer.RenderContainer;
  exports.RenderGroup = RenderGroup.RenderGroup;
  exports.RenderGroupPipe = RenderGroupPipe.RenderGroupPipe;
  exports.RenderGroupSystem = RenderGroupSystem.RenderGroupSystem;
  exports.assignWithIgnore = assignWithIgnore.assignWithIgnore;
  exports.checkChildrenDidChange = checkChildrenDidChange.checkChildrenDidChange;
  exports.clearList = clearList.clearList;
  exports.collectAllRenderables = collectAllRenderables.collectAllRenderables;
  exports.definedProps = definedProps.definedProps;
  exports.executeInstructions = executeInstructions.executeInstructions;
  exports.mixHexColors = mixHexColors.mixHexColors;
  exports.multiplyColors = multiplyColors.multiplyColors;
  exports.multiplyHexColors = multiplyHexColors.multiplyHexColors;
  exports.updateLocalTransform = updateLocalTransform.updateLocalTransform;
  exports.updateRenderGroupTransform = updateRenderGroupTransforms.updateRenderGroupTransform;
  exports.updateRenderGroupTransforms = updateRenderGroupTransforms.updateRenderGroupTransforms;
  exports.updateTransformAndChildren = updateRenderGroupTransforms.updateTransformAndChildren;
  exports.updateWorldTransform = updateWorldTransform.updateWorldTransform;
  exports.validateRenderables = validateRenderables.validateRenderables;
  exports.GlGraphicsAdaptor = GlGraphicsAdaptor.GlGraphicsAdaptor;
  exports.color32BitToUniform = colorToUniform.color32BitToUniform;
  exports.colorToUniform = colorToUniform.colorToUniform;
  exports.GpuGraphicsAdaptor = GpuGraphicsAdaptor.GpuGraphicsAdaptor;
  exports.BatchableGraphics = BatchableGraphics.BatchableGraphics;
  exports.buildAdaptiveBezier = buildAdaptiveBezier.buildAdaptiveBezier;
  exports.buildAdaptiveQuadratic = buildAdaptiveQuadratic.buildAdaptiveQuadratic;
  exports.buildArc = buildArc.buildArc;
  exports.buildArcTo = buildArcTo.buildArcTo;
  exports.buildArcToSvg = buildArcToSvg.buildArcToSvg;
  exports.buildCircle = buildCircle.buildCircle;
  exports.buildEllipse = buildCircle.buildEllipse;
  exports.buildRoundedRectangle = buildCircle.buildRoundedRectangle;
  exports.buildLine = buildLine.buildLine;
  exports.buildPixelLine = buildPixelLine.buildPixelLine;
  exports.buildPolygon = buildPolygon.buildPolygon;
  exports.buildRectangle = buildRectangle.buildRectangle;
  exports.buildTriangle = buildTriangle.buildTriangle;
  exports.closePointEps = _const.closePointEps;
  exports.curveEps = _const.curveEps;
  exports.FillGradient = FillGradient.FillGradient;
  exports.FillPattern = FillPattern.FillPattern;
  exports.Graphics = Graphics.Graphics;
  exports.GraphicsContext = GraphicsContext.GraphicsContext;
  exports.GpuGraphicsContext = GraphicsContextSystem.GpuGraphicsContext;
  exports.GraphicsContextRenderData = GraphicsContextSystem.GraphicsContextRenderData;
  exports.GraphicsContextSystem = GraphicsContextSystem.GraphicsContextSystem;
  exports.GraphicsPipe = GraphicsPipe.GraphicsPipe;
  exports.GraphicsPath = GraphicsPath.GraphicsPath;
  exports.roundedShapeArc = roundShape.roundedShapeArc;
  exports.roundedShapeQuadraticCurve = roundShape.roundedShapeQuadraticCurve;
  exports.ShapePath = ShapePath.ShapePath;
  exports.parseSVGDefinitions = parseSVGDefinitions.parseSVGDefinitions;
  exports.parseSVGFloatAttribute = parseSVGFloatAttribute.parseSVGFloatAttribute;
  exports.parseSVGPath = parseSVGPath.parseSVGPath;
  exports.parseAttribute = parseSVGStyle.parseAttribute;
  exports.parseSVGStyle = parseSVGStyle.parseSVGStyle;
  exports.styleAttributes = parseSVGStyle.styleAttributes;
  exports.SVGParser = SVGParser.SVGParser;
  exports.extractSvgUrlId = extractSvgUrlId.extractSvgUrlId;
  exports.buildContextBatches = buildContextBatches.buildContextBatches;
  exports.shapeBuilders = buildContextBatches.shapeBuilders;
  exports.buildGeometryFromPath = buildGeometryFromPath.buildGeometryFromPath;
  exports.toFillStyle = convertFillInputToFillStyle.toFillStyle;
  exports.toStrokeStyle = convertFillInputToFillStyle.toStrokeStyle;
  exports.generateTextureMatrix = generateTextureFillMatrix.generateTextureMatrix;
  exports.getOrientationOfPoints = getOrientationOfPoints.getOrientationOfPoints;
  exports.triangulateWithHoles = triangulateWithHoles.triangulateWithHoles;
  exports.RenderLayer = RenderLayer.RenderLayer;
  exports.RenderLayerClass = RenderLayer.RenderLayerClass;
  exports.PerspectiveMesh = PerspectiveMesh.PerspectiveMesh;
  exports.PerspectivePlaneGeometry = PerspectivePlaneGeometry.PerspectivePlaneGeometry;
  exports.applyProjectiveTransformationToPlane = applyProjectiveTransformationToPlane.applyProjectiveTransformationToPlane;
  exports.compute2DProjection = compute2DProjections.compute2DProjection;
  exports.MeshPlane = MeshPlane.MeshPlane;
  exports.PlaneGeometry = PlaneGeometry.PlaneGeometry;
  exports.MeshRope = MeshRope.MeshRope;
  exports.MeshSimple = MeshSimple.MeshSimple;
  exports.RopeGeometry = RopeGeometry.RopeGeometry;
  exports.GlMeshAdaptor = GlMeshAdaptor.GlMeshAdaptor;
  exports.GpuMeshAdapter = GpuMeshAdapter.GpuMeshAdapter;
  exports.BatchableMesh = BatchableMesh.BatchableMesh;
  exports.getTextureDefaultMatrix = getTextureDefaultMatrix.getTextureDefaultMatrix;
  exports.Mesh = Mesh.Mesh;
  exports.MeshGeometry = MeshGeometry.MeshGeometry;
  exports.MeshPipe = MeshPipe.MeshPipe;
  exports.GlParticleContainerAdaptor = GlParticleContainerAdaptor.GlParticleContainerAdaptor;
  exports.GpuParticleContainerAdaptor = GpuParticleContainerAdaptor.GpuParticleContainerAdaptor;
  exports.GlParticleContainerPipe = GlParticleContainerPipe.GlParticleContainerPipe;
  exports.GpuParticleContainerPipe = GpuParticleContainerPipe.GpuParticleContainerPipe;
  exports.Particle = Particle.Particle;
  exports.ParticleBuffer = ParticleBuffer.ParticleBuffer;
  exports.ParticleContainer = ParticleContainer.ParticleContainer;
  exports.ParticleContainerPipe = ParticleContainerPipe.ParticleContainerPipe;
  exports.particleData = particleData.particleData;
  exports.ParticleShader = ParticleShader.ParticleShader;
  exports.createIndicesForQuads = createIndicesForQuads.createIndicesForQuads;
  exports.generateParticleUpdateFunction = generateParticleUpdateFunction.generateParticleUpdateFunction;
  exports.AnimatedSprite = AnimatedSprite.AnimatedSprite;
  exports.NineSliceGeometry = NineSliceGeometry.NineSliceGeometry;
  exports.NineSlicePlane = NineSliceSprite.NineSlicePlane;
  exports.NineSliceSprite = NineSliceSprite.NineSliceSprite;
  exports.NineSliceSpritePipe = NineSliceSpritePipe.NineSliceSpritePipe;
  exports.tilingBit = tilingBit.tilingBit;
  exports.tilingBitGl = tilingBit.tilingBitGl;
  exports.TilingSpriteShader = TilingSpriteShader.TilingSpriteShader;
  exports.TilingSprite = TilingSprite.TilingSprite;
  exports.TilingSpritePipe = TilingSpritePipe.TilingSpritePipe;
  exports.applyMatrix = applyMatrix.applyMatrix;
  exports.QuadGeometry = QuadGeometry.QuadGeometry;
  exports.setPositions = setPositions.setPositions;
  exports.setUvs = setUvs.setUvs;
  exports.BatchableSprite = BatchableSprite.BatchableSprite;
  exports.Sprite = Sprite.Sprite;
  exports.SpritePipe = SpritePipe.SpritePipe;
  exports.AbstractBitmapFont = AbstractBitmapFont.AbstractBitmapFont;
  exports.bitmapFontTextParser = bitmapFontTextParser.bitmapFontTextParser;
  exports.bitmapFontXMLParser = bitmapFontXMLParser.bitmapFontXMLParser;
  exports.bitmapFontXMLStringParser = bitmapFontXMLStringParser.bitmapFontXMLStringParser;
  exports.bitmapFontCachePlugin = loadBitmapFont.bitmapFontCachePlugin;
  exports.loadBitmapFont = loadBitmapFont.loadBitmapFont;
  exports.BitmapFont = BitmapFont.BitmapFont;
  exports.BitmapFontManager = BitmapFontManager.BitmapFontManager;
  exports.BitmapText = BitmapText.BitmapText;
  exports.BitmapTextPipe = BitmapTextPipe.BitmapTextPipe;
  exports.DynamicBitmapFont = DynamicBitmapFont.DynamicBitmapFont;
  exports.getBitmapTextLayout = getBitmapTextLayout.getBitmapTextLayout;
  exports.resolveCharacters = resolveCharacters.resolveCharacters;
  exports.HTMLText = HTMLText.HTMLText;
  exports.HTMLTextPipe = HTMLTextPipe.HTMLTextPipe;
  exports.HTMLTextRenderData = HTMLTextRenderData.HTMLTextRenderData;
  exports.nssvg = HTMLTextRenderData.nssvg;
  exports.nsxhtml = HTMLTextRenderData.nsxhtml;
  exports.HTMLTextStyle = HTMLTextStyle.HTMLTextStyle;
  exports.HTMLTextSystem = HTMLTextSystem.HTMLTextSystem;
  exports.extractFontFamilies = extractFontFamilies.extractFontFamilies;
  exports.FontStylePromiseCache = getFontCss.FontStylePromiseCache;
  exports.getFontCss = getFontCss.getFontCss;
  exports.getSVGUrl = getSVGUrl.getSVGUrl;
  exports.getTemporaryCanvasFromImage = getTemporaryCanvasFromImage.getTemporaryCanvasFromImage;
  exports.loadFontAsBase64 = loadFontAsBase64.loadFontAsBase64;
  exports.loadFontCSS = loadFontCSS.loadFontCSS;
  exports.loadSVGImage = loadSVGImage.loadSVGImage;
  exports.measureHtmlText = measureHtmlText.measureHtmlText;
  exports.textStyleToCSS = textStyleToCSS.textStyleToCSS;
  exports.AbstractText = AbstractText.AbstractText;
  exports.ensureTextOptions = AbstractText.ensureTextOptions;
  exports.CanvasTextMetrics = CanvasTextMetrics.CanvasTextMetrics;
  exports.CanvasTextPipe = CanvasTextPipe.CanvasTextPipe;
  exports.CanvasTextSystem = CanvasTextSystem.CanvasTextSystem;
  exports.fontStringFromTextStyle = fontStringFromTextStyle.fontStringFromTextStyle;
  exports.getCanvasFillStyle = getCanvasFillStyle.getCanvasFillStyle;
  exports.SdfShader = SdfShader.SdfShader;
  exports.localUniformMSDFBit = localUniformMSDFBit.localUniformMSDFBit;
  exports.localUniformMSDFBitGl = localUniformMSDFBit.localUniformMSDFBitGl;
  exports.mSDFBit = mSDFBit.mSDFBit;
  exports.mSDFBitGl = mSDFBit.mSDFBitGl;
  exports.Text = Text.Text;
  exports.TextStyle = TextStyle.TextStyle;
  exports.ensureTextStyle = ensureTextStyle.ensureTextStyle;
  exports.generateTextStyleKey = generateTextStyleKey.generateTextStyleKey;
  exports.getPo2TextureFromSource = getPo2TextureFromSource.getPo2TextureFromSource;
  exports.updateTextBounds = updateTextBounds.updateTextBounds;
  exports.ViewContainer = ViewContainer.ViewContainer;
  exports.particlesFrag = particles.default;
  exports.particlesVert = particles$1.default;
  exports.particlesWgsl = particles$2.default;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$index.js.map
