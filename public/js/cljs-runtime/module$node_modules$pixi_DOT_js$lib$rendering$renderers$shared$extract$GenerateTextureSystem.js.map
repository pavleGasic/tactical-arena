{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$extract$GenerateTextureSystem.js",
"lineCount":34,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$extract$GenerateTextureSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Color = require('../../../../color/Color.js');\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar Matrix = require('../../../../maths/matrix/Matrix.js');\nvar Rectangle = require('../../../../maths/shapes/Rectangle.js');\nvar Bounds = require('../../../../scene/container/bounds/Bounds.js');\nvar getLocalBounds = require('../../../../scene/container/bounds/getLocalBounds.js');\nvar Container = require('../../../../scene/container/Container.js');\nvar RenderTexture = require('../texture/RenderTexture.js');\n\n\"use strict\";\nconst tempRect = new Rectangle.Rectangle();\nconst tempBounds = new Bounds.Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container.Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds.getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexports.GenerateTextureSystem = GenerateTextureSystem;\n//# sourceMappingURL=GenerateTextureSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","Extensions","Matrix","Rectangle","Bounds","getLocalBounds","Container","RenderTexture","tempRect","tempBounds","noColor","GenerateTextureSystem","constructor","renderer","_renderer","generateTexture","options","target","frame","textureSourceOptions","resolution","antialias","view","container","clearColor","Array","isArray","length","shared","setValue","toArray","region","copyTo","rectangle","width","Math","max","height","create","transform","translate","x","y","render","source","updateMipmaps","destroy","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","name"]
}
