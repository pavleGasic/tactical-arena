{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$GpuReadBuffer.js",
"lineCount":17,
"mappings":"AAAAA,cAAA,CAAA,gFAAA,GAAqG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG7I,MAAIC,SAASH,OAAA,CAAQ,8EAAR,CAAb,EACII,SAASJ,OAAA,CAAQ,6EAAR,CADb;AAGA,cAAA;AAgCAE,SAAQG,CAAAA,aAAR,GA/BAA,QAAsB,CAACC,MAAD,EAASC,QAAT,CAAmB;AACvC,UAAMC,aAAaF,MAAOG,CAAAA,UAAWC,CAAAA,IAArC,EACMC,SAASJ,QAASK,CAAAA,GAAID,CAAAA,MAD5B;AAEA,QAAME,gBAAgB,IAAIV,MAAOA,CAAAA,MAAX,CAAkB,CACtCW,KAAM,IAAIC,YAAJ,CAAiB,IAAjB,CADgC,EAEtCC,MAAOZ,MAAOa,CAAAA,WAAYC,CAAAA,QAA1BF,GAAqCZ,MAAOa,CAAAA,WAAYE,CAAAA,QAFlB,CAAlB,CAAtB;AAIA,UAAMC,mBAAmBb,QAASD,CAAAA,MAAOe,CAAAA,eAAhB,CAAgCR,aAAhC,CAAzB;AACMS,iBAAAA,GAAiBX,MAAOY,CAAAA,oBAAP,EAAjBD;AACNA,iBAAeE,CAAAA,kBAAf,CACEjB,QAASD,CAAAA,MAAOmB,CAAAA,YAAhB,CAA6BnB,MAA7B,CADF,EAEE,CAFF,EAIEc,gBAJF,EAKE,CALF,EAOEZ,UAPF,CAAA;AASAG,UAAOe,CAAAA,KAAMC,CAAAA,MAAb,CAAoB,CAACL,aAAeM,CAAAA,MAAf,EAAD,CAApB,CAAA;AACKR,oBAAiBS,CAAAA,QAAjB,CACHC,UAAWC,CAAAA,IADR,EAEH,CAFG,EAIHvB,UAJG,CAMHwB,CAAAA,IANG,CAME,EAAA,IAAM;AACXZ,sBAAiBa,CAAAA,cAAjB,CAAgC,CAAhC,EAAmCzB,UAAnC,CAAA;AACAY,sBAAiBc,CAAAA,KAAjB,EAAA;AAFW,KANR,CAAL;AAnBuC,GA+BzC;AAtC6I,CAA7I;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/buffer/GpuReadBuffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$GpuReadBuffer\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Buffer = require('../../shared/buffer/Buffer.js');\nvar _const = require('../../shared/buffer/const.js');\n\n\"use strict\";\nfunction GpuReadBuffer(buffer, renderer) {\n  const bufferSize = buffer.descriptor.size;\n  const device = renderer.gpu.device;\n  const stagingBuffer = new Buffer.Buffer({\n    data: new Float32Array(24e5),\n    usage: _const.BufferUsage.MAP_READ | _const.BufferUsage.COPY_DST\n  });\n  const stagingGPUBuffer = renderer.buffer.createGPUBuffer(stagingBuffer);\n  const commandEncoder = device.createCommandEncoder();\n  commandEncoder.copyBufferToBuffer(\n    renderer.buffer.getGPUBuffer(buffer),\n    0,\n    // Source offset\n    stagingGPUBuffer,\n    0,\n    // Destination offset\n    bufferSize\n  );\n  device.queue.submit([commandEncoder.finish()]);\n  void stagingGPUBuffer.mapAsync(\n    GPUMapMode.READ,\n    0,\n    // Offset\n    bufferSize\n    // Length\n  ).then(() => {\n    stagingGPUBuffer.getMappedRange(0, bufferSize);\n    stagingGPUBuffer.unmap();\n  });\n}\n\nexports.GpuReadBuffer = GpuReadBuffer;\n//# sourceMappingURL=GpuReadBuffer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","_const","GpuReadBuffer","buffer","renderer","bufferSize","descriptor","size","device","gpu","stagingBuffer","data","Float32Array","usage","BufferUsage","MAP_READ","COPY_DST","stagingGPUBuffer","createGPUBuffer","commandEncoder","createCommandEncoder","copyBufferToBuffer","getGPUBuffer","queue","submit","finish","mapAsync","GPUMapMode","READ","then","getMappedRange","unmap"]
}
