{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$SVGResource.js",
"lineCount":76,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/resources/SVGResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$SVGResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar settings = require(\"@pixi/settings\"), utils = require(\"@pixi/utils\"), BaseImageResource = require(\"./BaseImageResource.js\");\nconst _SVGResource = class _SVGResource2 extends BaseImageResource.BaseImageResource {\n  /**\n   * @param sourceBase64 - Base64 encoded SVG element or URL for SVG file.\n   * @param {object} [options] - Options to use\n   * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...\n   * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.\n   * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.\n   * @param {boolean} [options.autoLoad=true] - Start loading right away.\n   */\n  constructor(sourceBase64, options) {\n    options = options || {}, super(settings.settings.ADAPTER.createCanvas()), this._width = 0, this._height = 0, this.svg = sourceBase64, this.scale = options.scale || 1, this._overrideWidth = options.width, this._overrideHeight = options.height, this._resolve = null, this._crossorigin = options.crossorigin, this._load = null, options.autoLoad !== !1 && this.load();\n  }\n  load() {\n    return this._load ? this._load : (this._load = new Promise((resolve) => {\n      if (this._resolve = () => {\n        this.update(), resolve(this);\n      }, _SVGResource2.SVG_XML.test(this.svg.trim())) {\n        if (!btoa)\n          throw new Error(\"Your browser doesn't support base64 conversions.\");\n        this.svg = `data:image/svg+xml;base64,${btoa(unescape(encodeURIComponent(this.svg)))}`;\n      }\n      this._loadSvg();\n    }), this._load);\n  }\n  /** Loads an SVG image from `imageUrl` or `data URL`. */\n  _loadSvg() {\n    const tempImage = new Image();\n    BaseImageResource.BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin), tempImage.src = this.svg, tempImage.onerror = (event) => {\n      this._resolve && (tempImage.onerror = null, this.onError.emit(event));\n    }, tempImage.onload = () => {\n      if (!this._resolve)\n        return;\n      const svgWidth = tempImage.width, svgHeight = tempImage.height;\n      if (!svgWidth || !svgHeight)\n        throw new Error(\"The SVG image must have width and height defined (in pixels), canvas API needs them.\");\n      let width = svgWidth * this.scale, height = svgHeight * this.scale;\n      (this._overrideWidth || this._overrideHeight) && (width = this._overrideWidth || this._overrideHeight / svgHeight * svgWidth, height = this._overrideHeight || this._overrideWidth / svgWidth * svgHeight), width = Math.round(width), height = Math.round(height);\n      const canvas = this.source;\n      canvas.width = width, canvas.height = height, canvas._pixiId = `canvas_${utils.uid()}`, canvas.getContext(\"2d\").drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height), this._resolve(), this._resolve = null;\n    };\n  }\n  /**\n   * Get size from an svg string using a regular expression.\n   * @param svgString - a serialized svg element\n   * @returns - image extension\n   */\n  static getSize(svgString) {\n    const sizeMatch = _SVGResource2.SVG_SIZE.exec(svgString), size = {};\n    return sizeMatch && (size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3])), size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]))), size;\n  }\n  /** Destroys this texture. */\n  dispose() {\n    super.dispose(), this._resolve = null, this._crossorigin = null;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @param {string} extension - The extension of source, if set\n   * @returns {boolean} - If the source is a SVG source or data file\n   */\n  static test(source, extension) {\n    return extension === \"svg\" || typeof source == \"string\" && source.startsWith(\"data:image/svg+xml\") || typeof source == \"string\" && _SVGResource2.SVG_XML.test(source);\n  }\n  // eslint-disable-line max-len\n};\n_SVGResource.SVG_XML = /^(<\\?xml[^?]+\\?>)?\\s*(\u003c!--[^(--\u003e)]*--\u003e)?\\s*\\<svg/m, /**\n* Regular expression for SVG size.\n* @example &lt;svg width=\"100\" height=\"100\"&gt;&lt;/svg&gt;\n* @readonly\n*/\n_SVGResource.SVG_SIZE = /<svg[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*>/i;\nlet SVGResource = _SVGResource;\nexports.SVGResource = SVGResource;\n//# sourceMappingURL=SVGResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","settings","utils","BaseImageResource","constructor","sourceBase64","options","ADAPTER","createCanvas","_height","_width","svg","scale","_overrideWidth","width","_overrideHeight","height","_resolve","_crossorigin","crossorigin","_load","autoLoad","load","Promise","resolve","this._resolve","update","_SVGResource2","SVG_XML","test","trim","btoa","Error","unescape","encodeURIComponent","_loadSvg","tempImage","Image","crossOrigin","src","onerror","event","tempImage.onerror","onError","emit","onload","tempImage.onload","svgWidth","svgHeight","Math","round","canvas","source","_pixiId","uid","getContext","drawImage","getSize","svgString","sizeMatch","SVG_SIZE","exec","size","parseFloat","dispose","extension","startsWith","_SVGResource","SVGResource"]
}
