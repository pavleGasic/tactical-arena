{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$buffer$GlBufferSystem.js",
"lineCount":110,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/buffer/GlBufferSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$buffer$GlBufferSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar _const = require('../../shared/buffer/const.js');\nvar _const$1 = require('./const.js');\nvar GlBuffer = require('./GlBuffer.js');\n\n\"use strict\";\nclass GlBufferSystem {\n  /**\n   * @param {Renderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    /** Cache keeping track of the base bound buffer bases */\n    this._boundBufferBases = /* @__PURE__ */ Object.create(null);\n    this._minBaseLocation = 0;\n    this._nextBindBaseIndex = this._minBaseLocation;\n    this._bindCallId = 0;\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBuffers\");\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._gl = null;\n    this._gpuBuffers = null;\n    this._boundBufferBases = null;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    const gl = this._gl = this._renderer.gl;\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    this._maxBindings = gl.MAX_UNIFORM_BUFFER_BINDINGS ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;\n  }\n  getGlBuffer(buffer) {\n    return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n  }\n  /**\n   * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n   * @param buffer - the buffer to bind to the renderer\n   */\n  bind(buffer) {\n    const { _gl: gl } = this;\n    const glBuffer = this.getGlBuffer(buffer);\n    gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n  }\n  /**\n   * Binds an uniform buffer to at the given index.\n   *\n   * A cache is used so a buffer will not be bound again if already bound.\n   * @param glBuffer - the buffer to bind\n   * @param index - the base index to bind it to.\n   */\n  bindBufferBase(glBuffer, index) {\n    const { _gl: gl } = this;\n    if (this._boundBufferBases[index] !== glBuffer) {\n      this._boundBufferBases[index] = glBuffer;\n      glBuffer._lastBindBaseLocation = index;\n      gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n    }\n  }\n  nextBindBase(hasTransformFeedback) {\n    this._bindCallId++;\n    this._minBaseLocation = 0;\n    if (hasTransformFeedback) {\n      this._boundBufferBases[0] = null;\n      this._minBaseLocation = 1;\n      if (this._nextBindBaseIndex < 1) {\n        this._nextBindBaseIndex = 1;\n      }\n    }\n  }\n  freeLocationForBufferBase(glBuffer) {\n    let freeIndex = this.getLastBindBaseLocation(glBuffer);\n    if (freeIndex >= this._minBaseLocation) {\n      glBuffer._lastBindCallId = this._bindCallId;\n      return freeIndex;\n    }\n    let loop = 0;\n    let nextIndex = this._nextBindBaseIndex;\n    while (loop < 2) {\n      if (nextIndex >= this._maxBindings) {\n        nextIndex = this._minBaseLocation;\n        loop++;\n      }\n      const curBuf = this._boundBufferBases[nextIndex];\n      if (curBuf && curBuf._lastBindCallId === this._bindCallId) {\n        nextIndex++;\n        continue;\n      }\n      break;\n    }\n    freeIndex = nextIndex;\n    this._nextBindBaseIndex = nextIndex + 1;\n    if (loop >= 2) {\n      return -1;\n    }\n    glBuffer._lastBindCallId = this._bindCallId;\n    this._boundBufferBases[freeIndex] = null;\n    return freeIndex;\n  }\n  getLastBindBaseLocation(glBuffer) {\n    const index = glBuffer._lastBindBaseLocation;\n    if (this._boundBufferBases[index] === glBuffer) {\n      return index;\n    }\n    return -1;\n  }\n  /**\n   * Binds a buffer whilst also binding its range.\n   * This will make the buffer start from the offset supplied rather than 0 when it is read.\n   * @param glBuffer - the buffer to bind\n   * @param index - the base index to bind at, defaults to 0\n   * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n   * @param size - the size to bind at (this is blocks of 256).\n   */\n  bindBufferRange(glBuffer, index, offset, size) {\n    const { _gl: gl } = this;\n    offset || (offset = 0);\n    index || (index = 0);\n    this._boundBufferBases[index] = null;\n    gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, size || 256);\n  }\n  /**\n   * Will ensure the data in the buffer is uploaded to the GPU.\n   * @param {Buffer} buffer - the buffer to update\n   */\n  updateBuffer(buffer) {\n    const { _gl: gl } = this;\n    const glBuffer = this.getGlBuffer(buffer);\n    if (buffer._updateID === glBuffer.updateID) {\n      return glBuffer;\n    }\n    glBuffer.updateID = buffer._updateID;\n    gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    const data = buffer.data;\n    const drawType = buffer.descriptor.usage & _const.BufferUsage.STATIC ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n    if (data) {\n      if (glBuffer.byteLength >= data.byteLength) {\n        gl.bufferSubData(glBuffer.type, 0, data, 0, buffer._updateSize / data.BYTES_PER_ELEMENT);\n      } else {\n        glBuffer.byteLength = data.byteLength;\n        gl.bufferData(glBuffer.type, data, drawType);\n      }\n    } else {\n      glBuffer.byteLength = buffer.descriptor.size;\n      gl.bufferData(glBuffer.type, glBuffer.byteLength, drawType);\n    }\n    return glBuffer;\n  }\n  /** dispose all WebGL resources of all managed buffers */\n  destroyAll() {\n    const gl = this._gl;\n    for (const id in this._gpuBuffers) {\n      gl.deleteBuffer(this._gpuBuffers[id].buffer);\n    }\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Disposes buffer\n   * @param {Buffer} buffer - buffer with data\n   * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n   */\n  onBufferDestroy(buffer, contextLost) {\n    const glBuffer = this._gpuBuffers[buffer.uid];\n    const gl = this._gl;\n    if (!contextLost) {\n      gl.deleteBuffer(glBuffer.buffer);\n    }\n    this._gpuBuffers[buffer.uid] = null;\n  }\n  /**\n   * creates and attaches a GLBuffer object tied to the current context.\n   * @param buffer\n   * @protected\n   */\n  createGLBuffer(buffer) {\n    const { _gl: gl } = this;\n    let type = _const$1.BUFFER_TYPE.ARRAY_BUFFER;\n    if (buffer.descriptor.usage & _const.BufferUsage.INDEX) {\n      type = _const$1.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n    } else if (buffer.descriptor.usage & _const.BufferUsage.UNIFORM) {\n      type = _const$1.BUFFER_TYPE.UNIFORM_BUFFER;\n    }\n    const glBuffer = new GlBuffer.GlBuffer(gl.createBuffer(), type);\n    this._gpuBuffers[buffer.uid] = glBuffer;\n    buffer.on(\"destroy\", this.onBufferDestroy, this);\n    return glBuffer;\n  }\n  resetState() {\n    this._boundBufferBases = /* @__PURE__ */ Object.create(null);\n  }\n}\n/** @ignore */\nGlBufferSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem\n  ],\n  name: \"buffer\"\n};\n\nexports.GlBufferSystem = GlBufferSystem;\n//# sourceMappingURL=GlBufferSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","_const","_const$1","GlBuffer","GlBufferSystem","constructor","renderer","_gpuBuffers","Object","create","_boundBufferBases","_bindCallId","_nextBindBaseIndex","_minBaseLocation","_renderer","renderableGC","addManagedHash","destroy","_gl","contextChange","gl","_maxBindings","MAX_UNIFORM_BUFFER_BINDINGS","getParameter","getGlBuffer","buffer","uid","createGLBuffer","bind","glBuffer","bindBuffer","type","bindBufferBase","index","_lastBindBaseLocation","UNIFORM_BUFFER","nextBindBase","hasTransformFeedback","freeLocationForBufferBase","freeIndex","getLastBindBaseLocation","_lastBindCallId","loop","nextIndex","curBuf","bindBufferRange","offset","size","updateBuffer","_updateID","updateID","data","drawType","descriptor","usage","BufferUsage","STATIC","STATIC_DRAW","DYNAMIC_DRAW","byteLength","bufferSubData","_updateSize","BYTES_PER_ELEMENT","bufferData","destroyAll","id","deleteBuffer","onBufferDestroy","contextLost","BUFFER_TYPE","ARRAY_BUFFER","INDEX","ELEMENT_ARRAY_BUFFER","UNIFORM","createBuffer","on","resetState","extension","ExtensionType","WebGLSystem","name"]
}
