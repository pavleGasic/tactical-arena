{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuDeviceSystem.js",
"lineCount":32,
"mappings":"AAAAA,cAAA,CAAA,2EAAA,GAAgG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGxI,MAAIC,UAAUH,OAAA,CAAQ,yDAAR,CAAd;AACII,QAAAA,GAAaJ,OAAA,CAAQ,2DAAR,CAAbI;AAEJ,cAAA;AACA,OAAMC,gBAAN;AAIEC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKC,CAAAA,SAAL,GAAiBD,QAAjB;AADoB;AAGhBE,cAAI,CAACC,OAAD,CAAU;AAClB,aAAI,IAAKC,CAAAA,YAAT,GACS,IAAKA,CAAAA,YADd,GAEA,IAAKA,CAAAA,YAFL,GAEoB,IAAKC,CAAAA,uBAAL,CAA6BF,OAA7B,CAAsCG,CAAAA,IAAtC,CAA4CC,GAAD,IAAS;AACtE,YAAKA,CAAAA,GAAL,GAAWA,GAAX;AACA,YAAKN,CAAAA,SAAUO,CAAAA,OAAQC,CAAAA,aAAcC,CAAAA,IAArC,CAA0C,IAAKH,CAAAA,GAA/C,CAAA;AAFsE,OAApD,CAFpB;AADkB;AAapBE,iBAAa,CAACF,GAAD,CAAM;AACjB,UAAKN,CAAAA,SAAUM,CAAAA,GAAf,GAAqBA,GAArB;AADiB;AAUbF,iCAAuB,CAACF,OAAD,CAAU;AACrC,YAAMQ,YAAY,MAAMf,OAAQgB,CAAAA,UAAWC,CAAAA,GAAnB,EAAyBC,CAAAA,YAAzB,EAAwCP,CAAAA,GAAIQ,CAAAA,cAA5C,CAA2D,CACjFC,gBAAiBb,OAAQa,CAAAA,eADwD,EAEjFC,qBAAsBd,OAAQc,CAAAA,oBAFmD,CAA3D,CAAxB;AAIMC,aAAAA,GAAmB,CACvB,wBADuB,EAEvB,0BAFuB,EAGvB,0BAHuB,CAIvBC,CAAAA,MAJuB,CAIfC,OAAD,IAAaT,SAAUU,CAAAA,QAASC,CAAAA,GAAnB,CAAuBF,OAAvB,CAJG,CAAnBF;AAKAK,aAAAA,GAAS,MAAMZ,SAAUa,CAAAA,aAAV,CAAwB,CAC3CN,iBAAAA,OAD2C,CAAxB,CAAfK;AAGN,aAAO,CAAE3B,QAASe,SAAX,EAAsBY,OAAAA,OAAtB,CAAP;AAbqC;AAevCE,WAAO,EAAG;AAER,UAAKxB,CAAAA,SAAL,GADA,IAAKM,CAAAA,GACL,GADW,IACX;AAFQ;AA7CZ;AAmDAT,iBAAgB4B,CAAAA,SAAhB,GAA4B,CAC1BC,KAAM,CACJ9B,MAAW+B,CAAAA,aAAcC,CAAAA,YADrB,CADoB,EAI1BC,KAAM,QAJoB,CAA5B;AAOAhC,iBAAgBiC,CAAAA,cAAhB,GAAiC,CAK/Bf,gBAAiB,IAAK,EALS,EAU/BC,qBAAsB,CAAA,CAVS,CAAjC;AAaAtB,SAAQG,CAAAA,eAAR,GAA0BA,eAA1B;AA9EwI,CAAxI;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/GpuDeviceSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuDeviceSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../environment/adapter.js');\nvar Extensions = require('../../../extensions/Extensions.js');\n\n\"use strict\";\nclass GpuDeviceSystem {\n  /**\n   * @param {WebGPURenderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  async init(options) {\n    if (this._initPromise)\n      return this._initPromise;\n    this._initPromise = this._createDeviceAndAdaptor(options).then((gpu) => {\n      this.gpu = gpu;\n      this._renderer.runners.contextChange.emit(this.gpu);\n    });\n    return this._initPromise;\n  }\n  /**\n   * Handle the context change event\n   * @param gpu\n   */\n  contextChange(gpu) {\n    this._renderer.gpu = gpu;\n  }\n  /**\n   * Helper class to create a WebGL Context\n   * @param {object} options - An options object that gets passed in to the canvas element containing the\n   *    context attributes\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n   * @returns {WebGLRenderingContext} the WebGL context\n   */\n  async _createDeviceAndAdaptor(options) {\n    const adapter$1 = await adapter.DOMAdapter.get().getNavigator().gpu.requestAdapter({\n      powerPreference: options.powerPreference,\n      forceFallbackAdapter: options.forceFallbackAdapter\n    });\n    const requiredFeatures = [\n      \"texture-compression-bc\",\n      \"texture-compression-astc\",\n      \"texture-compression-etc2\"\n    ].filter((feature) => adapter$1.features.has(feature));\n    const device = await adapter$1.requestDevice({\n      requiredFeatures\n    });\n    return { adapter: adapter$1, device };\n  }\n  destroy() {\n    this.gpu = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGpuDeviceSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGPUSystem\n  ],\n  name: \"device\"\n};\n/** The default options for the GpuDeviceSystem. */\nGpuDeviceSystem.defaultOptions = {\n  /**\n   * {@link WebGPUOptions.powerPreference}\n   * @default default\n   */\n  powerPreference: void 0,\n  /**\n   * Force the use of the fallback adapter\n   * @default false\n   */\n  forceFallbackAdapter: false\n};\n\nexports.GpuDeviceSystem = GpuDeviceSystem;\n//# sourceMappingURL=GpuDeviceSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adapter","Extensions","GpuDeviceSystem","constructor","renderer","_renderer","init","options","_initPromise","_createDeviceAndAdaptor","then","gpu","runners","contextChange","emit","adapter$1","DOMAdapter","get","getNavigator","requestAdapter","powerPreference","forceFallbackAdapter","requiredFeatures","filter","feature","features","has","device","requestDevice","destroy","extension","type","ExtensionType","WebGPUSystem","name","defaultOptions"]
}
