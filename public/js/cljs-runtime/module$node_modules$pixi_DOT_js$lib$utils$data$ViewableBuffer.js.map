{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$utils$data$ViewableBuffer.js",
"lineCount":58,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,GAAkF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAI1H,OAAMC,eAAN;AACEC,eAAW,CAACC,YAAD,CAAe;AAEtB,UAAKC,CAAAA,aAAL,GAD0B,QAA5B,KAAI,MAAOD,aAAX,GACuB,IAAIE,WAAJ,CAAgBF,YAAhB,CADvB,GAEWA,YAAJ,YAA4BG,UAA5B,GACgBH,YAAaI,CAAAA,MAD7B,GAGgBJ,YAJrB;AAMF,UAAKK,CAAAA,UAAL,GAAkB,IAAIC,WAAJ,CAAgB,IAAKL,CAAAA,aAArB,CAAlB;AACA,UAAKM,CAAAA,WAAL,GAAmB,IAAIC,YAAJ,CAAiB,IAAKP,CAAAA,aAAtB,CAAnB;AACA,UAAKQ,CAAAA,IAAL,GAAY,IAAKR,CAAAA,aAAcS,CAAAA,UAA/B;AAVwB;AAatB,gBAAW,EAAA;AACR,UAAKC,CAAAA,SAAV,KACE,IAAKA,CAAAA,SADP,GACmB,IAAIC,SAAJ,CAAc,IAAKX,CAAAA,aAAnB,CADnB;AAGA,aAAO,IAAKU,CAAAA,SAAZ;AAJa;AAOX,iBAAY,EAAA;AACT,UAAKE,CAAAA,UAAV,KACE,IAAKA,CAAAA,UADP,GACoB,IAAIV,UAAJ,CAAe,IAAKF,CAAAA,aAApB,CADpB;AAGA,aAAO,IAAKY,CAAAA,UAAZ;AAJc;AAOZ,iBAAY,EAAA;AACT,UAAKC,CAAAA,UAAV,KACE,IAAKA,CAAAA,UADP,GACoB,IAAIC,UAAJ,CAAe,IAAKd,CAAAA,aAApB,CADpB;AAGA,aAAO,IAAKa,CAAAA,UAAZ;AAJc;AAOZ,iBAAY,EAAA;AACT,UAAKE,CAAAA,UAAV,KACE,IAAKA,CAAAA,UADP,GACoB,IAAIC,UAAJ,CAAe,IAAKhB,CAAAA,aAApB,CADpB;AAGA,aAAO,IAAKe,CAAAA,UAAZ;AAJc;AAOZ,mBAAc,EAAA;AACX,UAAKE,CAAAA,aAAV,KACE,IAAKA,CAAAA,aADP,GACuB,IAAIC,YAAJ,CAAiB,IAAKlB,CAAAA,aAAtB,CADvB;AAGA,aAAO,IAAKiB,CAAAA,aAAZ;AAJgB;AAOd,qBAAgB,EAAA;AACb,UAAKE,CAAAA,eAAV,KACE,IAAKA,CAAAA,eADP,GACyB,IAAIC,cAAJ,CAAmB,IAAKpB,CAAAA,aAAxB,CADzB;AAGA,aAAO,IAAKmB,CAAAA,eAAZ;AAJkB;AAYpBE,QAAI,CAACC,IAAD,CAAO;AACT,aAAO,IAAA,CAAM,GAAEA,IAAF,MAAN,CAAP;AADS;AAIXC,WAAO,EAAG;AAQR,UAAKjB,CAAAA,WAAL,GADA,IAAKF,CAAAA,UACL,GAFA,IAAKW,CAAAA,UAEL,GAHA,IAAKS,CAAAA,UAGL,GAJA,IAAKX,CAAAA,UAIL,GALA,IAAKD,CAAAA,UAKL,GANA,IAAKF,CAAAA,SAML,GAPA,IAAKV,CAAAA,aAOL,GAPqB,IAOrB;AARQ;AAgBHyB,iBAAM,CAACH,IAAD,CAAO;AAClB,aAAQA,IAAR;AACE,aAAK,MAAL;AACA,aAAK,OAAL;AACE,iBAAO,CAAP;AACF,aAAK,OAAL;AACA,aAAK,QAAL;AACE,iBAAO,CAAP;AACF,aAAK,OAAL;AACA,aAAK,QAAL;AACA,aAAK,SAAL;AACE,iBAAO,CAAP;AACF;AACE,gBAAUI,KAAJ,CAAW,GAAEJ,IAAF,0BAAX,CAAN;AAZJ;AADkB;AAjFtB;AAmGA1B,SAAQC,CAAAA,cAAR,GAAyBA,cAAzB;AAvG0H,CAA1H;;",
"sources":["node_modules/pixi_DOT_js/lib/utils/data/ViewableBuffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$utils$data$ViewableBuffer\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nclass ViewableBuffer {\n  constructor(sizeOrBuffer) {\n    if (typeof sizeOrBuffer === \"number\") {\n      this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n    } else if (sizeOrBuffer instanceof Uint8Array) {\n      this.rawBinaryData = sizeOrBuffer.buffer;\n    } else {\n      this.rawBinaryData = sizeOrBuffer;\n    }\n    this.uint32View = new Uint32Array(this.rawBinaryData);\n    this.float32View = new Float32Array(this.rawBinaryData);\n    this.size = this.rawBinaryData.byteLength;\n  }\n  /** View on the raw binary data as a `Int8Array`. */\n  get int8View() {\n    if (!this._int8View) {\n      this._int8View = new Int8Array(this.rawBinaryData);\n    }\n    return this._int8View;\n  }\n  /** View on the raw binary data as a `Uint8Array`. */\n  get uint8View() {\n    if (!this._uint8View) {\n      this._uint8View = new Uint8Array(this.rawBinaryData);\n    }\n    return this._uint8View;\n  }\n  /**  View on the raw binary data as a `Int16Array`. */\n  get int16View() {\n    if (!this._int16View) {\n      this._int16View = new Int16Array(this.rawBinaryData);\n    }\n    return this._int16View;\n  }\n  /** View on the raw binary data as a `Int32Array`. */\n  get int32View() {\n    if (!this._int32View) {\n      this._int32View = new Int32Array(this.rawBinaryData);\n    }\n    return this._int32View;\n  }\n  /** View on the raw binary data as a `Float64Array`. */\n  get float64View() {\n    if (!this._float64Array) {\n      this._float64Array = new Float64Array(this.rawBinaryData);\n    }\n    return this._float64Array;\n  }\n  /** View on the raw binary data as a `BigUint64Array`. */\n  get bigUint64View() {\n    if (!this._bigUint64Array) {\n      this._bigUint64Array = new BigUint64Array(this.rawBinaryData);\n    }\n    return this._bigUint64Array;\n  }\n  /**\n   * Returns the view of the given type.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *    `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - typed array of given type\n   */\n  view(type) {\n    return this[`${type}View`];\n  }\n  /** Destroys all buffer references. Do not use after calling this. */\n  destroy() {\n    this.rawBinaryData = null;\n    this._int8View = null;\n    this._uint8View = null;\n    this._int16View = null;\n    this.uint16View = null;\n    this._int32View = null;\n    this.uint32View = null;\n    this.float32View = null;\n  }\n  /**\n   * Returns the size of the given type in bytes.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *   `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - size of the type in bytes\n   */\n  static sizeOf(type) {\n    switch (type) {\n      case \"int8\":\n      case \"uint8\":\n        return 1;\n      case \"int16\":\n      case \"uint16\":\n        return 2;\n      case \"int32\":\n      case \"uint32\":\n      case \"float32\":\n        return 4;\n      default:\n        throw new Error(`${type} isn't a valid view type`);\n    }\n  }\n}\n\nexports.ViewableBuffer = ViewableBuffer;\n//# sourceMappingURL=ViewableBuffer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ViewableBuffer","constructor","sizeOrBuffer","rawBinaryData","ArrayBuffer","Uint8Array","buffer","uint32View","Uint32Array","float32View","Float32Array","size","byteLength","_int8View","Int8Array","_uint8View","_int16View","Int16Array","_int32View","Int32Array","_float64Array","Float64Array","_bigUint64Array","BigUint64Array","view","type","destroy","uint16View","sizeOf","Error"]
}
