{
"version":3,
"file":"module$node_modules$$pixi$mesh_extras$lib$NineSlicePlane.js",
"lineCount":108,
"mappings":"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",
"sources":["node_modules/@pixi/mesh-extras/lib/NineSlicePlane.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$mesh_extras$lib$NineSlicePlane\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), SimplePlane = require(\"./SimplePlane.js\");\nconst DEFAULT_BORDER_SIZE = 10;\nclass NineSlicePlane extends SimplePlane.SimplePlane {\n  /**\n   * @param texture - The texture to use on the NineSlicePlane.\n   * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n   * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n   * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n   * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n   */\n  constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    super(core.Texture.WHITE, 4, 4), this._origWidth = texture.orig.width, this._origHeight = texture.orig.height, this._width = this._origWidth, this._height = this._origHeight, this._leftWidth = leftWidth ?? texture.defaultBorders?.left ?? DEFAULT_BORDER_SIZE, this._rightWidth = rightWidth ?? texture.defaultBorders?.right ?? DEFAULT_BORDER_SIZE, this._topHeight = topHeight ?? texture.defaultBorders?.top ?? DEFAULT_BORDER_SIZE, this._bottomHeight = bottomHeight ?? texture.defaultBorders?.bottom ?? DEFAULT_BORDER_SIZE, this.texture = texture;\n  }\n  textureUpdated() {\n    this._textureID = this.shader.texture._updateID, this._refresh();\n  }\n  get vertices() {\n    return this.geometry.getBuffer(\"aVertexPosition\").data;\n  }\n  set vertices(value) {\n    this.geometry.getBuffer(\"aVertexPosition\").data = value;\n  }\n  /** Updates the horizontal vertices. */\n  updateHorizontalVertices() {\n    const vertices = this.vertices, scale = this._getMinScale();\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale, vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale, vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  }\n  /** Updates the vertical vertices. */\n  updateVerticalVertices() {\n    const vertices = this.vertices, scale = this._getMinScale();\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale, vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale, vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  }\n  /**\n   * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n   * @returns Smaller number of vertical and horizontal scale.\n   */\n  _getMinScale() {\n    const w = this._leftWidth + this._rightWidth, scaleW = this._width > w ? 1 : this._width / w, h = this._topHeight + this._bottomHeight, scaleH = this._height > h ? 1 : this._height / h;\n    return Math.min(scaleW, scaleH);\n  }\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    this._width = value, this._refresh();\n  }\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    this._height = value, this._refresh();\n  }\n  /** The width of the left column. */\n  get leftWidth() {\n    return this._leftWidth;\n  }\n  set leftWidth(value) {\n    this._leftWidth = value, this._refresh();\n  }\n  /** The width of the right column. */\n  get rightWidth() {\n    return this._rightWidth;\n  }\n  set rightWidth(value) {\n    this._rightWidth = value, this._refresh();\n  }\n  /** The height of the top row. */\n  get topHeight() {\n    return this._topHeight;\n  }\n  set topHeight(value) {\n    this._topHeight = value, this._refresh();\n  }\n  /** The height of the bottom row. */\n  get bottomHeight() {\n    return this._bottomHeight;\n  }\n  set bottomHeight(value) {\n    this._bottomHeight = value, this._refresh();\n  }\n  /** Refreshes NineSlicePlane coords. All of them. */\n  _refresh() {\n    const texture = this.texture, uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width, this._origHeight = texture.orig.height;\n    const _uvw = 1 / this._origWidth, _uvh = 1 / this._origHeight;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0, uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0, uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1, uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1, uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth, uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth, uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight, uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight, this.updateHorizontalVertices(), this.updateVerticalVertices(), this.geometry.buffers[0].update(), this.geometry.buffers[1].update();\n  }\n}\nexports.NineSlicePlane = NineSlicePlane;\n//# sourceMappingURL=NineSlicePlane.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","SimplePlane","NineSlicePlane","constructor","texture","leftWidth","topHeight","rightWidth","bottomHeight","Texture","WHITE","_origWidth","orig","width","_origHeight","height","_width","_height","_leftWidth","defaultBorders","left","DEFAULT_BORDER_SIZE","_rightWidth","right","_topHeight","top","_bottomHeight","bottom","textureUpdated","_textureID","shader","_updateID","_refresh","geometry","getBuffer","data","value","updateHorizontalVertices","vertices","scale","_getMinScale","updateVerticalVertices","w","h","Math","min","scaleW","scaleH","uvs","buffers","_uvw","_uvh","update"]
}
