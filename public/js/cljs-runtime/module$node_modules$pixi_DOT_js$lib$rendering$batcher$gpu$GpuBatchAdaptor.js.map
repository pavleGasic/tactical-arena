{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$batcher$gpu$GpuBatchAdaptor.js",
"lineCount":41,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,GAA8F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGlIC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACAC,QAAAA,GAAQJ,OAAA,CAAQ,4EAAR,CAARI;AACJ,MAAIC,2BAA2BL,OAAA,CAAQ,oFAAR,CAA/B;AAEA,cAAA;AACA,QAAMM,YAAYF,MAAMA,CAAAA,KAAMG,CAAAA,KAAZ,EAAlB;AACA,OAAMC,gBAAN;AACEC,SAAK,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,MAAtB,CAA8B;AACjC,YAAMC,WAAWH,SAAUG,CAAAA,QAA3B;AACMC,eAAAA,GAAUD,QAASC,CAAAA,OAAnBA;AACN,YAAMC,UAAUH,MAAOI,CAAAA,UAAvB;AACA,UAAKC,CAAAA,OAAL,GAAeL,MAAf;AACA,UAAKM,CAAAA,SAAL,GAAiBP,QAAjB;AACAG,eAAQK,CAAAA,WAAR,CAAoBR,QAApB,EAA8BI,OAA9B,CAAA;AACAT,eAAUc,CAAAA,SAAV,GAAsB,QAAtB;AACAP,cAASQ,CAAAA,QAASC,CAAAA,WAAlB,CACEX,QADF,EAEEI,OAFF,EAGET,SAHF,CAAA;AAKMiB,cAAAA,GAA0BV,QAASW,CAAAA,cAAeC,CAAAA,SAAlDF;AACNT,eAAQY,CAAAA,cAAR,CAAuB,CAAvB,CAAA;AACAZ,eAAQa,CAAAA,YAAR,CAAqB,CAArB,EAAwBJ,QAAxB,EAAiDR,OAAjD,CAAA;AAfiC;AAiBnCa,WAAO,CAAClB,SAAD,EAAYmB,KAAZ,CAAmB;AACxB,UAAMd,UAAU,IAAKE,CAAAA,OAAQD,CAAAA,UAA7B;AACMH,eAAAA,GAAWH,SAAUG,CAAAA,QAArBA;AACN,YAAMC,UAAUD,SAASC,CAAAA,OAAzB;AACA,UAAI,CAACe,KAAMJ,CAAAA,SAAX,CAAsB;AACpB,YAAMK,eAAeD,KAAME,CAAAA,QAA3B;AACAF,aAAMJ,CAAAA,SAAN,GAAkBpB,wBAAyBA,CAAAA,wBAAzB,CAAkDyB,YAAaC,CAAAA,QAA/D,EAAyED,YAAaE,CAAAA,KAAtF,CAAlB;AAFoB;AAItB1B,eAAUc,CAAAA,SAAV,GAAsBS,KAAMT,CAAAA,SAA5B;AACMa,kBAAAA,GAAepB,SAASY,CAAAA,SAAUS,CAAAA,YAAnB,CACnBL,KAAMJ,CAAAA,SADa,EAEnBV,OAFmB,EAGnB,CAHmB,CAAfkB;AAKAZ,aAAAA,GAAWR,SAASQ,CAAAA,QAASC,CAAAA,WAAlB,CACf,IAAKJ,CAAAA,SADU,EAEfH,OAFe,EAGfT,SAHe,EAIfuB,KAAMM,CAAAA,QAJS,CAAXd;AAMNQ,WAAMJ,CAAAA,SAAUW,CAAAA,MAAhB,CAAuBvB,SAASwB,CAAAA,SAAUL,CAAAA,KAA1C,CAAA;AACAlB,aAAQwB,CAAAA,WAAR,CAAoBjB,OAApB,CAAA;AACAP,aAAQyB,CAAAA,iBAAkBZ,CAAAA,YAA1B,CAAuC,CAAvC,EAA0CM,YAA1C,CAAA;AACAnB,aAAQyB,CAAAA,iBAAkBC,CAAAA,WAA1B,CAAsCX,KAAMY,CAAAA,IAA5C,EAAkD,CAAlD,EAAqDZ,KAAMpB,CAAAA,KAA3D,CAAA;AAvBwB;AAlB5B;AA6CAD,iBAAgBkC,CAAAA,SAAhB,GAA4B,CAC1BC,KAAM,CACJxC,MAAWyC,CAAAA,aAAcC,CAAAA,kBADrB,CADoB,EAI1BC,KAAM,OAJoB,CAA5B;AAOA5C,SAAQM,CAAAA,eAAR,GAA0BA,eAA1B;AA7DsI,CAAtI;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/batcher/gpu/GpuBatchAdaptor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$batcher$gpu$GpuBatchAdaptor\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar State = require('../../renderers/shared/state/State.js');\nvar getTextureBatchBindGroup = require('./getTextureBatchBindGroup.js');\n\n\"use strict\";\nconst tempState = State.State.for2d();\nclass GpuBatchAdaptor {\n  start(batchPipe, geometry, shader) {\n    const renderer = batchPipe.renderer;\n    const encoder = renderer.encoder;\n    const program = shader.gpuProgram;\n    this._shader = shader;\n    this._geometry = geometry;\n    encoder.setGeometry(geometry, program);\n    tempState.blendMode = \"normal\";\n    renderer.pipeline.getPipeline(\n      geometry,\n      program,\n      tempState\n    );\n    const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n    encoder.resetBindGroup(1);\n    encoder.setBindGroup(0, globalUniformsBindGroup, program);\n  }\n  execute(batchPipe, batch) {\n    const program = this._shader.gpuProgram;\n    const renderer = batchPipe.renderer;\n    const encoder = renderer.encoder;\n    if (!batch.bindGroup) {\n      const textureBatch = batch.textures;\n      batch.bindGroup = getTextureBatchBindGroup.getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n    }\n    tempState.blendMode = batch.blendMode;\n    const gpuBindGroup = renderer.bindGroup.getBindGroup(\n      batch.bindGroup,\n      program,\n      1\n    );\n    const pipeline = renderer.pipeline.getPipeline(\n      this._geometry,\n      program,\n      tempState,\n      batch.topology\n    );\n    batch.bindGroup._touch(renderer.textureGC.count);\n    encoder.setPipeline(pipeline);\n    encoder.renderPassEncoder.setBindGroup(1, gpuBindGroup);\n    encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n  }\n}\n/** @ignore */\nGpuBatchAdaptor.extension = {\n  type: [\n    Extensions.ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"batch\"\n};\n\nexports.GpuBatchAdaptor = GpuBatchAdaptor;\n//# sourceMappingURL=GpuBatchAdaptor.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","State","getTextureBatchBindGroup","tempState","for2d","GpuBatchAdaptor","start","batchPipe","geometry","shader","renderer","encoder","program","gpuProgram","_shader","_geometry","setGeometry","blendMode","pipeline","getPipeline","globalUniformsBindGroup","globalUniforms","bindGroup","resetBindGroup","setBindGroup","execute","batch","textureBatch","textures","count","gpuBindGroup","getBindGroup","topology","_touch","textureGC","setPipeline","renderPassEncoder","drawIndexed","size","extension","type","ExtensionType","WebGPUPipesAdaptor","name"]
}
