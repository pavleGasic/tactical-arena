{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$RenderableGCSystem.js",
"lineCount":96,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/RenderableGCSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$RenderableGCSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar clean = require('../../../../utils/data/clean.js');\n\n\"use strict\";\nlet renderableGCTick = 0;\nconst _RenderableGCSystem = class _RenderableGCSystem {\n  /**\n   * Creates a new RenderableGCSystem instance.\n   * @param renderer - The renderer this garbage collection system works for\n   */\n  constructor(renderer) {\n    /** Array of renderables being tracked for garbage collection */\n    this._managedRenderables = [];\n    /** Array of hash objects being tracked for cleanup */\n    this._managedHashes = [];\n    /** Array of arrays being tracked for cleanup */\n    this._managedArrays = [];\n    this._renderer = renderer;\n  }\n  /**\n   * Initializes the garbage collection system with the provided options.\n   * @param options - Configuration options for the renderer\n   */\n  init(options) {\n    options = { ..._RenderableGCSystem.defaultOptions, ...options };\n    this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n    this._frequency = options.renderableGCFrequency;\n    this.enabled = options.renderableGCActive;\n  }\n  /**\n   * Gets whether the garbage collection system is currently enabled.\n   * @returns True if GC is enabled, false otherwise\n   */\n  get enabled() {\n    return !!this._handler;\n  }\n  /**\n   * Enables or disables the garbage collection system.\n   * When enabled, schedules periodic cleanup of resources.\n   * When disabled, cancels all scheduled cleanups.\n   */\n  set enabled(value) {\n    if (this.enabled === value)\n      return;\n    if (value) {\n      this._handler = this._renderer.scheduler.repeat(\n        () => this.run(),\n        this._frequency,\n        false\n      );\n      this._hashHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const hash of this._managedHashes) {\n            hash.context[hash.hash] = clean.cleanHash(hash.context[hash.hash]);\n          }\n        },\n        this._frequency\n      );\n      this._arrayHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const array of this._managedArrays) {\n            clean.cleanArray(array.context[array.hash]);\n          }\n        },\n        this._frequency\n      );\n    } else {\n      this._renderer.scheduler.cancel(this._handler);\n      this._renderer.scheduler.cancel(this._hashHandler);\n      this._renderer.scheduler.cancel(this._arrayHandler);\n    }\n  }\n  /**\n   * Adds a hash table to be managed by the garbage collector.\n   * @param context - The object containing the hash table\n   * @param hash - The property name of the hash table\n   */\n  addManagedHash(context, hash) {\n    this._managedHashes.push({ context, hash });\n  }\n  /**\n   * Adds an array to be managed by the garbage collector.\n   * @param context - The object containing the array\n   * @param hash - The property name of the array\n   */\n  addManagedArray(context, hash) {\n    this._managedArrays.push({ context, hash });\n  }\n  /**\n   * Updates the GC timestamp and tracking before rendering.\n   * @param options - The render options\n   * @param options.container - The container to render\n   */\n  prerender({\n    container\n  }) {\n    this._now = performance.now();\n    container.renderGroup.gcTick = renderableGCTick++;\n    this._updateInstructionGCTick(container.renderGroup, container.renderGroup.gcTick);\n  }\n  /**\n   * Starts tracking a renderable for garbage collection.\n   * @param renderable - The renderable to track\n   */\n  addRenderable(renderable) {\n    if (!this.enabled)\n      return;\n    if (renderable._lastUsed === -1) {\n      this._managedRenderables.push(renderable);\n      renderable.once(\"destroyed\", this._removeRenderable, this);\n    }\n    renderable._lastUsed = this._now;\n  }\n  /**\n   * Performs garbage collection by cleaning up unused renderables.\n   * Removes renderables that haven't been used for longer than maxUnusedTime.\n   */\n  run() {\n    const now = this._now;\n    const managedRenderables = this._managedRenderables;\n    const renderPipes = this._renderer.renderPipes;\n    let offset = 0;\n    for (let i = 0; i < managedRenderables.length; i++) {\n      const renderable = managedRenderables[i];\n      if (renderable === null) {\n        offset++;\n        continue;\n      }\n      const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n      const currentTick = renderGroup?.instructionSet?.gcTick ?? -1;\n      if ((renderGroup?.gcTick ?? 0) === currentTick) {\n        renderable._lastUsed = now;\n      }\n      if (now - renderable._lastUsed > this.maxUnusedTime) {\n        if (!renderable.destroyed) {\n          const rp = renderPipes;\n          if (renderGroup)\n            renderGroup.structureDidChange = true;\n          rp[renderable.renderPipeId].destroyRenderable(renderable);\n        }\n        renderable._lastUsed = -1;\n        offset++;\n        renderable.off(\"destroyed\", this._removeRenderable, this);\n      } else {\n        managedRenderables[i - offset] = renderable;\n      }\n    }\n    managedRenderables.length -= offset;\n  }\n  /** Cleans up the garbage collection system. Disables GC and removes all tracked resources. */\n  destroy() {\n    this.enabled = false;\n    this._renderer = null;\n    this._managedRenderables.length = 0;\n    this._managedHashes.length = 0;\n    this._managedArrays.length = 0;\n  }\n  /**\n   * Removes a renderable from being tracked when it's destroyed.\n   * @param renderable - The renderable to stop tracking\n   */\n  _removeRenderable(renderable) {\n    const index = this._managedRenderables.indexOf(renderable);\n    if (index >= 0) {\n      renderable.off(\"destroyed\", this._removeRenderable, this);\n      this._managedRenderables[index] = null;\n    }\n  }\n  /**\n   * Updates the GC tick counter for a render group and its children.\n   * @param renderGroup - The render group to update\n   * @param gcTick - The new tick value\n   */\n  _updateInstructionGCTick(renderGroup, gcTick) {\n    renderGroup.instructionSet.gcTick = gcTick;\n    for (const child of renderGroup.renderGroupChildren) {\n      this._updateInstructionGCTick(child, gcTick);\n    }\n  }\n};\n/**\n * Extension metadata for registering this system with the renderer.\n * @ignore\n */\n_RenderableGCSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem\n  ],\n  name: \"renderableGC\",\n  priority: 0\n};\n/**\n * Default configuration options for the garbage collection system.\n * These can be overridden when initializing the renderer.\n */\n_RenderableGCSystem.defaultOptions = {\n  /** Enable/disable the garbage collector */\n  renderableGCActive: true,\n  /** Time in ms before an unused resource is collected (default 1 minute) */\n  renderableGCMaxUnusedTime: 6e4,\n  /** How often to run garbage collection in ms (default 30 seconds) */\n  renderableGCFrequency: 3e4\n};\nlet RenderableGCSystem = _RenderableGCSystem;\n\nexports.RenderableGCSystem = RenderableGCSystem;\n//# sourceMappingURL=RenderableGCSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","clean","renderableGCTick","constructor","renderer","_managedRenderables","_managedHashes","_managedArrays","_renderer","init","options","_RenderableGCSystem","defaultOptions","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","enabled","renderableGCActive","_handler","value","scheduler","repeat","run","_hashHandler","hash","context","cleanHash","_arrayHandler","array","cleanArray","cancel","addManagedHash","push","addManagedArray","prerender","container","_now","performance","now","renderGroup","gcTick","_updateInstructionGCTick","addRenderable","renderable","_lastUsed","once","_removeRenderable","managedRenderables","renderPipes","offset","i","length","parentRenderGroup","instructionSet","destroyed","rp","structureDidChange","renderPipeId","destroyRenderable","off","destroy","index","indexOf","child","renderGroupChildren","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","name","priority","RenderableGCSystem"]
}
