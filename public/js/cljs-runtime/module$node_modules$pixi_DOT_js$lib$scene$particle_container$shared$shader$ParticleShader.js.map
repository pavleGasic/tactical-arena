{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$shader$ParticleShader.js",
"lineCount":14,
"mappings":"AAAAA,cAAA,CAAA,yFAAA,GAA8G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGtJ,MAAIC,QAAQH,OAAA,CAAQ,iDAAR,CAAZ,EACII,SAASJ,OAAA,CAAQ,yDAAR,CADb,EAEIK,YAAYL,OAAA,CAAQ,6EAAR,CAFhB,EAGIM,aAAaN,OAAA,CAAQ,+EAAR,CAHjB;AAIIO,QAAAA,GAASP,OAAA,CAAQ,8EAAR,CAATO;AACJ,MAAIC,UAAUR,OAAA,CAAQ,gFAAR,CAAd,EACIS,eAAeT,OAAA,CAAQ,qFAAR,CADnB,EAEIU,cAAcV,OAAA,CAAQ,2FAAR,CAFlB,EAGIW,YAAYX,OAAA,CAAQ,2FAAR,CAHhB,EAIIY,cAAcZ,OAAA,CAAQ,2FAAR,CAJlB;AAMA,cAAA;AACA,OAAMa,eAAN,QAA6BN,OAAOA,CAAAA,MAApC;AACEO,eAAW,EAAG;AACZ,YAAMC,YAAYV,SAAUA,CAAAA,SAAUW,CAAAA,IAApB,CAAyB,CACzCC,OAAQN,SAAUO,CAAAA,OADuB,EAEzCC,SAAUT,WAAYQ,CAAAA,OAFmB,CAAzB,CAAlB,EAIME,aAAad,UAAWA,CAAAA,UAAWU,CAAAA,IAAtB,CAA2B,CAC5CG,SAAU,CACRE,OAAQT,WAAYM,CAAAA,OADZ,EAERI,WAAY,cAFJ,CADkC,EAK5CL,OAAQ,CACNI,OAAQT,WAAYM,CAAAA,OADd,EAENI,WAAY,YAFN,CALoC,CAA3B,CAJnB;AAcA,WAAA,CAAM,CACJP,SADI,EAEJK,UAFI,EAGJG,UAAW,CAETC,SAAUhB,OAAQA,CAAAA,OAAQiB,CAAAA,KAAMJ,CAAAA,MAFvB,EAITK,SAAU,IAAIjB,YAAaA,CAAAA,YAAjB,CAA8B,EAA9B,CAJD,EAMTkB,SAAU,CACRC,mBAAoB,CAAEC,MAAO,IAAIzB,MAAOA,CAAAA,MAAX,EAAT,EAA8B0B,KAAM,mBAApC,CADZ,EAERC,OAAQ,CAAEF,MAAO,IAAI1B,KAAMA,CAAAA,KAAV,CAAgB,QAAhB,CAAT,EAAoC2B,KAAM,iBAA1C,CAFA,EAGRE,OAAQ,CAAEH,MAAO,CAAT,EAAYC,KAAM,KAAlB,CAHA,EAIRG,YAAa,CAAEJ,MAAO,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiBC,KAAM,iBAAvB,CAJL,CAND,CAHP,CAAN,CAAA;AAfY;AADhB;AAoCA5B,SAAQW,CAAAA,cAAR,GAAyBA,cAAzB;AAnDsJ,CAAtJ;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/particle-container/shared/shader/ParticleShader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$shader$ParticleShader\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Color = require('../../../../color/Color.js');\nvar Matrix = require('../../../../maths/matrix/Matrix.js');\nvar GlProgram = require('../../../../rendering/renderers/gl/shader/GlProgram.js');\nvar GpuProgram = require('../../../../rendering/renderers/gpu/shader/GpuProgram.js');\nvar Shader = require('../../../../rendering/renderers/shared/shader/Shader.js');\nvar Texture = require('../../../../rendering/renderers/shared/texture/Texture.js');\nvar TextureStyle = require('../../../../rendering/renderers/shared/texture/TextureStyle.js');\nvar particles$1 = require('./particles.frag.js');\nvar particles = require('./particles.vert.js');\nvar particles$2 = require('./particles.wgsl.js');\n\n\"use strict\";\nclass ParticleShader extends Shader.Shader {\n  constructor() {\n    const glProgram = GlProgram.GlProgram.from({\n      vertex: particles.default,\n      fragment: particles$1.default\n    });\n    const gpuProgram = GpuProgram.GpuProgram.from({\n      fragment: {\n        source: particles$2.default,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: particles$2.default,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle.TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix.Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color.Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexports.ParticleShader = ParticleShader;\n//# sourceMappingURL=ParticleShader.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","Matrix","GlProgram","GpuProgram","Shader","Texture","TextureStyle","particles$1","particles","particles$2","ParticleShader","constructor","glProgram","from","vertex","default","fragment","gpuProgram","source","entryPoint","resources","uTexture","WHITE","uSampler","uniforms","uTranslationMatrix","value","type","uColor","uRound","uResolution"]
}
