{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlEncoderSystem.js",
"lineCount":28,
"mappings":"AAAAA,cAAA,CAAA,0EAAA,GAA+F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGnIC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AAEJ,cAAA;AACA,OAAMC,gBAAN;AACEC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKC,CAAAA,eAAL,GAAuBC,OAAQC,CAAAA,OAAR,EAAvB;AACA,UAAKC,CAAAA,SAAL,GAAiBJ,QAAjB;AAFoB;AAItBK,eAAW,CAACC,QAAD,EAAWC,MAAX,CAAmB;AAC5B,UAAKH,CAAAA,SAAUE,CAAAA,QAASE,CAAAA,IAAxB,CAA6BF,QAA7B,EAAuCC,MAAOE,CAAAA,SAA9C,CAAA;AAD4B;AAG9BC,oBAAgB,EAAG;;AAEnBC,QAAI,CAACC,OAAD,CAAU;AACZ,YAAMZ,WAAW,IAAKI,CAAAA,SAAtB,EACM,CAAEE,QAAF,EAAYC,MAAZ,EAAoBM,KAApB,EAA2BC,QAA3B,EAAqC,SAAUC,IAA/C,EAAqDC,IAArD,EAA2DC,KAA3D,EAAkEC,aAAlE,CAAA,GAAoFN,OAD1F;AAEAZ,cAASO,CAAAA,MAAOC,CAAAA,IAAhB,CAAqBD,MAArB,EAA6BO,QAA7B,CAAA;AACAd,cAASM,CAAAA,QAASE,CAAAA,IAAlB,CAAuBF,QAAvB,EAAiCN,QAASO,CAAAA,MAAOY,CAAAA,cAAjD,CAAA;AACIN,WAAJ,IACEb,QAASa,CAAAA,KAAMO,CAAAA,GAAf,CAAmBP,KAAnB,CADF;AAGAb,cAASM,CAAAA,QAASK,CAAAA,IAAlB,CAAuBI,IAAvB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,aAA1C,IAA2DZ,QAASY,CAAAA,aAApE,CAAA;AARY;AAUdG,WAAO,EAAG;AACR,UAAKjB,CAAAA,SAAL,GAAiB,IAAjB;AADQ;AApBZ;AAyBAN,iBAAgBwB,CAAAA,SAAhB,GAA4B,CAC1BP,KAAM,CACJlB,MAAW0B,CAAAA,aAAcC,CAAAA,WADrB,CADoB,EAI1BC,KAAM,SAJoB,CAA5B;AAOA7B,SAAQE,CAAAA,eAAR,GAA0BA,eAA1B;AAtCuI,CAAvI;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/GlEncoderSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlEncoderSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\n\n\"use strict\";\nclass GlEncoderSystem {\n  constructor(renderer) {\n    this.commandFinished = Promise.resolve();\n    this._renderer = renderer;\n  }\n  setGeometry(geometry, shader) {\n    this._renderer.geometry.bind(geometry, shader.glProgram);\n  }\n  finishRenderPass() {\n  }\n  draw(options) {\n    const renderer = this._renderer;\n    const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n    renderer.shader.bind(shader, skipSync);\n    renderer.geometry.bind(geometry, renderer.shader._activeProgram);\n    if (state) {\n      renderer.state.set(state);\n    }\n    renderer.geometry.draw(type, size, start, instanceCount ?? geometry.instanceCount);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlEncoderSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem\n  ],\n  name: \"encoder\"\n};\n\nexports.GlEncoderSystem = GlEncoderSystem;\n//# sourceMappingURL=GlEncoderSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","GlEncoderSystem","constructor","renderer","commandFinished","Promise","resolve","_renderer","setGeometry","geometry","shader","bind","glProgram","finishRenderPass","draw","options","state","skipSync","type","size","start","instanceCount","_activeProgram","set","destroy","extension","ExtensionType","WebGLSystem","name"]
}
