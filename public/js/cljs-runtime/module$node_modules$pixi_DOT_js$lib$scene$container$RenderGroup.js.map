{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$RenderGroup.js",
"lineCount":191,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/RenderGroup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$RenderGroup\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Matrix = require('../../maths/matrix/Matrix.js');\nvar InstructionSet = require('../../rendering/renderers/shared/instructions/InstructionSet.js');\nvar TexturePool = require('../../rendering/renderers/shared/texture/TexturePool.js');\n\n\"use strict\";\nclass RenderGroup {\n  constructor() {\n    this.renderPipeId = \"renderGroup\";\n    this.root = null;\n    this.canBundle = false;\n    this.renderGroupParent = null;\n    this.renderGroupChildren = [];\n    this.worldTransform = new Matrix.Matrix();\n    this.worldColorAlpha = 4294967295;\n    this.worldColor = 16777215;\n    this.worldAlpha = 1;\n    // these updates are transform changes..\n    this.childrenToUpdate = /* @__PURE__ */ Object.create(null);\n    this.updateTick = 0;\n    this.gcTick = 0;\n    // these update are renderable changes..\n    this.childrenRenderablesToUpdate = { list: [], index: 0 };\n    // other\n    this.structureDidChange = true;\n    this.instructionSet = new InstructionSet.InstructionSet();\n    this._onRenderContainers = [];\n    /**\n     * Indicates if the cached texture needs to be updated.\n     * @default true\n     */\n    this.textureNeedsUpdate = true;\n    /**\n     * Indicates if the container should be cached as a texture.\n     * @default false\n     */\n    this.isCachedAsTexture = false;\n    this._matrixDirty = 7;\n  }\n  init(root) {\n    this.root = root;\n    if (root._onRender)\n      this.addOnRender(root);\n    root.didChange = true;\n    const children = root.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      child._updateFlags = 15;\n      this.addChild(child);\n    }\n  }\n  enableCacheAsTexture(options = {}) {\n    this.textureOptions = options;\n    this.isCachedAsTexture = true;\n    this.textureNeedsUpdate = true;\n  }\n  disableCacheAsTexture() {\n    this.isCachedAsTexture = false;\n    if (this.texture) {\n      TexturePool.TexturePool.returnTexture(this.texture);\n      this.texture = null;\n    }\n  }\n  updateCacheTexture() {\n    this.textureNeedsUpdate = true;\n  }\n  reset() {\n    this.renderGroupChildren.length = 0;\n    for (const i in this.childrenToUpdate) {\n      const childrenAtDepth = this.childrenToUpdate[i];\n      childrenAtDepth.list.fill(null);\n      childrenAtDepth.index = 0;\n    }\n    this.childrenRenderablesToUpdate.index = 0;\n    this.childrenRenderablesToUpdate.list.fill(null);\n    this.root = null;\n    this.updateTick = 0;\n    this.structureDidChange = true;\n    this._onRenderContainers.length = 0;\n    this.renderGroupParent = null;\n    this.disableCacheAsTexture();\n  }\n  get localTransform() {\n    return this.root.localTransform;\n  }\n  addRenderGroupChild(renderGroupChild) {\n    if (renderGroupChild.renderGroupParent) {\n      renderGroupChild.renderGroupParent._removeRenderGroupChild(renderGroupChild);\n    }\n    renderGroupChild.renderGroupParent = this;\n    this.renderGroupChildren.push(renderGroupChild);\n  }\n  _removeRenderGroupChild(renderGroupChild) {\n    const index = this.renderGroupChildren.indexOf(renderGroupChild);\n    if (index > -1) {\n      this.renderGroupChildren.splice(index, 1);\n    }\n    renderGroupChild.renderGroupParent = null;\n  }\n  addChild(child) {\n    this.structureDidChange = true;\n    child.parentRenderGroup = this;\n    child.updateTick = -1;\n    if (child.parent === this.root) {\n      child.relativeRenderGroupDepth = 1;\n    } else {\n      child.relativeRenderGroupDepth = child.parent.relativeRenderGroupDepth + 1;\n    }\n    child.didChange = true;\n    this.onChildUpdate(child);\n    if (child.renderGroup) {\n      this.addRenderGroupChild(child.renderGroup);\n      return;\n    }\n    if (child._onRender)\n      this.addOnRender(child);\n    const children = child.children;\n    for (let i = 0; i < children.length; i++) {\n      this.addChild(children[i]);\n    }\n  }\n  removeChild(child) {\n    this.structureDidChange = true;\n    if (child._onRender) {\n      if (!child.renderGroup) {\n        this.removeOnRender(child);\n      }\n    }\n    child.parentRenderGroup = null;\n    if (child.renderGroup) {\n      this._removeRenderGroupChild(child.renderGroup);\n      return;\n    }\n    const children = child.children;\n    for (let i = 0; i < children.length; i++) {\n      this.removeChild(children[i]);\n    }\n  }\n  removeChildren(children) {\n    for (let i = 0; i < children.length; i++) {\n      this.removeChild(children[i]);\n    }\n  }\n  onChildUpdate(child) {\n    let childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth];\n    if (!childrenToUpdate) {\n      childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth] = {\n        index: 0,\n        list: []\n      };\n    }\n    childrenToUpdate.list[childrenToUpdate.index++] = child;\n  }\n  updateRenderable(renderable) {\n    if (renderable.globalDisplayStatus < 7)\n      return;\n    this.instructionSet.renderPipes[renderable.renderPipeId].updateRenderable(renderable);\n    renderable.didViewUpdate = false;\n  }\n  onChildViewUpdate(child) {\n    this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++] = child;\n  }\n  get isRenderable() {\n    return this.root.localDisplayStatus === 7 && this.worldAlpha > 0;\n  }\n  /**\n   * adding a container to the onRender list will make sure the user function\n   * passed in to the user defined 'onRender` callBack\n   * @param container - the container to add to the onRender list\n   */\n  addOnRender(container) {\n    this._onRenderContainers.push(container);\n  }\n  removeOnRender(container) {\n    this._onRenderContainers.splice(this._onRenderContainers.indexOf(container), 1);\n  }\n  runOnRender(renderer) {\n    for (let i = 0; i < this._onRenderContainers.length; i++) {\n      this._onRenderContainers[i]._onRender(renderer);\n    }\n  }\n  destroy() {\n    this.disableCacheAsTexture();\n    this.renderGroupParent = null;\n    this.root = null;\n    this.childrenRenderablesToUpdate = null;\n    this.childrenToUpdate = null;\n    this.renderGroupChildren = null;\n    this._onRenderContainers = null;\n    this.instructionSet = null;\n  }\n  getChildren(out = []) {\n    const children = this.root.children;\n    for (let i = 0; i < children.length; i++) {\n      this._getChildren(children[i], out);\n    }\n    return out;\n  }\n  _getChildren(container, out = []) {\n    out.push(container);\n    if (container.renderGroup)\n      return out;\n    const children = container.children;\n    for (let i = 0; i < children.length; i++) {\n      this._getChildren(children[i], out);\n    }\n    return out;\n  }\n  invalidateMatrices() {\n    this._matrixDirty = 7;\n  }\n  /**\n   * Returns the inverse of the world transform matrix.\n   * @returns {Matrix} The inverse of the world transform matrix.\n   */\n  get inverseWorldTransform() {\n    if ((this._matrixDirty & 1) === 0)\n      return this._inverseWorldTransform;\n    this._matrixDirty &= ~1;\n    this._inverseWorldTransform || (this._inverseWorldTransform = new Matrix.Matrix());\n    return this._inverseWorldTransform.copyFrom(this.worldTransform).invert();\n  }\n  /**\n   * Returns the inverse of the texture offset transform matrix.\n   * @returns {Matrix} The inverse of the texture offset transform matrix.\n   */\n  get textureOffsetInverseTransform() {\n    if ((this._matrixDirty & 2) === 0)\n      return this._textureOffsetInverseTransform;\n    this._matrixDirty &= ~2;\n    this._textureOffsetInverseTransform || (this._textureOffsetInverseTransform = new Matrix.Matrix());\n    return this._textureOffsetInverseTransform.copyFrom(this.inverseWorldTransform).translate(\n      -this._textureBounds.x,\n      -this._textureBounds.y\n    );\n  }\n  /**\n   * Returns the inverse of the parent texture transform matrix.\n   * This is used to properly transform coordinates when rendering into cached textures.\n   * @returns {Matrix} The inverse of the parent texture transform matrix.\n   */\n  get inverseParentTextureTransform() {\n    if ((this._matrixDirty & 4) === 0)\n      return this._inverseParentTextureTransform;\n    this._matrixDirty &= ~4;\n    const parentCacheAsTexture = this._parentCacheAsTextureRenderGroup;\n    if (parentCacheAsTexture) {\n      this._inverseParentTextureTransform || (this._inverseParentTextureTransform = new Matrix.Matrix());\n      return this._inverseParentTextureTransform.copyFrom(this.worldTransform).prepend(parentCacheAsTexture.inverseWorldTransform).translate(\n        -parentCacheAsTexture._textureBounds.x,\n        -parentCacheAsTexture._textureBounds.y\n      );\n    }\n    return this.worldTransform;\n  }\n  /**\n   * Returns a matrix that transforms coordinates to the correct coordinate space of the texture being rendered to.\n   * This is the texture offset inverse transform of the closest parent RenderGroup that is cached as a texture.\n   * @returns {Matrix | null} The transform matrix for the cached texture coordinate space,\n   * or null if no parent is cached as texture.\n   */\n  get cacheToLocalTransform() {\n    if (!this._parentCacheAsTextureRenderGroup)\n      return null;\n    return this._parentCacheAsTextureRenderGroup.textureOffsetInverseTransform;\n  }\n}\n\nexports.RenderGroup = RenderGroup;\n//# sourceMappingURL=RenderGroup.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matrix","InstructionSet","TexturePool","RenderGroup","constructor","renderPipeId","root","canBundle","renderGroupParent","renderGroupChildren","worldTransform","worldColorAlpha","worldColor","worldAlpha","childrenToUpdate","Object","create","gcTick","updateTick","childrenRenderablesToUpdate","list","index","structureDidChange","instructionSet","_onRenderContainers","textureNeedsUpdate","isCachedAsTexture","_matrixDirty","init","_onRender","addOnRender","didChange","children","i","length","child","_updateFlags","addChild","enableCacheAsTexture","options","textureOptions","disableCacheAsTexture","texture","returnTexture","updateCacheTexture","reset","childrenAtDepth","fill","localTransform","addRenderGroupChild","renderGroupChild","_removeRenderGroupChild","push","indexOf","splice","parentRenderGroup","relativeRenderGroupDepth","parent","onChildUpdate","renderGroup","removeChild","removeOnRender","removeChildren","updateRenderable","renderable","globalDisplayStatus","renderPipes","didViewUpdate","onChildViewUpdate","localDisplayStatus","container","runOnRender","renderer","destroy","getChildren","out","_getChildren","invalidateMatrices","_inverseWorldTransform","copyFrom","invert","_textureOffsetInverseTransform","inverseWorldTransform","translate","_textureBounds","x","y","_inverseParentTextureTransform","parentCacheAsTexture","_parentCacheAsTextureRenderGroup","prepend","textureOffsetInverseTransform"]
}
