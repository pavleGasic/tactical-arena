{
"version":3,
"file":"module$node_modules$$pixi$core$lib$renderTexture$BaseRenderTexture.js",
"lineCount":50,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/renderTexture/BaseRenderTexture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$renderTexture$BaseRenderTexture\"] = function(global,require,module,exports) {\n\"use strict\";\nvar color = require(\"@pixi/color\"), constants = require(\"@pixi/constants\"), Framebuffer = require(\"../framebuffer/Framebuffer.js\"), BaseTexture = require(\"../textures/BaseTexture.js\");\nclass BaseRenderTexture extends BaseTexture.BaseTexture {\n  /**\n   * @param options\n   * @param {number} [options.width=100] - The width of the base render texture.\n   * @param {number} [options.height=100] - The height of the base render texture.\n   * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.BaseTexture.defaultOptions.scaleMode] - See {@link PIXI.SCALE_MODES}\n   *   for possible values.\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio\n   *   of the texture being generated.\n   * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.\n   */\n  constructor(options = {}) {\n    if (typeof options == \"number\") {\n      const width = arguments[0], height = arguments[1], scaleMode = arguments[2], resolution = arguments[3];\n      options = { width, height, scaleMode, resolution };\n    }\n    options.width = options.width ?? 100, options.height = options.height ?? 100, options.multisample ?? (options.multisample = constants.MSAA_QUALITY.NONE), super(null, options), this.mipmap = constants.MIPMAP_MODES.OFF, this.valid = !0, this._clear = new color.Color([0, 0, 0, 0]), this.framebuffer = new Framebuffer.Framebuffer(this.realWidth, this.realHeight).addColorTexture(0, this), this.framebuffer.multisample = options.multisample, this.maskStack = [], this.filterStack = [{}];\n  }\n  /** Color when clearning the texture. */\n  set clearColor(value) {\n    this._clear.setValue(value);\n  }\n  get clearColor() {\n    return this._clear.value;\n  }\n  /**\n   * Color object when clearning the texture.\n   * @readonly\n   * @since 7.2.0\n   */\n  get clear() {\n    return this._clear;\n  }\n  /**\n   * Shortcut to `this.framebuffer.multisample`.\n   * @default PIXI.MSAA_QUALITY.NONE\n   */\n  get multisample() {\n    return this.framebuffer.multisample;\n  }\n  set multisample(value) {\n    this.framebuffer.multisample = value;\n  }\n  /**\n   * Resizes the BaseRenderTexture.\n   * @param desiredWidth - The desired width to resize to.\n   * @param desiredHeight - The desired height to resize to.\n   */\n  resize(desiredWidth, desiredHeight) {\n    this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution), this.setRealSize(this.framebuffer.width, this.framebuffer.height);\n  }\n  /**\n   * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n   * This means you can still use the texture later which will upload it to GPU\n   * memory again.\n   * @fires PIXI.BaseTexture#dispose\n   */\n  dispose() {\n    this.framebuffer.dispose(), super.dispose();\n  }\n  /** Destroys this texture. */\n  destroy() {\n    super.destroy(), this.framebuffer.destroyDepthTexture(), this.framebuffer = null;\n  }\n}\nexports.BaseRenderTexture = BaseRenderTexture;\n//# sourceMappingURL=BaseRenderTexture.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","color","constants","Framebuffer","BaseTexture","BaseRenderTexture","constructor","options","width","arguments","height","scaleMode","resolution","multisample","MSAA_QUALITY","NONE","mipmap","MIPMAP_MODES","OFF","valid","_clear","Color","framebuffer","addColorTexture","realWidth","realHeight","maskStack","filterStack","value","setValue","resize","desiredWidth","desiredHeight","setRealSize","dispose","destroy","destroyDepthTexture"]
}
