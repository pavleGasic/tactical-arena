{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$geometry$GlGeometrySystem.js",
"lineCount":164,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/geometry/GlGeometrySystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$geometry$GlGeometrySystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar getAttributeInfoFromFormat = require('../../shared/geometry/utils/getAttributeInfoFromFormat.js');\nvar ensureAttributes = require('../shader/program/ensureAttributes.js');\nvar getGlTypeFromFormat = require('./utils/getGlTypeFromFormat.js');\n\n\"use strict\";\nconst topologyToGlMap = {\n  \"point-list\": 0,\n  \"line-list\": 1,\n  \"line-strip\": 3,\n  \"triangle-list\": 4,\n  \"triangle-strip\": 5\n};\nclass GlGeometrySystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._geometryVaoHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._activeGeometry = null;\n    this._activeVao = null;\n    this.hasVao = true;\n    this.hasInstance = true;\n    this._renderer.renderableGC.addManagedHash(this, \"_geometryVaoHash\");\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    const gl = this.gl = this._renderer.gl;\n    if (!this._renderer.context.supports.vertexArrayObject) {\n      throw new Error(\"[PixiJS] Vertex Array Objects are not supported on this device\");\n    }\n    const nativeVaoExtension = this._renderer.context.extensions.vertexArrayObject;\n    if (nativeVaoExtension) {\n      gl.createVertexArray = () => nativeVaoExtension.createVertexArrayOES();\n      gl.bindVertexArray = (vao) => nativeVaoExtension.bindVertexArrayOES(vao);\n      gl.deleteVertexArray = (vao) => nativeVaoExtension.deleteVertexArrayOES(vao);\n    }\n    const nativeInstancedExtension = this._renderer.context.extensions.vertexAttribDivisorANGLE;\n    if (nativeInstancedExtension) {\n      gl.drawArraysInstanced = (a, b, c, d) => {\n        nativeInstancedExtension.drawArraysInstancedANGLE(a, b, c, d);\n      };\n      gl.drawElementsInstanced = (a, b, c, d, e) => {\n        nativeInstancedExtension.drawElementsInstancedANGLE(a, b, c, d, e);\n      };\n      gl.vertexAttribDivisor = (a, b) => nativeInstancedExtension.vertexAttribDivisorANGLE(a, b);\n    }\n    this._activeGeometry = null;\n    this._activeVao = null;\n    this._geometryVaoHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Binds geometry so that is can be drawn. Creating a Vao if required\n   * @param geometry - Instance of geometry to bind.\n   * @param program - Instance of program to use vao for.\n   */\n  bind(geometry, program) {\n    const gl = this.gl;\n    this._activeGeometry = geometry;\n    const vao = this.getVao(geometry, program);\n    if (this._activeVao !== vao) {\n      this._activeVao = vao;\n      gl.bindVertexArray(vao);\n    }\n    this.updateBuffers();\n  }\n  /** Reset and unbind any active VAO and geometry. */\n  resetState() {\n    this.unbind();\n  }\n  /** Update buffers of the currently bound geometry. */\n  updateBuffers() {\n    const geometry = this._activeGeometry;\n    const bufferSystem = this._renderer.buffer;\n    for (let i = 0; i < geometry.buffers.length; i++) {\n      const buffer = geometry.buffers[i];\n      bufferSystem.updateBuffer(buffer);\n    }\n  }\n  /**\n   * Check compatibility between a geometry and a program\n   * @param geometry - Geometry instance.\n   * @param program - Program instance.\n   */\n  checkCompatibility(geometry, program) {\n    const geometryAttributes = geometry.attributes;\n    const shaderAttributes = program._attributeData;\n    for (const j in shaderAttributes) {\n      if (!geometryAttributes[j]) {\n        throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n      }\n    }\n  }\n  /**\n   * Takes a geometry and program and generates a unique signature for them.\n   * @param geometry - To get signature from.\n   * @param program - To test geometry against.\n   * @returns - Unique signature of the geometry and program\n   */\n  getSignature(geometry, program) {\n    const attribs = geometry.attributes;\n    const shaderAttributes = program._attributeData;\n    const strings = [\"g\", geometry.uid];\n    for (const i in attribs) {\n      if (shaderAttributes[i]) {\n        strings.push(i, shaderAttributes[i].location);\n      }\n    }\n    return strings.join(\"-\");\n  }\n  getVao(geometry, program) {\n    return this._geometryVaoHash[geometry.uid]?.[program._key] || this.initGeometryVao(geometry, program);\n  }\n  /**\n   * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n   * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n   * attribute locations.\n   * @param geometry - Instance of geometry to to generate Vao for.\n   * @param program\n   * @param _incRefCount - Increment refCount of all geometry buffers.\n   */\n  initGeometryVao(geometry, program, _incRefCount = true) {\n    const gl = this._renderer.gl;\n    const bufferSystem = this._renderer.buffer;\n    this._renderer.shader._getProgramData(program);\n    this.checkCompatibility(geometry, program);\n    const signature = this.getSignature(geometry, program);\n    if (!this._geometryVaoHash[geometry.uid]) {\n      this._geometryVaoHash[geometry.uid] = /* @__PURE__ */ Object.create(null);\n      geometry.on(\"destroy\", this.onGeometryDestroy, this);\n    }\n    const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n    let vao = vaoObjectHash[signature];\n    if (vao) {\n      vaoObjectHash[program._key] = vao;\n      return vao;\n    }\n    ensureAttributes.ensureAttributes(geometry, program._attributeData);\n    const buffers = geometry.buffers;\n    vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    for (let i = 0; i < buffers.length; i++) {\n      const buffer = buffers[i];\n      bufferSystem.bind(buffer);\n    }\n    this.activateVao(geometry, program);\n    vaoObjectHash[program._key] = vao;\n    vaoObjectHash[signature] = vao;\n    gl.bindVertexArray(null);\n    return vao;\n  }\n  /**\n   * Disposes geometry.\n   * @param geometry - Geometry with buffers. Only VAO will be disposed\n   * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n   */\n  onGeometryDestroy(geometry, contextLost) {\n    const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n    const gl = this.gl;\n    if (vaoObjectHash) {\n      if (contextLost) {\n        for (const i in vaoObjectHash) {\n          if (this._activeVao !== vaoObjectHash[i]) {\n            this.unbind();\n          }\n          gl.deleteVertexArray(vaoObjectHash[i]);\n        }\n      }\n      this._geometryVaoHash[geometry.uid] = null;\n    }\n  }\n  /**\n   * Dispose all WebGL resources of all managed geometries.\n   * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n   */\n  destroyAll(contextLost = false) {\n    const gl = this.gl;\n    for (const i in this._geometryVaoHash) {\n      if (contextLost) {\n        for (const j in this._geometryVaoHash[i]) {\n          const vaoObjectHash = this._geometryVaoHash[i];\n          if (this._activeVao !== vaoObjectHash) {\n            this.unbind();\n          }\n          gl.deleteVertexArray(vaoObjectHash[j]);\n        }\n      }\n      this._geometryVaoHash[i] = null;\n    }\n  }\n  /**\n   * Activate vertex array object.\n   * @param geometry - Geometry instance.\n   * @param program - Shader program instance.\n   */\n  activateVao(geometry, program) {\n    const gl = this._renderer.gl;\n    const bufferSystem = this._renderer.buffer;\n    const attributes = geometry.attributes;\n    if (geometry.indexBuffer) {\n      bufferSystem.bind(geometry.indexBuffer);\n    }\n    let lastBuffer = null;\n    for (const j in attributes) {\n      const attribute = attributes[j];\n      const buffer = attribute.buffer;\n      const glBuffer = bufferSystem.getGlBuffer(buffer);\n      const programAttrib = program._attributeData[j];\n      if (programAttrib) {\n        if (lastBuffer !== glBuffer) {\n          bufferSystem.bind(buffer);\n          lastBuffer = glBuffer;\n        }\n        const location = programAttrib.location;\n        gl.enableVertexAttribArray(location);\n        const attributeInfo = getAttributeInfoFromFormat.getAttributeInfoFromFormat(attribute.format);\n        const type = getGlTypeFromFormat.getGlTypeFromFormat(attribute.format);\n        if (programAttrib.format?.substring(1, 4) === \"int\") {\n          gl.vertexAttribIPointer(\n            location,\n            attributeInfo.size,\n            type,\n            attribute.stride,\n            attribute.offset\n          );\n        } else {\n          gl.vertexAttribPointer(\n            location,\n            attributeInfo.size,\n            type,\n            attributeInfo.normalised,\n            attribute.stride,\n            attribute.offset\n          );\n        }\n        if (attribute.instance) {\n          if (this.hasInstance) {\n            const divisor = attribute.divisor ?? 1;\n            gl.vertexAttribDivisor(location, divisor);\n          } else {\n            throw new Error(\"geometry error, GPU Instancing is not supported on this device\");\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Draws the currently bound geometry.\n   * @param topology - The type primitive to render.\n   * @param size - The number of elements to be rendered. If not specified, all vertices after the\n   *  starting vertex will be drawn.\n   * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n   *  drawing will start from the first vertex.\n   * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n   *  all instances will be drawn.\n   */\n  draw(topology, size, start, instanceCount) {\n    const { gl } = this._renderer;\n    const geometry = this._activeGeometry;\n    const glTopology = topologyToGlMap[topology || geometry.topology];\n    instanceCount ?? (instanceCount = geometry.instanceCount);\n    if (geometry.indexBuffer) {\n      const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n      const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n      if (instanceCount > 1) {\n        gl.drawElementsInstanced(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount);\n      } else {\n        gl.drawElements(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n      }\n    } else if (instanceCount > 1) {\n      gl.drawArraysInstanced(glTopology, start || 0, size || geometry.getSize(), instanceCount);\n    } else {\n      gl.drawArrays(glTopology, start || 0, size || geometry.getSize());\n    }\n    return this;\n  }\n  /** Unbind/reset everything. */\n  unbind() {\n    this.gl.bindVertexArray(null);\n    this._activeVao = null;\n    this._activeGeometry = null;\n  }\n  destroy() {\n    this._renderer = null;\n    this.gl = null;\n    this._activeVao = null;\n    this._activeGeometry = null;\n  }\n}\n/** @ignore */\nGlGeometrySystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem\n  ],\n  name: \"geometry\"\n};\n\nexports.GlGeometrySystem = GlGeometrySystem;\n//# sourceMappingURL=GlGeometrySystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","getAttributeInfoFromFormat","ensureAttributes","getGlTypeFromFormat","topologyToGlMap","GlGeometrySystem","constructor","renderer","_geometryVaoHash","Object","create","_renderer","_activeVao","_activeGeometry","hasInstance","hasVao","renderableGC","addManagedHash","contextChange","gl","context","supports","vertexArrayObject","Error","nativeVaoExtension","extensions","createVertexArray","gl.createVertexArray","createVertexArrayOES","bindVertexArray","vao","gl.bindVertexArray","bindVertexArrayOES","deleteVertexArray","gl.deleteVertexArray","deleteVertexArrayOES","nativeInstancedExtension","vertexAttribDivisorANGLE","drawArraysInstanced","a","b","c","d","gl.drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","e","gl.drawElementsInstanced","drawElementsInstancedANGLE","vertexAttribDivisor","gl.vertexAttribDivisor","bind","geometry","program","getVao","updateBuffers","resetState","unbind","bufferSystem","buffer","i","buffers","length","updateBuffer","checkCompatibility","geometryAttributes","attributes","shaderAttributes","_attributeData","j","getSignature","attribs","strings","uid","push","location","join","_key","initGeometryVao","_incRefCount","shader","_getProgramData","signature","on","onGeometryDestroy","vaoObjectHash","activateVao","contextLost","destroyAll","indexBuffer","lastBuffer","attribute","glBuffer","getGlBuffer","programAttrib","enableVertexAttribArray","attributeInfo","format","type","substring","vertexAttribIPointer","size","stride","offset","vertexAttribPointer","normalised","instance","divisor","draw","topology","start","instanceCount","glTopology","byteSize","data","BYTES_PER_ELEMENT","glType","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","getSize","drawArrays","destroy","extension","ExtensionType","WebGLSystem","name"]
}
