{
"version":3,
"file":"module$node_modules$$pixi$filter_blur$lib$BlurFilter.js",
"lineCount":64,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,GAAyE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE7GC,OAAOH,OAAA,CAAQ,0CAAR,CAFsG,EAE/EI,iBAAiBJ,OAAA,CAAQ,0DAAR,CAF8D;AAGjH,OAAMK,WAAN,QAAyBF,KAAKG,CAAAA,MAA9B;AAOEC,eAAW,CAACC,QAAA,GAAW,CAAZ,EAAeC,OAAA,GAAU,CAAzB,EAA4BC,UAAA,GAAaP,IAAKG,CAAAA,MAAOK,CAAAA,iBAArD,EAAwEC,UAAA,GAAa,CAArF,CAAwF;AACjG,WAAA,EAAA;AAAS,UAAKC,CAAAA,iBAAL,GAAyB,CAAA,CAAzB;AAA6B,UAAKC,CAAAA,WAAL,GAAmB,IAAIV,cAAeA,CAAAA,cAAnB,CAAkC,CAAA,CAAlC,EAAsCI,QAAtC,EAAgDC,OAAhD,EAAyDC,UAAzD,EAAqEE,UAArE,CAAnB;AAAqG,UAAKG,CAAAA,WAAL,GAAmB,IAAIX,cAAeA,CAAAA,cAAnB,CAAkC,CAAA,CAAlC,EAAsCI,QAAtC,EAAgDC,OAAhD,EAAyDC,UAAzD,EAAqEE,UAArE,CAAnB;AAAqG,UAAKF,CAAAA,UAAL,GAAkBA,UAAlB;AAA8B,UAAKD,CAAAA,OAAL,GAAeA,OAAf;AAAwB,UAAKO,CAAAA,IAAL,GAAYR,QAAZ;AAAsB,UAAKS,CAAAA,gBAAL,GAAwB,CAAA,CAAxB;AAD3N;AAUnGC,SAAK,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,SAA/B,CAA0C;AAC7C,UAAuDC,YAAYC,IAAKC,CAAAA,GAAL,CAAS,IAAKV,CAAAA,WAAYP,CAAAA,QAA1B,CAAnE;AAAkBgB,UAAKC,CAAAA,GAALC,CAAS,IAAKZ,CAAAA,WAAYN,CAAAA,QAA1BkB,CAClB,IAAiBH,SAAjB,IACQI,SACsJ,GADvIR,aAAcS,CAAAA,gBAAd,EACuI,EAA5J,IAAKd,CAAAA,WAAYI,CAAAA,KAAjB,CAAuBC,aAAvB,EAAsCC,KAAtC,EAA6CO,SAA7C,EAA2DxB,IAAK0B,CAAAA,WAAYC,CAAAA,KAA5E,CAA4J,EAAxE,IAAKf,CAAAA,WAAYG,CAAAA,KAAjB,CAAuBC,aAAvB,EAAsCQ,SAAtC,EAAoDN,MAApD,EAA4DC,SAA5D,CAAwE,EAAAH,aAAcY,CAAAA,mBAAd,CAAkCJ,SAAlC,CAF9J,IAIEJ,SAAA,GAAY,IAAKR,CAAAA,WAAYG,CAAAA,KAAjB,CAAuBC,aAAvB,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,SAArD,CAAZ,GAA8E,IAAKR,CAAAA,WAAYI,CAAAA,KAAjB,CAAuBC,aAAvB,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,SAArD,CAJhF;AAF6C;AAQ/CU,iBAAa,EAAG;AACd,UAAKnB,CAAAA,iBAAL,GAAyB,IAAKoB,CAAAA,OAA9B,GAAwC,CAAxC,GAA4C,IAAKA,CAAAA,OAAjD,GAAgJ,CAAhJ,GAA2DT,IAAKU,CAAAA,GAAL,CAASV,IAAKC,CAAAA,GAAL,CAAS,IAAKX,CAAAA,WAAYN,CAAAA,QAA1B,CAAT,EAA8CgB,IAAKC,CAAAA,GAAL,CAAS,IAAKV,CAAAA,WAAYP,CAAAA,QAA1B,CAA9C,CAA3D;AADc;AAOZ,YAAO,EAAA;AACT,aAAO,IAAKM,CAAAA,WAAYE,CAAAA,IAAxB;AADS;AAGP,YAAI,CAACmB,KAAD,CAAQ;AACd,UAAKrB,CAAAA,WAAYE,CAAAA,IAAjB,GAAwB,IAAKD,CAAAA,WAAYC,CAAAA,IAAzC,GAAgDmB,KAAhD;AAAuD,UAAKH,CAAAA,aAAL,EAAA;AADzC;AAOZ,eAAU,EAAA;AACZ,aAAO,IAAKlB,CAAAA,WAAYL,CAAAA,OAAxB;AADY;AAGV,eAAO,CAAC0B,KAAD,CAAQ;AACjB,UAAKrB,CAAAA,WAAYL,CAAAA,OAAjB,GAA2B,IAAKM,CAAAA,WAAYN,CAAAA,OAA5C,GAAsD0B,KAAtD;AADiB;AAOf,aAAQ,EAAA;AACV,aAAO,IAAKrB,CAAAA,WAAYE,CAAAA,IAAxB;AADU;AAGR,aAAK,CAACmB,KAAD,CAAQ;AACf,UAAKrB,CAAAA,WAAYE,CAAAA,IAAjB,GAAwBmB,KAAxB;AAA+B,UAAKH,CAAAA,aAAL,EAAA;AADhB;AAOb,aAAQ,EAAA;AACV,aAAO,IAAKjB,CAAAA,WAAYC,CAAAA,IAAxB;AADU;AAGR,aAAK,CAACmB,KAAD,CAAQ;AACf,UAAKpB,CAAAA,WAAYC,CAAAA,IAAjB,GAAwBmB,KAAxB;AAA+B,UAAKH,CAAAA,aAAL,EAAA;AADhB;AAOb,iBAAY,EAAA;AACd,aAAO,IAAKjB,CAAAA,WAAYqB,CAAAA,SAAxB;AADc;AAGZ,iBAAS,CAACD,KAAD,CAAQ;AACnB,UAAKpB,CAAAA,WAAYqB,CAAAA,SAAjB,GAA6BD,KAA7B;AADmB;AAOjB,wBAAmB,EAAA;AACrB,aAAO,IAAKtB,CAAAA,iBAAZ;AADqB;AAGnB,wBAAgB,CAACsB,KAAD,CAAQ;AAC1B,UAAKtB,CAAAA,iBAAL,GAAyBsB,KAAzB;AAAgC,UAAKH,CAAAA,aAAL,EAAA;AADN;AArF9B;AAyFA9B,SAAQG,CAAAA,UAAR,GAAqBA,UAArB;AA5FiH,CAAjH;;",
"sources":["node_modules/@pixi/filter-blur/lib/BlurFilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$filter_blur$lib$BlurFilter\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), BlurFilterPass = require(\"./BlurFilterPass.js\");\nclass BlurFilter extends core.Filter {\n  /**\n   * @param strength - The strength of the blur filter.\n   * @param quality - The quality of the blur filter.\n   * @param {number|null} [resolution=PIXI.Filter.defaultResolution] - The resolution of the blur filter.\n   * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n  constructor(strength = 8, quality = 4, resolution = core.Filter.defaultResolution, kernelSize = 5) {\n    super(), this._repeatEdgePixels = !1, this.blurXFilter = new BlurFilterPass.BlurFilterPass(!0, strength, quality, resolution, kernelSize), this.blurYFilter = new BlurFilterPass.BlurFilterPass(!1, strength, quality, resolution, kernelSize), this.resolution = resolution, this.quality = quality, this.blur = strength, this.repeatEdgePixels = !1;\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - How to clear\n   */\n  apply(filterManager, input, output, clearMode) {\n    const xStrength = Math.abs(this.blurXFilter.strength), yStrength = Math.abs(this.blurYFilter.strength);\n    if (xStrength && yStrength) {\n      const renderTarget = filterManager.getFilterTexture();\n      this.blurXFilter.apply(filterManager, input, renderTarget, core.CLEAR_MODES.CLEAR), this.blurYFilter.apply(filterManager, renderTarget, output, clearMode), filterManager.returnFilterTexture(renderTarget);\n    } else\n      yStrength ? this.blurYFilter.apply(filterManager, input, output, clearMode) : this.blurXFilter.apply(filterManager, input, output, clearMode);\n  }\n  updatePadding() {\n    this._repeatEdgePixels ? this.padding = 0 : this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n  }\n  /**\n   * Sets the strength of both the blurX and blurY properties simultaneously\n   * @default 2\n   */\n  get blur() {\n    return this.blurXFilter.blur;\n  }\n  set blur(value) {\n    this.blurXFilter.blur = this.blurYFilter.blur = value, this.updatePadding();\n  }\n  /**\n   * Sets the number of passes for blur. More passes means higher quality bluring.\n   * @default 1\n   */\n  get quality() {\n    return this.blurXFilter.quality;\n  }\n  set quality(value) {\n    this.blurXFilter.quality = this.blurYFilter.quality = value;\n  }\n  /**\n   * Sets the strength of the blurX property\n   * @default 2\n   */\n  get blurX() {\n    return this.blurXFilter.blur;\n  }\n  set blurX(value) {\n    this.blurXFilter.blur = value, this.updatePadding();\n  }\n  /**\n   * Sets the strength of the blurY property\n   * @default 2\n   */\n  get blurY() {\n    return this.blurYFilter.blur;\n  }\n  set blurY(value) {\n    this.blurYFilter.blur = value, this.updatePadding();\n  }\n  /**\n   * Sets the blendmode of the filter\n   * @default PIXI.BLEND_MODES.NORMAL\n   */\n  get blendMode() {\n    return this.blurYFilter.blendMode;\n  }\n  set blendMode(value) {\n    this.blurYFilter.blendMode = value;\n  }\n  /**\n   * If set to true the edge of the target will be clamped\n   * @default false\n   */\n  get repeatEdgePixels() {\n    return this._repeatEdgePixels;\n  }\n  set repeatEdgePixels(value) {\n    this._repeatEdgePixels = value, this.updatePadding();\n  }\n}\nexports.BlurFilter = BlurFilter;\n//# sourceMappingURL=BlurFilter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","BlurFilterPass","BlurFilter","Filter","constructor","strength","quality","resolution","defaultResolution","kernelSize","_repeatEdgePixels","blurXFilter","blurYFilter","blur","repeatEdgePixels","apply","filterManager","input","output","clearMode","yStrength","Math","abs","xStrength","renderTarget","getFilterTexture","CLEAR_MODES","CLEAR","returnFilterTexture","updatePadding","padding","max","value","blendMode"]
}
