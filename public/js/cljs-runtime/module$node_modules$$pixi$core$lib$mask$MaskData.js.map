{
"version":3,
"file":"module$node_modules$$pixi$core$lib$mask$MaskData.js",
"lineCount":36,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,GAAqE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAEzGC,YAAYH,OAAA,CAAQ,+CAAR,CAF6F,EAEjEI,SAASJ,OAAA,CAAQ,mDAAR,CAFwD;AAG7G,OAAMK,SAAN;AAKEC,eAAW,CAACC,UAAA,GAAa,IAAd,CAAoB;AAC7B,UAAKC,CAAAA,IAAL,GAAYL,SAAUM,CAAAA,UAAWC,CAAAA,IAAjC;AAAuC,UAAKC,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AAAsB,UAAKJ,CAAAA,UAAL,GAAkBA,UAAlB,IAAgC,IAAhC;AAAsC,UAAKK,CAAAA,MAAL,GAAc,CAAA,CAAd;AAAkB,UAAKC,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AAAsB,UAAKC,CAAAA,UAAL,GAAkB,IAAlB;AAAwB,UAAKC,CAAAA,WAAL,GAAmBX,MAAOA,CAAAA,MAAOY,CAAAA,kBAAjC;AAAqD,UAAKC,CAAAA,OAAL,GAAe,CAAA,CAAf;AAAmB,UAAKC,CAAAA,SAAL,GAAiB,EAAjB;AAAqB,UAAKC,CAAAA,QAAL,GAAgB,IAAhB;AAAgD,UAAKC,CAAAA,eAAL,GAA1B,IAAKC,CAAAA,eAAqB,GAAH,CAAG;AAAoD,UAAKC,CAAAA,iBAAL,GAA1B,IAAKC,CAAAA,YAAqB,GAAN,IAAM;AAA+B,UAAKC,CAAAA,UAAL,GAAkB,EAAlB;AAAsB,UAAKC,CAAAA,OAAL,GAAe,IAAf;AAD5X;AAQ3B,cAAS,EAAA;AACX,aAAO,IAAKN,CAAAA,QAAL,GAAgB,IAAKA,CAAAA,QAAL,CAAc,CAAd,CAAhB,GAAmC,IAA1C;AADW;AAGT,cAAM,CAACO,KAAD,CAAQ;AAChBA,WAAA,GAAQ,IAAKP,CAAAA,QAAL,GAAgB,IAAKA,CAAAA,QAAL,CAAc,CAAd,CAAhB,GAAmCO,KAAnC,GAA2C,IAAKP,CAAAA,QAAhD,GAA2D,CAACO,KAAD,CAAnE,GAA6E,IAAKP,CAAAA,QAAlF,GAA6F,IAA7F;AADgB;AAIlBQ,SAAK,EAAG;AACN,UAAKf,CAAAA,MAAL,KAAgB,IAAKL,CAAAA,UAAL,GAAkB,IAAlB,EAAwB,IAAKC,CAAAA,IAA7B,GAAoCL,SAAUM,CAAAA,UAAWC,CAAAA,IAAzD,EAA+D,IAAKC,CAAAA,UAApE,GAAiF,CAAA,CAAjG;AAA2H,UAAKW,CAAAA,iBAAL,GAArB,IAAKG,CAAAA,OAAgB,GAAN,IAAM;AADrH;AAORG,uBAAmB,CAACC,SAAD,CAAY;AAC7BA,eAAA,IAAa,IAAKR,CAAAA,eAAL,GAAuBQ,SAAUR,CAAAA,eAAjC,EAAkD,IAAKD,CAAAA,eAAvD,GAAyES,SAAUT,CAAAA,eAAnF,EAAoG,IAAKG,CAAAA,YAAzG,GAAwHM,SAAUN,CAAAA,YAA/I,KAAgK,IAAKF,CAAAA,eAAL,GAAuB,CAAvB,EAA0B,IAAKD,CAAAA,eAA/B,GAAiD,CAAjD,EAAoD,IAAKG,CAAAA,YAAzD,GAAwE,IAAxO,CAAA;AAD6B;AA3BjC;AA+BArB,SAAQG,CAAAA,QAAR,GAAmBA,QAAnB;AAlC6G,CAA7G;;",
"sources":["node_modules/@pixi/core/lib/mask/MaskData.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$mask$MaskData\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), Filter = require(\"../filters/Filter.js\");\nclass MaskData {\n  /**\n   * Create MaskData\n   * @param {PIXI.DisplayObject} [maskObject=null] - object that describes the mask\n   */\n  constructor(maskObject = null) {\n    this.type = constants.MASK_TYPES.NONE, this.autoDetect = !0, this.maskObject = maskObject || null, this.pooled = !1, this.isMaskData = !0, this.resolution = null, this.multisample = Filter.Filter.defaultMultisample, this.enabled = !0, this.colorMask = 15, this._filters = null, this._stencilCounter = 0, this._scissorCounter = 0, this._scissorRect = null, this._scissorRectLocal = null, this._colorMask = 15, this._target = null;\n  }\n  /**\n   * The sprite mask filter.\n   * If set to `null`, the default sprite mask filter is used.\n   * @default null\n   */\n  get filter() {\n    return this._filters ? this._filters[0] : null;\n  }\n  set filter(value) {\n    value ? this._filters ? this._filters[0] = value : this._filters = [value] : this._filters = null;\n  }\n  /** Resets the mask data after popMask(). */\n  reset() {\n    this.pooled && (this.maskObject = null, this.type = constants.MASK_TYPES.NONE, this.autoDetect = !0), this._target = null, this._scissorRectLocal = null;\n  }\n  /**\n   * Copies counters from maskData above, called from pushMask().\n   * @param maskAbove\n   */\n  copyCountersOrReset(maskAbove) {\n    maskAbove ? (this._stencilCounter = maskAbove._stencilCounter, this._scissorCounter = maskAbove._scissorCounter, this._scissorRect = maskAbove._scissorRect) : (this._stencilCounter = 0, this._scissorCounter = 0, this._scissorRect = null);\n  }\n}\nexports.MaskData = MaskData;\n//# sourceMappingURL=MaskData.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","Filter","MaskData","constructor","maskObject","type","MASK_TYPES","NONE","autoDetect","pooled","isMaskData","resolution","multisample","defaultMultisample","enabled","colorMask","_filters","_scissorCounter","_stencilCounter","_scissorRectLocal","_scissorRect","_colorMask","_target","value","reset","copyCountersOrReset","maskAbove"]
}
