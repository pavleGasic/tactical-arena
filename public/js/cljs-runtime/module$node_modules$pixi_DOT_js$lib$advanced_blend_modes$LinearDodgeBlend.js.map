{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$LinearDodgeBlend.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,GAA8F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGlIC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACAC,SAAAA,GAAkBJ,OAAA,CAAQ,yEAAR,CAAlBI;AAEJ,cAAA;AACA,OAAMC,iBAAN,QAA+BD,QAAgBA,CAAAA,eAA/C;AACEE,eAAW,EAAG;AACZ,WAAA,CAAM,CACJC,GAAI,CACFC,UAAY,gjBADV;AAeFC,WAAO,iIAfL,CADA,EAoBJC,IAAK,CACHF,UAAY,soBADT;AAkBHC,WAAO,gJAlBJ,CApBD,CAAN,CAAA;AADY;AADhB;AAgDAJ,kBAAiBM,CAAAA,SAAjB,GAA6B,CAC3BC,KAAM,cADqB,EAE3BC,KAAMV,MAAWW,CAAAA,aAAcC,CAAAA,SAFJ,CAA7B;AAKAb,SAAQG,CAAAA,gBAAR,GAA2BA,gBAA3B;AA5DsI,CAAtI;;",
"sources":["node_modules/pixi_DOT_js/lib/advanced-blend-modes/LinearDodgeBlend.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$LinearDodgeBlend\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../extensions/Extensions.js');\nvar BlendModeFilter = require('../filters/blend-modes/BlendModeFilter.js');\n\n\"use strict\";\nclass LinearDodgeBlend extends BlendModeFilter.BlendModeFilter {\n  constructor() {\n    super({\n      gl: {\n        functions: `\n                float linearDodge(float base, float blend) {\n                    return min(1.0, base + blend);\n                }\n\n                vec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n                    vec3 blended = vec3(\n                        linearDodge(base.r, blend.r),\n                        linearDodge(base.g, blend.g),\n                        linearDodge(base.b, blend.b)\n                    );\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                `,\n        main: `\n                finalColor = vec4(blendLinearDodge(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n                `\n      },\n      gpu: {\n        functions: `\n                fn linearDodge(base: f32, blend: f32) -> f32\n                {\n                    return min(1, base + blend);\n                }\n\n                fn blendLinearDodge(base:vec3<f32>, blend:vec3<f32>,  opacity:f32) -> vec3<f32>\n                {\n                    let blended = vec3<f32>(\n                        linearDodge(base.r, blend.r),\n                        linearDodge(base.g, blend.g),\n                        linearDodge(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            `,\n        main: `\n                out = vec4<f32>(blendLinearDodge(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n            `\n      }\n    });\n  }\n}\n/** @ignore */\nLinearDodgeBlend.extension = {\n  name: \"linear-dodge\",\n  type: Extensions.ExtensionType.BlendMode\n};\n\nexports.LinearDodgeBlend = LinearDodgeBlend;\n//# sourceMappingURL=LinearDodgeBlend.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","BlendModeFilter","LinearDodgeBlend","constructor","gl","functions","main","gpu","extension","name","type","ExtensionType","BlendMode"]
}
