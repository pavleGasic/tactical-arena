{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$utils$misc$Transform.js",
"lineCount":60,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/utils/misc/Transform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$utils$misc$Transform\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Matrix = require('../../maths/matrix/Matrix.js');\nvar ObservablePoint = require('../../maths/point/ObservablePoint.js');\n\n\"use strict\";\nclass Transform {\n  /**\n   * @param options - Options for the transform.\n   * @param options.matrix - The matrix to use.\n   * @param options.observer - The observer to use.\n   */\n  constructor({ matrix, observer } = {}) {\n    this.dirty = true;\n    this._matrix = matrix ?? new Matrix.Matrix();\n    this.observer = observer;\n    this.position = new ObservablePoint.ObservablePoint(this, 0, 0);\n    this.scale = new ObservablePoint.ObservablePoint(this, 1, 1);\n    this.pivot = new ObservablePoint.ObservablePoint(this, 0, 0);\n    this.skew = new ObservablePoint.ObservablePoint(this, 0, 0);\n    this._rotation = 0;\n    this._cx = 1;\n    this._sx = 0;\n    this._cy = 0;\n    this._sy = 1;\n  }\n  /**\n   * This matrix is computed by combining this Transforms position, scale, rotation, skew, and pivot\n   * properties into a single matrix.\n   * @readonly\n   */\n  get matrix() {\n    const lt = this._matrix;\n    if (!this.dirty)\n      return lt;\n    lt.a = this._cx * this.scale.x;\n    lt.b = this._sx * this.scale.x;\n    lt.c = this._cy * this.scale.y;\n    lt.d = this._sy * this.scale.y;\n    lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n    lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n    this.dirty = false;\n    return lt;\n  }\n  /**\n   * Called when a value changes.\n   * @param point\n   * @internal\n   * @private\n   */\n  _onUpdate(point) {\n    this.dirty = true;\n    if (point === this.skew) {\n      this.updateSkew();\n    }\n    this.observer?._onUpdate(this);\n  }\n  /** Called when the skew or the rotation changes. */\n  updateSkew() {\n    this._cx = Math.cos(this._rotation + this.skew.y);\n    this._sx = Math.sin(this._rotation + this.skew.y);\n    this._cy = -Math.sin(this._rotation - this.skew.x);\n    this._sy = Math.cos(this._rotation - this.skew.x);\n    this.dirty = true;\n  }\n  toString() {\n    return `[pixi.js/math:Transform position=(${this.position.x}, ${this.position.y}) rotation=${this.rotation} scale=(${this.scale.x}, ${this.scale.y}) skew=(${this.skew.x}, ${this.skew.y}) ]`;\n  }\n  /**\n   * Decomposes a matrix and sets the transforms properties based on it.\n   * @param matrix - The matrix to decompose\n   */\n  setFromMatrix(matrix) {\n    matrix.decompose(this);\n    this.dirty = true;\n  }\n  /** The rotation of the object in radians. */\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    if (this._rotation !== value) {\n      this._rotation = value;\n      this._onUpdate(this.skew);\n    }\n  }\n}\n\nexports.Transform = Transform;\n//# sourceMappingURL=Transform.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matrix","ObservablePoint","Transform","constructor","matrix","observer","dirty","_matrix","position","scale","pivot","skew","_rotation","_cx","_cy","_sx","_sy","lt","a","x","b","c","y","d","tx","ty","_onUpdate","point","updateSkew","Math","cos","sin","toString","rotation","setFromMatrix","decompose","value"]
}
