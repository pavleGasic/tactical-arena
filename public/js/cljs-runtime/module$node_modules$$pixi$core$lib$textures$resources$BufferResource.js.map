{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$BufferResource.js",
"lineCount":30,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,GAAyF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE7HC,YAAYH,OAAA,CAAQ,+CAAR,CAFiH;AAErFI,QAAAA,GAAWJ,OAAA,CAAQ,gEAAR,CAAXI;AAC5C,OAAMC,eAAN,QAA6BD,OAASA,CAAAA,QAAtC;AAQEE,eAAW,CAACC,MAAD,EAASC,OAAT,CAAkB;AAC3B,YAAM,CAAEC,KAAF,EAASC,MAAT,CAAA,GAAoBF,OAApB,IAA+B,EAArC;AACA,UAAI,CAACC,KAAL,IAAc,CAACC,MAAf;AACE,cAAUC,KAAJ,CAAU,wCAAV,CAAN;AADF;AAEA,WAAA,CAAMF,KAAN,EAAaC,MAAb,CAAA;AAAsB,UAAKE,CAAAA,IAAL,GAAYL,MAAZ;AAAoB,UAAKM,CAAAA,eAAL,GAAuBL,OAAQK,CAAAA,eAA/B,IAAkD,CAAlD;AAJf;AAa7BC,UAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,CAAmC;AACjCC,cAAAA,GAAKH,QAASG,CAAAA,EAAdA;AACNA,cAAGC,CAAAA,WAAH,CAAeD,QAAGE,CAAAA,gBAAlB,EAAoC,IAAKP,CAAAA,eAAzC,CAAA;AAA2DK,cAAGC,CAAAA,WAAH,CAAeD,QAAGG,CAAAA,8BAAlB,EAAkDL,WAAYM,CAAAA,SAA9D,KAA4EnB,SAAUoB,CAAAA,WAAYC,CAAAA,MAAlG,CAAA;AAFpB,YAGjCf,QAAQO,WAAYS,CAAAA,SAHa,EAGFf,SAASM,WAAYU,CAAAA,UAHnB;AAIvC,aAAOT,SAAUR,CAAAA,KAAV,KAAoBA,KAApB,IAA6BQ,SAAUP,CAAAA,MAAvC,KAAkDA,MAAlD,GAA2DQ,QAAGS,CAAAA,aAAH,CAChEX,WAAYY,CAAAA,MADoD,EAEhE,CAFgE,EAGhE,CAHgE,EAIhE,CAJgE,EAKhEnB,KALgE,EAMhEC,MANgE,EAOhEM,WAAYa,CAAAA,MAPoD,EAQhEZ,SAAUa,CAAAA,IARsD,EAShE,IAAKlB,CAAAA,IAT2D,CAA3D,IAUFK,SAAUR,CAAAA,KAAV,GAAkBA,KAAlB,EAAyBQ,SAAUP,CAAAA,MAAnC,GAA4CA,MAA5C,EAAoDQ,QAAGa,CAAAA,UAAH,CACvDf,WAAYY,CAAAA,MAD2C,EAEvD,CAFuD,EAGvDX,SAAUe,CAAAA,cAH6C,EAIvDvB,KAJuD,EAKvDC,MALuD,EAMvD,CANuD,EAOvDM,WAAYa,CAAAA,MAP2C,EAQvDZ,SAAUa,CAAAA,IAR6C,EASvD,IAAKlB,CAAAA,IATkD,CAVlD,CAAA,EAoBH,CAAA,CApBJ;AAJuC;AA2BzCqB,WAAO,EAAG;AACR,UAAKrB,CAAAA,IAAL,GAAY,IAAZ;AADQ;AAQHsB,eAAI,CAAC3B,MAAD,CAAS;AAClB,aAAkB,IAAlB,KAAOA,MAAP,IAA0BA,MAA1B,YAA4C4B,SAA5C,IAAyD5B,MAAzD,YAA2E6B,UAA3E,IAAyF7B,MAAzF,YAA2G8B,iBAA3G,IAAgI9B,MAAhI,YAAkJ+B,UAAlJ,IAAgK/B,MAAhK,YAAkLgC,WAAlL,IAAiMhC,MAAjM,YAAmNiC,UAAnN,IAAiOjC,MAAjO,YAAmPkC,WAAnP,IAAkQlC,MAAlQ,YAAoRmC,YAApR;AADkB;AAxDtB;AA4DAxC,SAAQG,CAAAA,cAAR,GAAyBA,cAAzB;AA/DiI,CAAjI;;",
"sources":["node_modules/@pixi/core/lib/textures/resources/BufferResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$BufferResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), Resource = require(\"./Resource.js\");\nclass BufferResource extends Resource.Resource {\n  /**\n   * @param source - Source buffer\n   * @param options - Options\n   * @param {number} options.width - Width of the texture\n   * @param {number} options.height - Height of the texture\n   * @param {1|2|4|8} [options.unpackAlignment=4] - The alignment of the pixel rows.\n   */\n  constructor(source, options) {\n    const { width, height } = options || {};\n    if (!width || !height)\n      throw new Error(\"BufferResource width or height invalid\");\n    super(width, height), this.data = source, this.unpackAlignment = options.unpackAlignment ?? 4;\n  }\n  /**\n   * Upload the texture to the GPU.\n   * @param renderer - Upload to the renderer\n   * @param baseTexture - Reference to parent texture\n   * @param glTexture - glTexture\n   * @returns - true is success\n   */\n  upload(renderer, baseTexture, glTexture) {\n    const gl = renderer.gl;\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment), gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === constants.ALPHA_MODES.UNPACK);\n    const width = baseTexture.realWidth, height = baseTexture.realHeight;\n    return glTexture.width === width && glTexture.height === height ? gl.texSubImage2D(\n      baseTexture.target,\n      0,\n      0,\n      0,\n      width,\n      height,\n      baseTexture.format,\n      glTexture.type,\n      this.data\n    ) : (glTexture.width = width, glTexture.height = height, gl.texImage2D(\n      baseTexture.target,\n      0,\n      glTexture.internalFormat,\n      width,\n      height,\n      0,\n      baseTexture.format,\n      glTexture.type,\n      this.data\n    )), !0;\n  }\n  /** Destroy and don't use after this. */\n  dispose() {\n    this.data = null;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @returns {boolean} `true` if buffer source\n   */\n  static test(source) {\n    return source === null || source instanceof Int8Array || source instanceof Uint8Array || source instanceof Uint8ClampedArray || source instanceof Int16Array || source instanceof Uint16Array || source instanceof Int32Array || source instanceof Uint32Array || source instanceof Float32Array;\n  }\n}\nexports.BufferResource = BufferResource;\n//# sourceMappingURL=BufferResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","Resource","BufferResource","constructor","source","options","width","height","Error","data","unpackAlignment","upload","renderer","baseTexture","glTexture","gl","pixelStorei","UNPACK_ALIGNMENT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","alphaMode","ALPHA_MODES","UNPACK","realWidth","realHeight","texSubImage2D","target","format","type","texImage2D","internalFormat","dispose","test","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array"]
}
