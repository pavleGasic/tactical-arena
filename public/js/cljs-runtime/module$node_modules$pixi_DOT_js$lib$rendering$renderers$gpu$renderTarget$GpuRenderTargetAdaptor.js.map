{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$renderTarget$GpuRenderTargetAdaptor.js",
"lineCount":111,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTargetAdaptor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$renderTarget$GpuRenderTargetAdaptor\"] = function(global,require,module,exports) {\n'use strict';\n\nvar _const = require('../../gl/const.js');\nvar CanvasSource = require('../../shared/texture/sources/CanvasSource.js');\nvar TextureSource = require('../../shared/texture/sources/TextureSource.js');\nvar GpuRenderTarget = require('./GpuRenderTarget.js');\n\n\"use strict\";\nclass GpuRenderTargetAdaptor {\n  init(renderer, renderTargetSystem) {\n    this._renderer = renderer;\n    this._renderTargetSystem = renderTargetSystem;\n  }\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    const renderer = this._renderer;\n    const baseGpuTexture = this._getGpuColorTexture(\n      sourceRenderSurfaceTexture\n    );\n    const backGpuTexture = renderer.texture.getGpuSource(\n      destinationTexture.source\n    );\n    renderer.encoder.commandEncoder.copyTextureToTexture(\n      {\n        texture: baseGpuTexture,\n        origin: originSrc\n      },\n      {\n        texture: backGpuTexture,\n        origin: originDest\n      },\n      size\n    );\n    return destinationTexture;\n  }\n  startRenderPass(renderTarget, clear = true, clearColor, viewport) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    const descriptor = this.getDescriptor(renderTarget, clear, clearColor);\n    gpuRenderTarget.descriptor = descriptor;\n    this._renderer.pipeline.setRenderTarget(gpuRenderTarget);\n    this._renderer.encoder.beginRenderPass(gpuRenderTarget);\n    this._renderer.encoder.setViewport(viewport);\n  }\n  finishRenderPass() {\n    this._renderer.encoder.endRenderPass();\n  }\n  /**\n   * returns the gpu texture for the first color texture in the render target\n   * mainly used by the filter manager to get copy the texture for blending\n   * @param renderTarget\n   * @returns a gpu texture\n   */\n  _getGpuColorTexture(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (gpuRenderTarget.contexts[0]) {\n      return gpuRenderTarget.contexts[0].getCurrentTexture();\n    }\n    return this._renderer.texture.getGpuSource(\n      renderTarget.colorTextures[0].source\n    );\n  }\n  getDescriptor(renderTarget, clear, clearValue) {\n    if (typeof clear === \"boolean\") {\n      clear = clear ? _const.CLEAR.ALL : _const.CLEAR.NONE;\n    }\n    const renderTargetSystem = this._renderTargetSystem;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    const colorAttachments = renderTarget.colorTextures.map(\n      (texture, i) => {\n        const context = gpuRenderTarget.contexts[i];\n        let view;\n        let resolveTarget;\n        if (context) {\n          const currentTexture = context.getCurrentTexture();\n          const canvasTextureView = currentTexture.createView();\n          view = canvasTextureView;\n        } else {\n          view = this._renderer.texture.getGpuSource(texture).createView({\n            mipLevelCount: 1\n          });\n        }\n        if (gpuRenderTarget.msaaTextures[i]) {\n          resolveTarget = view;\n          view = this._renderer.texture.getTextureView(\n            gpuRenderTarget.msaaTextures[i]\n          );\n        }\n        const loadOp = clear & _const.CLEAR.COLOR ? \"clear\" : \"load\";\n        clearValue ?? (clearValue = renderTargetSystem.defaultClearColor);\n        return {\n          view,\n          resolveTarget,\n          clearValue,\n          storeOp: \"store\",\n          loadOp\n        };\n      }\n    );\n    let depthStencilAttachment;\n    if ((renderTarget.stencil || renderTarget.depth) && !renderTarget.depthStencilTexture) {\n      renderTarget.ensureDepthStencilTexture();\n      renderTarget.depthStencilTexture.source.sampleCount = gpuRenderTarget.msaa ? 4 : 1;\n    }\n    if (renderTarget.depthStencilTexture) {\n      const stencilLoadOp = clear & _const.CLEAR.STENCIL ? \"clear\" : \"load\";\n      const depthLoadOp = clear & _const.CLEAR.DEPTH ? \"clear\" : \"load\";\n      depthStencilAttachment = {\n        view: this._renderer.texture.getGpuSource(renderTarget.depthStencilTexture.source).createView(),\n        stencilStoreOp: \"store\",\n        stencilLoadOp,\n        depthClearValue: 1,\n        depthLoadOp,\n        depthStoreOp: \"store\"\n      };\n    }\n    const descriptor = {\n      colorAttachments,\n      depthStencilAttachment\n    };\n    return descriptor;\n  }\n  clear(renderTarget, clear = true, clearColor, viewport) {\n    if (!clear)\n      return;\n    const { gpu, encoder } = this._renderer;\n    const device = gpu.device;\n    const standAlone = encoder.commandEncoder === null;\n    if (standAlone) {\n      const commandEncoder = device.createCommandEncoder();\n      const renderPassDescriptor = this.getDescriptor(renderTarget, clear, clearColor);\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n      passEncoder.end();\n      const gpuCommands = commandEncoder.finish();\n      device.queue.submit([gpuCommands]);\n    } else {\n      this.startRenderPass(renderTarget, clear, clearColor, viewport);\n    }\n  }\n  initGpuRenderTarget(renderTarget) {\n    renderTarget.isRoot = true;\n    const gpuRenderTarget = new GpuRenderTarget.GpuRenderTarget();\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      if (CanvasSource.CanvasSource.test(colorTexture.resource)) {\n        const context = colorTexture.resource.getContext(\n          \"webgpu\"\n        );\n        const alphaMode = colorTexture.transparent ? \"premultiplied\" : \"opaque\";\n        try {\n          context.configure({\n            device: this._renderer.gpu.device,\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n            format: \"bgra8unorm\",\n            alphaMode\n          });\n        } catch (e) {\n          console.error(e);\n        }\n        gpuRenderTarget.contexts[i] = context;\n      }\n      gpuRenderTarget.msaa = colorTexture.source.antialias;\n      if (colorTexture.source.antialias) {\n        const msaaTexture = new TextureSource.TextureSource({\n          width: 0,\n          height: 0,\n          sampleCount: 4\n        });\n        gpuRenderTarget.msaaTextures[i] = msaaTexture;\n      }\n    });\n    if (gpuRenderTarget.msaa) {\n      gpuRenderTarget.msaaSamples = 4;\n      if (renderTarget.depthStencilTexture) {\n        renderTarget.depthStencilTexture.source.sampleCount = 4;\n      }\n    }\n    return gpuRenderTarget;\n  }\n  destroyGpuRenderTarget(gpuRenderTarget) {\n    gpuRenderTarget.contexts.forEach((context) => {\n      context.unconfigure();\n    });\n    gpuRenderTarget.msaaTextures.forEach((texture) => {\n      texture.destroy();\n    });\n    gpuRenderTarget.msaaTextures.length = 0;\n    gpuRenderTarget.contexts.length = 0;\n  }\n  ensureDepthStencilTexture(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (renderTarget.depthStencilTexture && gpuRenderTarget.msaa) {\n      renderTarget.depthStencilTexture.source.sampleCount = 4;\n    }\n  }\n  resizeGpuRenderTarget(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    gpuRenderTarget.width = renderTarget.width;\n    gpuRenderTarget.height = renderTarget.height;\n    if (gpuRenderTarget.msaa) {\n      renderTarget.colorTextures.forEach((colorTexture, i) => {\n        const msaaTexture = gpuRenderTarget.msaaTextures[i];\n        msaaTexture?.resize(\n          colorTexture.source.width,\n          colorTexture.source.height,\n          colorTexture.source._resolution\n        );\n      });\n    }\n  }\n}\n\nexports.GpuRenderTargetAdaptor = GpuRenderTargetAdaptor;\n//# sourceMappingURL=GpuRenderTargetAdaptor.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","CanvasSource","TextureSource","GpuRenderTarget","GpuRenderTargetAdaptor","init","renderer","renderTargetSystem","_renderer","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","size","originDest","baseGpuTexture","_getGpuColorTexture","backGpuTexture","texture","getGpuSource","source","encoder","commandEncoder","copyTextureToTexture","origin","startRenderPass","renderTarget","clear","clearColor","viewport","gpuRenderTarget","getGpuRenderTarget","descriptor","getDescriptor","pipeline","setRenderTarget","beginRenderPass","setViewport","finishRenderPass","endRenderPass","contexts","getCurrentTexture","colorTextures","clearValue","CLEAR","ALL","NONE","colorAttachments","map","i","context","resolveTarget","view","currentTexture","createView","canvasTextureView","mipLevelCount","msaaTextures","getTextureView","loadOp","COLOR","defaultClearColor","storeOp","stencil","depth","depthStencilTexture","ensureDepthStencilTexture","sampleCount","msaa","stencilLoadOp","STENCIL","depthLoadOp","DEPTH","depthStencilAttachment","stencilStoreOp","depthClearValue","depthStoreOp","gpu","device","createCommandEncoder","renderPassDescriptor","passEncoder","x","y","width","height","end","gpuCommands","finish","queue","submit","initGpuRenderTarget","isRoot","forEach","colorTexture","test","resource","getContext","alphaMode","transparent","configure","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","COPY_SRC","format","e","console","error","antialias","msaaTexture","msaaSamples","destroyGpuRenderTarget","unconfigure","destroy","length","resizeGpuRenderTarget","resize","_resolution"]
}
