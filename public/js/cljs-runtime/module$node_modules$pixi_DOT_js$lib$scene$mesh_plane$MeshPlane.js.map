{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh_plane$MeshPlane.js",
"lineCount":34,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,GAAmF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG3H,MAAIC,eAAeH,OAAA,CAAQ,wEAAR,CAAnB;AACII,QAAAA,GAAOJ,OAAA,CAAQ,4DAAR,CAAPI;AACJ,MAAIC,gBAAgBL,OAAA,CAAQ,oEAAR,CAApB;AAEA,cAAA;AACA,OAAMM,UAAN,QAAwBF,OAAKA,CAAAA,IAA7B;AAIEG,eAAW,CAACC,OAAD,CAAU;AACnB,YAAM,CAAEC,OAAF,EAAWC,SAAX,EAAsBC,SAAtB,EAAiC,GAAGC,IAApC,CAAA,GAA6CJ,OAAnD;AACMK,aAAAA,GAAgB,IAAIR,aAAcA,CAAAA,aAAlB,CAAgCF,YAAaA,CAAAA,YAAb,CAA0B,CAC9EW,MAAOL,OAAQK,CAAAA,KAD+D,EAE9EC,OAAQN,OAAQM,CAAAA,MAF8D,EAG9EL,SAH8E,EAI9EC,SAJ8E,CAA1B,CAAhC,CAAhBE;AAMN,WAAA,CAAMV,YAAaA,CAAAA,YAAb,CAA0B,CAAE,GAAGS,IAAL,EAAWI,SAAUH,OAArB,EAAoCJ,OAApC,CAA1B,CAAN,CAAA;AACA,UAAKA,CAAAA,OAAL,GAAeA,OAAf;AACA,UAAKQ,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AAVmB;AAgBrBC,kBAAc,EAAG;AACf,YAAMF,WAAW,IAAKA,CAAAA,QAAtB,EACM,CAAEF,KAAF,EAASC,MAAT,CAAA,GAAoB,IAAKN,CAAAA,OAD/B;AAESQ,OAAL,IAAKA,CAAAA,UAAT,IAAwBD,QAASF,CAAAA,KAAjC,KAA2CA,KAA3C,IAAoDE,QAASD,CAAAA,MAA7D,KAAwEA,MAAxE,KACEC,QAASF,CAAAA,KAET,GAFiBA,KAEjB,EADAE,QAASD,CAAAA,MACT,GADkBA,MAClB,EAAAC,QAASG,CAAAA,KAAT,CAAe,EAAf,CAHF;AAHe;AASb,eAAO,CAACC,KAAD,CAAQ;AACjB,UAAKC,CAAAA,QAAUC,EAAAA,GAAf,CAAmB,QAAnB,EAA6B,IAAKJ,CAAAA,cAAlC,EAAkD,IAAlD,CAAA;AACA,WAAMT,CAAAA,OAAN,GAAgBW,KAAhB;AACAA,WAAMG,CAAAA,EAAN,CAAS,QAAT,EAAmB,IAAKL,CAAAA,cAAxB,EAAwC,IAAxC,CAAA;AACA,UAAKA,CAAAA,cAAL,EAAA;AAJiB;AAOf,eAAU,EAAA;AACZ,aAAO,IAAKG,CAAAA,QAAZ;AADY;AAUdG,WAAO,CAAChB,OAAD,CAAU;AACf,UAAKC,CAAAA,OAAQa,CAAAA,GAAb,CAAiB,QAAjB,EAA2B,IAAKJ,CAAAA,cAAhC,EAAgD,IAAhD,CAAA;AACA,WAAMM,CAAAA,OAAN,CAAchB,OAAd,CAAA;AAFe;AA9CnB;AAoDAN,SAAQI,CAAAA,SAAR,GAAoBA,SAApB;AA5D2H,CAA3H;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh-plane/MeshPlane.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh_plane$MeshPlane\"] = function(global,require,module,exports) {\n'use strict';\n\nvar definedProps = require('../container/utils/definedProps.js');\nvar Mesh = require('../mesh/shared/Mesh.js');\nvar PlaneGeometry = require('./PlaneGeometry.js');\n\n\"use strict\";\nclass MeshPlane extends Mesh.Mesh {\n  /**\n   * @param options - Options to be applied to MeshPlane\n   */\n  constructor(options) {\n    const { texture, verticesX, verticesY, ...rest } = options;\n    const planeGeometry = new PlaneGeometry.PlaneGeometry(definedProps.definedProps({\n      width: texture.width,\n      height: texture.height,\n      verticesX,\n      verticesY\n    }));\n    super(definedProps.definedProps({ ...rest, geometry: planeGeometry, texture }));\n    this.texture = texture;\n    this.autoResize = true;\n  }\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n  textureUpdated() {\n    const geometry = this.geometry;\n    const { width, height } = this.texture;\n    if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {\n      geometry.width = width;\n      geometry.height = height;\n      geometry.build({});\n    }\n  }\n  set texture(value) {\n    this._texture?.off(\"update\", this.textureUpdated, this);\n    super.texture = value;\n    value.on(\"update\", this.textureUpdated, this);\n    this.textureUpdated();\n  }\n  /** The texture of the MeshPlane */\n  get texture() {\n    return this._texture;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options) {\n    this.texture.off(\"update\", this.textureUpdated, this);\n    super.destroy(options);\n  }\n}\n\nexports.MeshPlane = MeshPlane;\n//# sourceMappingURL=MeshPlane.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","definedProps","Mesh","PlaneGeometry","MeshPlane","constructor","options","texture","verticesX","verticesY","rest","planeGeometry","width","height","geometry","autoResize","textureUpdated","build","value","_texture","off","on","destroy"]
}
