{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$batcher$gpu$getTextureBatchBindGroup.js",
"lineCount":26,
"mappings":"AAAAA,cAAA,CAAA,kFAAA,GAAuG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG/I,MAAIC,YAAYH,OAAA,CAAQ,8EAAR,CAAhB,EACII,UAAUJ,OAAA,CAAQ,gFAAR,CADd,EAEIK,yBAAyBL,OAAA,CAAQ,uFAAR,CAF7B;AAIA,cAAA;AACA,QAAMM,eAAe,EAArB;AAUA,MAAIC,cAAc,CAAlB;AAgBAL,SAAQM,CAAAA,wBAAR,GAzBAA,QAAiC,CAACC,QAAD,EAAWC,IAAX,CAAiB;AAChD,QAAIC,MAAM,UAAV;AACA,SAAK,IAAIC,aAAI,CAAb,EAAgBA,UAAhB,GAAoBF,IAApB,EAA0BE,UAAA,EAA1B;AACED,SAEA,IAFOF,QAAA,CAASG,UAAT,CAAYD,CAAAA,GAEnB,EADAA,GACA,GADME,IAAKC,CAAAA,IAAL,CAAUH,GAAV,EAAe,QAAf,CACN,EAAAA,GAAA,MAAS,CAAT;AAHF;AAKO,QAAA,EAAA,UAAA,GAAA,YAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AAIDI,gBAAAA,GAAqB,EAArBA;AACN,UAAIC,YAAY,CAAhB;AACKT,iBAAL,KACEA,WADF,GACgBF,sBAAuBY,CAAAA,sBAAvB,EADhB;AAEA,WAAK,IAAIL,IAAI,CAAb,EAAgBA,CAAhB,GAAoBL,WAApB,EAAiCK,CAAA,EAAjC,CAAsC;AACpC,cAAMM,UAAUN,CAAA,GATUF,IASV,GATUD,QASC,CAASG,CAAT,CAAX,GAAyBR,OAAQA,CAAAA,OAAQe,CAAAA,KAAMC,CAAAA,MAA/D;AACAL,kBAAA,CAAmBC,SAAA,EAAnB,CAAA,GAAkCE,OAAQE,CAAAA,MAA1C;AACAL,kBAAA,CAAmBC,SAAA,EAAnB,CAAA,GAAkCE,OAAQG,CAAAA,KAA1C;AAHoC;AAKhCC,cAAAA,GAAY,IAAInB,SAAUA,CAAAA,SAAd,CAAwBY,UAAxB,CAAZO;AAEN,gBAAA,GADAhB,YAAA,CAAaiB,GAAb,CACA,GADoBD,QACpB;AAfO;AAAP,WAAO,UAAP;AAPgD,GAyBlD;AAlC+I,CAA/I;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/batcher/gpu/getTextureBatchBindGroup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$batcher$gpu$getTextureBatchBindGroup\"] = function(global,require,module,exports) {\n'use strict';\n\nvar BindGroup = require('../../renderers/gpu/shader/BindGroup.js');\nvar Texture = require('../../renderers/shared/texture/Texture.js');\nvar maxRecommendedTextures = require('../gl/utils/maxRecommendedTextures.js');\n\n\"use strict\";\nconst cachedGroups = {};\nfunction getTextureBatchBindGroup(textures, size) {\n  let uid = 2166136261;\n  for (let i = 0; i < size; i++) {\n    uid ^= textures[i].uid;\n    uid = Math.imul(uid, 16777619);\n    uid >>>= 0;\n  }\n  return cachedGroups[uid] || generateTextureBatchBindGroup(textures, size, uid);\n}\nlet maxTextures = 0;\nfunction generateTextureBatchBindGroup(textures, size, key) {\n  const bindGroupResources = {};\n  let bindIndex = 0;\n  if (!maxTextures)\n    maxTextures = maxRecommendedTextures.getMaxTexturesPerBatch();\n  for (let i = 0; i < maxTextures; i++) {\n    const texture = i < size ? textures[i] : Texture.Texture.EMPTY.source;\n    bindGroupResources[bindIndex++] = texture.source;\n    bindGroupResources[bindIndex++] = texture.style;\n  }\n  const bindGroup = new BindGroup.BindGroup(bindGroupResources);\n  cachedGroups[key] = bindGroup;\n  return bindGroup;\n}\n\nexports.getTextureBatchBindGroup = getTextureBatchBindGroup;\n//# sourceMappingURL=getTextureBatchBindGroup.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","BindGroup","Texture","maxRecommendedTextures","cachedGroups","maxTextures","getTextureBatchBindGroup","textures","size","uid","i","Math","imul","bindGroupResources","bindIndex","getMaxTexturesPerBatch","texture","EMPTY","source","style","bindGroup","key"]
}
