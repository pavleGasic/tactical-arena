{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$shared$resolveCompressedTextureUrl.js",
"lineCount":14,
"mappings":"AAAAA,cAAA,CAAA,0FAAA,GAA+G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGvJ,MAAIC,WAAWH,OAAA,CAAQ,8DAAR,CAAf,EACII,iBAAiBJ,OAAA,CAAQ,iEAAR,CADrB;AAEIK,QAAAA,GAAaL,OAAA,CAAQ,2DAAR,CAAbK;AAEJ,cAAA;AACA,QAAMC,eAAe,kDAAA,CAAA,KAAA,CAAA,GAAA,CAArB;AAuBAJ,SAAQK,CAAAA,2BAAR,GAtBoCA,CAClCC,UAAWH,MAAWI,CAAAA,aAAcC,CAAAA,aADFH,EAElCI,KAAOC,KAADD,IAAWP,cAAeA,CAAAA,cAAf,CAA8BQ,KAA9B,EAAqC,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,CAArC,CAFiBL,EAGlCM,MAAQD,KAADC,IAAW;AAChB,QAAIC,MAAJ;AACA,QAAMC,aAAaH,KAAMI,CAAAA,KAAN,CAAY,GAAZ,CAAnB;AACwB,KAAxB,GAAID,UAAWE,CAAAA,MAAf,IACQC,UACN,GADkBH,UAAA,CAAWA,UAAWE,CAAAA,MAAtB,GAA+B,CAA/B,CAClB,EAAIX,YAAaa,CAAAA,QAAb,CAAsBD,UAAtB,CAAJ,KACEJ,MADF,GACWI,UADX,CAFF,IAMEJ,MANF,GAMWC,UAAA,CAAWA,UAAWE,CAAAA,MAAtB,GAA+B,CAA/B,CANX;AAQA,WAAO,CACLG,WAAYC,UAAA,CAAWlB,QAASA,CAAAA,QAASmB,CAAAA,aAAcC,CAAAA,IAAhC,CAAqCX,KAArC,CAAA,GAA8C,CAA9C,CAAX,IAA+D,GAA/D,CADP,EAELE,MAFK,EAGLU,IAAKZ,KAHA,CAAP;AAXgB,GAHgBL,CAsBpC;AACAL,SAAQI,CAAAA,YAAR,GAAuBA,YAAvB;AAhCuJ,CAAvJ;;",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/shared/resolveCompressedTextureUrl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$shared$resolveCompressedTextureUrl\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Resolver = require('../../assets/resolver/Resolver.js');\nvar checkExtension = require('../../assets/utils/checkExtension.js');\nvar Extensions = require('../../extensions/Extensions.js');\n\n\"use strict\";\nconst validFormats = [\"basis\", \"bc7\", \"bc6h\", \"astc\", \"etc2\", \"bc5\", \"bc4\", \"bc3\", \"bc2\", \"bc1\", \"eac\"];\nconst resolveCompressedTextureUrl = {\n  extension: Extensions.ExtensionType.ResolveParser,\n  test: (value) => checkExtension.checkExtension(value, [\".ktx\", \".ktx2\", \".dds\"]),\n  parse: (value) => {\n    let format;\n    const splitValue = value.split(\".\");\n    if (splitValue.length > 2) {\n      const newFormat = splitValue[splitValue.length - 2];\n      if (validFormats.includes(newFormat)) {\n        format = newFormat;\n      }\n    } else {\n      format = splitValue[splitValue.length - 1];\n    }\n    return {\n      resolution: parseFloat(Resolver.Resolver.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n      format,\n      src: value\n    };\n  }\n};\n\nexports.resolveCompressedTextureUrl = resolveCompressedTextureUrl;\nexports.validFormats = validFormats;\n//# sourceMappingURL=resolveCompressedTextureUrl.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Resolver","checkExtension","Extensions","validFormats","resolveCompressedTextureUrl","extension","ExtensionType","ResolveParser","test","value","parse","format","splitValue","split","length","newFormat","includes","resolution","parseFloat","RETINA_PREFIX","exec","src"]
}
