{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$ParticleContainerPipe.js",
"lineCount":63,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/particle-container/shared/ParticleContainerPipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$ParticleContainerPipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar UniformGroup = require('../../../rendering/renderers/shared/shader/UniformGroup.js');\nvar getAdjustedBlendModeBlend = require('../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.js');\nvar State = require('../../../rendering/renderers/shared/state/State.js');\nvar colorToUniform = require('../../graphics/gpu/colorToUniform.js');\nvar ParticleBuffer = require('./ParticleBuffer.js');\nvar ParticleShader = require('./shader/ParticleShader.js');\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */ Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup.UniformGroup({\n      uTranslationMatrix: { value: new Matrix.Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader.ParticleShader();\n    this.state = State.State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer.ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend.getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    colorToUniform.color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexports.ParticleContainerPipe = ParticleContainerPipe;\n//# sourceMappingURL=ParticleContainerPipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matrix","UniformGroup","getAdjustedBlendModeBlend","State","colorToUniform","ParticleBuffer","ParticleShader","ParticleContainerPipe","constructor","renderer","adaptor","state","for2d","_gpuBufferHash","Object","create","_destroyRenderableBound","destroyRenderable","bind","localUniforms","uTranslationMatrix","value","type","uColor","Float32Array","uRound","uResolution","defaultShader","validateRenderable","_renderable","addRenderable","renderable","instructionSet","renderPipes","batch","break","add","getBuffers","uid","_initBuffer","size","particleChildren","length","properties","_properties","on","updateRenderable","buffer","destroy","off","execute","container","children","texture","update","_childrenDirty","blendMode","_source","uniforms","transformationMatrix","worldTransform","copyTo","prepend","globalUniforms","globalUniformData","projectionMatrix","resolution","_roundPixels","color32BitToUniform","groupColorAlpha"]
}
