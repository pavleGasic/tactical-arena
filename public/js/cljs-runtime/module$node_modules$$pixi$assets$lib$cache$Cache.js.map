{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$cache$Cache.js",
"lineCount":62,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,GAAqE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE7G,MAAIC,OAAOH,OAAA,CAAQ,0CAAR,CAAX;AACAA,SAAA,CAAQ,kDAAR,CAAA;AACA,MAAII,gBAAgBJ,OAAA,CAAQ,0DAAR,CAApB;AACA,OAAMK,WAAN;AACEC,eAAW,EAAG;AACZ,UAAKC,CAAAA,QAAL,GAAgB,EAAhB;AAAoB,UAAKC,CAAAA,MAAL,GAA8B,IAAIC,GAAJ,EAA9B;AAAyC,UAAKC,CAAAA,SAAL,GAAiC,IAAID,GAAJ,EAAjC;AADjD;AAIdE,SAAK,EAAG;AACN,UAAKD,CAAAA,SAAUE,CAAAA,KAAf,EAAA;AAAwB,UAAKJ,CAAAA,MAAOI,CAAAA,KAAZ,EAAA;AADlB;AAORC,OAAG,CAACC,GAAD,CAAM;AACP,aAAO,IAAKN,CAAAA,MAAOK,CAAAA,GAAZ,CAAgBC,GAAhB,CAAP;AADO;AAOTC,OAAG,CAACD,GAAD,CAAM;AACP,YAAME,SAAS,IAAKR,CAAAA,MAAOO,CAAAA,GAAZ,CAAgBD,GAAhB,CAAf;AACA,aAAOE,MAAA,IAAUC,OAAQC,CAAAA,IAAR,CAAc,qBAAoBJ,GAApB,6BAAd,CAAV,EAA+EE,MAAtF;AAFO;AASTG,OAAG,CAACL,GAAD,EAAMM,KAAN,CAAa;AACRC,SAAAA,GAAOjB,aAAcA,CAAAA,aAAd,CAA4BU,GAA5B,CAAPO;AACN,UAAIC,eAAJ;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoB,IAAKC,CAAAA,OAAQC,CAAAA,MAAjC,EAAyCF,CAAA,EAAzC,CAA8C;AAC5C,cAAMG,SAAS,IAAKF,CAAAA,OAAL,CAAaD,CAAb,CAAf;AACA,YAAIG,MAAOC,CAAAA,IAAP,CAAYP,KAAZ,CAAJ,CAAwB;AACtBE,yBAAA,GAAkBI,MAAOE,CAAAA,kBAAP,CAA0BP,GAA1B,EAAgCD,KAAhC,CAAlB;AACA;AAFsB;AAFoB;AAO9CE,qBAAA,KAAoBA,eAAA,GAAkB,EAAlB,EAAsBD,GAAKQ,CAAAA,OAAL,CAAcC,IAAD,IAAU;AAC/DR,uBAAA,CAAgBQ,IAAhB,CAAA,GAAwBV,KAAxB;AAD+D,OAAvB,CAA1C;AAGMW,OAAAA,GAAYC,MAAOX,CAAAA,IAAP,CAAYC,eAAZ,CAAZS;AAAN,YAAgDE,eAAe,CAC7DF,UAAAA,CAD6D,EAE7DV,KAAAA,GAF6D,CAA/D;AAIA,OAAIA,GAAKQ,CAAAA,OAAL,CAAcC,IAAD,IAAU;AACzB,YAAKpB,CAAAA,SAAUS,CAAAA,GAAf,CAAmBW,IAAnB,EAAyBG,YAAzB,CAAA;AADyB,OAAvB,CAAA,EAEAF,CAAUF,CAAAA,OAAV,CAAmBC,IAAD,IAAU;AAC9B,cAAMI,MAAMZ,eAAA,GAAkBA,eAAA,CAAgBQ,IAAhB,CAAlB,GAA0CV,KAAtD;AACA,YAAKZ,CAAAA,MAAOK,CAAAA,GAAZ,CAAgBiB,IAAhB,CAAA,IAAyB,IAAKtB,CAAAA,MAAOO,CAAAA,GAAZ,CAAgBe,IAAhB,CAAzB,KAAmDI,GAAnD,IAA0DjB,OAAQC,CAAAA,IAAR,CAAa,0BAAb,EAAyCY,IAAzC,CAA1D;AAA0G,YAAKtB,CAAAA,MAAOW,CAAAA,GAAZ,CAAgBW,IAAhB,EAAsBR,eAAA,CAAgBQ,IAAhB,CAAtB,CAAA;AAF5E,OAA5B,CAFA,EAKAV,KALA,YAKiBjB,IAAKgC,CAAAA,OAL1B,KAOEd,GAAKQ,CAAAA,OAAL,CAAcC,IAAD,IAAU;AADPV,aAENgB,CAAAA,WAAR,KAAwBjC,IAAKgC,CAAAA,OAAQE,CAAAA,KAAMD,CAAAA,WAA3C,IAA0DjC,IAAKmC,CAAAA,WAAYC,CAAAA,UAAjB,CAF5CnB,KAEgFgB,CAAAA,WAApC,EAAiDN,IAAjD,CAA1D;AAAkH3B,YAAKgC,CAAAA,OAAQI,CAAAA,UAAb,CAFpGnB,KAEoG,EAAiCU,IAAjC,CAAA;AAD7F,OAAvB,CAPF;AAjBc;AAmChBU,UAAM,CAAC1B,GAAD,CAAM;AACL,UAAKJ,CAAAA,SAAUG,CAAAA,GAAf,CAAmBC,GAAnB,CAAL,IAIM2B,GAGF,GAHa,IAAK/B,CAAAA,SAAUK,CAAAA,GAAf,CAAmBD,GAAnB,CAGb,EAFJ2B,GAASV,CAAAA,SAAUF,CAAAA,OAAnB,CAA4BC,IAAD,IAAU;AACnC,YAAKtB,CAAAA,MAAOkC,CAAAA,MAAZ,CAAmBZ,IAAnB,CAAA;AADmC,OAArC,CAEI,EAAAW,GAASpB,CAAAA,IAAKQ,CAAAA,OAAd,CAAuBC,IAAD,IAAU;AAClC,YAAKpB,CAAAA,SAAUgC,CAAAA,MAAf,CAAsBZ,IAAtB,CAAA;AADkC,OAAhC,CAPJ,IACEb,OAAQC,CAAAA,IAAR,CAAc,qBAAoBJ,GAApB,6BAAd,CADF;AADU;AAaR,eAAU,EAAA;AACZ,aAAO,IAAKP,CAAAA,QAAZ;AADY;AA5EhB;AAgFMoC,QAAAA,GAAQ,IAAItC,UAAJ,EAARsC;AACNzC,SAAQyC,CAAAA,KAAR,GAAgBA,MAAhB;AAtF6G,CAA7G;;",
"sources":["node_modules/@pixi/assets/lib/cache/Cache.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$cache$Cache\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nrequire(\"../utils/index.js\");\nvar convertToList = require(\"../utils/convertToList.js\");\nclass CacheClass {\n  constructor() {\n    this._parsers = [], this._cache = /* @__PURE__ */ new Map(), this._cacheMap = /* @__PURE__ */ new Map();\n  }\n  /** Clear all entries. */\n  reset() {\n    this._cacheMap.clear(), this._cache.clear();\n  }\n  /**\n   * Check if the key exists\n   * @param key - The key to check\n   */\n  has(key) {\n    return this._cache.has(key);\n  }\n  /**\n   * Fetch entry by key\n   * @param key - The key of the entry to get\n   */\n  get(key) {\n    const result = this._cache.get(key);\n    return result || console.warn(`[Assets] Asset id ${key} was not found in the Cache`), result;\n  }\n  /**\n   * Set a value by key or keys name\n   * @param key - The key or keys to set\n   * @param value - The value to store in the cache or from which cacheable assets will be derived.\n   */\n  set(key, value) {\n    const keys = convertToList.convertToList(key);\n    let cacheableAssets;\n    for (let i = 0; i < this.parsers.length; i++) {\n      const parser = this.parsers[i];\n      if (parser.test(value)) {\n        cacheableAssets = parser.getCacheableAssets(keys, value);\n        break;\n      }\n    }\n    cacheableAssets || (cacheableAssets = {}, keys.forEach((key2) => {\n      cacheableAssets[key2] = value;\n    }));\n    const cacheKeys = Object.keys(cacheableAssets), cachedAssets = {\n      cacheKeys,\n      keys\n    };\n    if (keys.forEach((key2) => {\n      this._cacheMap.set(key2, cachedAssets);\n    }), cacheKeys.forEach((key2) => {\n      const val = cacheableAssets ? cacheableAssets[key2] : value;\n      this._cache.has(key2) && this._cache.get(key2) !== val && console.warn(\"[Cache] already has key:\", key2), this._cache.set(key2, cacheableAssets[key2]);\n    }), value instanceof core.Texture) {\n      const texture = value;\n      keys.forEach((key2) => {\n        texture.baseTexture !== core.Texture.EMPTY.baseTexture && core.BaseTexture.addToCache(texture.baseTexture, key2), core.Texture.addToCache(texture, key2);\n      });\n    }\n  }\n  /**\n   * Remove entry by key\n   *\n   * This function will also remove any associated alias from the cache also.\n   * @param key - The key of the entry to remove\n   */\n  remove(key) {\n    if (!this._cacheMap.has(key)) {\n      console.warn(`[Assets] Asset id ${key} was not found in the Cache`);\n      return;\n    }\n    const cacheMap = this._cacheMap.get(key);\n    cacheMap.cacheKeys.forEach((key2) => {\n      this._cache.delete(key2);\n    }), cacheMap.keys.forEach((key2) => {\n      this._cacheMap.delete(key2);\n    });\n  }\n  /** All loader parsers registered */\n  get parsers() {\n    return this._parsers;\n  }\n}\nconst Cache = new CacheClass();\nexports.Cache = Cache;\n//# sourceMappingURL=Cache.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","convertToList","CacheClass","constructor","_parsers","_cache","Map","_cacheMap","reset","clear","has","key","get","result","console","warn","set","value","keys","cacheableAssets","i","parsers","length","parser","test","getCacheableAssets","forEach","key2","cacheKeys","Object","cachedAssets","val","Texture","baseTexture","EMPTY","BaseTexture","addToCache","remove","cacheMap","delete","Cache"]
}
