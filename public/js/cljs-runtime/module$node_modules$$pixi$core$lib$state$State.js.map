{
"version":3,
"file":"module$node_modules$$pixi$core$lib$state$State.js",
"lineCount":70,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/state/State.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$state$State\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\");\nconst BLEND = 0, OFFSET = 1, CULLING = 2, DEPTH_TEST = 3, WINDING = 4, DEPTH_MASK = 5;\nclass State {\n  constructor() {\n    this.data = 0, this.blendMode = constants.BLEND_MODES.NORMAL, this.polygonOffset = 0, this.blend = !0, this.depthMask = !0;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    !!(this.data & 1 << BLEND) !== value && (this.data ^= 1 << BLEND);\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    !!(this.data & 1 << OFFSET) !== value && (this.data ^= 1 << OFFSET);\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    !!(this.data & 1 << CULLING) !== value && (this.data ^= 1 << CULLING);\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    !!(this.data & 1 << DEPTH_TEST) !== value && (this.data ^= 1 << DEPTH_TEST);\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    !!(this.data & 1 << DEPTH_MASK) !== value && (this.data ^= 1 << DEPTH_MASK);\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    !!(this.data & 1 << WINDING) !== value && (this.data ^= 1 << WINDING);\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default PIXI.BLEND_MODES.NORMAL\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== constants.BLEND_MODES.NONE, this._blendMode = value;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value, this._polygonOffset = value;\n  }\n  static for2d() {\n    const state = new State();\n    return state.depthTest = !1, state.blend = !0, state;\n  }\n}\nState.prototype.toString = function() {\n  return `[@pixi/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n};\nexports.State = State;\n//# sourceMappingURL=State.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","State","constructor","data","blendMode","BLEND_MODES","NORMAL","polygonOffset","depthMask","blend","value","_blendMode","NONE","_polygonOffset","offsets","for2d","state","depthTest","prototype","toString","State.prototype.toString","clockwiseFrontFace","culling"]
}
