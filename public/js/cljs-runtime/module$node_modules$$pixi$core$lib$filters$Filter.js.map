{
"version":3,
"file":"module$node_modules$$pixi$core$lib$filters$Filter.js",
"lineCount":42,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,GAAsE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE1GC,QAAAA,GAAYH,OAAA,CAAQ,+CAAR,CAAZG;AAF0G,MAElEC,UAAUJ,OAAA,CAAQ,mDAAR,CAFwD;AAEvBK,QAAAA,GAASL,OAAA,CAAQ,kDAAR,CAATK;AAFuB,MAEkBC,QAAQN,OAAA,CAAQ,gDAAR,CAF1B,EAEwDO,kBAAkBP,OAAA,CAAQ,+DAAR,CAF1E,EAE8GQ,gBAAgBR,OAAA,CAAQ,+DAAR,CAF9H;AAG9F,QAAA,4DAAA,aAAuBK,OAAOA,CAAAA,MAA9B;AAMdI,eAAW,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,QAAzB,CAAmC;AAK5C,WAAA,CAJgBR,OAAQA,CAAAA,OAAQS,CAAAA,IAAhBC,CACdJ,SADcI,IACDC,yDAASC,CAAAA,gBADRF,EAEdH,WAFcG,IAECC,yDAASE,CAAAA,kBAFVH,CAIhB,EAAeF,QAAf,CAAA;AAA0B,UAAKM,CAAAA,OAAL,GAAe,CAAf;AAAkB,UAAKC,CAAAA,UAAL,GAAkBJ,yDAASK,CAAAA,iBAA3B;AAA8C,UAAKC,CAAAA,WAAL,GAAmBN,yDAASO,CAAAA,kBAA5B;AAAmE,UAAKC,CAAAA,OAAL,GAAnB,IAAKC,CAAAA,OAAc,GAAJ,CAAA,CAAI;AAAmB,UAAKC,CAAAA,KAAL,GAAa,IAAInB,KAAMA,CAAAA,KAAV,EAAb;AALpI;AAiB9CoB,SAAK,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,SAA/B,EAA0CC,aAA1C,CAAyD;AAC5DJ,mBAAcK,CAAAA,WAAd,CAA0B,IAA1B,EAAgCJ,KAAhC,EAAuCC,MAAvC,EAA+CC,SAA/C,CAAA;AAD4D;AAO1D,iBAAY,EAAA;AACd,aAAO,IAAKL,CAAAA,KAAMQ,CAAAA,SAAlB;AADc;AAGZ,iBAAS,CAACC,KAAD,CAAQ;AACnB,UAAKT,CAAAA,KAAMQ,CAAAA,SAAX,GAAuBC,KAAvB;AADmB;AASjB,kBAAa,EAAA;AACf,aAAO,IAAKC,CAAAA,WAAZ;AADe;AAGb,kBAAU,CAACD,KAAD,CAAQ;AACpB,UAAKC,CAAAA,WAAL,GAAmBD,KAAnB;AADoB;AAOX,+BAAmB,EAAA;AAC5B,aAAO1B,aAAc4B,CAAAA,OAArB;AAD4B;AAOnB,iCAAqB,EAAA;AAC9B,aAAO7B,eAAgB6B,CAAAA,OAAvB;AAD8B;AA3DlB,GAAA;AAAVC,SAAAA,GAAU,yDAAVA;AA+DNA,SAAQjB,CAAAA,iBAAR,GAA4B,CAA5B;AAMAiB,SAAQf,CAAAA,kBAAR,GAA6BnB,MAAUmC,CAAAA,YAAaC,CAAAA,IAApD;AAEArC,SAAQsC,CAAAA,MAAR,GADaH,OACb;AA1E8G,CAA9G;;",
"sources":["node_modules/@pixi/core/lib/filters/Filter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$filters$Filter\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), Program = require(\"../shader/Program.js\"), Shader = require(\"../shader/Shader.js\"), State = require(\"../state/State.js\"), defaultFilter$1 = require(\"./defaultFilter.frag.js\"), defaultFilter = require(\"./defaultFilter.vert.js\");\nconst _Filter = class _Filter2 extends Shader.Shader {\n  /**\n   * @param vertexSrc - The source of the vertex shader.\n   * @param fragmentSrc - The source of the fragment shader.\n   * @param uniforms - Custom uniforms to use to augment the built-in ones.\n   */\n  constructor(vertexSrc, fragmentSrc, uniforms) {\n    const program = Program.Program.from(\n      vertexSrc || _Filter2.defaultVertexSrc,\n      fragmentSrc || _Filter2.defaultFragmentSrc\n    );\n    super(program, uniforms), this.padding = 0, this.resolution = _Filter2.defaultResolution, this.multisample = _Filter2.defaultMultisample, this.enabled = !0, this.autoFit = !0, this.state = new State.State();\n  }\n  /**\n   * Applies the filter\n   * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from\n   * @param {PIXI.RenderTexture} input - The input render target.\n   * @param {PIXI.RenderTexture} output - The target to output to.\n   * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it.\n   * @param {object} [_currentState] - It's current state of filter.\n   *        There are some useful properties in the currentState :\n   *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n   */\n  apply(filterManager, input, output, clearMode, _currentState) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Sets the blend mode of the filter.\n   * @default PIXI.BLEND_MODES.NORMAL\n   */\n  get blendMode() {\n    return this.state.blendMode;\n  }\n  set blendMode(value) {\n    this.state.blendMode = value;\n  }\n  /**\n   * The resolution of the filter. Setting this to be lower will lower the quality but\n   * increase the performance of the filter.\n   * If set to `null` or `0`, the resolution of the current render target is used.\n   * @default PIXI.Filter.defaultResolution\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._resolution = value;\n  }\n  /**\n   * The default vertex shader source\n   * @readonly\n   */\n  static get defaultVertexSrc() {\n    return defaultFilter.default;\n  }\n  /**\n   * The default fragment shader source\n   * @readonly\n   */\n  static get defaultFragmentSrc() {\n    return defaultFilter$1.default;\n  }\n};\n_Filter.defaultResolution = 1, /**\n* Default filter samples for any filter.\n* @static\n* @type {PIXI.MSAA_QUALITY|null}\n* @default PIXI.MSAA_QUALITY.NONE\n*/\n_Filter.defaultMultisample = constants.MSAA_QUALITY.NONE;\nlet Filter = _Filter;\nexports.Filter = Filter;\n//# sourceMappingURL=Filter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","Program","Shader","State","defaultFilter$1","defaultFilter","constructor","vertexSrc","fragmentSrc","uniforms","from","program","_Filter2","defaultVertexSrc","defaultFragmentSrc","padding","resolution","defaultResolution","multisample","defaultMultisample","autoFit","enabled","state","apply","filterManager","input","output","clearMode","_currentState","applyFilter","blendMode","value","_resolution","default","_Filter","MSAA_QUALITY","NONE","Filter"]
}
