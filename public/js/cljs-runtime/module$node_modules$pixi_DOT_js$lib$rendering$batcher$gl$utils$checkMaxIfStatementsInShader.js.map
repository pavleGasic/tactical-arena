{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$batcher$gl$utils$checkMaxIfStatementsInShader.js",
"lineCount":29,
"mappings":"AAAAA,cAAA,CAAA,2FAAA,GAAgH,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AA8CxJA,SAAQC,CAAAA,4BAAR,GAtBAA,QAAqC,CAACC,MAAD,EAASC,EAAT,CAAa;AAChD,QAAe,CAAf,KAAID,MAAJ;AACE,YAAUE,KAAJ,CAAU,+DAAV,CAAN;AADF;AAGA,UAAMC,SAASF,EAAGG,CAAAA,YAAH,CAAgBH,EAAGI,CAAAA,eAAnB,CAAf;AACA,OAAI;AACF,WAAA,CAAA,CAAA,CAAa;AACsBC,YAAAA,wBArBrCC,8GAqBqCD,CAAAA,OAAAA;AAlBrC,YAAIE,MAAM,EAAV;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAiB8ET,MAjB9E,EAA4B,EAAES,CAA9B;AACU,WAGR,GAHIA,CAGJ,KAFED,GAEF,IAFS,SAET,GAAIC,CAAJ,GAa4ET,MAb5E,GAAiB,CAAjB,KACEQ,GADF,IACU,cAAaC,CAAb,OADV,CAAA;AAJF;AAiBI,cAAMC,cAA2BJ,qBAAb,CAAA,IAAA,CArBxBC,8GAqBwB,EAAqB,aAArB,EATjBC,GASiB,CAApB;AACAP,UAAGU,CAAAA,YAAH,CAAgBR,MAAhB,EAAwBO,WAAxB,CAAA;AACAT,UAAGW,CAAAA,aAAH,CAAiBT,MAAjB,CAAA;AACA,YAAKF,EAAGY,CAAAA,kBAAH,CAAsBV,MAAtB,EAA8BF,EAAGa,CAAAA,cAAjC,CAAL;AAGE;AAHF;AACEd,gBAAA,GAASA,MAAT,GAAkB,CAAlB,GAAsB,CAAtB;AADF;AAJW;AADX,KAAJ,QAWU;AACRC,QAAGc,CAAAA,YAAH,CAAgBZ,MAAhB,CAAA;AADQ;AAGV,WAAOH,MAAP;AAnBgD,GAsBlD;AA9CwJ,CAAxJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/batcher/gl/utils/checkMaxIfStatementsInShader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$batcher$gl$utils$checkMaxIfStatementsInShader\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst fragTemplate = [\n  \"precision mediump float;\",\n  \"void main(void){\",\n  \"float test = 0.1;\",\n  \"%forloop%\",\n  \"gl_FragColor = vec4(0.0);\",\n  \"}\"\n].join(\"\\n\");\nfunction generateIfTestSrc(maxIfs) {\n  let src = \"\";\n  for (let i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += \"\\nelse \";\n    }\n    if (i < maxIfs - 1) {\n      src += `if(test == ${i}.0){}`;\n    }\n  }\n  return src;\n}\nfunction checkMaxIfStatementsInShader(maxIfs, gl) {\n  if (maxIfs === 0) {\n    throw new Error(\"Invalid value of `0` passed to `checkMaxIfStatementsInShader`\");\n  }\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  try {\n    while (true) {\n      const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n      gl.shaderSource(shader, fragmentSrc);\n      gl.compileShader(shader);\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        maxIfs = maxIfs / 2 | 0;\n      } else {\n        break;\n      }\n    }\n  } finally {\n    gl.deleteShader(shader);\n  }\n  return maxIfs;\n}\n\nexports.checkMaxIfStatementsInShader = checkMaxIfStatementsInShader;\n//# sourceMappingURL=checkMaxIfStatementsInShader.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","checkMaxIfStatementsInShader","maxIfs","gl","Error","shader","createShader","FRAGMENT_SHADER","replace","fragTemplate","src","i","fragmentSrc","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","deleteShader"]
}
