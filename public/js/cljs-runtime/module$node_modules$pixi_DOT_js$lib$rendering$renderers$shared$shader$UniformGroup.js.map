{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$UniformGroup.js",
"lineCount":40,
"mappings":"AAAAA,cAAA,CAAA,kFAAA,GAAuG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG/I,MAAIC,MAAMH,OAAA,CAAQ,oDAAR,CAAV,EACII,qBAAqBJ,OAAA,CAAQ,yFAAR,CADzB,EAEIK,QAAQL,OAAA,CAAQ,6EAAR,CAFZ,EAGIM,yBAAyBN,OAAA,CAAQ,oGAAR,CAH7B;AAKA,cAAA;AACsB,QAAA,8FAAA,KAAA;AAMpBO,eAAW,CAACC,iBAAD,EAAoBC,OAApB,CAA6B;AAEtC,UAAKC,CAAAA,QAAL,GAAgB,CAAhB;AAEA,UAAKP,CAAAA,GAAL,GAAWA,GAAIA,CAAAA,GAAJ,CAAQ,SAAR,CAAX;AAEA,UAAKQ,CAAAA,aAAL,GAAqB,cAArB;AAEA,UAAKC,CAAAA,WAAL,GAAmBT,GAAIA,CAAAA,GAAJ,CAAQ,UAAR,CAAnB;AAEA,UAAKU,CAAAA,cAAL,GAAsB,CAAA,CAAtB;AAMA,UAAKC,CAAAA,QAAL,GAAgB,CAAhB;AAEA,UAAKC,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AACAN,aAAA,GAAU,CAAE,GAAGO,2FAAcC,CAAAA,cAAnB,EAAmC,GAAGR,OAAtC,CAAV;AACA,UAAKD,CAAAA,iBAAL,GAAyBA,iBAAzB;AACA,YAAMU,WAAW,EAAjB;AACA,WAAK,MAAMC,CAAX,GAAgBX,kBAAhB,CAAmC;AACjC,cAAMY,cAAcZ,iBAAA,CAAkBW,CAAlB,CAApB;AACAC,mBAAYC,CAAAA,IAAZ,GAAmBF,CAAnB;AACAC,mBAAYE,CAAAA,IAAZ,GAAmBF,WAAYE,CAAAA,IAA/B,IAAuC,CAAvC;AACA,YAAI,CAACjB,KAAMkB,CAAAA,iBAAN,CAAwBH,WAAYI,CAAAA,IAApC,CAAL;AACE,gBAAUC,KAAJ,CAAW,gBAAeL,WAAYI,CAAAA,IAA3B,mDAAkFnB,KAAMqB,CAAAA,oBAAqBC,CAAAA,IAA3B,CAAgC,IAAhC,CAAlF,EAAX,CAAN;AADF;AAGAP,mBAAYQ,CAAAA,KAAZ,KAAsBR,WAAYQ,CAAAA,KAAlC,GAA0CtB,sBAAuBA,CAAAA,sBAAvB,CAA8Cc,WAAYI,CAAAA,IAA1D,EAAgEJ,WAAYE,CAAAA,IAA5E,CAA1C;AACAJ,gBAAA,CAASC,CAAT,CAAA,GAAcC,WAAYQ,CAAAA,KAA1B;AARiC;AAUnC,UAAKV,CAAAA,QAAL,GAAgBA,QAAhB;AACA,UAAKJ,CAAAA,QAAL,GAAgB,CAAhB;AACA,UAAKe,CAAAA,GAAL,GAAWpB,OAAQoB,CAAAA,GAAnB;AACA,UAAKC,CAAAA,QAAL,GAAgBrB,OAAQqB,CAAAA,QAAxB;AACA,UAAKC,CAAAA,UAAL,GAAkB3B,kBAAmBA,CAAAA,kBAAnB,CAAsC4B,MAAOC,CAAAA,IAAP,CAAYf,QAAZ,CAAsBgB,CAAAA,GAAtB,CACrDf,CAAD,IAAQ,GAAEA,CAAF,IAAOX,iBAAA,CAAkBW,CAAlB,CAAqBK,CAAAA,IAA5B,EAD8C,CAEtDG,CAAAA,IAFsD,CAEjD,GAFiD,CAAtC,EAEL,eAFK,CAAlB;AApCsC;AAyCxCQ,UAAM,EAAG;AACP,UAAKrB,CAAAA,QAAL,EAAA;AADO;AA/CW,GAAA;AAAhBE,QAAAA,GAAgB,2FAAhBA;AAoDNA,QAAcC,CAAAA,cAAd,GAA+B,CAE7BY,IAAK,CAAA,CAFwB,EAI7BC,SAAU,CAAA,CAJmB,CAA/B;AAQA5B,SAAQkC,CAAAA,YAAR,GAFmBpB,MAEnB;AArE+I,CAA/I;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/shader/UniformGroup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$UniformGroup\"] = function(global,require,module,exports) {\n'use strict';\n\nvar uid = require('../../../../utils/data/uid.js');\nvar createIdFromString = require('../utils/createIdFromString.js');\nvar types = require('./types.js');\nvar getDefaultUniformValue = require('./utils/getDefaultUniformValue.js');\n\n\"use strict\";\nconst _UniformGroup = class _UniformGroup {\n  /**\n   * Create a new Uniform group\n   * @param uniformStructures - The structures of the uniform group\n   * @param options - The optional parameters of this uniform group\n   */\n  constructor(uniformStructures, options) {\n    /** used internally to know if a uniform group was used in the last render pass */\n    this._touched = 0;\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid.uid(\"uniform\");\n    /** a resource type, used to identify how to handle it when its in a bind group / shader resource */\n    this._resourceType = \"uniformGroup\";\n    /** the resource id used internally by the renderer to build bind group keys */\n    this._resourceId = uid.uid(\"resource\");\n    /** used ito identify if this is a uniform group */\n    this.isUniformGroup = true;\n    /**\n     * used to flag if this Uniform groups data is different from what it has stored in its buffer / on the GPU\n     * @internal\n     * @ignore\n     */\n    this._dirtyId = 0;\n    // implementing the interface - UniformGroup are not destroyed\n    this.destroyed = false;\n    options = { ..._UniformGroup.defaultOptions, ...options };\n    this.uniformStructures = uniformStructures;\n    const uniforms = {};\n    for (const i in uniformStructures) {\n      const uniformData = uniformStructures[i];\n      uniformData.name = i;\n      uniformData.size = uniformData.size ?? 1;\n      if (!types.UNIFORM_TYPES_MAP[uniformData.type]) {\n        throw new Error(`Uniform type ${uniformData.type} is not supported. Supported uniform types are: ${types.UNIFORM_TYPES_VALUES.join(\", \")}`);\n      }\n      uniformData.value ?? (uniformData.value = getDefaultUniformValue.getDefaultUniformValue(uniformData.type, uniformData.size));\n      uniforms[i] = uniformData.value;\n    }\n    this.uniforms = uniforms;\n    this._dirtyId = 1;\n    this.ubo = options.ubo;\n    this.isStatic = options.isStatic;\n    this._signature = createIdFromString.createIdFromString(Object.keys(uniforms).map(\n      (i) => `${i}-${uniformStructures[i].type}`\n    ).join(\"-\"), \"uniform-group\");\n  }\n  /** Call this if you want the uniform groups data to be uploaded to the GPU only useful if `isStatic` is true. */\n  update() {\n    this._dirtyId++;\n  }\n};\n/** The default options used by the uniform group. */\n_UniformGroup.defaultOptions = {\n  /** if true the UniformGroup is handled as an Uniform buffer object. */\n  ubo: false,\n  /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n  isStatic: false\n};\nlet UniformGroup = _UniformGroup;\n\nexports.UniformGroup = UniformGroup;\n//# sourceMappingURL=UniformGroup.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","uid","createIdFromString","types","getDefaultUniformValue","constructor","uniformStructures","options","_touched","_resourceType","_resourceId","isUniformGroup","_dirtyId","destroyed","_UniformGroup","defaultOptions","uniforms","i","uniformData","name","size","UNIFORM_TYPES_MAP","type","Error","UNIFORM_TYPES_VALUES","join","value","ubo","isStatic","_signature","Object","keys","map","update","UniformGroup"]
}
