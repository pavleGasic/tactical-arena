shadow$provide.module$node_modules$pixi_DOT_js$lib$filters$defaults$noise$noise_frag = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = "\nin vec2 vTextureCoord;\nin vec4 vColor;\n\nout vec4 finalColor;\n\nuniform float uNoise;\nuniform float uSeed;\nuniform sampler2D uTexture;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main()\n{\n    vec4 color \x3d texture(uTexture, vTextureCoord);\n    float randomValue \x3d rand(gl_FragCoord.xy * uSeed);\n    float diff \x3d (randomValue - 0.5) *  uNoise;\n\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\n    if (color.a \x3e 0.0) {\n        color.rgb /\x3d color.a;\n    }\n\n    color.r +\x3d diff;\n    color.g +\x3d diff;\n    color.b +\x3d diff;\n\n    // Premultiply alpha again.\n    color.rgb *\x3d color.a;\n\n    finalColor \x3d color;\n}\n";
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$filters$defaults$noise$noise_frag.js.map
