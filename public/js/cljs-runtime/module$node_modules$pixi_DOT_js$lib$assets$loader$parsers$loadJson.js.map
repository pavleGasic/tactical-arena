{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$loadJson.js",
"lineCount":13,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,GAAuF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG/H,MAAIC,UAAUH,OAAA,CAAQ,yDAAR,CAAd;AACII,QAAAA,GAAaJ,OAAA,CAAQ,2DAAR,CAAbI;AACJ,MAAIC,eAAeL,OAAA,CAAQ,+DAAR,CAAnB,EACIM,iBAAiBN,OAAA,CAAQ,iEAAR,CADrB;AAEIO,SAAAA,GAAeP,OAAA,CAAQ,wEAAR,CAAfO;AAEJ,cAAA;AAmBAL,SAAQM,CAAAA,QAAR,GAhBiBA,CACfC,UAAW,CACTC,KAAMN,MAAWO,CAAAA,aAAcC,CAAAA,UADtB,EAETC,SAAUN,OAAaO,CAAAA,oBAAqBC,CAAAA,GAFnC,CADIP,EAKfQ,KAAM,UALSR,EAMfS,IAAI,CAACC,GAAD,CAAM;AACR,WAAOb,YAAaA,CAAAA,YAAb,CAA0Ba,GAA1B,EARWC,kBAQX,CAAP,IAAwDb,cAAeA,CAAAA,cAAf,CAA8BY,GAA9B,EATjCE,OASiC,CAAxD;AADQ,GANKZ,EASTa,UAAI,CAACH,GAAD,CAAM;AAGd,WADaI,MAAeA,CADXC,MAAMpB,OAAQqB,CAAAA,UAAWC,CAAAA,GAAnB,EAAyBC,CAAAA,KAAzB,CAA+BR,GAA/B,CACKI,EAAAA,IAAT,EACnB;AAHc,GATDd,CAgBjB;AA5B+H,CAA/H;;",
"sources":["node_modules/pixi_DOT_js/lib/assets/loader/parsers/loadJson.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$loadJson\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../environment/adapter.js');\nvar Extensions = require('../../../extensions/Extensions.js');\nvar checkDataUrl = require('../../utils/checkDataUrl.js');\nvar checkExtension = require('../../utils/checkExtension.js');\nvar LoaderParser = require('./LoaderParser.js');\n\n\"use strict\";\nconst validJSONExtension = \".json\";\nconst validJSONMIME = \"application/json\";\nconst loadJson = {\n  extension: {\n    type: Extensions.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.Low\n  },\n  name: \"loadJson\",\n  test(url) {\n    return checkDataUrl.checkDataUrl(url, validJSONMIME) || checkExtension.checkExtension(url, validJSONExtension);\n  },\n  async load(url) {\n    const response = await adapter.DOMAdapter.get().fetch(url);\n    const json = await response.json();\n    return json;\n  }\n};\n\nexports.loadJson = loadJson;\n//# sourceMappingURL=loadJson.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adapter","Extensions","checkDataUrl","checkExtension","LoaderParser","loadJson","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","Low","name","test","url","validJSONMIME","validJSONExtension","load","json","response","DOMAdapter","get","fetch"]
}
