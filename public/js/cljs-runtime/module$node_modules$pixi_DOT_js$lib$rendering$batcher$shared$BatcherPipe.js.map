{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$BatcherPipe.js",
"lineCount":71,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/batcher/shared/BatcherPipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$BatcherPipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar State = require('../../renderers/shared/state/State.js');\nvar DefaultBatcher = require('./DefaultBatcher.js');\n\n\"use strict\";\nconst _BatcherPipe = class _BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.State.for2d();\n    this._batchersByInstructionSet = /* @__PURE__ */ Object.create(null);\n    /** A record of all active batchers, keyed by their names */\n    this._activeBatches = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init?.(this);\n  }\n  static getBatcher(name) {\n    return new this._availableBatchers[name]();\n  }\n  buildStart(instructionSet) {\n    let batchers = this._batchersByInstructionSet[instructionSet.uid];\n    if (!batchers) {\n      batchers = this._batchersByInstructionSet[instructionSet.uid] = /* @__PURE__ */ Object.create(null);\n      batchers.default || (batchers.default = new DefaultBatcher.DefaultBatcher());\n    }\n    this._activeBatches = batchers;\n    this._activeBatch = this._activeBatches.default;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].begin();\n    }\n  }\n  addToBatch(batchableObject, instructionSet) {\n    if (this._activeBatch.name !== batchableObject.batcherName) {\n      this._activeBatch.break(instructionSet);\n      let batch = this._activeBatches[batchableObject.batcherName];\n      if (!batch) {\n        batch = this._activeBatches[batchableObject.batcherName] = _BatcherPipe.getBatcher(batchableObject.batcherName);\n        batch.begin();\n      }\n      this._activeBatch = batch;\n    }\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    this._activeBatch.break(instructionSet);\n    const batches = this._activeBatches;\n    for (const i in batches) {\n      const batch = batches[i];\n      const geometry = batch.geometry;\n      geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n      geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n    }\n  }\n  upload(instructionSet) {\n    const batchers = this._batchersByInstructionSet[instructionSet.uid];\n    for (const i in batchers) {\n      const batcher = batchers[i];\n      const geometry = batcher.geometry;\n      if (batcher.dirty) {\n        batcher.dirty = false;\n        geometry.buffers[0].update(batcher.attributeSize * 4);\n      }\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = batcher.geometry;\n      const shader = batcher.shader;\n      this._adaptor.start(this, geometry, shader);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor = null;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].destroy();\n    }\n    this._activeBatches = null;\n  }\n};\n/** @ignore */\n_BatcherPipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n_BatcherPipe._availableBatchers = /* @__PURE__ */ Object.create(null);\nlet BatcherPipe = _BatcherPipe;\nExtensions.extensions.handleByMap(Extensions.ExtensionType.Batcher, BatcherPipe._availableBatchers);\nExtensions.extensions.add(DefaultBatcher.DefaultBatcher);\n\nexports.BatcherPipe = BatcherPipe;\n//# sourceMappingURL=BatcherPipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","State","DefaultBatcher","constructor","renderer","adaptor","state","for2d","_batchersByInstructionSet","Object","create","_activeBatches","_adaptor","init","getBatcher","name","_availableBatchers","buildStart","instructionSet","batchers","uid","default","_activeBatch","i","begin","addToBatch","batchableObject","batcherName","break","batch","_BatcherPipe","add","buildEnd","batches","geometry","indexBuffer","setDataWithSize","indexSize","buffers","attributeBuffer","float32View","attributeSize","upload","batcher","dirty","update","execute","action","start","shader","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","extensions","handleByMap","Batcher","BatcherPipe"]
}
