{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$utils$resolveCharacters.js",
"lineCount":35,
"mappings":"AAAAA,cAAA,CAAA,6EAAA,GAAkG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAuC1IA,SAAQC,CAAAA,iBAAR,GAnCAA,QAA0B,CAACC,KAAD,CAAQ;AAChC,QAAc,EAAd,KAAIA,KAAJ;AACE,aAAO,EAAP;AADF;AAGqB,YAArB,KAAI,MAAOA,MAAX,KACEA,KADF,GACU,CAACA,KAAD,CADV;AAGA,UAAMC,SAAS,EAAf;AACA,SAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIH,KAAMI,CAAAA,MAA1B,EAAkCF,CAAlC,GAAsCC,CAAtC,EAAyCD,CAAA,EAAzC,CAA8C;AAC5C,UAAMG,OAAOL,KAAA,CAAME,CAAN,CAAb;AACA,UAAII,KAAMC,CAAAA,OAAN,CAAcF,IAAd,CAAJ,CAAyB;AACvB,YAAoB,CAApB,KAAIA,IAAKD,CAAAA,MAAT;AACE,gBAAUI,KAAJ,CAAW,iEAAgEH,IAAKD,CAAAA,MAArE,GAAX,CAAN;AADF;AAGA,YAAuB,CAAvB,KAAIC,IAAA,CAAK,CAAL,CAAQD,CAAAA,MAAZ,IAA+C,CAA/C,KAA4BC,IAAA,CAAK,CAAL,CAAQD,CAAAA,MAApC;AACE,gBAAUI,KAAJ,CAAU,4CAAV,CAAN;AADF;AAGA,cAAMC,YAAYJ,IAAA,CAAK,CAAL,CAAQK,CAAAA,UAAR,CAAmB,CAAnB,CAAlB;AACMC,YAAAA,GAAUN,IAAA,CAAK,CAAL,CAAQK,CAAAA,UAAR,CAAmB,CAAnB,CAAVC;AACN,YAAIA,IAAJ,GAAcF,SAAd;AACE,gBAAUD,KAAJ,CAAU,wCAAV,CAAN;AADF;AAGA,aAAK,IAAII,KAAKH,SAAT,EAAoBI,KAAKF,IAA9B,EAAuCC,EAAvC,IAA6CC,EAA7C,EAAiDD,EAAA,EAAjD;AACEX,gBAAOa,CAAAA,IAAP,CAAYC,MAAOC,CAAAA,YAAP,CAAoBJ,EAApB,CAAZ,CAAA;AADF;AAZuB,OAAzB;AAgBEX,cAAOa,CAAAA,IAAP,CAAY,GAAGR,KAAMW,CAAAA,IAAN,CAAWZ,IAAX,CAAf,CAAA;AAhBF;AAF4C;AAqB9C,QAAsB,CAAtB,KAAIJ,MAAOG,CAAAA,MAAX;AACE,YAAUI,KAAJ,CAAU,oDAAV,CAAN;AADF;AAGA,WAAOP,MAAP;AAhCgC,GAmClC;AAvC0I,CAA1I;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/utils/resolveCharacters.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$utils$resolveCharacters\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nfunction resolveCharacters(chars) {\n  if (chars === \"\") {\n    return [];\n  }\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      }\n      if (item[0].length === 0 || item[1].length === 0) {\n        throw new Error(\"[BitmapFont]: Invalid character delimiter.\");\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...Array.from(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\n\nexports.resolveCharacters = resolveCharacters;\n//# sourceMappingURL=resolveCharacters.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","resolveCharacters","chars","result","i","j","length","item","Array","isArray","Error","startCode","charCodeAt","endCode","i2","j2","push","String","fromCharCode","from"]
}
