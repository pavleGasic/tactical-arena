{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureStyle.js",
"lineCount":76,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/TextureStyle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureStyle\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar uid = require('../../../../utils/data/uid.js');\nvar deprecation = require('../../../../utils/logging/deprecation.js');\n\n\"use strict\";\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createResourceIdFromString(value) {\n  const id = idHash[value];\n  if (id === void 0) {\n    idHash[value] = uid.uid(\"resource\");\n  }\n  return id;\n}\nconst _TextureStyle = class _TextureStyle extends EventEmitter {\n  /**\n   * @param options - options for the style\n   */\n  constructor(options = {}) {\n    super();\n    this._resourceType = \"textureSampler\";\n    this._touched = 0;\n    /**\n     * Specifies the maximum anisotropy value clamp used by the sampler.\n     * Note: Most implementations support {@link GPUSamplerDescriptor#maxAnisotropy} values in range\n     * between 1 and 16, inclusive. The used value of {@link GPUSamplerDescriptor#maxAnisotropy} will\n     * be clamped to the maximum value that the platform supports.\n     * @internal\n     * @ignore\n     */\n    this._maxAnisotropy = 1;\n    /**\n     * Has the style been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    options = { ..._TextureStyle.defaultOptions, ...options };\n    this.addressMode = options.addressMode;\n    this.addressModeU = options.addressModeU ?? this.addressModeU;\n    this.addressModeV = options.addressModeV ?? this.addressModeV;\n    this.addressModeW = options.addressModeW ?? this.addressModeW;\n    this.scaleMode = options.scaleMode;\n    this.magFilter = options.magFilter ?? this.magFilter;\n    this.minFilter = options.minFilter ?? this.minFilter;\n    this.mipmapFilter = options.mipmapFilter ?? this.mipmapFilter;\n    this.lodMinClamp = options.lodMinClamp;\n    this.lodMaxClamp = options.lodMaxClamp;\n    this.compare = options.compare;\n    this.maxAnisotropy = options.maxAnisotropy ?? 1;\n  }\n  set addressMode(value) {\n    this.addressModeU = value;\n    this.addressModeV = value;\n    this.addressModeW = value;\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get addressMode() {\n    return this.addressModeU;\n  }\n  set wrapMode(value) {\n    deprecation.deprecation(deprecation.v8_0_0, \"TextureStyle.wrapMode is now TextureStyle.addressMode\");\n    this.addressMode = value;\n  }\n  get wrapMode() {\n    return this.addressMode;\n  }\n  set scaleMode(value) {\n    this.magFilter = value;\n    this.minFilter = value;\n    this.mipmapFilter = value;\n  }\n  /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n  get scaleMode() {\n    return this.magFilter;\n  }\n  /** Specifies the maximum anisotropy value clamp used by the sampler. */\n  set maxAnisotropy(value) {\n    this._maxAnisotropy = Math.min(value, 16);\n    if (this._maxAnisotropy > 1) {\n      this.scaleMode = \"linear\";\n    }\n  }\n  get maxAnisotropy() {\n    return this._maxAnisotropy;\n  }\n  // TODO - move this to WebGL?\n  get _resourceId() {\n    return this._sharedResourceId || this._generateResourceId();\n  }\n  update() {\n    this.emit(\"change\", this);\n    this._sharedResourceId = null;\n  }\n  _generateResourceId() {\n    const bigKey = `${this.addressModeU}-${this.addressModeV}-${this.addressModeW}-${this.magFilter}-${this.minFilter}-${this.mipmapFilter}-${this.lodMinClamp}-${this.lodMaxClamp}-${this.compare}-${this._maxAnisotropy}`;\n    this._sharedResourceId = createResourceIdFromString(bigKey);\n    return this._resourceId;\n  }\n  /** Destroys the style */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    this.removeAllListeners();\n  }\n};\n/** default options for the style */\n_TextureStyle.defaultOptions = {\n  addressMode: \"clamp-to-edge\",\n  scaleMode: \"linear\"\n};\nlet TextureStyle = _TextureStyle;\n\nexports.TextureStyle = TextureStyle;\n//# sourceMappingURL=TextureStyle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","uid","deprecation","idHash","Object","create","constructor","options","_resourceType","_touched","_maxAnisotropy","destroyed","_TextureStyle","defaultOptions","addressMode","addressModeU","addressModeV","addressModeW","scaleMode","magFilter","minFilter","mipmapFilter","lodMinClamp","lodMaxClamp","compare","maxAnisotropy","value","v8_0_0","Math","min","_sharedResourceId","_generateResourceId","update","emit","bigKey","id","_resourceId","destroy","removeAllListeners","TextureStyle"]
}
