shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$collectRenderablesMixin = function(global, require, module, exports) {
  exports.collectRenderablesMixin = {collectRenderables(instructionSet, renderer, currentLayer) {
    this.parentRenderLayer && this.parentRenderLayer !== currentLayer || 7 > this.globalDisplayStatus || !this.includeInBuild || (this.sortableChildren && this.sortChildren(), this.isSimple ? this.collectRenderablesSimple(instructionSet, renderer, currentLayer) : this.renderGroup ? renderer.renderPipes.renderGroup.addRenderGroup(this.renderGroup, instructionSet) : this.collectRenderablesWithEffects(instructionSet, renderer, currentLayer));
  }, collectRenderablesSimple(instructionSet, renderer, currentLayer) {
    const children = this.children, length = children.length;
    for (let i = 0; i < length; i++) {
      children[i].collectRenderables(instructionSet, renderer, currentLayer);
    }
  }, collectRenderablesWithEffects(instructionSet, renderer, currentLayer) {
    const {renderPipes} = renderer;
    for (let i = 0; i < this.effects.length; i++) {
      const effect = this.effects[i];
      renderPipes[effect.pipe].push(effect, this, instructionSet);
    }
    this.collectRenderablesSimple(instructionSet, renderer, currentLayer);
    for (renderer = this.effects.length - 1; 0 <= renderer; renderer--) {
      currentLayer = this.effects[renderer], renderPipes[currentLayer.pipe].pop(currentLayer, this, instructionSet);
    }
  }};
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$collectRenderablesMixin.js.map
