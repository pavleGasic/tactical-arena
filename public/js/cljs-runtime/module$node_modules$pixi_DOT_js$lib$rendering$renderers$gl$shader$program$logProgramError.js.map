{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$logProgramError.js",
"lineCount":21,
"mappings":"AAAAA,cAAA,CAAA,yFAAA,GAA8G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAItJC,UAASA,qBAAoB,CAACC,EAAD,EAAKC,MAAL,CAAa;AACxC,UAAMC,YAAYF,EAAGG,CAAAA,eAAH,CAAmBF,MAAnB,CAA2BG,CAAAA,KAA3B,CAAiC,IAAjC,CAAuCC,CAAAA,GAAvC,CAA2C,CAACC,IAAD,EAAOC,KAAP,CAAA,IAAkB,GAAEA,KAAF,KAAYD,IAAZ,EAA7D,CAAlB;AACME,MAAAA,GAAYR,EAAGS,CAAAA,gBAAH,CAAoBR,MAApB,CAAZO;AAEN,UAAME,SAAS,EAAf,EAQMC,UAAU,CAAC,EAAD,CARhB;AADoBH,MAAUJ,CAAAA,KAAVQ,CAAgB,IAAhBA,CAEYP,CAAAA,GAAZ,CAAiBC,IAAD,IAAUO,UAAA,CAAWP,IAAKQ,CAAAA,OAAL,CAAa,uBAAb,EAAyC,IAAzC,CAAX,CAA1B,CAAsFC,CAAAA,MAAtFC,CAA8FC,CAAD,IAC3GA,CAAJ,IAAS,CAACP,MAAA,CAAOO,CAAP,CAAV,GACEP,MAAA,CAAOO,CAAP,CADF,GACc,CAAA,CADd,GAIO,CAAA,CALWD,CAQRE,CAAAA,OAAZ,CAAqBC,MAAD,IAAY;AAC9BjB,eAAA,CAAUiB,MAAV,GAAmB,CAAnB,CAAA,GAAyB,KAAIjB,SAAA,CAAUiB,MAAV,GAAmB,CAAnB,CAAJ,IAAzB;AACAR,aAAQS,CAAAA,IAAR,CAAa,qDAAb,EAAoE,iBAApE,CAAA;AAF8B,KAAhC,CAAA;AAIMC,UAAAA,GAAsBnB,SAAUoB,CAAAA,IAAV,CAAe,IAAf,CAAtBD;AACNV,WAAA,CAAQ,CAAR,CAAA,GAAaU,MAAb;AACAE,WAAQC,CAAAA,KAAR,CAAchB,EAAd,CAAA;AACAe,WAAQE,CAAAA,cAAR,CAAuB,gCAAvB,CAAA;AACAF,WAAQG,CAAAA,IAAR,CAAa,GAAGf,OAAhB,CAAA;AACAY,WAAQI,CAAAA,QAAR,EAAA;AAtBwC;AAuC1C7B,SAAQ8B,CAAAA,eAAR,GAfAA,QAAwB,CAAC5B,EAAD,EAAK6B,OAAL,EAAcC,YAAd,EAA4BC,cAA5B,CAA4C;AAC7D/B,MAAGgC,CAAAA,mBAAH,CAAuBH,OAAvB,EAAgC7B,EAAGiC,CAAAA,WAAnC,CAAL,KACOjC,EAAGkC,CAAAA,kBAAH,CAAsBJ,YAAtB,EAAoC9B,EAAGmC,CAAAA,cAAvC,CAOL,IANEpC,oBAAA,CAAqBC,EAArB,EAAyB8B,YAAzB,CAMF,EAJK9B,EAAGkC,CAAAA,kBAAH,CAAsBH,cAAtB,EAAsC/B,EAAGmC,CAAAA,cAAzC,CAIL,IAHEpC,oBAAA,CAAqBC,EAArB,EAAyB+B,cAAzB,CAGF,EADAR,OAAQC,CAAAA,KAAR,CAAc,4CAAd,CACA,EAAsC,EAAtC,KAAIxB,EAAGoC,CAAAA,iBAAH,CAAqBP,OAArB,CAAJ,IACEN,OAAQG,CAAAA,IAAR,CAAa,wCAAb,EAAuD1B,EAAGoC,CAAAA,iBAAH,CAAqBP,OAArB,CAAvD,CATJ;AADkE,GAepE;AA3CsJ,CAAtJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/shader/program/logProgramError.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$logProgramError\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nfunction logPrettyShaderError(gl, shader) {\n  const shaderSrc = gl.getShaderSource(shader).split(\"\\n\").map((line, index) => `${index}: ${line}`);\n  const shaderLog = gl.getShaderInfoLog(shader);\n  const splitShader = shaderLog.split(\"\\n\");\n  const dedupe = {};\n  const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, \"$1\"))).filter((n) => {\n    if (n && !dedupe[n]) {\n      dedupe[n] = true;\n      return true;\n    }\n    return false;\n  });\n  const logArgs = [\"\"];\n  lineNumbers.forEach((number) => {\n    shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n    logArgs.push(\"background: #FF0000; color:#FFFFFF; font-size: 10px\", \"font-size: 10px\");\n  });\n  const fragmentSourceToLog = shaderSrc.join(\"\\n\");\n  logArgs[0] = fragmentSourceToLog;\n  console.error(shaderLog);\n  console.groupCollapsed(\"click to view full shader code\");\n  console.warn(...logArgs);\n  console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, vertexShader);\n    }\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, fragmentShader);\n    }\n    console.error(\"PixiJS Error: Could not initialize shader.\");\n    if (gl.getProgramInfoLog(program) !== \"\") {\n      console.warn(\"PixiJS Warning: gl.getProgramInfoLog()\", gl.getProgramInfoLog(program));\n    }\n  }\n}\n\nexports.logProgramError = logProgramError;\n//# sourceMappingURL=logProgramError.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","logPrettyShaderError","gl","shader","shaderSrc","getShaderSource","split","map","line","index","shaderLog","getShaderInfoLog","dedupe","logArgs","splitShader","parseFloat","replace","filter","lineNumbers","n","forEach","number","push","fragmentSourceToLog","join","console","error","groupCollapsed","warn","groupEnd","logProgramError","program","vertexShader","fragmentShader","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getProgramInfoLog"]
}
