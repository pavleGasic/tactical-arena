{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureMatrix.js",
"lineCount":55,
"mappings":"AAAAA,cAAA,CAAA,oFAAA,GAAyG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGjJ,MAAIC,SAASH,OAAA,CAAQ,yDAAR,CAAb;AAEA,cAAA;AACA,QAAMI,UAAU,IAAID,MAAOA,CAAAA,MAAX,EAAhB;AACA,OAAME,cAAN;AAKEC,eAAW,CAACC,OAAD,EAAUC,WAAV,CAAuB;AAChC,UAAKC,CAAAA,QAAL,GAAgB,IAAIN,MAAOA,CAAAA,MAAX,EAAhB;AACA,UAAKO,CAAAA,WAAL,GAAmB,IAAIC,YAAJ,CAAiB,CAAjB,CAAnB;AACA,UAAKC,CAAAA,YAAL,GAAoB,IAAID,YAAJ,CAAiB,CAAjB,CAApB;AACA,UAAKE,CAAAA,UAAL,GAAkB,CAAC,CAAnB;AAEA,UAAKC,CAAAA,WAAL,GADA,IAAKC,CAAAA,SACL,GADiB,CACjB;AAEE,UAAKP,CAAAA,WAAL,GADyB,WAA3B,KAAI,MAAOA,YAAX,GACqC,EAAhB,GAAAD,OAAQS,CAAAA,KAAR,GAAqB,CAArB,GAAyB,GAD9C,GAGqBR,WAFnB;AAIF,UAAKS,CAAAA,QAAL,GAAgB,CAAA,CAAhB;AACA,UAAKV,CAAAA,OAAL,GAAeA,OAAf;AAbgC;AAgB9B,eAAU,EAAA;AACZ,aAAO,IAAKW,CAAAA,QAAZ;AADY;AAGV,eAAO,CAACC,KAAD,CAAQ;AACb,UAAKZ,CAAAA,OAAT,KAAqBY,KAArB,KAEA,IAAKD,CAAAA,QAAUE,EAAAA,cAAf,CAA8B,QAA9B,EAAwC,IAAKC,CAAAA,MAA7C,EAAqD,IAArD,CAGA,EAFA,IAAKH,CAAAA,QAEL,GAFgBC,KAEhB,EADA,IAAKD,CAAAA,QAASI,CAAAA,WAAd,CAA0B,QAA1B,EAAoC,IAAKD,CAAAA,MAAzC,EAAiD,IAAjD,CACA,EAAA,IAAKA,CAAAA,MAAL,EALA;AADiB;AAcnBE,eAAW,CAACC,GAAD,EAAMC,GAAN,CAAW;AACR,UAAK,EAAjB,KAAIA,GAAJ,KACEA,GADF,GACQD,GADR;AAGA,YAAME,MAAM,IAAKjB,CAAAA,QAAjB;AACA,WAAK,IAAIkB,IAAI,CAAb,EAAgBA,CAAhB,GAAoBH,GAAII,CAAAA,MAAxB,EAAgCD,CAAhC,IAAqC,CAArC,CAAwC;AACtC,cAAME,IAAIL,GAAA,CAAIG,CAAJ,CAAV,EACMG,IAAIN,GAAA,CAAIG,CAAJ,GAAQ,CAAR,CADV;AAEAF,WAAA,CAAIE,CAAJ,CAAA,GAASE,CAAT,GAAaH,GAAIK,CAAAA,CAAjB,GAAqBD,CAArB,GAAyBJ,GAAIM,CAAAA,CAA7B,GAAiCN,GAAIO,CAAAA,EAArC;AACAR,WAAA,CAAIE,CAAJ,GAAQ,CAAR,CAAA,GAAaE,CAAb,GAAiBH,GAAIQ,CAAAA,CAArB,GAAyBJ,CAAzB,GAA6BJ,GAAIS,CAAAA,CAAjC,GAAqCT,GAAIU,CAAAA,EAAzC;AAJsC;AAMxC,aAAOX,GAAP;AAXoB;AAiBtBJ,UAAM,EAAG;AACP,YAAMgB,MAAM,IAAKnB,CAAAA,QAAjB;AACA,UAAKH,CAAAA,SAAL,EAAA;AACA,UAAMS,MAAMa,GAAIb,CAAAA,GAAhB;AACA,UAAKf,CAAAA,QAAS6B,CAAAA,GAAd,CAAkBd,GAAIe,CAAAA,EAAtB,GAA2Bf,GAAIgB,CAAAA,EAA/B,EAAmChB,GAAIiB,CAAAA,EAAvC,GAA4CjB,GAAIkB,CAAAA,EAAhD,EAAoDlB,GAAImB,CAAAA,EAAxD,GAA6DnB,GAAIgB,CAAAA,EAAjE,EAAqEhB,GAAIoB,CAAAA,EAAzE,GAA8EpB,GAAIkB,CAAAA,EAAlF,EAAsFlB,GAAIgB,CAAAA,EAA1F,EAA8FhB,GAAIkB,CAAAA,EAAlG,CAAA;AACMG,SAAAA,GAAOR,GAAIQ,CAAAA,IAAXA;AACN,UAAMC,OAAOT,GAAIS,CAAAA,IAAjB;AACIA,UAAJ,KACE1C,OAAQkC,CAAAA,GAAR,CACEO,GAAK7B,CAAAA,KADP,GACe8B,IAAK9B,CAAAA,KADpB,EAEE,CAFF,EAGE,CAHF,EAIE6B,GAAKE,CAAAA,MAJP,GAIgBD,IAAKC,CAAAA,MAJrB,EAKE,CAACD,IAAKjB,CAAAA,CALR,GAKYiB,IAAK9B,CAAAA,KALjB,EAME,CAAC8B,IAAKhB,CAAAA,CANR,GAMYgB,IAAKC,CAAAA,MANjB,CAQA,EAAA,IAAKtC,CAAAA,QAASuC,CAAAA,MAAd,CAAqB5C,OAArB,CATF;AAWM6C,SAAAA,GAAUZ,GAAIa,CAAAA,MAAdD;AACAE,UAAAA,GAAQ,IAAKzC,CAAAA,WAAbyC;AACN,YAAMC,SAAS,IAAK5C,CAAAA,WAAd4C,GAA4BH,GAAQI,CAAAA,WAA1C,EACMC,SAAS,IAAKxC,CAAAA,WAAdwC,GAA4BL,GAAQI,CAAAA,WAD1C;AAEAF,UAAA,CAAM,CAAN,CAAA,IAAYd,GAAIc,CAAAA,KAAMtB,CAAAA,CAAtB,GAA0BuB,MAA1B,GAAmCE,MAAnC,IAA6CL,GAAQjC,CAAAA,KAArD;AACAmC,UAAA,CAAM,CAAN,CAAA,IAAYd,GAAIc,CAAAA,KAAMrB,CAAAA,CAAtB,GAA0BsB,MAA1B,GAAmCE,MAAnC,IAA6CL,GAAQF,CAAAA,MAArD;AACAI,UAAA,CAAM,CAAN,CAAA,IAAYd,GAAIc,CAAAA,KAAMtB,CAAAA,CAAtB,GAA0BQ,GAAIc,CAAAA,KAAMnC,CAAAA,KAApC,GAA4CoC,MAA5C,GAAqDE,MAArD,IAA+DL,GAAQjC,CAAAA,KAAvE;AACAmC,UAAA,CAAM,CAAN,CAAA,IAAYd,GAAIc,CAAAA,KAAMrB,CAAAA,CAAtB,GAA0BO,GAAIc,CAAAA,KAAMJ,CAAAA,MAApC,GAA6CK,MAA7C,GAAsDE,MAAtD,IAAgEL,GAAQF,CAAAA,MAAxE;AACA,UAAKnC,CAAAA,YAAL,CAAkB,CAAlB,CAAA,GAAuB,IAAKE,CAAAA,WAA5B,GAA0CmC,GAAQM,CAAAA,UAAlD;AACA,UAAK3C,CAAAA,YAAL,CAAkB,CAAlB,CAAA,GAAuB,IAAKE,CAAAA,WAA5B,GAA0CmC,GAAQO,CAAAA,WAAlD;AACA,UAAKvC,CAAAA,QAAL,GAAgBoB,GAAIc,CAAAA,KAAMnC,CAAAA,KAA1B,KAAoCiC,GAAQjC,CAAAA,KAA5C,IAAqDqB,GAAIc,CAAAA,KAAMJ,CAAAA,MAA/D,KAA0EE,GAAQF,CAAAA,MAAlF,IAA2G,CAA3G,KAA4FV,GAAIoB,CAAAA,MAAhG;AACA,aAAO,CAAA,CAAP;AA7BO;AAvDX;AAwFAvD,SAAQG,CAAAA,aAAR,GAAwBA,aAAxB;AA/FiJ,CAAjJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/TextureMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureMatrix\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Matrix = require('../../../../maths/matrix/Matrix.js');\n\n\"use strict\";\nconst tempMat = new Matrix.Matrix();\nclass TextureMatrix {\n  /**\n   * @param texture - observed texture\n   * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n   */\n  constructor(texture, clampMargin) {\n    this.mapCoord = new Matrix.Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    if (typeof clampMargin === \"undefined\") {\n      this.clampMargin = texture.width < 10 ? 0 : 0.5;\n    } else {\n      this.clampMargin = clampMargin;\n    }\n    this.isSimple = false;\n    this.texture = texture;\n  }\n  /** Texture property. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    if (this.texture === value)\n      return;\n    this._texture?.removeListener(\"update\", this.update, this);\n    this._texture = value;\n    this._texture.addListener(\"update\", this.update, this);\n    this.update();\n  }\n  /**\n   * Multiplies uvs array to transform\n   * @param uvs - mesh uvs\n   * @param [out=uvs] - output\n   * @returns - output\n   */\n  multiplyUvs(uvs, out) {\n    if (out === void 0) {\n      out = uvs;\n    }\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i];\n      const y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx;\n      out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  /**\n   * Updates matrices if texture was changed\n   * @returns - whether or not it was updated\n   */\n  update() {\n    const tex = this._texture;\n    this._updateID++;\n    const uvs = tex.uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig;\n    const trim = tex.trim;\n    if (trim) {\n      tempMat.set(\n        orig.width / trim.width,\n        0,\n        0,\n        orig.height / trim.height,\n        -trim.x / trim.width,\n        -trim.y / trim.height\n      );\n      this.mapCoord.append(tempMat);\n    }\n    const texBase = tex.source;\n    const frame = this.uClampFrame;\n    const margin = this.clampMargin / texBase._resolution;\n    const offset = this.clampOffset / texBase._resolution;\n    frame[0] = (tex.frame.x + margin + offset) / texBase.width;\n    frame[1] = (tex.frame.y + margin + offset) / texBase.height;\n    frame[2] = (tex.frame.x + tex.frame.width - margin + offset) / texBase.width;\n    frame[3] = (tex.frame.y + tex.frame.height - margin + offset) / texBase.height;\n    this.uClampOffset[0] = this.clampOffset / texBase.pixelWidth;\n    this.uClampOffset[1] = this.clampOffset / texBase.pixelHeight;\n    this.isSimple = tex.frame.width === texBase.width && tex.frame.height === texBase.height && tex.rotate === 0;\n    return true;\n  }\n}\n\nexports.TextureMatrix = TextureMatrix;\n//# sourceMappingURL=TextureMatrix.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matrix","tempMat","TextureMatrix","constructor","texture","clampMargin","mapCoord","uClampFrame","Float32Array","uClampOffset","_textureID","clampOffset","_updateID","width","isSimple","_texture","value","removeListener","update","addListener","multiplyUvs","uvs","out","mat","i","length","x","y","a","c","tx","b","d","ty","tex","set","x1","x0","y1","y0","x3","y3","orig","trim","height","append","texBase","source","frame","margin","_resolution","offset","pixelWidth","pixelHeight","rotate"]
}
