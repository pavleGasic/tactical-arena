shadow$provide.module$node_modules$pixi_DOT_js$lib$filters$defaults$alpha$AlphaFilter = function(global, require, module, exports) {
  var GlProgram = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlProgram"), GpuProgram = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$GpuProgram"), UniformGroup = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$UniformGroup");
  global = require("module$node_modules$pixi_DOT_js$lib$filters$Filter");
  var defaultFilter = require("module$node_modules$pixi_DOT_js$lib$filters$defaults$defaultFilter_vert"), alpha$1 = require("module$node_modules$pixi_DOT_js$lib$filters$defaults$alpha$alpha_frag"), alpha = require("module$node_modules$pixi_DOT_js$lib$filters$defaults$alpha$alpha_wgsl");
  "use strict";
  const node_modules$pixi_DOT_js$lib$filters$defaults$alpha$AlphaFilter$classdecl$var36 = class extends global.Filter {
    constructor(options) {
      options = {...node_modules$pixi_DOT_js$lib$filters$defaults$alpha$AlphaFilter$classdecl$var36.defaultOptions, ...options};
      const gpuProgram = GpuProgram.GpuProgram.from({vertex:{source:alpha.default, entryPoint:"mainVertex"}, fragment:{source:alpha.default, entryPoint:"mainFragment"}}), glProgram = GlProgram.GlProgram.from({vertex:defaultFilter.default, fragment:alpha$1.default, name:"alpha-filter"}), {alpha:alpha$2, ...rest} = options;
      options = new UniformGroup.UniformGroup({uAlpha:{value:alpha$2, type:"f32"}});
      super({...rest, gpuProgram, glProgram, resources:{alphaUniforms:options}});
    }
    get alpha() {
      return this.resources.alphaUniforms.uniforms.uAlpha;
    }
    set alpha(value) {
      this.resources.alphaUniforms.uniforms.uAlpha = value;
    }
  };
  require = node_modules$pixi_DOT_js$lib$filters$defaults$alpha$AlphaFilter$classdecl$var36;
  require.defaultOptions = {alpha:1};
  exports.AlphaFilter = require;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$filters$defaults$alpha$AlphaFilter.js.map
