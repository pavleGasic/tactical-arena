{
"version":3,
"file":"module$node_modules$$pixi$math$lib$Matrix.js",
"lineCount":104,
"mappings":"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",
"sources":["node_modules/@pixi/math/lib/Matrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$math$lib$Matrix\"] = function(global,require,module,exports) {\n\"use strict\";\nvar _const = require(\"./const.js\"), Point = require(\"./Point.js\");\nclass Matrix {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.array = null, this.a = a, this.b = b, this.c = c, this.d = d, this.tx = tx, this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   * @param array - The array that the matrix will be populated from.\n   */\n  fromArray(array) {\n    this.a = array[0], this.b = array[1], this.c = array[3], this.d = array[4], this.tx = array[2], this.ty = array[5];\n  }\n  /**\n   * Sets the matrix properties.\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @returns This matrix. Good for chaining method calls.\n   */\n  set(a, b, c, d, tx, ty) {\n    return this.a = a, this.b = b, this.c = c, this.d = d, this.tx = tx, this.ty = ty, this;\n  }\n  /**\n   * Creates an array from the current Matrix object.\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @returns The newly created array which contains the matrix\n   */\n  toArray(transpose, out) {\n    this.array || (this.array = new Float32Array(9));\n    const array = out || this.array;\n    return transpose ? (array[0] = this.a, array[1] = this.b, array[2] = 0, array[3] = this.c, array[4] = this.d, array[5] = 0, array[6] = this.tx, array[7] = this.ty, array[8] = 1) : (array[0] = this.a, array[1] = this.c, array[2] = this.tx, array[3] = this.b, array[4] = this.d, array[5] = this.ty, array[6] = 0, array[7] = 0, array[8] = 1), array;\n  }\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {PIXI.Point} The new point, transformed through this matrix\n   */\n  apply(pos, newPos) {\n    newPos = newPos || new Point.Point();\n    const x = pos.x, y = pos.y;\n    return newPos.x = this.a * x + this.c * y + this.tx, newPos.y = this.b * x + this.d * y + this.ty, newPos;\n  }\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n   */\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point.Point();\n    const id = 1 / (this.a * this.d + this.c * -this.b), x = pos.x, y = pos.y;\n    return newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id, newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id, newPos;\n  }\n  /**\n   * Translates the matrix on the x and y.\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @returns This matrix. Good for chaining method calls.\n   */\n  translate(x, y) {\n    return this.tx += x, this.ty += y, this;\n  }\n  /**\n   * Applies a scale transformation to the matrix.\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @returns This matrix. Good for chaining method calls.\n   */\n  scale(x, y) {\n    return this.a *= x, this.d *= y, this.c *= x, this.b *= y, this.tx *= x, this.ty *= y, this;\n  }\n  /**\n   * Applies a rotation transformation to the matrix.\n   * @param angle - The angle in radians.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  rotate(angle) {\n    const cos = Math.cos(angle), sin = Math.sin(angle), a1 = this.a, c1 = this.c, tx1 = this.tx;\n    return this.a = a1 * cos - this.b * sin, this.b = a1 * sin + this.b * cos, this.c = c1 * cos - this.d * sin, this.d = c1 * sin + this.d * cos, this.tx = tx1 * cos - this.ty * sin, this.ty = tx1 * sin + this.ty * cos, this;\n  }\n  /**\n   * Appends the given Matrix to this Matrix.\n   * @param matrix - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  append(matrix) {\n    const a1 = this.a, b1 = this.b, c1 = this.c, d1 = this.d;\n    return this.a = matrix.a * a1 + matrix.b * c1, this.b = matrix.a * b1 + matrix.b * d1, this.c = matrix.c * a1 + matrix.d * c1, this.d = matrix.c * b1 + matrix.d * d1, this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx, this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty, this;\n  }\n  /**\n   * Sets the matrix based on all the available properties\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @returns This matrix. Good for chaining method calls.\n   */\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    return this.a = Math.cos(rotation + skewY) * scaleX, this.b = Math.sin(rotation + skewY) * scaleX, this.c = -Math.sin(rotation - skewX) * scaleY, this.d = Math.cos(rotation - skewX) * scaleY, this.tx = x - (pivotX * this.a + pivotY * this.c), this.ty = y - (pivotX * this.b + pivotY * this.d), this;\n  }\n  /**\n   * Prepends the given Matrix to this Matrix.\n   * @param matrix - The matrix to prepend\n   * @returns This matrix. Good for chaining method calls.\n   */\n  prepend(matrix) {\n    const tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a, c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c, this.b = a1 * matrix.b + this.b * matrix.d, this.c = c1 * matrix.a + this.d * matrix.c, this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    return this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx, this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty, this;\n  }\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   * @param transform - The transform to apply the properties to.\n   * @returns The transform with the newly applied properties\n   */\n  decompose(transform) {\n    const a = this.a, b = this.b, c = this.c, d = this.d, pivot = transform.pivot, skewX = -Math.atan2(-c, d), skewY = Math.atan2(b, a), delta = Math.abs(skewX + skewY);\n    return delta < 1e-5 || Math.abs(_const.PI_2 - delta) < 1e-5 ? (transform.rotation = skewY, transform.skew.x = transform.skew.y = 0) : (transform.rotation = 0, transform.skew.x = skewX, transform.skew.y = skewY), transform.scale.x = Math.sqrt(a * a + b * b), transform.scale.y = Math.sqrt(c * c + d * d), transform.position.x = this.tx + (pivot.x * a + pivot.y * c), transform.position.y = this.ty + (pivot.x * b + pivot.y * d), transform;\n  }\n  /**\n   * Inverts this matrix\n   * @returns This matrix. Good for chaining method calls.\n   */\n  invert() {\n    const a1 = this.a, b1 = this.b, c1 = this.c, d1 = this.d, tx1 = this.tx, n = a1 * d1 - b1 * c1;\n    return this.a = d1 / n, this.b = -b1 / n, this.c = -c1 / n, this.d = a1 / n, this.tx = (c1 * this.ty - d1 * tx1) / n, this.ty = -(a1 * this.ty - b1 * tx1) / n, this;\n  }\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  identity() {\n    return this.a = 1, this.b = 0, this.c = 0, this.d = 1, this.tx = 0, this.ty = 0, this;\n  }\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   * @returns A copy of this matrix. Good for chaining method calls.\n   */\n  clone() {\n    const matrix = new Matrix();\n    return matrix.a = this.a, matrix.b = this.b, matrix.c = this.c, matrix.d = this.d, matrix.tx = this.tx, matrix.ty = this.ty, matrix;\n  }\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   * @param matrix - The matrix to copy to.\n   * @returns The matrix given in parameter with its values updated.\n   */\n  copyTo(matrix) {\n    return matrix.a = this.a, matrix.b = this.b, matrix.c = this.c, matrix.d = this.d, matrix.tx = this.tx, matrix.ty = this.ty, matrix;\n  }\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   * @param {PIXI.Matrix} matrix - The matrix to copy from.\n   * @returns {PIXI.Matrix} this\n   */\n  copyFrom(matrix) {\n    return this.a = matrix.a, this.b = matrix.b, this.c = matrix.c, this.d = matrix.d, this.tx = matrix.tx, this.ty = matrix.ty, this;\n  }\n  /**\n   * A default (identity) matrix\n   * @readonly\n   */\n  static get IDENTITY() {\n    return new Matrix();\n  }\n  /**\n   * A temp matrix\n   * @readonly\n   */\n  static get TEMP_MATRIX() {\n    return new Matrix();\n  }\n}\nMatrix.prototype.toString = function() {\n  return `[@pixi/math:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n};\nexports.Matrix = Matrix;\n//# sourceMappingURL=Matrix.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","Point","Matrix","constructor","a","b","c","d","tx","ty","array","fromArray","set","toArray","transpose","out","Float32Array","apply","pos","newPos","x","y","applyInverse","id","translate","scale","rotate","angle","cos","Math","sin","a1","c1","tx1","append","matrix","b1","d1","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","pivot","atan2","delta","abs","PI_2","skew","sqrt","position","invert","n","identity","clone","copyTo","copyFrom","prototype","toString","Matrix.prototype.toString"]
}
