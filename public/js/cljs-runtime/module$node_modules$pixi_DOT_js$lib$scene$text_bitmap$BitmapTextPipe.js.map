{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapTextPipe.js",
"lineCount":99,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/BitmapTextPipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapTextPipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Cache = require('../../assets/cache/Cache.js');\nvar Extensions = require('../../extensions/Extensions.js');\nvar PoolGroup = require('../../utils/pool/PoolGroup.js');\nvar Graphics = require('../graphics/shared/Graphics.js');\nvar SdfShader = require('../text/sdfShader/SdfShader.js');\nvar BitmapFontManager = require('./BitmapFontManager.js');\nvar getBitmapTextLayout = require('./utils/getBitmapTextLayout.js');\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      PoolGroup.BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    PoolGroup.BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = PoolGroup.BigPool.get(SdfShader.SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout.getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = PoolGroup.BigPool.get(Graphics.Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexports.BitmapTextPipe = BitmapTextPipe;\n//# sourceMappingURL=BitmapTextPipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","syncWithProxy","container","proxy","groupTransform","groupColorAlpha","groupColor","groupBlendMode","globalDisplayStatus","localDisplayStatus","groupAlpha","_roundPixels","Cache","Extensions","PoolGroup","Graphics","SdfShader","BitmapFontManager","getBitmapTextLayout","BitmapTextPipe","constructor","renderer","_gpuBitmapText","_destroyRenderableBound","destroyRenderable","bind","_renderer","renderableGC","addManagedHash","validateRenderable","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","renderPipes","graphics","addRenderable","instructionSet","context","customShader","_updateDistanceField","off","_destroyRenderableByUid","uid","renderableUid","BigPool","return","updateRenderable","proxyGraphics","bitmapFont","getFont","text","_style","clear","distanceField","type","get","chars","Array","from","style","currentY","baseLineOffset","bitmapTextLayout","index","padding","scale","tx","width","ty","height","offsetY","_stroke","translate","_anchor","_x","_y","tint","applyFillAsTint","_fill","color","i","lines","length","line","j","charPositions","char","charData","texture","Math","round","xOffset","yOffset","lineHeight","initGpuText","proxyRenderable","on","dynamicFont","fontFamily","a","b","c","d","resources","localUniforms","uniforms","uDistance","abs","sqrt","dx","dy","range","baseRenderedFontSize","fontSize","destroy","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"]
}
