{
"version":3,
"file":"module$node_modules$$pixi$core$lib$filters$spriteMask$SpriteMaskFilter.js",
"lineCount":26,
"mappings":"AAAAA,cAAA,CAAA,sEAAA,GAA2F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE/HC,OAAOH,OAAA,CAAQ,0CAAR,CAFwH,EAEjGI,gBAAgBJ,OAAA,CAAQ,2DAAR,CAFiF;AAErCK,QAAAA,GAASL,OAAA,CAAQ,mDAAR,CAATK;AAFqC,MAEHC,qBAAqBN,OAAA,CAAQ,6EAAR,CAFlB,EAEyDO,mBAAmBP,OAAA,CAAQ,6EAAR,CAF5E;AAGnI,OAAMQ,iBAAN,QAA+BH,OAAOA,CAAAA,MAAtC;AAEEI,eAAW,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,QAAzB,CAAmC;AAC5C,UAAIC,SAAS,IAAb;AACoB,cAApB,IAAA,MAAOH,UAAP,IAAgD,IAAK,EAArD,KAAgCC,WAAhC,IAAuE,IAAK,EAA5E,KAA0DC,QAA1D,KAAkFC,MAAA,GAASH,SAAT,EAAoBA,SAApB,GAAgC,IAAK,EAArC,EAAwCC,WAAxC,GAAsD,IAAK,EAA3D,EAA8DC,QAA9D,GAAyE,IAAK,EAAhK;AAAoK,WAAA,CAAMF,SAAN,IAAmBH,gBAAiBO,CAAAA,OAApC,EAA6CH,WAA7C,IAA4DL,kBAAmBQ,CAAAA,OAA/E,EAAwFF,QAAxF,CAAA;AAAmG,UAAKG,CAAAA,UAAL,GAAkBF,MAAlB;AAA0B,UAAKG,CAAAA,UAAL,GAAkB,IAAIb,IAAKc,CAAAA,MAAT,EAAlB;AAFrP;AAQ1C,kBAAa,EAAA;AACf,aAAO,IAAKC,CAAAA,WAAZ;AADe;AAGb,kBAAU,CAACC,KAAD,CAAQ;AACM,OAA1B,IAAKD,CAAAA,WAAqB,GAAPC,KAAO,MAAqB,IAAKD,CAAAA,WAAYE,CAAAA,UAAtC,GAAmD,CAAA,CAAnD;AADN;AAUtBC,SAAK,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,SAA/B,CAA0C;AAAA,YACvCV,aAAa,IAAKG,CAAAA,WADqB,EACRQ,MAAMX,UAAWY,CAAAA,QADT;AAE7CD,SAAIE,CAAAA,KAAJ,KAAcF,GAAIG,CAAAA,QAAJ,KAAiBH,GAAIG,CAAAA,QAArB,GAAgC,IAAIzB,aAAcA,CAAAA,aAAlB,CAAgCsB,GAAhC,EAAqC,CAArC,CAAhC,GAA0EA,GAAIG,CAAAA,QAASC,CAAAA,MAAb,EAA1E,EAAiG,IAAKlB,CAAAA,QAASmB,CAAAA,QAA/G,GAA0HL,GAAIM,CAAAA,WAAYC,CAAAA,SAAhB,GAA4B,CAA5B,GAAgC,CAA1J,EAA6J,IAAKrB,CAAAA,QAASsB,CAAAA,IAA3K,GAAkLR,GAAlL,EAAuL,IAAKd,CAAAA,QAASuB,CAAAA,WAArM,GAAmNb,aAAcc,CAAAA,qBAAd,CAAoC,IAAKpB,CAAAA,UAAzC,EAAqDD,UAArD,CAAiEsB,CAAAA,OAAjE,CAAyEX,GAAIG,CAAAA,QAASS,CAAAA,QAAtF,CAAnN,EAAoT,IAAK1B,CAAAA,QAAS2B,CAAAA,KAAlU,GAA0UxB,UAAWyB,CAAAA,UAArV,EAAiW,IAAK5B,CAAAA,QAAS6B,CAAAA,SAA/W,GAA2Xf,GAAIG,CAAAA,QAASa,CAAAA,WAAxY,EAAqZpB,aAAcqB,CAAAA,WAAd,CAA0B,IAA1B,EAAgCpB,KAAhC,EAAuCC,MAAvC,EAA+CC,SAA/C,CAAna;AAF6C;AAvBjD;AA4BAvB,SAAQM,CAAAA,gBAAR,GAA2BA,gBAA3B;AA/BmI,CAAnI;;",
"sources":["node_modules/@pixi/core/lib/filters/spriteMask/SpriteMaskFilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$filters$spriteMask$SpriteMaskFilter\"] = function(global,require,module,exports) {\n\"use strict\";\nvar math = require(\"@pixi/math\"), TextureMatrix = require(\"../../textures/TextureMatrix.js\"), Filter = require(\"../Filter.js\"), spriteMaskFilter$1 = require(\"./spriteMaskFilter.frag.js\"), spriteMaskFilter = require(\"./spriteMaskFilter.vert.js\");\nclass SpriteMaskFilter extends Filter.Filter {\n  /** @ignore */\n  constructor(vertexSrc, fragmentSrc, uniforms) {\n    let sprite = null;\n    typeof vertexSrc != \"string\" && fragmentSrc === void 0 && uniforms === void 0 && (sprite = vertexSrc, vertexSrc = void 0, fragmentSrc = void 0, uniforms = void 0), super(vertexSrc || spriteMaskFilter.default, fragmentSrc || spriteMaskFilter$1.default, uniforms), this.maskSprite = sprite, this.maskMatrix = new math.Matrix();\n  }\n  /**\n   * Sprite mask\n   * @type {PIXI.DisplayObject}\n   */\n  get maskSprite() {\n    return this._maskSprite;\n  }\n  set maskSprite(value) {\n    this._maskSprite = value, this._maskSprite && (this._maskSprite.renderable = !1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it.\n   */\n  apply(filterManager, input, output, clearMode) {\n    const maskSprite = this._maskSprite, tex = maskSprite._texture;\n    tex.valid && (tex.uvMatrix || (tex.uvMatrix = new TextureMatrix.TextureMatrix(tex, 0)), tex.uvMatrix.update(), this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0 : 1, this.uniforms.mask = tex, this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite).prepend(tex.uvMatrix.mapCoord), this.uniforms.alpha = maskSprite.worldAlpha, this.uniforms.maskClamp = tex.uvMatrix.uClampFrame, filterManager.applyFilter(this, input, output, clearMode));\n  }\n}\nexports.SpriteMaskFilter = SpriteMaskFilter;\n//# sourceMappingURL=SpriteMaskFilter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","math","TextureMatrix","Filter","spriteMaskFilter$1","spriteMaskFilter","SpriteMaskFilter","constructor","vertexSrc","fragmentSrc","uniforms","sprite","default","maskSprite","maskMatrix","Matrix","_maskSprite","value","renderable","apply","filterManager","input","output","clearMode","tex","_texture","valid","uvMatrix","update","npmAlpha","baseTexture","alphaMode","mask","otherMatrix","calculateSpriteMatrix","prepend","mapCoord","alpha","worldAlpha","maskClamp","uClampFrame","applyFilter"]
}
