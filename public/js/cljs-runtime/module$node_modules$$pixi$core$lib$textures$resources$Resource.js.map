{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$Resource.js",
"lineCount":55,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/resources/Resource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$Resource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar runner = require(\"@pixi/runner\");\nclass Resource {\n  /**\n   * @param width - Width of the resource\n   * @param height - Height of the resource\n   */\n  constructor(width = 0, height = 0) {\n    this._width = width, this._height = height, this.destroyed = !1, this.internal = !1, this.onResize = new runner.Runner(\"setRealSize\"), this.onUpdate = new runner.Runner(\"update\"), this.onError = new runner.Runner(\"onError\");\n  }\n  /**\n   * Bind to a parent BaseTexture\n   * @param baseTexture - Parent texture\n   */\n  bind(baseTexture) {\n    this.onResize.add(baseTexture), this.onUpdate.add(baseTexture), this.onError.add(baseTexture), (this._width || this._height) && this.onResize.emit(this._width, this._height);\n  }\n  /**\n   * Unbind to a parent BaseTexture\n   * @param baseTexture - Parent texture\n   */\n  unbind(baseTexture) {\n    this.onResize.remove(baseTexture), this.onUpdate.remove(baseTexture), this.onError.remove(baseTexture);\n  }\n  /**\n   * Trigger a resize event\n   * @param width - X dimension\n   * @param height - Y dimension\n   */\n  resize(width, height) {\n    (width !== this._width || height !== this._height) && (this._width = width, this._height = height, this.onResize.emit(width, height));\n  }\n  /**\n   * Has been validated\n   * @readonly\n   */\n  get valid() {\n    return !!this._width && !!this._height;\n  }\n  /** Has been updated trigger event. */\n  update() {\n    this.destroyed || this.onUpdate.emit();\n  }\n  /**\n   * This can be overridden to start preloading a resource\n   * or do any other prepare step.\n   * @protected\n   * @returns Handle the validate event\n   */\n  load() {\n    return Promise.resolve(this);\n  }\n  /**\n   * The width of the resource.\n   * @readonly\n   */\n  get width() {\n    return this._width;\n  }\n  /**\n   * The height of the resource.\n   * @readonly\n   */\n  get height() {\n    return this._height;\n  }\n  /**\n   * Set the style, optional to override\n   * @param _renderer - yeah, renderer!\n   * @param _baseTexture - the texture\n   * @param _glTexture - texture instance for this webgl context\n   * @returns - `true` is success\n   */\n  style(_renderer, _baseTexture, _glTexture) {\n    return !1;\n  }\n  /** Clean up anything, this happens when destroying is ready. */\n  dispose() {\n  }\n  /**\n   * Call when destroying resource, unbind any BaseTexture object\n   * before calling this method, as reference counts are maintained\n   * internally.\n   */\n  destroy() {\n    this.destroyed || (this.destroyed = !0, this.dispose(), this.onError.removeAll(), this.onError = null, this.onResize.removeAll(), this.onResize = null, this.onUpdate.removeAll(), this.onUpdate = null);\n  }\n  /**\n   * Abstract, used to auto-detect resource type.\n   * @param {*} _source - The source object\n   * @param {string} _extension - The extension of source, if set\n   */\n  static test(_source, _extension) {\n    return !1;\n  }\n}\nexports.Resource = Resource;\n//# sourceMappingURL=Resource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","runner","Resource","constructor","width","height","_width","_height","internal","destroyed","onResize","Runner","onUpdate","onError","bind","baseTexture","add","emit","unbind","remove","resize","update","load","Promise","resolve","style","_renderer","_baseTexture","_glTexture","dispose","destroy","removeAll","test","_source","_extension"]
}
