shadow$provide.module$node_modules$$pixi$react$lib$core$createRoot = function(global, require, module, exports) {
  var jsxRuntime = require("module$node_modules$react$jsx_runtime"), pixi_js = require("module$node_modules$pixi_DOT_js$lib$index"), constants = require("module$node_modules$react_reconciler$constants"), Context = require("module$node_modules$$pixi$react$lib$components$Context"), isReadOnlyProperty = require("module$node_modules$$pixi$react$lib$helpers$isReadOnlyProperty"), log = require("module$node_modules$$pixi$react$lib$helpers$log"), prepareInstance = require("module$node_modules$$pixi$react$lib$helpers$prepareInstance"), 
  reconciler = require("module$node_modules$$pixi$react$lib$core$reconciler"), roots = require("module$node_modules$$pixi$react$lib$core$roots");
  "use strict";
  exports.createRoot = function(target, options = {}) {
    let root = roots.roots.get(target), applicationState = root?.applicationState ?? {isInitialised:!1, isInitialising:!1};
    const internalState = root?.internalState ?? {};
    root ? log.log("warn", "createRoot should only be called once!") : (applicationState.app = new pixi_js.Application(), internalState.rootContainer = prepareInstance.prepareInstance(applicationState.app.stage));
    const fiber = root?.fiber ?? reconciler.reconciler.createContainer(internalState.rootContainer, constants.ConcurrentRoot, null, !1, null, "", console.error, console.error, console.error, null);
    if (!root) {
      let canvas;
      target instanceof HTMLCanvasElement && (canvas = target);
      canvas || (canvas = document.createElement("canvas"), target.innerHTML = "", target.appendChild(canvas));
      internalState.canvas = canvas;
      root = {applicationState, fiber, internalState, render:async(children, applicationOptions) => {
        applicationState.app.renderer || applicationState.isInitialised || applicationState.isInitialising || (applicationState.isInitialising = !0, await applicationState.app.init({...applicationOptions, canvas}), applicationState.isInitialising = !1, applicationState.isInitialised = !0, applicationState = {...applicationState}, options.onInit?.(applicationState.app));
        Object.entries(applicationOptions).forEach(([key, value]) => {
          isReadOnlyProperty.isReadOnlyProperty(applicationOptions, key) || (applicationState.app[key] = value);
        });
        reconciler.reconciler.updateContainer(jsxRuntime.jsx(Context.ContextProvider, {value:applicationState, children}), fiber, null, () => {
        });
        return applicationState.app;
      }};
      roots.roots.set(canvas, root);
    }
    return root;
  };
};

//# sourceMappingURL=module$node_modules$$pixi$react$lib$core$createRoot.js.map
