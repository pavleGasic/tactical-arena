{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$utils$buildContextBatches.js",
"lineCount":101,
"mappings":"AAAAA,cAAA,CAAA,mFAAA,GAAwG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AA2FhJC,UAASA,2BAA0B,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,QAAnB,EAA6BC,OAA7B,EAAsCC,YAAtC,CAAoD;AACrF,UAAM,CAAEC,QAAF,EAAYC,GAAZ,EAAiBC,OAAjB,CAAA,GAA6BH,YAAnC;AACAJ,aAAUQ,CAAAA,eAAgBC,CAAAA,OAA1B,CAAkC,CAAC,CAAEC,KAAF,EAAS,UAAWC,MAApB,EAA4BC,KAA5B,CAAD,CAAA,IAAyC;AACzE,YAAMC,cAAcN,OAAQO,CAAAA,MAA5B,EACMC,aAAaV,QAASS,CAAAA,MAAtBC,GAA+B,CADrC;AAEA,UAAMC,SAAS,EAAf;AACA,YAAMC,QAAQC,aAAA,CAAcR,KAAMS,CAAAA,IAApB,CAAd;AACA,UAAIC,WAAW,eAAf;AACAH,WAAMA,CAAAA,KAAN,CAAYP,KAAZ,EAAmBM,MAAnB,CAAA;AACIL,YAAJ,IACEU,iBAAkBA,CAAAA,iBAAlB,CAAoCL,MAApC,EAA4CL,MAA5C,CADF;AAGA,UAAKT,QAAL;AAcQoB,aAEN,GAFcZ,KAAMa,CAAAA,SAEpB,IAFiC,CAAA,CAEjC,EADkBtB,KACHuB,CAAAA,SAAf,IAGEC,cAAeA,CAAAA,cAAf,CAA8BT,MAA9B,EAAsCM,KAAtC,EAA6CjB,QAA7C,EAAuDE,OAAvD,CACA,EAAAa,QAAA,GAAW,WAJb,IACEM,SAAUA,CAAAA,SAAV,CAAoBV,MAApB,EAFgBf,KAEhB,EAAuC,CAAA,CAAvC,EAA8CqB,KAA9C,EAAqDjB,QAArD,EAA+DE,OAA/D,CADF;AAhBF;AACE,YAAIK,KAAJ,CAAW;AACT,gBAAMe,cAAc,EAApB,EACMC,cAAcZ,MAAOa,CAAAA,KAAP,EADpB;AAEmBC,uBAAAC,CAAcnB,KAAdmB,CACRtB,CAAAA,OAAX,CAAoBuB,UAAD,IAAgB;AACjCL,uBAAYM,CAAAA,IAAZ,CAAiBL,WAAYd,CAAAA,MAA7B,GAAsC,CAAtC,CAAA;AACAc,uBAAYK,CAAAA,IAAZ,CAAiB,GAAGD,UAApB,CAAA;AAFiC,WAAnC,CAAA;AAIAE,8BAAqBA,CAAAA,oBAArB,CAA0CN,WAA1C,EAAuDD,WAAvD,EAAoEtB,QAApE,EAA8E,CAA9E,EAAiFU,UAAjF,EAA6FR,OAA7F,EAAsGM,WAAtG,CAAA;AARS,SAAX;AAUEI,eAAMkB,CAAAA,WAAN,CAAkBnB,MAAlB,EAA0BX,QAA1B,EAAoC,CAApC,EAAuCU,UAAvC,EAAmDR,OAAnD,EAA4DM,WAA5D,CAAA;AAVF;AADF;AAuBMuB,WAAAA,GAAY9B,GAAIQ,CAAAA,MAAhBsB,GAAyB,CAAzBA;AACAC,YAAAA,GAAUpC,KAAMoC,CAAAA,OAAhBA;AACFA,YAAJ,KAAgBC,OAAQA,CAAAA,OAAQC,CAAAA,KAAhC,IACQC,KACN,GADsBC,yBAA0BC,CAAAA,qBAA1B,CAAgDC,iBAAhD,EAAmE1C,KAAnE,EAA0ES,KAA1E,EAAiFC,MAAjF,CACtB,EAAAiC,QAASA,CAAAA,QAAT,CAAkBvC,QAAlB,EAA4B,CAA5B,EAA+BU,UAA/B,EAA2CT,GAA3C,EAAgD8B,KAAhD,EAA2D,CAA3D,EAA8D/B,QAASS,CAAAA,MAAvE,GAAgF,CAAhF,GAAoFC,UAApF,EAAgGyB,KAAhG,CAFF,IAIEI,QAASC,CAAAA,cAAT,CAAwBvC,GAAxB,EAA6B8B,KAA7B,EAAwC,CAAxC,EAA2C/B,QAASS,CAAAA,MAApD,GAA6D,CAA7D,GAAiEC,UAAjE,CAJF;AAMM+B,WAAAA,GAAgBC,SAAUC,CAAAA,OAAQC,CAAAA,GAAlB,CAAsBC,iBAAkBA,CAAAA,iBAAxC,CAAhBJ;AACNA,WAAcjC,CAAAA,WAAd,GAA4BA,WAA5B;AACAiC,WAAcK,CAAAA,SAAd,GAA0B5C,OAAQO,CAAAA,MAAlC,GAA2CD,WAA3C;AACAiC,WAAcM,CAAAA,eAAd,GAAgCrC,UAAhC;AACA+B,WAAcO,CAAAA,aAAd,GAA8BhD,QAASS,CAAAA,MAAvC,GAAgD,CAAhD,GAAoDC,UAApD;AACA+B,WAAcQ,CAAAA,SAAd,GAA0BrD,KAAMsD,CAAAA,KAAhC;AACAT,WAAcU,CAAAA,KAAd,GAAsBvD,KAAMuD,CAAAA,KAA5B;AACAV,WAAcT,CAAAA,OAAd,GAAwBA,MAAxB;AACAS,WAAc1C,CAAAA,YAAd,GAA6BA,YAA7B;AACA0C,WAAc1B,CAAAA,QAAd,GAAyBA,QAAzB;AACAjB,aAAQ8B,CAAAA,IAAR,CAAaa,KAAb,CAAA;AAnDyE,KAA3E,CAAA;AAFqF;AAwDvFhB,UAASA,cAAa,CAAC2B,cAAD,CAAiB;AACrC,UAAM1B,aAAa,EAAnB;AACA,SAAK,IAAI2B,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,cAAe3C,CAAAA,MAAnC,EAA2C4C,CAAA,EAA3C,CAAgD;AAC9C,YAAMC,gBAAgBF,cAAA,CAAeC,CAAf,CAAkBhD,CAAAA,KAAxC,EACMsB,aAAa,EADnB;AAEoBd,mBAAA0C,CAAcD,aAAcxC,CAAAA,IAA5ByC,CACR3C,CAAAA,KAAZ,CAAkB0C,aAAlB,EAAiC3B,UAAjC,CAAA;AACAD,gBAAWE,CAAAA,IAAX,CAAgBD,UAAhB,CAAA;AAL8C;AAOhD,WAAOD,UAAP;AATqC;AAhJnC8B,QAAAA,GAAajE,OAAA,CAAQ,2DAAR,CAAbiE;AACAC,QAAAA,GAASlE,OAAA,CAAQ,yDAAR,CAATkE;AACJ,MAAIC,YAAYnE,OAAA,CAAQ,4DAAR,CAAhB,EACIgD,WAAWhD,OAAA,CAAQ,wFAAR,CADf,EAEIyB,oBAAoBzB,OAAA,CAAQ,iGAAR,CAFxB,EAGI0C,UAAU1C,OAAA,CAAQ,gFAAR,CAHd,EAIImD,YAAYnD,OAAA,CAAQ,0DAAR,CAJhB;AAKIsD,sBAAoBtD,OAAA,CAAQ,6EAAR,CALxB,EAMIoE,cAAcpE,OAAA,CAAQ,qFAAR,CANlB,EAOI8B,YAAY9B,OAAA,CAAQ,mFAAR,CAPhB,EAQI6B,iBAAiB7B,OAAA,CAAQ,wFAAR,CARrB,EASIqE,eAAerE,OAAA,CAAQ,sFAAR,CATnB;AAUIsE,mBAAiBtE,OAAA,CAAQ,wFAAR,CAVrB,EAWIuE,gBAAgBvE,OAAA,CAAQ,uFAAR,CAXpB,EAYI6C,4BAA4B7C,OAAA,CAAQ,2FAAR,CAZhC,EAaIsC,uBAAuBtC,OAAA,CAAQ,sFAAR,CAb3B;AAeA,cAAA;AACA,QAAMsB,gBAAgB,EAAtB;AACA2C,QAAWO,CAAAA,UAAWC,CAAAA,WAAtB,CAAkCR,MAAWS,CAAAA,aAAcC,CAAAA,YAA3D,EAAyErD,aAAzE,CAAA;AACA2C,QAAWO,CAAAA,UAAWI,CAAAA,GAAtB,CAA0BN,cAAeA,CAAAA,cAAzC,EAAyDD,YAAaA,CAAAA,YAAtE,EAAoFE,aAAcA,CAAAA,aAAlG,EAAiHH,WAAYA,CAAAA,WAA7H,EAA0IA,WAAYS,CAAAA,YAAtJ,EAAoKT,WAAYU,CAAAA,qBAAhL,CAAA;AACA,QAAMC,WAAW,IAAIZ,SAAUA,CAAAA,SAAd,EAAjB,EACMpB,oBAAoB,IAAImB,MAAOA,CAAAA,MAAX,EAD1B;AAuIAhE,SAAQ8E,CAAAA,mBAAR,GArIAA,QAA4B,CAACC,OAAD,EAAUC,UAAV,CAAsB;AAChD,UAAM,CAAE1E,YAAF,EAAgBD,OAAhB,CAAA,GAA4B2E,UAAlC;AACA3E,WAAQW,CAAAA,MAAR,GAAiB,CAAjB;AACAV,gBAAaG,CAAAA,OAAQO,CAAAA,MAArB,GAA8B,CAA9B;AACAV,gBAAaC,CAAAA,QAASS,CAAAA,MAAtB,GAA+B,CAA/B;AACAV,gBAAaE,CAAAA,GAAIQ,CAAAA,MAAjB,GAA0B,CAA1B;AACA,SAASiE,UAAT,GAAa,CAAb,EAAgBA,UAAhB,GAAoBF,OAAQG,CAAAA,YAAalE,CAAAA,MAAzC,EAAiDiE,UAAA,EAAjD,CAAsD;AACpD,UAAME,cAAcJ,OAAQG,CAAAA,YAAR,CAAqBD,UAArB,CAApB;AACA,UAA2B,SAA3B,KAAIE,WAAYC,CAAAA,MAAhB,CAAsC;AACCC,YAAAA,OAAZF,WAAYE,CAAAA,IAAAA;AAiBzC,cAAM,CAAE9E,QAAF,EAAYC,GAAZ,EAAiBC,OAAjB,CAAA,GAjBkDH,YAiBxD;AACA,YAAMS,cAAcN,OAAQO,CAAAA,MAA5B,EACMC,aAAaV,QAASS,CAAAA,MAAtBC,GAA+B,CADrC,EAEMC,SAAS,EAFf;AAGA,cAAMC,QAAQC,aAAckE,CAAAA,SAA5B,EACMC,OAAOV,QADb;AAEMtC,mBAAAA,GAAU8C,IAAKG,CAAAA,KAAfjD;AACNgD,YAAKE,CAAAA,CAAL,GAASJ,IAAKK,CAAAA,EAAd;AACAH,YAAKI,CAAAA,CAAL,GAASN,IAAKO,CAAAA,EAAd;AACAL,YAAKM,CAAAA,KAAL,GAAaR,IAAKS,CAAAA,EAAlB;AACAP,YAAKQ,CAAAA,MAAL,GAAcV,IAAKW,CAAAA,EAAnB;AACA,cAAMnF,SAASwE,IAAKY,CAAAA,SAApB;AACA9E,aAAMA,CAAAA,KAAN,CAAYoE,IAAZ,EAAkBrE,MAAlB,CAAA;AACIL,cAAJ,IACEU,iBAAkBA,CAAAA,iBAAlB,CAAoCL,MAApC,EAA4CL,MAA5C,CADF;AAGAM,aAAMkB,CAAAA,WAAN,CAAkBnB,MAAlB,EAA0BX,QAA1B,EAAoC,CAApC,EAAuCU,UAAvC,EAAmDR,OAAnD,EAA4DM,WAA5D,CAAA;AACMmF,cAAAA,GAAa3D,WAAQ/B,CAAAA,GAArB0F;AACN1F,WAAI2B,CAAAA,IAAJ,CACE+D,MAAWC,CAAAA,EADb,EAEED,MAAWE,CAAAA,EAFb,EAGEF,MAAWG,CAAAA,EAHb,EAIEH,MAAWI,CAAAA,EAJb,EAKEJ,MAAWK,CAAAA,EALb,EAMEL,MAAWM,CAAAA,EANb,EAOEN,MAAWO,CAAAA,EAPb,EAQEP,MAAWQ,CAAAA,EARb,CAAA;AAUM1D,cAAAA,GAAgBC,SAAUC,CAAAA,OAAQC,CAAAA,GAAlB,CAAsBC,iBAAkBA,CAAAA,iBAAxC,CAAhBJ;AACNA,cAAcjC,CAAAA,WAAd,GAA4BA,WAA5B;AACAiC,cAAcK,CAAAA,SAAd,GAA0B5C,OAAQO,CAAAA,MAAlC,GAA2CD,WAA3C;AACAiC,cAAcM,CAAAA,eAAd,GAAgCrC,UAAhC;AACA+B,cAAcO,CAAAA,aAAd,GAA8BhD,QAASS,CAAAA,MAAvC,GAAgD,CAAhD,GAAoDC,UAApD;AACA+B,cAAcQ,CAAAA,SAAd,GAA0B6B,IAAKlF,CAAAA,KAA/B;AACA6C,cAAcU,CAAAA,KAAd,GAAsB2B,IAAK3B,CAAAA,KAA3B;AACAV,cAAcT,CAAAA,OAAd,GAAwBA,WAAxB;AACAS,cAAc1C,CAAAA,YAAd,GArDwDA,YAqDxD;AArD+CD,eAsDvC8B,CAAAA,IAAR,CAAaa,MAAb,CAAA;AAvDwC,OAAtC,KAEO,KAA2B,MAA3B,KAAImC,WAAYC,CAAAA,MAAhB,IAA4D,QAA5D,KAAqCD,WAAYC,CAAAA,MAAjD;AACChF,YAUN,GAVwC,QAUxC,KAViB+E,WAAYC,CAAAA,MAU7B,EATMlF,WASN,GATkBiF,WAAYE,CAAAA,IAAKsB,CAAAA,IAAKzG,CAAAA,SASxC,EARMC,UAQN,GARcgF,WAAYE,CAAAA,IAAKlF,CAAAA,KAQ/B,EAPMyG,WAON,GAPazB,WAAYE,CAAAA,IAAKuB,CAAAA,IAO9B,EANIxG,IAMJ,IANgBwG,WAMhB,IALE3G,0BAAA,CAA2B2G,WAAK1G,CAAAA,SAAhC,EAA2CC,UAA3C,EAAkD,CAAA,CAAlD,EAAwDE,OAAxD,EAAiEC,YAAjE,CAKF,EAHIsG,WAGJ,KAFE1G,WAAUQ,CAAAA,eAAV,CAA0BR,WAAUQ,CAAAA,eAAgBM,CAAAA,MAApD,GAA6D,CAA7D,CAAgEF,CAAAA,KAElE,GAF0E8F,WAAK1G,CAAAA,SAAUQ,CAAAA,eAEzF,GAAAT,0BAAA,CAA2BC,WAA3B,EAAsCC,UAAtC,EAA6CC,IAA7C,EAAuDC,OAAvD,EAAgEC,YAAhE,CAAA;AAXK;AAJ6C;AANN,GAqIlD;AACAN,SAAQoB,CAAAA,aAAR,GAAwBA,aAAxB;AAhKgJ,CAAhJ;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/utils/buildContextBatches.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$utils$buildContextBatches\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar Matrix = require('../../../../maths/matrix/Matrix.js');\nvar Rectangle = require('../../../../maths/shapes/Rectangle.js');\nvar buildUvs = require('../../../../rendering/renderers/shared/geometry/utils/buildUvs.js');\nvar transformVertices = require('../../../../rendering/renderers/shared/geometry/utils/transformVertices.js');\nvar Texture = require('../../../../rendering/renderers/shared/texture/Texture.js');\nvar PoolGroup = require('../../../../utils/pool/PoolGroup.js');\nvar BatchableGraphics = require('../BatchableGraphics.js');\nvar buildCircle = require('../buildCommands/buildCircle.js');\nvar buildLine = require('../buildCommands/buildLine.js');\nvar buildPixelLine = require('../buildCommands/buildPixelLine.js');\nvar buildPolygon = require('../buildCommands/buildPolygon.js');\nvar buildRectangle = require('../buildCommands/buildRectangle.js');\nvar buildTriangle = require('../buildCommands/buildTriangle.js');\nvar generateTextureFillMatrix = require('./generateTextureFillMatrix.js');\nvar triangulateWithHoles = require('./triangulateWithHoles.js');\n\n\"use strict\";\nconst shapeBuilders = {};\nExtensions.extensions.handleByMap(Extensions.ExtensionType.ShapeBuilder, shapeBuilders);\nExtensions.extensions.add(buildRectangle.buildRectangle, buildPolygon.buildPolygon, buildTriangle.buildTriangle, buildCircle.buildCircle, buildCircle.buildEllipse, buildCircle.buildRoundedRectangle);\nconst tempRect = new Rectangle.Rectangle();\nconst tempTextureMatrix = new Matrix.Matrix();\nfunction buildContextBatches(context, gpuContext) {\n  const { geometryData, batches } = gpuContext;\n  batches.length = 0;\n  geometryData.indices.length = 0;\n  geometryData.vertices.length = 0;\n  geometryData.uvs.length = 0;\n  for (let i = 0; i < context.instructions.length; i++) {\n    const instruction = context.instructions[i];\n    if (instruction.action === \"texture\") {\n      addTextureToGeometryData(instruction.data, batches, geometryData);\n    } else if (instruction.action === \"fill\" || instruction.action === \"stroke\") {\n      const isStroke = instruction.action === \"stroke\";\n      const shapePath = instruction.data.path.shapePath;\n      const style = instruction.data.style;\n      const hole = instruction.data.hole;\n      if (isStroke && hole) {\n        addShapePathToGeometryData(hole.shapePath, style, true, batches, geometryData);\n      }\n      if (hole) {\n        shapePath.shapePrimitives[shapePath.shapePrimitives.length - 1].holes = hole.shapePath.shapePrimitives;\n      }\n      addShapePathToGeometryData(shapePath, style, isStroke, batches, geometryData);\n    }\n  }\n}\nfunction addTextureToGeometryData(data, batches, geometryData) {\n  const { vertices, uvs, indices } = geometryData;\n  const indexOffset = indices.length;\n  const vertOffset = vertices.length / 2;\n  const points = [];\n  const build = shapeBuilders.rectangle;\n  const rect = tempRect;\n  const texture = data.image;\n  rect.x = data.dx;\n  rect.y = data.dy;\n  rect.width = data.dw;\n  rect.height = data.dh;\n  const matrix = data.transform;\n  build.build(rect, points);\n  if (matrix) {\n    transformVertices.transformVertices(points, matrix);\n  }\n  build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n  const textureUvs = texture.uvs;\n  uvs.push(\n    textureUvs.x0,\n    textureUvs.y0,\n    textureUvs.x1,\n    textureUvs.y1,\n    textureUvs.x3,\n    textureUvs.y3,\n    textureUvs.x2,\n    textureUvs.y2\n  );\n  const graphicsBatch = PoolGroup.BigPool.get(BatchableGraphics.BatchableGraphics);\n  graphicsBatch.indexOffset = indexOffset;\n  graphicsBatch.indexSize = indices.length - indexOffset;\n  graphicsBatch.attributeOffset = vertOffset;\n  graphicsBatch.attributeSize = vertices.length / 2 - vertOffset;\n  graphicsBatch.baseColor = data.style;\n  graphicsBatch.alpha = data.alpha;\n  graphicsBatch.texture = texture;\n  graphicsBatch.geometryData = geometryData;\n  batches.push(graphicsBatch);\n}\nfunction addShapePathToGeometryData(shapePath, style, isStroke, batches, geometryData) {\n  const { vertices, uvs, indices } = geometryData;\n  shapePath.shapePrimitives.forEach(({ shape, transform: matrix, holes }) => {\n    const indexOffset = indices.length;\n    const vertOffset = vertices.length / 2;\n    const points = [];\n    const build = shapeBuilders[shape.type];\n    let topology = \"triangle-list\";\n    build.build(shape, points);\n    if (matrix) {\n      transformVertices.transformVertices(points, matrix);\n    }\n    if (!isStroke) {\n      if (holes) {\n        const holeIndices = [];\n        const otherPoints = points.slice();\n        const holeArrays = getHoleArrays(holes);\n        holeArrays.forEach((holePoints) => {\n          holeIndices.push(otherPoints.length / 2);\n          otherPoints.push(...holePoints);\n        });\n        triangulateWithHoles.triangulateWithHoles(otherPoints, holeIndices, vertices, 2, vertOffset, indices, indexOffset);\n      } else {\n        build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n      }\n    } else {\n      const close = shape.closePath ?? true;\n      const lineStyle = style;\n      if (!lineStyle.pixelLine) {\n        buildLine.buildLine(points, lineStyle, false, close, vertices, indices);\n      } else {\n        buildPixelLine.buildPixelLine(points, close, vertices, indices);\n        topology = \"line-list\";\n      }\n    }\n    const uvsOffset = uvs.length / 2;\n    const texture = style.texture;\n    if (texture !== Texture.Texture.WHITE) {\n      const textureMatrix = generateTextureFillMatrix.generateTextureMatrix(tempTextureMatrix, style, shape, matrix);\n      buildUvs.buildUvs(vertices, 2, vertOffset, uvs, uvsOffset, 2, vertices.length / 2 - vertOffset, textureMatrix);\n    } else {\n      buildUvs.buildSimpleUvs(uvs, uvsOffset, 2, vertices.length / 2 - vertOffset);\n    }\n    const graphicsBatch = PoolGroup.BigPool.get(BatchableGraphics.BatchableGraphics);\n    graphicsBatch.indexOffset = indexOffset;\n    graphicsBatch.indexSize = indices.length - indexOffset;\n    graphicsBatch.attributeOffset = vertOffset;\n    graphicsBatch.attributeSize = vertices.length / 2 - vertOffset;\n    graphicsBatch.baseColor = style.color;\n    graphicsBatch.alpha = style.alpha;\n    graphicsBatch.texture = texture;\n    graphicsBatch.geometryData = geometryData;\n    graphicsBatch.topology = topology;\n    batches.push(graphicsBatch);\n  });\n}\nfunction getHoleArrays(holePrimitives) {\n  const holeArrays = [];\n  for (let k = 0; k < holePrimitives.length; k++) {\n    const holePrimitive = holePrimitives[k].shape;\n    const holePoints = [];\n    const holeBuilder = shapeBuilders[holePrimitive.type];\n    holeBuilder.build(holePrimitive, holePoints);\n    holeArrays.push(holePoints);\n  }\n  return holeArrays;\n}\n\nexports.buildContextBatches = buildContextBatches;\nexports.shapeBuilders = shapeBuilders;\n//# sourceMappingURL=buildContextBatches.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","addShapePathToGeometryData","shapePath","style","isStroke","batches","geometryData","vertices","uvs","indices","shapePrimitives","forEach","shape","matrix","holes","indexOffset","length","vertOffset","points","build","shapeBuilders","type","topology","transformVertices","close","closePath","pixelLine","buildPixelLine","buildLine","holeIndices","otherPoints","slice","getHoleArrays","holeArrays","holePoints","push","triangulateWithHoles","triangulate","uvsOffset","texture","Texture","WHITE","textureMatrix","generateTextureFillMatrix","generateTextureMatrix","tempTextureMatrix","buildUvs","buildSimpleUvs","graphicsBatch","PoolGroup","BigPool","get","BatchableGraphics","indexSize","attributeOffset","attributeSize","baseColor","color","alpha","holePrimitives","k","holePrimitive","holeBuilder","Extensions","Matrix","Rectangle","buildCircle","buildPolygon","buildRectangle","buildTriangle","extensions","handleByMap","ExtensionType","ShapeBuilder","add","buildEllipse","buildRoundedRectangle","tempRect","buildContextBatches","context","gpuContext","i","instructions","instruction","action","data","rectangle","rect","image","x","dx","y","dy","width","dw","height","dh","transform","textureUvs","x0","y0","x1","y1","x3","y3","x2","y2","path","hole"]
}
