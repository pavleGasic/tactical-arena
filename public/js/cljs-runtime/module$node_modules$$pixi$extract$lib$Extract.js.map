{
"version":3,
"file":"module$node_modules$$pixi$extract$lib$Extract.js",
"lineCount":110,
"mappings":"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",
"sources":["node_modules/@pixi/extract/lib/Extract.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$extract$lib$Extract\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nconst TEMP_RECT = new core.Rectangle(), BYTES_PER_PIXEL = 4, _Extract = class _Extract2 {\n  /**\n   * @param renderer - A reference to the current renderer\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this._rendererPremultipliedAlpha = !1;\n  }\n  contextChange() {\n    const attributes = this.renderer?.gl.getContextAttributes();\n    this._rendererPremultipliedAlpha = !!(attributes && attributes.alpha && attributes.premultipliedAlpha);\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @param frame - The frame the extraction is restricted to.\n   * @returns - HTML Image of the target\n   */\n  async image(target, format, quality, frame) {\n    const image = new Image();\n    return image.src = await this.base64(target, format, quality, frame), image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   *  `Extract.canvas` and then running toDataURL on that.\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @param frame - The frame the extraction is restricted to.\n   * @returns - A base64 encoded string of the texture.\n   */\n  async base64(target, format, quality, frame) {\n    const canvas = this.canvas(target, frame);\n    if (canvas.toBlob !== void 0)\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result), reader.onerror = reject, reader.readAsDataURL(blob);\n        }, format, quality);\n      });\n    if (canvas.toDataURL !== void 0)\n      return canvas.toDataURL(format, quality);\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: format, quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result), reader.onerror = reject, reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param frame - The frame the extraction is restricted to.\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(target, frame) {\n    const { pixels, width, height, flipY, premultipliedAlpha } = this._rawPixels(target, frame);\n    flipY && _Extract2._flipY(pixels, width, height), premultipliedAlpha && _Extract2._unpremultiplyAlpha(pixels);\n    const canvasBuffer = new core.utils.CanvasRenderTarget(width, height, 1), imageData = new ImageData(new Uint8ClampedArray(pixels.buffer), width, height);\n    return canvasBuffer.context.putImageData(imageData, 0, 0), canvasBuffer.canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param frame - The frame the extraction is restricted to.\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(target, frame) {\n    const { pixels, width, height, flipY, premultipliedAlpha } = this._rawPixels(target, frame);\n    return flipY && _Extract2._flipY(pixels, width, height), premultipliedAlpha && _Extract2._unpremultiplyAlpha(pixels), pixels;\n  }\n  _rawPixels(target, frame) {\n    const renderer = this.renderer;\n    if (!renderer)\n      throw new Error(\"The Extract has already been destroyed\");\n    let resolution, flipY = !1, premultipliedAlpha = !1, renderTexture, generated = !1;\n    target && (target instanceof core.RenderTexture ? renderTexture = target : (renderTexture = renderer.generateTexture(target, {\n      region: frame,\n      resolution: renderer.resolution,\n      multisample: renderer.multisample\n    }), generated = !0, frame && (TEMP_RECT.width = frame.width, TEMP_RECT.height = frame.height, frame = TEMP_RECT)));\n    const gl = renderer.gl;\n    if (renderTexture) {\n      if (resolution = renderTexture.baseTexture.resolution, frame = frame ?? renderTexture.frame, flipY = !1, premultipliedAlpha = renderTexture.baseTexture.alphaMode > 0 && renderTexture.baseTexture.format === core.FORMATS.RGBA, !generated) {\n        renderer.renderTexture.bind(renderTexture);\n        const fbo = renderTexture.framebuffer.glFramebuffers[renderer.CONTEXT_UID];\n        fbo.blitFramebuffer && renderer.framebuffer.bind(fbo.blitFramebuffer);\n      }\n    } else\n      resolution = renderer.resolution, frame || (frame = TEMP_RECT, frame.width = renderer.width / resolution, frame.height = renderer.height / resolution), flipY = !0, premultipliedAlpha = this._rendererPremultipliedAlpha, renderer.renderTexture.bind();\n    const width = Math.max(Math.round(frame.width * resolution), 1), height = Math.max(Math.round(frame.height * resolution), 1), pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    return gl.readPixels(\n      Math.round(frame.x * resolution),\n      Math.round(frame.y * resolution),\n      width,\n      height,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      pixels\n    ), generated && renderTexture?.destroy(!0), { pixels, width, height, flipY, premultipliedAlpha };\n  }\n  /** Destroys the extract. */\n  destroy() {\n    this.renderer = null;\n  }\n  static _flipY(pixels, width, height) {\n    const w = width << 2, h = height >> 1, temp = new Uint8Array(w);\n    for (let y = 0; y < h; y++) {\n      const t = y * w, b = (height - y - 1) * w;\n      temp.set(pixels.subarray(t, t + w)), pixels.copyWithin(t, b, b + w), pixels.set(temp, b);\n    }\n  }\n  static _unpremultiplyAlpha(pixels) {\n    pixels instanceof Uint8ClampedArray && (pixels = new Uint8Array(pixels.buffer));\n    const n = pixels.length;\n    for (let i = 0; i < n; i += 4) {\n      const alpha = pixels[i + 3];\n      if (alpha !== 0) {\n        const a = 255.001 / alpha;\n        pixels[i] = pixels[i] * a + 0.5, pixels[i + 1] = pixels[i + 1] * a + 0.5, pixels[i + 2] = pixels[i + 2] * a + 0.5;\n      }\n    }\n  }\n};\n_Extract.extension = {\n  name: \"extract\",\n  type: core.ExtensionType.RendererSystem\n};\nlet Extract = _Extract;\ncore.extensions.add(Extract);\nexports.Extract = Extract;\n//# sourceMappingURL=Extract.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","TEMP_RECT","Rectangle","_Extract","constructor","renderer","_rendererPremultipliedAlpha","contextChange","attributes","gl","getContextAttributes","alpha","premultipliedAlpha","image","target","format","quality","frame","Image","src","base64","canvas","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","reader.onload","result","onerror","readAsDataURL","Error","toDataURL","convertToBlob","type","pixels","width","height","flipY","_rawPixels","_Extract2","_flipY","_unpremultiplyAlpha","canvasBuffer","utils","CanvasRenderTarget","imageData","ImageData","Uint8ClampedArray","buffer","context","putImageData","renderTexture","generated","RenderTexture","generateTexture","region","resolution","multisample","baseTexture","alphaMode","FORMATS","RGBA","bind","fbo","framebuffer","glFramebuffers","CONTEXT_UID","blitFramebuffer","Math","max","round","Uint8Array","BYTES_PER_PIXEL","readPixels","x","y","UNSIGNED_BYTE","destroy","w","h","temp","t","b","set","subarray","copyWithin","n","length","i","a","extension","name","ExtensionType","RendererSystem","extensions","add","Extract"]
}
