{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$BaseTexture.js",
"lineCount":152,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/BaseTexture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$BaseTexture\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), settings = require(\"@pixi/settings\"), utils = require(\"@pixi/utils\"), autoDetectResource = require(\"./resources/autoDetectResource.js\"), BufferResource = require(\"./resources/BufferResource.js\"), Resource = require(\"./resources/Resource.js\");\nconst defaultBufferOptions = {\n  scaleMode: constants.SCALE_MODES.NEAREST,\n  alphaMode: constants.ALPHA_MODES.NPM\n}, _BaseTexture = class _BaseTexture2 extends utils.EventEmitter {\n  /**\n   * @param {PIXI.Resource|PIXI.ImageSource|string} [resource=null] -\n   *        The current resource to use, for things that aren't Resource objects, will be converted\n   *        into a Resource.\n   * @param options - Collection of options, default options inherited from {@link PIXI.BaseTexture.defaultOptions}.\n   * @param {PIXI.MIPMAP_MODES} [options.mipmap] - If mipmapping is enabled for texture\n   * @param {number} [options.anisotropicLevel] - Anisotropic filtering level of texture\n   * @param {PIXI.WRAP_MODES} [options.wrapMode] - Wrap mode for textures\n   * @param {PIXI.SCALE_MODES} [options.scaleMode] - Default scale mode, linear, nearest\n   * @param {PIXI.FORMATS} [options.format] - GL format type\n   * @param {PIXI.TYPES} [options.type] - GL data type\n   * @param {PIXI.TARGETS} [options.target] - GL texture target\n   * @param {PIXI.ALPHA_MODES} [options.alphaMode] - Pre multiply the image alpha\n   * @param {number} [options.width=0] - Width of the texture\n   * @param {number} [options.height=0] - Height of the texture\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - Resolution of the base texture\n   * @param {object} [options.resourceOptions] - Optional resource options,\n   *        see {@link PIXI.autoDetectResource autoDetectResource}\n   */\n  constructor(resource = null, options = null) {\n    super(), options = Object.assign({}, _BaseTexture2.defaultOptions, options);\n    const {\n      alphaMode,\n      mipmap,\n      anisotropicLevel,\n      scaleMode,\n      width,\n      height,\n      wrapMode,\n      format,\n      type,\n      target,\n      resolution,\n      resourceOptions\n    } = options;\n    resource && !(resource instanceof Resource.Resource) && (resource = autoDetectResource.autoDetectResource(resource, resourceOptions), resource.internal = !0), this.resolution = resolution || settings.settings.RESOLUTION, this.width = Math.round((width || 0) * this.resolution) / this.resolution, this.height = Math.round((height || 0) * this.resolution) / this.resolution, this._mipmap = mipmap, this.anisotropicLevel = anisotropicLevel, this._wrapMode = wrapMode, this._scaleMode = scaleMode, this.format = format, this.type = type, this.target = target, this.alphaMode = alphaMode, this.uid = utils.uid(), this.touched = 0, this.isPowerOfTwo = !1, this._refreshPOT(), this._glTextures = {}, this.dirtyId = 0, this.dirtyStyleId = 0, this.cacheId = null, this.valid = width > 0 && height > 0, this.textureCacheIds = [], this.destroyed = !1, this.resource = null, this._batchEnabled = 0, this._batchLocation = 0, this.parentTextureArray = null, this.setResource(resource);\n  }\n  /**\n   * Pixel width of the source of this texture\n   * @readonly\n   */\n  get realWidth() {\n    return Math.round(this.width * this.resolution);\n  }\n  /**\n   * Pixel height of the source of this texture\n   * @readonly\n   */\n  get realHeight() {\n    return Math.round(this.height * this.resolution);\n  }\n  /**\n   * Mipmap mode of the texture, affects downscaled images\n   * @default PIXI.MIPMAP_MODES.POW2\n   */\n  get mipmap() {\n    return this._mipmap;\n  }\n  set mipmap(value) {\n    this._mipmap !== value && (this._mipmap = value, this.dirtyStyleId++);\n  }\n  /**\n   * The scale mode to apply when scaling this texture\n   * @default PIXI.SCALE_MODES.LINEAR\n   */\n  get scaleMode() {\n    return this._scaleMode;\n  }\n  set scaleMode(value) {\n    this._scaleMode !== value && (this._scaleMode = value, this.dirtyStyleId++);\n  }\n  /**\n   * How the texture wraps\n   * @default PIXI.WRAP_MODES.CLAMP\n   */\n  get wrapMode() {\n    return this._wrapMode;\n  }\n  set wrapMode(value) {\n    this._wrapMode !== value && (this._wrapMode = value, this.dirtyStyleId++);\n  }\n  /**\n   * Changes style options of BaseTexture\n   * @param scaleMode - Pixi scalemode\n   * @param mipmap - enable mipmaps\n   * @returns - this\n   */\n  setStyle(scaleMode, mipmap) {\n    let dirty;\n    return scaleMode !== void 0 && scaleMode !== this.scaleMode && (this.scaleMode = scaleMode, dirty = !0), mipmap !== void 0 && mipmap !== this.mipmap && (this.mipmap = mipmap, dirty = !0), dirty && this.dirtyStyleId++, this;\n  }\n  /**\n   * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\n   * @param desiredWidth - Desired visual width\n   * @param desiredHeight - Desired visual height\n   * @param resolution - Optionally set resolution\n   * @returns - this\n   */\n  setSize(desiredWidth, desiredHeight, resolution) {\n    return resolution = resolution || this.resolution, this.setRealSize(desiredWidth * resolution, desiredHeight * resolution, resolution);\n  }\n  /**\n   * Sets real size of baseTexture, preserves current resolution.\n   * @param realWidth - Full rendered width\n   * @param realHeight - Full rendered height\n   * @param resolution - Optionally set resolution\n   * @returns - this\n   */\n  setRealSize(realWidth, realHeight, resolution) {\n    return this.resolution = resolution || this.resolution, this.width = Math.round(realWidth) / this.resolution, this.height = Math.round(realHeight) / this.resolution, this._refreshPOT(), this.update(), this;\n  }\n  /**\n   * Refresh check for isPowerOfTwo texture based on size\n   * @private\n   */\n  _refreshPOT() {\n    this.isPowerOfTwo = utils.isPow2(this.realWidth) && utils.isPow2(this.realHeight);\n  }\n  /**\n   * Changes resolution\n   * @param resolution - res\n   * @returns - this\n   */\n  setResolution(resolution) {\n    const oldResolution = this.resolution;\n    return oldResolution === resolution ? this : (this.resolution = resolution, this.valid && (this.width = Math.round(this.width * oldResolution) / resolution, this.height = Math.round(this.height * oldResolution) / resolution, this.emit(\"update\", this)), this._refreshPOT(), this);\n  }\n  /**\n   * Sets the resource if it wasn't set. Throws error if resource already present\n   * @param resource - that is managing this BaseTexture\n   * @returns - this\n   */\n  setResource(resource) {\n    if (this.resource === resource)\n      return this;\n    if (this.resource)\n      throw new Error(\"Resource can be set only once\");\n    return resource.bind(this), this.resource = resource, this;\n  }\n  /** Invalidates the object. Texture becomes valid if width and height are greater than zero. */\n  update() {\n    this.valid ? (this.dirtyId++, this.dirtyStyleId++, this.emit(\"update\", this)) : this.width > 0 && this.height > 0 && (this.valid = !0, this.emit(\"loaded\", this), this.emit(\"update\", this));\n  }\n  /**\n   * Handle errors with resources.\n   * @private\n   * @param event - Error event emitted.\n   */\n  onError(event) {\n    this.emit(\"error\", this, event);\n  }\n  /**\n   * Destroys this base texture.\n   * The method stops if resource doesn't want this texture to be destroyed.\n   * Removes texture from all caches.\n   * @fires PIXI.BaseTexture#destroyed\n   */\n  destroy() {\n    this.resource && (this.resource.unbind(this), this.resource.internal && this.resource.destroy(), this.resource = null), this.cacheId && (delete utils.BaseTextureCache[this.cacheId], delete utils.TextureCache[this.cacheId], this.cacheId = null), this.valid = !1, this.dispose(), _BaseTexture2.removeFromCache(this), this.textureCacheIds = null, this.destroyed = !0, this.emit(\"destroyed\", this), this.removeAllListeners();\n  }\n  /**\n   * Frees the texture from WebGL memory without destroying this texture object.\n   * This means you can still use the texture later which will upload it to GPU\n   * memory again.\n   * @fires PIXI.BaseTexture#dispose\n   */\n  dispose() {\n    this.emit(\"dispose\", this);\n  }\n  /** Utility function for BaseTexture|Texture cast. */\n  castToBaseTexture() {\n    return this;\n  }\n  /**\n   * Helper function that creates a base texture based on the source you provide.\n   * The source can be - image url, image element, canvas element. If the\n   * source is an image url or an image element and not in the base texture\n   * cache, it will be created and loaded.\n   * @static\n   * @param {PIXI.ImageSource|string|string[]} source - The\n   *        source to create base texture from.\n   * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n   * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n   * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n   * @returns {PIXI.BaseTexture} The new base texture.\n   */\n  static from(source, options, strict = settings.settings.STRICT_TEXTURE_CACHE) {\n    const isFrame = typeof source == \"string\";\n    let cacheId = null;\n    if (isFrame)\n      cacheId = source;\n    else {\n      if (!source._pixiId) {\n        const prefix = options?.pixiIdPrefix || \"pixiid\";\n        source._pixiId = `${prefix}_${utils.uid()}`;\n      }\n      cacheId = source._pixiId;\n    }\n    let baseTexture = utils.BaseTextureCache[cacheId];\n    if (isFrame && strict && !baseTexture)\n      throw new Error(`The cacheId \"${cacheId}\" does not exist in BaseTextureCache.`);\n    return baseTexture || (baseTexture = new _BaseTexture2(source, options), baseTexture.cacheId = cacheId, _BaseTexture2.addToCache(baseTexture, cacheId)), baseTexture;\n  }\n  /**\n   * Create a new Texture with a BufferResource from a typed array.\n   * @param buffer - The optional array to use. If no data is provided, a new Float32Array is created.\n   * @param width - Width of the resource\n   * @param height - Height of the resource\n   * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n   *        Default properties are different from the constructor's defaults.\n   * @param {PIXI.FORMATS} [options.format] - The format is not given, the type is inferred from the\n   *        type of the buffer: `RGBA` if Float32Array, Int8Array, Uint8Array, or Uint8ClampedArray,\n   *        otherwise `RGBA_INTEGER`.\n   * @param {PIXI.TYPES} [options.type] - The type is not given, the type is inferred from the\n   *        type of the buffer. Maps Float32Array to `FLOAT`, Int32Array to `INT`, Uint32Array to\n   *        `UNSIGNED_INT`, Int16Array to `SHORT`, Uint16Array to `UNSIGNED_SHORT`, Int8Array to `BYTE`,\n   *        Uint8Array/Uint8ClampedArray to `UNSIGNED_BYTE`.\n   * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.NPM]\n   * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.SCALE_MODES.NEAREST]\n   * @returns - The resulting new BaseTexture\n   */\n  static fromBuffer(buffer, width, height, options) {\n    buffer = buffer || new Float32Array(width * height * 4);\n    const resource = new BufferResource.BufferResource(buffer, { width, height, ...options?.resourceOptions });\n    let format, type;\n    return buffer instanceof Float32Array ? (format = constants.FORMATS.RGBA, type = constants.TYPES.FLOAT) : buffer instanceof Int32Array ? (format = constants.FORMATS.RGBA_INTEGER, type = constants.TYPES.INT) : buffer instanceof Uint32Array ? (format = constants.FORMATS.RGBA_INTEGER, type = constants.TYPES.UNSIGNED_INT) : buffer instanceof Int16Array ? (format = constants.FORMATS.RGBA_INTEGER, type = constants.TYPES.SHORT) : buffer instanceof Uint16Array ? (format = constants.FORMATS.RGBA_INTEGER, type = constants.TYPES.UNSIGNED_SHORT) : buffer instanceof Int8Array ? (format = constants.FORMATS.RGBA, type = constants.TYPES.BYTE) : (format = constants.FORMATS.RGBA, type = constants.TYPES.UNSIGNED_BYTE), resource.internal = !0, new _BaseTexture2(resource, Object.assign({}, defaultBufferOptions, { type, format }, options));\n  }\n  /**\n   * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n   * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n   * @param {string} id - The id that the BaseTexture will be stored against.\n   */\n  static addToCache(baseTexture, id) {\n    id && (baseTexture.textureCacheIds.includes(id) || baseTexture.textureCacheIds.push(id), utils.BaseTextureCache[id] && utils.BaseTextureCache[id] !== baseTexture && console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`), utils.BaseTextureCache[id] = baseTexture);\n  }\n  /**\n   * Remove a BaseTexture from the global BaseTextureCache.\n   * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n   * @returns {PIXI.BaseTexture|null} The BaseTexture that was removed.\n   */\n  static removeFromCache(baseTexture) {\n    if (typeof baseTexture == \"string\") {\n      const baseTextureFromCache = utils.BaseTextureCache[baseTexture];\n      if (baseTextureFromCache) {\n        const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n        return index > -1 && baseTextureFromCache.textureCacheIds.splice(index, 1), delete utils.BaseTextureCache[baseTexture], baseTextureFromCache;\n      }\n    } else if (baseTexture?.textureCacheIds) {\n      for (let i = 0; i < baseTexture.textureCacheIds.length; ++i)\n        delete utils.BaseTextureCache[baseTexture.textureCacheIds[i]];\n      return baseTexture.textureCacheIds.length = 0, baseTexture;\n    }\n    return null;\n  }\n};\n_BaseTexture.defaultOptions = {\n  /**\n   * If mipmapping is enabled for texture.\n   * @type {PIXI.MIPMAP_MODES}\n   * @default PIXI.MIPMAP_MODES.POW2\n   */\n  mipmap: constants.MIPMAP_MODES.POW2,\n  /** Anisotropic filtering level of texture */\n  anisotropicLevel: 0,\n  /**\n   * Default scale mode, linear, nearest.\n   * @type {PIXI.SCALE_MODES}\n   * @default PIXI.SCALE_MODES.LINEAR\n   */\n  scaleMode: constants.SCALE_MODES.LINEAR,\n  /**\n   * Wrap mode for textures.\n   * @type {PIXI.WRAP_MODES}\n   * @default PIXI.WRAP_MODES.CLAMP\n   */\n  wrapMode: constants.WRAP_MODES.CLAMP,\n  /**\n   * Pre multiply the image alpha\n   * @type {PIXI.ALPHA_MODES}\n   * @default PIXI.ALPHA_MODES.UNPACK\n   */\n  alphaMode: constants.ALPHA_MODES.UNPACK,\n  /**\n   * GL texture target\n   * @type {PIXI.TARGETS}\n   * @default PIXI.TARGETS.TEXTURE_2D\n   */\n  target: constants.TARGETS.TEXTURE_2D,\n  /**\n   * GL format type\n   * @type {PIXI.FORMATS}\n   * @default PIXI.FORMATS.RGBA\n   */\n  format: constants.FORMATS.RGBA,\n  /**\n   * GL data type\n   * @type {PIXI.TYPES}\n   * @default PIXI.TYPES.UNSIGNED_BYTE\n   */\n  type: constants.TYPES.UNSIGNED_BYTE\n}, /** Global number of the texture batch, used by multi-texture renderers. */\n_BaseTexture._globalBatch = 0;\nlet BaseTexture = _BaseTexture;\nexports.BaseTexture = BaseTexture;\n//# sourceMappingURL=BaseTexture.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","settings","utils","autoDetectResource","BufferResource","Resource","defaultBufferOptions","scaleMode","SCALE_MODES","NEAREST","alphaMode","ALPHA_MODES","NPM","_BaseTexture","EventEmitter","constructor","resource","options","Object","assign","_BaseTexture2","defaultOptions","mipmap","anisotropicLevel","width","height","wrapMode","format","type","target","resolution","resourceOptions","internal","RESOLUTION","Math","round","_mipmap","_wrapMode","_scaleMode","uid","touched","isPowerOfTwo","_refreshPOT","_glTextures","dirtyStyleId","dirtyId","cacheId","valid","textureCacheIds","destroyed","_batchLocation","_batchEnabled","parentTextureArray","setResource","value","setStyle","dirty","setSize","desiredWidth","desiredHeight","setRealSize","realWidth","realHeight","update","isPow2","setResolution","oldResolution","emit","Error","bind","onError","event","destroy","unbind","BaseTextureCache","TextureCache","dispose","removeFromCache","removeAllListeners","castToBaseTexture","from","source","strict","STRICT_TEXTURE_CACHE","isFrame","_pixiId","pixiIdPrefix","baseTexture","addToCache","fromBuffer","buffer","Float32Array","FORMATS","RGBA","TYPES","FLOAT","Int32Array","RGBA_INTEGER","INT","Uint32Array","UNSIGNED_INT","Int16Array","SHORT","Uint16Array","UNSIGNED_SHORT","Int8Array","BYTE","UNSIGNED_BYTE","id","includes","push","console","warn","baseTextureFromCache","index","indexOf","splice","i","length","MIPMAP_MODES","POW2","LINEAR","WRAP_MODES","CLAMP","UNPACK","TARGETS","TEXTURE_2D","_globalBatch","BaseTexture"]
}
