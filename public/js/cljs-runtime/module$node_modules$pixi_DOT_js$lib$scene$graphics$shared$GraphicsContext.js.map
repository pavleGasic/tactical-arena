{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsContext.js",
"lineCount":349,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/GraphicsContext.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsContext\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar Color = require('../../../color/Color.js');\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar Point = require('../../../maths/point/Point.js');\nvar Texture = require('../../../rendering/renderers/shared/texture/Texture.js');\nvar uid = require('../../../utils/data/uid.js');\nvar deprecation = require('../../../utils/logging/deprecation.js');\nvar Bounds = require('../../container/bounds/Bounds.js');\nvar GraphicsPath = require('./path/GraphicsPath.js');\nvar SVGParser = require('./svg/SVGParser.js');\nvar convertFillInputToFillStyle = require('./utils/convertFillInputToFillStyle.js');\n\n\"use strict\";\nconst tmpPoint = new Point.Point();\nconst tempMatrix = new Matrix.Matrix();\nconst _GraphicsContext = class _GraphicsContext extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** unique id for this graphics context */\n    this.uid = uid.uid(\"graphicsContext\");\n    this.dirty = true;\n    this.batchMode = \"auto\";\n    this.instructions = [];\n    this._activePath = new GraphicsPath.GraphicsPath();\n    this._transform = new Matrix.Matrix();\n    this._fillStyle = { ..._GraphicsContext.defaultFillStyle };\n    this._strokeStyle = { ..._GraphicsContext.defaultStrokeStyle };\n    this._stateStack = [];\n    this._tick = 0;\n    this._bounds = new Bounds.Bounds();\n    this._boundsDirty = true;\n  }\n  /**\n   * Creates a new GraphicsContext object that is a clone of this instance, copying all properties,\n   * including the current drawing state, transformations, styles, and instructions.\n   * @returns A new GraphicsContext instance with the same properties and state as this one.\n   */\n  clone() {\n    const clone = new _GraphicsContext();\n    clone.batchMode = this.batchMode;\n    clone.instructions = this.instructions.slice();\n    clone._activePath = this._activePath.clone();\n    clone._transform = this._transform.clone();\n    clone._fillStyle = { ...this._fillStyle };\n    clone._strokeStyle = { ...this._strokeStyle };\n    clone._stateStack = this._stateStack.slice();\n    clone._bounds = this._bounds.clone();\n    clone._boundsDirty = true;\n    return clone;\n  }\n  /**\n   * The current fill style of the graphics context. This can be a color, gradient, pattern, or a more complex style defined by a FillStyle object.\n   */\n  get fillStyle() {\n    return this._fillStyle;\n  }\n  set fillStyle(value) {\n    this._fillStyle = convertFillInputToFillStyle.toFillStyle(value, _GraphicsContext.defaultFillStyle);\n  }\n  /**\n   * The current stroke style of the graphics context. Similar to fill styles, stroke styles can encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   */\n  get strokeStyle() {\n    return this._strokeStyle;\n  }\n  set strokeStyle(value) {\n    this._strokeStyle = convertFillInputToFillStyle.toStrokeStyle(value, _GraphicsContext.defaultStrokeStyle);\n  }\n  /**\n   * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n   * pattern, or a more complex style defined by a FillStyle object.\n   * @param style - The fill style to apply. This can be a simple color, a gradient or pattern object,\n   *                or a FillStyle or ConvertedFillStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setFillStyle(style) {\n    this._fillStyle = convertFillInputToFillStyle.toFillStyle(style, _GraphicsContext.defaultFillStyle);\n    return this;\n  }\n  /**\n   * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n   * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   * @param style - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n   *                or a StrokeStyle or ConvertedStrokeStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setStrokeStyle(style) {\n    this._strokeStyle = convertFillInputToFillStyle.toFillStyle(style, _GraphicsContext.defaultStrokeStyle);\n    return this;\n  }\n  texture(texture, tint, dx, dy, dw, dh) {\n    this.instructions.push({\n      action: \"texture\",\n      data: {\n        image: texture,\n        dx: dx || 0,\n        dy: dy || 0,\n        dw: dw || texture.frame.width,\n        dh: dh || texture.frame.height,\n        transform: this._transform.clone(),\n        alpha: this._fillStyle.alpha,\n        style: tint ? Color.Color.shared.setValue(tint).toNumber() : 16777215\n      }\n    });\n    this.onUpdate();\n    return this;\n  }\n  /**\n   * Resets the current path. Any previous path and its commands are discarded and a new path is\n   * started. This is typically called before beginning a new shape or series of drawing commands.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  beginPath() {\n    this._activePath = new GraphicsPath.GraphicsPath();\n    return this;\n  }\n  fill(style, alpha) {\n    let path;\n    const lastInstruction = this.instructions[this.instructions.length - 1];\n    if (this._tick === 0 && lastInstruction && lastInstruction.action === \"stroke\") {\n      path = lastInstruction.data.path;\n    } else {\n      path = this._activePath.clone();\n    }\n    if (!path)\n      return this;\n    if (style != null) {\n      if (alpha !== void 0 && typeof style === \"number\") {\n        deprecation.deprecation(deprecation.v8_0_0, \"GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead\");\n        style = { color: style, alpha };\n      }\n      this._fillStyle = convertFillInputToFillStyle.toFillStyle(style, _GraphicsContext.defaultFillStyle);\n    }\n    this.instructions.push({\n      action: \"fill\",\n      // TODO copy fill style!\n      data: { style: this.fillStyle, path }\n    });\n    this.onUpdate();\n    this._initNextPathLocation();\n    this._tick = 0;\n    return this;\n  }\n  _initNextPathLocation() {\n    const { x, y } = this._activePath.getLastPoint(Point.Point.shared);\n    this._activePath.clear();\n    this._activePath.moveTo(x, y);\n  }\n  /**\n   * Strokes the current path with the current stroke style. This method can take an optional\n   * FillInput parameter to define the stroke's appearance, including its color, width, and other properties.\n   * @param style - (Optional) The stroke style to apply. Can be defined as a simple color or a more complex style object. If omitted, uses the current stroke style.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  stroke(style) {\n    let path;\n    const lastInstruction = this.instructions[this.instructions.length - 1];\n    if (this._tick === 0 && lastInstruction && lastInstruction.action === \"fill\") {\n      path = lastInstruction.data.path;\n    } else {\n      path = this._activePath.clone();\n    }\n    if (!path)\n      return this;\n    if (style != null) {\n      this._strokeStyle = convertFillInputToFillStyle.toStrokeStyle(style, _GraphicsContext.defaultStrokeStyle);\n    }\n    this.instructions.push({\n      action: \"stroke\",\n      // TODO copy fill style!\n      data: { style: this.strokeStyle, path }\n    });\n    this.onUpdate();\n    this._initNextPathLocation();\n    this._tick = 0;\n    return this;\n  }\n  /**\n   * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n   * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n   * fail to cut correctly!\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  cut() {\n    for (let i = 0; i < 2; i++) {\n      const lastInstruction = this.instructions[this.instructions.length - 1 - i];\n      const holePath = this._activePath.clone();\n      if (lastInstruction) {\n        if (lastInstruction.action === \"stroke\" || lastInstruction.action === \"fill\") {\n          if (lastInstruction.data.hole) {\n            lastInstruction.data.hole.addPath(holePath);\n          } else {\n            lastInstruction.data.hole = holePath;\n            break;\n          }\n        }\n      }\n    }\n    this._initNextPathLocation();\n    return this;\n  }\n  /**\n   * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n   * starting and ending angles, and direction.\n   * @param x - The x-coordinate of the arc's center.\n   * @param y - The y-coordinate of the arc's center.\n   * @param radius - The arc's radius.\n   * @param startAngle - The starting angle, in radians.\n   * @param endAngle - The ending angle, in radians.\n   * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise (false). Defaults to false.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arc(\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      radius,\n      startAngle,\n      endAngle,\n      counterclockwise\n    );\n    return this;\n  }\n  /**\n   * Adds an arc to the current path with the given control points and radius, connected to the previous point\n   * by a straight line if necessary.\n   * @param x1 - The x-coordinate of the first control point.\n   * @param y1 - The y-coordinate of the first control point.\n   * @param x2 - The x-coordinate of the second control point.\n   * @param y2 - The y-coordinate of the second control point.\n   * @param radius - The arc's radius.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arcTo(\n      t.a * x1 + t.c * y1 + t.tx,\n      t.b * x1 + t.d * y1 + t.ty,\n      t.a * x2 + t.c * y2 + t.tx,\n      t.b * x2 + t.d * y2 + t.ty,\n      radius\n    );\n    return this;\n  }\n  /**\n   * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n   * @param rx - The x-radius of the ellipse.\n   * @param ry - The y-radius of the ellipse.\n   * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n   * to the x-axis of the coordinate system, in degrees.\n   * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n   * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n   * @param x - The x-coordinate of the arc's end point.\n   * @param y - The y-coordinate of the arc's end point.\n   * @returns The instance of the current object for chaining.\n   */\n  arcToSvg(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arcToSvg(\n      rx,\n      ry,\n      xAxisRotation,\n      // should we rotate this with transform??\n      largeArcFlag,\n      sweepFlag,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty\n    );\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires three points: the first two are control points and the third one is the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the first control point.\n   * @param cp1y - The y-coordinate of the first control point.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, smoothness) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.bezierCurveTo(\n      t.a * cp1x + t.c * cp1y + t.tx,\n      t.b * cp1x + t.d * cp1y + t.ty,\n      t.a * cp2x + t.c * cp2y + t.tx,\n      t.b * cp2x + t.d * cp2y + t.ty,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this._tick++;\n    this._activePath?.closePath();\n    return this;\n  }\n  /**\n   * Draws an ellipse at the specified location and with the given x and y radii.\n   * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n   * @param x - The x-coordinate of the center of the ellipse.\n   * @param y - The y-coordinate of the center of the ellipse.\n   * @param radiusX - The horizontal radius of the ellipse.\n   * @param radiusY - The vertical radius of the ellipse.\n   * @returns The instance of the current object for chaining.\n   */\n  ellipse(x, y, radiusX, radiusY) {\n    this._tick++;\n    this._activePath.ellipse(x, y, radiusX, radiusY, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius) {\n    this._tick++;\n    this._activePath.circle(x, y, radius, this._transform.clone());\n    return this;\n  }\n  /**\n   * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n   * @param path - The `GraphicsPath` to add.\n   * @returns The instance of the current object for chaining.\n   */\n  path(path) {\n    this._tick++;\n    this._activePath.addPath(path, this._transform.clone());\n    return this;\n  }\n  /**\n   * Connects the current point to a new point with a straight line. This method updates the current path.\n   * @param x - The x-coordinate of the new point to connect to.\n   * @param y - The y-coordinate of the new point to connect to.\n   * @returns The instance of the current object for chaining.\n   */\n  lineTo(x, y) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.lineTo(\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty\n    );\n    return this;\n  }\n  /**\n   * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n   * @param x - The x-coordinate for the starting point.\n   * @param y - The y-coordinate for the starting point.\n   * @returns The instance of the current object for chaining.\n   */\n  moveTo(x, y) {\n    this._tick++;\n    const t = this._transform;\n    const instructions = this._activePath.instructions;\n    const transformedX = t.a * x + t.c * y + t.tx;\n    const transformedY = t.b * x + t.d * y + t.ty;\n    if (instructions.length === 1 && instructions[0].action === \"moveTo\") {\n      instructions[0].data[0] = transformedX;\n      instructions[0].data[1] = transformedY;\n      return this;\n    }\n    this._activePath.moveTo(\n      transformedX,\n      transformedY\n    );\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n   * The starting point is the last point in the current path.\n   * @param cpx - The x-coordinate of the control point.\n   * @param cpy - The y-coordinate of the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveTo(cpx, cpy, x, y, smoothness) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.quadraticCurveTo(\n      t.a * cpx + t.c * cpy + t.tx,\n      t.b * cpx + t.d * cpy + t.ty,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h) {\n    this._tick++;\n    this._activePath.rect(x, y, w, h, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a rectangle with rounded corners.\n   * The corner radius can be specified to determine how rounded the corners should be.\n   * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n   * @returns The instance of the current object for chaining.\n   */\n  roundRect(x, y, w, h, radius) {\n    this._tick++;\n    this._activePath.roundRect(x, y, w, h, radius, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n   * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n   * rotated, or translated as needed.\n   * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n   * representing the x and y coordinates, of the polygon's vertices, in sequence.\n   * @param close - A boolean indicating whether to close the polygon path. True by default.\n   */\n  poly(points, close) {\n    this._tick++;\n    this._activePath.poly(points, close, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  regularPoly(x, y, radius, sides, rotation = 0, transform) {\n    this._tick++;\n    this._activePath.regularPoly(x, y, radius, sides, rotation, transform);\n    return this;\n  }\n  /**\n   * Draws a polygon with rounded corners.\n   * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param corner - The radius of the rounding of the corners.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @returns The instance of the current object for chaining.\n   */\n  roundPoly(x, y, radius, sides, corner, rotation) {\n    this._tick++;\n    this._activePath.roundPoly(x, y, radius, sides, corner, rotation);\n    return this;\n  }\n  /**\n   * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n   * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n   * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n   * A minimum of 3 points is required.\n   * @param radius - The default radius for the corners.\n   * This radius is applied to all corners unless overridden in `points`.\n   * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n   *  method instead of an arc method. Defaults to false.\n   * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n   * Higher values make the curve smoother.\n   * @returns The instance of the current object for chaining.\n   */\n  roundShape(points, radius, useQuadratic, smoothness) {\n    this._tick++;\n    this._activePath.roundShape(points, radius, useQuadratic, smoothness);\n    return this;\n  }\n  /**\n   * Draw Rectangle with fillet corners. This is much like rounded rectangle\n   * however it support negative numbers as well for the corner radius.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param fillet - accept negative or positive values\n   */\n  filletRect(x, y, width, height, fillet) {\n    this._tick++;\n    this._activePath.filletRect(x, y, width, height, fillet);\n    return this;\n  }\n  /**\n   * Draw Rectangle with chamfer corners. These are angled corners.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param chamfer - non-zero real number, size of corner cutout\n   * @param transform\n   */\n  chamferRect(x, y, width, height, chamfer, transform) {\n    this._tick++;\n    this._activePath.chamferRect(x, y, width, height, chamfer, transform);\n    return this;\n  }\n  /**\n   * Draws a star shape centered at a specified location. This method allows for the creation\n   *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n   * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n   * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n   * @param x - The x-coordinate of the center of the star.\n   * @param y - The y-coordinate of the center of the star.\n   * @param points - The number of points of the star.\n   * @param radius - The outer radius of the star (distance from the center to the outer points).\n   * @param innerRadius - Optional. The inner radius of the star\n   * (distance from the center to the inner points between the outer points).\n   * If not provided, defaults to half of the `radius`.\n   * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n   * Defaults to 0, meaning one point is directly upward.\n   * @returns The instance of the current object for chaining further drawing commands.\n   */\n  star(x, y, points, radius, innerRadius = 0, rotation = 0) {\n    this._tick++;\n    this._activePath.star(x, y, points, radius, innerRadius, rotation, this._transform.clone());\n    return this;\n  }\n  /**\n   * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n   * defined in SVG format to be drawn within the graphics context.\n   * @param svg - The SVG string to be parsed and rendered.\n   */\n  svg(svg) {\n    this._tick++;\n    SVGParser.SVGParser(svg, this);\n    return this;\n  }\n  /**\n   * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n   * This includes transformations, fill styles, and stroke styles.\n   */\n  restore() {\n    const state = this._stateStack.pop();\n    if (state) {\n      this._transform = state.transform;\n      this._fillStyle = state.fillStyle;\n      this._strokeStyle = state.strokeStyle;\n    }\n    return this;\n  }\n  /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n  save() {\n    this._stateStack.push({\n      transform: this._transform.clone(),\n      fillStyle: { ...this._fillStyle },\n      strokeStyle: { ...this._strokeStyle }\n    });\n    return this;\n  }\n  /**\n   * Returns the current transformation matrix of the graphics context.\n   * @returns The current transformation matrix.\n   */\n  getTransform() {\n    return this._transform;\n  }\n  /**\n   * Resets the current transformation matrix to the identity matrix, effectively removing any transformations (rotation, scaling, translation) previously applied.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  resetTransform() {\n    this._transform.identity();\n    return this;\n  }\n  /**\n   * Applies a rotation transformation to the graphics context around the current origin.\n   * @param angle - The angle of rotation in radians.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  rotate(angle) {\n    this._transform.rotate(angle);\n    return this;\n  }\n  /**\n   * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n   * @param x - The scale factor in the horizontal direction.\n   * @param y - (Optional) The scale factor in the vertical direction. If not specified, the x value is used for both directions.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  scale(x, y = x) {\n    this._transform.scale(x, y);\n    return this;\n  }\n  setTransform(a, b, c, d, dx, dy) {\n    if (a instanceof Matrix.Matrix) {\n      this._transform.set(a.a, a.b, a.c, a.d, a.tx, a.ty);\n      return this;\n    }\n    this._transform.set(a, b, c, d, dx, dy);\n    return this;\n  }\n  transform(a, b, c, d, dx, dy) {\n    if (a instanceof Matrix.Matrix) {\n      this._transform.append(a);\n      return this;\n    }\n    tempMatrix.set(a, b, c, d, dx, dy);\n    this._transform.append(tempMatrix);\n    return this;\n  }\n  /**\n   * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n   * @param x - The amount to translate in the horizontal direction.\n   * @param y - (Optional) The amount to translate in the vertical direction. If not specified, the x value is used for both directions.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  translate(x, y = x) {\n    this._transform.translate(x, y);\n    return this;\n  }\n  /**\n   * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n   * and optionally resetting transformations to the identity matrix.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  clear() {\n    this._activePath.clear();\n    this.instructions.length = 0;\n    this.resetTransform();\n    this.onUpdate();\n    return this;\n  }\n  onUpdate() {\n    if (this.dirty)\n      return;\n    this.emit(\"update\", this, 16);\n    this.dirty = true;\n    this._boundsDirty = true;\n  }\n  /** The bounds of the graphic shape. */\n  get bounds() {\n    if (!this._boundsDirty)\n      return this._bounds;\n    const bounds = this._bounds;\n    bounds.clear();\n    for (let i = 0; i < this.instructions.length; i++) {\n      const instruction = this.instructions[i];\n      const action = instruction.action;\n      if (action === \"fill\") {\n        const data = instruction.data;\n        bounds.addBounds(data.path.bounds);\n      } else if (action === \"texture\") {\n        const data = instruction.data;\n        bounds.addFrame(data.dx, data.dy, data.dx + data.dw, data.dy + data.dh, data.transform);\n      }\n      if (action === \"stroke\") {\n        const data = instruction.data;\n        const alignment = data.style.alignment;\n        const outerPadding = data.style.width * (1 - alignment);\n        const _bounds = data.path.bounds;\n        bounds.addFrame(\n          _bounds.minX - outerPadding,\n          _bounds.minY - outerPadding,\n          _bounds.maxX + outerPadding,\n          _bounds.maxY + outerPadding\n        );\n      }\n    }\n    return bounds;\n  }\n  /**\n   * Check to see if a point is contained within this geometry.\n   * @param point - Point to check if it's contained.\n   * @returns {boolean} `true` if the point is contained within geometry.\n   */\n  containsPoint(point) {\n    if (!this.bounds.containsPoint(point.x, point.y))\n      return false;\n    const instructions = this.instructions;\n    let hasHit = false;\n    for (let k = 0; k < instructions.length; k++) {\n      const instruction = instructions[k];\n      const data = instruction.data;\n      const path = data.path;\n      if (!instruction.action || !path)\n        continue;\n      const style = data.style;\n      const shapes = path.shapePath.shapePrimitives;\n      for (let i = 0; i < shapes.length; i++) {\n        const shape = shapes[i].shape;\n        if (!style || !shape)\n          continue;\n        const transform = shapes[i].transform;\n        const transformedPoint = transform ? transform.applyInverse(point, tmpPoint) : point;\n        if (instruction.action === \"fill\") {\n          hasHit = shape.contains(transformedPoint.x, transformedPoint.y);\n        } else {\n          const strokeStyle = style;\n          hasHit = shape.strokeContains(transformedPoint.x, transformedPoint.y, strokeStyle.width, strokeStyle.alignment);\n        }\n        const holes = data.hole;\n        if (holes) {\n          const holeShapes = holes.shapePath?.shapePrimitives;\n          if (holeShapes) {\n            for (let j = 0; j < holeShapes.length; j++) {\n              if (holeShapes[j].shape.contains(transformedPoint.x, transformedPoint.y)) {\n                hasHit = false;\n              }\n            }\n          }\n        }\n        if (hasHit) {\n          return true;\n        }\n      }\n    }\n    return hasHit;\n  }\n  /**\n   * Destroys the GraphicsData object.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the fill/stroke style?\n   * @param {boolean} [options.textureSource=false] - Should it destroy the texture source of the fill/stroke style?\n   */\n  destroy(options = false) {\n    this._stateStack.length = 0;\n    this._transform = null;\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fillStyle.texture) {\n        this._fillStyle.texture.destroy(destroyTextureSource);\n      }\n      if (this._strokeStyle.texture) {\n        this._strokeStyle.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fillStyle = null;\n    this._strokeStyle = null;\n    this.instructions = null;\n    this._activePath = null;\n    this._bounds = null;\n    this._stateStack = null;\n    this.customShader = null;\n    this._transform = null;\n  }\n};\n/** The default fill style to use when none is provided. */\n_GraphicsContext.defaultFillStyle = {\n  /** The color to use for the fill. */\n  color: 16777215,\n  /** The alpha value to use for the fill. */\n  alpha: 1,\n  /** The texture to use for the fill. */\n  texture: Texture.Texture.WHITE,\n  /** The matrix to apply. */\n  matrix: null,\n  /** The fill pattern to use. */\n  fill: null,\n  /** Whether coordinates are 'global' or 'local' */\n  textureSpace: \"local\"\n};\n/** The default stroke style to use when none is provided. */\n_GraphicsContext.defaultStrokeStyle = {\n  /** The width of the stroke. */\n  width: 1,\n  /** The color to use for the stroke. */\n  color: 16777215,\n  /** The alpha value to use for the stroke. */\n  alpha: 1,\n  /** The alignment of the stroke. */\n  alignment: 0.5,\n  /** The miter limit to use. */\n  miterLimit: 10,\n  /** The line cap style to use. */\n  cap: \"butt\",\n  /** The line join style to use. */\n  join: \"miter\",\n  /** The texture to use for the fill. */\n  texture: Texture.Texture.WHITE,\n  /** The matrix to apply. */\n  matrix: null,\n  /** The fill pattern to use. */\n  fill: null,\n  /** Whether coordinates are 'global' or 'local' */\n  textureSpace: \"local\",\n  /** If the stroke is a pixel line. */\n  pixelLine: false\n};\nlet GraphicsContext = _GraphicsContext;\n\nexports.GraphicsContext = GraphicsContext;\n//# sourceMappingURL=GraphicsContext.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","Color","Matrix","Point","Texture","uid","deprecation","Bounds","GraphicsPath","SVGParser","convertFillInputToFillStyle","tmpPoint","tempMatrix","constructor","arguments","dirty","batchMode","instructions","_activePath","_transform","_fillStyle","_GraphicsContext","defaultFillStyle","_strokeStyle","defaultStrokeStyle","_stateStack","_tick","_bounds","_boundsDirty","clone","slice","value","toFillStyle","toStrokeStyle","setFillStyle","style","setStrokeStyle","texture","tint","dx","dy","dw","dh","push","action","data","image","frame","width","height","transform","alpha","shared","setValue","toNumber","onUpdate","beginPath","fill","lastInstruction","length","path","v8_0_0","color","fillStyle","_initNextPathLocation","x","y","getLastPoint","clear","moveTo","stroke","strokeStyle","cut","i","holePath","hole","addPath","arc","radius","startAngle","endAngle","counterclockwise","t","a","c","tx","b","d","ty","arcTo","x1","y1","x2","y2","arcToSvg","rx","ry","xAxisRotation","largeArcFlag","sweepFlag","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","smoothness","closePath","ellipse","radiusX","radiusY","circle","lineTo","transformedX","transformedY","quadraticCurveTo","cpx","cpy","rect","w","h","roundRect","poly","points","close","regularPoly","sides","rotation","roundPoly","corner","roundShape","useQuadratic","filletRect","fillet","chamferRect","chamfer","star","innerRadius","svg","restore","state","pop","save","getTransform","resetTransform","identity","rotate","angle","scale","setTransform","set","append","translate","emit","bounds","instruction","addBounds","addFrame","outerPadding","alignment","minX","minY","maxX","maxY","containsPoint","point","hasHit","k","shapes","shapePath","shapePrimitives","shape","transformedPoint","applyInverse","contains","strokeContains","holes","holeShapes","j","destroy","options","removeAllListeners","destroyTexture","destroyTextureSource","textureSource","customShader","WHITE","matrix","textureSpace","miterLimit","cap","join","pixelLine","GraphicsContext"]
}
