{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$loaders$loadDDS.js",
"lineCount":20,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,GAAsF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE1HC,SAASH,OAAA,CAAQ,4CAAR,CAFiH,EAExFI,OAAOJ,OAAA,CAAQ,0CAAR,CAFiF;AAG9HA,SAAA,CAAQ,iEAAR,CAAA;AACA,MAAIK,WAAWL,OAAA,CAAQ,oEAAR,CAAf;AACMM,QAAAA,GAAU,CACdC,UAAW,CACTC,KAAMJ,IAAKK,CAAAA,aAAcC,CAAAA,UADhB,EAETC,SAAUR,MAAOS,CAAAA,oBAAqBC,CAAAA,IAF7B,CADG,EAKdC,KAAM,SALQ,EAMdC,IAAI,CAACC,GAAD,CAAM;AACR,WAAOb,MAAOc,CAAAA,cAAP,CAAsBD,GAAtB,EAA2B,MAA3B,CAAP;AADQ,GANI,EASRE,UAAI,CAACF,GAAD,EAAMG,KAAN,EAAaC,MAAb,CAAqB;AAAA,QACvBC,cAAc,MAA+CA,CAAxC,MAAMjB,IAAKkB,CAAAA,QAASC,CAAAA,OAAQC,CAAAA,KAAtB,CAA4BR,GAA5B,CAAkCK,EAAAA,WAAzC,EADG;AACqDI,eAAAA,GAAWpB,QAASA,CAAAA,QAAT,CAAkBgB,WAAlB,CAA+BK,CAAAA,GAA/B,CAAoCC,QAAD,IAAc;AACtIC,cAAAA,GAAO,IAAIxB,IAAKyB,CAAAA,WAAT,CAAqBF,QAArB,EAA+B,CAC1CG,OAAQ1B,IAAK2B,CAAAA,YAAaC,CAAAA,GADgB,EAE1CC,UAAW7B,IAAK8B,CAAAA,WAAYC,CAAAA,sBAFc,EAG1CC,WAAYhC,IAAKiC,CAAAA,KAAMC,CAAAA,kBAAX,CAA8BtB,GAA9B,CAH8B,EAI1C,GAAGG,KAAMoB,CAAAA,IAJiC,CAA/B,CAAPX;AAMN,aAAOzB,MAAOqC,CAAAA,aAAP,CAAqBZ,QAArB,EAA2BR,MAA3B,EAAmCJ,GAAnC,CAAP;AAP4I,KAAjD,CAAXS;AASlF,WAA2B,CAApB,KAAAA,WAASgB,CAAAA,MAAT,GAAwBhB,WAAA,CAAS,CAAT,CAAxB,GAAsCA,WAA7C;AAV6B,GATjB,EAqBdiB,MAAM,CAACC,OAAD,CAAU;AACdC,SAAMC,CAAAA,OAAN,CAAcF,OAAd,CAAA,GAAyBA,OAAQG,CAAAA,OAAR,CAAiBC,CAAD,IAAOA,CAAEC,CAAAA,OAAF,CAAU,CAAA,CAAV,CAAvB,CAAzB,GAAiEL,OAAQK,CAAAA,OAAR,CAAgB,CAAA,CAAhB,CAAjE;AADc,GArBF,CAAV1C;AAyBNF,MAAK6C,CAAAA,UAAWC,CAAAA,GAAhB,CAAoB5C,MAApB,CAAA;AACAJ,SAAQI,CAAAA,OAAR,GAAkBA,MAAlB;AA/B8H,CAA9H;;",
"sources":["node_modules/@pixi/compressed-textures/lib/loaders/loadDDS.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$loaders$loadDDS\"] = function(global,require,module,exports) {\n\"use strict\";\nvar assets = require(\"@pixi/assets\"), core = require(\"@pixi/core\");\nrequire(\"../parsers/index.js\");\nvar parseDDS = require(\"../parsers/parseDDS.js\");\nconst loadDDS = {\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: assets.LoaderParserPriority.High\n  },\n  name: \"loadDDS\",\n  test(url) {\n    return assets.checkExtension(url, \".dds\");\n  },\n  async load(url, asset, loader) {\n    const arrayBuffer = await (await core.settings.ADAPTER.fetch(url)).arrayBuffer(), textures = parseDDS.parseDDS(arrayBuffer).map((resource) => {\n      const base = new core.BaseTexture(resource, {\n        mipmap: core.MIPMAP_MODES.OFF,\n        alphaMode: core.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n        resolution: core.utils.getResolutionOfUrl(url),\n        ...asset.data\n      });\n      return assets.createTexture(base, loader, url);\n    });\n    return textures.length === 1 ? textures[0] : textures;\n  },\n  unload(texture) {\n    Array.isArray(texture) ? texture.forEach((t) => t.destroy(!0)) : texture.destroy(!0);\n  }\n};\ncore.extensions.add(loadDDS);\nexports.loadDDS = loadDDS;\n//# sourceMappingURL=loadDDS.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","assets","core","parseDDS","loadDDS","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","checkExtension","load","asset","loader","arrayBuffer","settings","ADAPTER","fetch","textures","map","resource","base","BaseTexture","mipmap","MIPMAP_MODES","OFF","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","resolution","utils","getResolutionOfUrl","data","createTexture","length","unload","texture","Array","isArray","forEach","t","destroy","extensions","add"]
}
