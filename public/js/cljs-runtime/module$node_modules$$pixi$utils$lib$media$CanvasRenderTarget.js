shadow$provide.module$node_modules$$pixi$utils$lib$media$CanvasRenderTarget = function(global, require, module, exports) {
  var settings = require("module$node_modules$$pixi$settings$lib$index");
  class CanvasRenderTarget {
    constructor(width, height, resolution) {
      this._canvas = settings.settings.ADAPTER.createCanvas();
      this._context = this._canvas.getContext("2d");
      this.resolution = resolution || settings.settings.RESOLUTION;
      this.resize(width, height);
    }
    clear() {
      this._checkDestroyed();
      this._context.setTransform(1, 0, 0, 1, 0, 0);
      this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
    }
    resize(desiredWidth, desiredHeight) {
      this._checkDestroyed();
      this._canvas.width = Math.round(desiredWidth * this.resolution);
      this._canvas.height = Math.round(desiredHeight * this.resolution);
    }
    destroy() {
      this._canvas = this._context = null;
    }
    get width() {
      return this._checkDestroyed(), this._canvas.width;
    }
    set width(val) {
      this._checkDestroyed();
      this._canvas.width = Math.round(val);
    }
    get height() {
      return this._checkDestroyed(), this._canvas.height;
    }
    set height(val) {
      this._checkDestroyed();
      this._canvas.height = Math.round(val);
    }
    get canvas() {
      return this._checkDestroyed(), this._canvas;
    }
    get context() {
      return this._checkDestroyed(), this._context;
    }
    _checkDestroyed() {
      if (null === this._canvas) {
        throw new TypeError("The CanvasRenderTarget has already been destroyed");
      }
    }
  }
  exports.CanvasRenderTarget = CanvasRenderTarget;
};

//# sourceMappingURL=module$node_modules$$pixi$utils$lib$media$CanvasRenderTarget.js.map
