{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$asset$bitmapFontTextParser.js",
"lineCount":44,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/asset/bitmapFontTextParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$asset$bitmapFontTextParser\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst bitmapFontTextParser = {\n  test(data) {\n    return typeof data === \"string\" && data.startsWith(\"info face=\");\n  },\n  parse(txt) {\n    const items = txt.match(/^[a-z]+\\s+.+$/gm);\n    const rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n    for (const i in items) {\n      const name = items[i].match(/^[a-z]+/gm)[0];\n      const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n      const itemData = {};\n      for (const i2 in attributeList) {\n        const split = attributeList[i2].split(\"=\");\n        const key = split[0];\n        const strValue = split[1].replace(/\"/gm, \"\");\n        const floatValue = parseFloat(strValue);\n        const value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      rawData[name].push(itemData);\n    }\n    const font = {\n      chars: {},\n      pages: [],\n      lineHeight: 0,\n      fontSize: 0,\n      fontFamily: \"\",\n      distanceField: null,\n      baseLineOffset: 0\n    };\n    const [info] = rawData.info;\n    const [common] = rawData.common;\n    const [distanceField] = rawData.distanceField ?? [];\n    if (distanceField) {\n      font.distanceField = {\n        range: parseInt(distanceField.distanceRange, 10),\n        type: distanceField.fieldType\n      };\n    }\n    font.fontSize = parseInt(info.size, 10);\n    font.fontFamily = info.face;\n    font.lineHeight = parseInt(common.lineHeight, 10);\n    const page = rawData.page;\n    for (let i = 0; i < page.length; i++) {\n      font.pages.push({\n        id: parseInt(page[i].id, 10) || 0,\n        file: page[i].file\n      });\n    }\n    const map = {};\n    font.baseLineOffset = font.lineHeight - parseInt(common.base, 10);\n    const char = rawData.char;\n    for (let i = 0; i < char.length; i++) {\n      const charNode = char[i];\n      const id = parseInt(charNode.id, 10);\n      let letter = charNode.letter ?? charNode.char ?? String.fromCharCode(id);\n      if (letter === \"space\")\n        letter = \" \";\n      map[id] = letter;\n      font.chars[letter] = {\n        id,\n        // texture deets..\n        page: parseInt(charNode.page, 10) || 0,\n        x: parseInt(charNode.x, 10),\n        y: parseInt(charNode.y, 10),\n        width: parseInt(charNode.width, 10),\n        height: parseInt(charNode.height, 10),\n        xOffset: parseInt(charNode.xoffset, 10),\n        yOffset: parseInt(charNode.yoffset, 10),\n        xAdvance: parseInt(charNode.xadvance, 10),\n        kerning: {}\n      };\n    }\n    const kerning = rawData.kerning || [];\n    for (let i = 0; i < kerning.length; i++) {\n      const first = parseInt(kerning[i].first, 10);\n      const second = parseInt(kerning[i].second, 10);\n      const amount = parseInt(kerning[i].amount, 10);\n      font.chars[map[second]].kerning[map[first]] = amount;\n    }\n    return font;\n  }\n};\n\nexports.bitmapFontTextParser = bitmapFontTextParser;\n//# sourceMappingURL=bitmapFontTextParser.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","bitmapFontTextParser","test","data","startsWith","parse","txt","items","match","rawData","info","common","page","char","chars","kerning","kernings","distanceField","i","name","attributeList","itemData","i2","split","key","strValue","replace","floatValue","parseFloat","value","isNaN","push","font","pages","lineHeight","fontSize","fontFamily","baseLineOffset","range","parseInt","distanceRange","type","fieldType","size","face","length","id","file","map","base","charNode","letter","String","fromCharCode","x","y","width","height","xOffset","xoffset","yOffset","yoffset","xAdvance","xadvance","first","second","amount"]
}
