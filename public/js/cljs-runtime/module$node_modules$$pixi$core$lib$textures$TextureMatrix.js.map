{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$TextureMatrix.js",
"lineCount":53,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,GAA8E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEtH,MAAIC,OAAOH,OAAA,CAAQ,0CAAR,CAAX;AACA,QAAMI,UAAU,IAAID,IAAKE,CAAAA,MAAT,EAAhB;AACA,OAAMC,cAAN;AAKEC,eAAW,CAACC,OAAD,EAAUC,WAAV,CAAuB;AAChC,UAAKC,CAAAA,QAAL,GAAgBF,OAAhB;AAAyB,UAAKG,CAAAA,QAAL,GAAgB,IAAIR,IAAKE,CAAAA,MAAT,EAAhB;AAAmC,UAAKO,CAAAA,WAAL,GAAmB,IAAIC,YAAJ,CAAiB,CAAjB,CAAnB;AAAwC,UAAKC,CAAAA,YAAL,GAAoB,IAAID,YAAJ,CAAiB,CAAjB,CAApB;AAAyC,UAAKE,CAAAA,UAAL,GAAkB,CAAC,CAAnB;AAA0C,UAAKC,CAAAA,WAAL,GAApB,IAAKC,CAAAA,SAAe,GAAH,CAAG;AAAsB,UAAKR,CAAAA,WAAL,GAAwC,GAArB,GAAA,MAAOA,YAAP,GAA2B,GAA3B,GAAiCA,WAApD;AAAiE,UAAKS,CAAAA,QAAL,GAAgB,CAAA,CAAhB;AAD9O;AAI9B,eAAU,EAAA;AACZ,aAAO,IAAKR,CAAAA,QAAZ;AADY;AAGV,eAAO,CAACS,KAAD,CAAQ;AACjB,UAAKT,CAAAA,QAAL,GAAgBS,KAAhB;AAAuB,UAAKJ,CAAAA,UAAL,GAAkB,CAAC,CAAnB;AADN;AASnBK,eAAW,CAACC,GAAD,EAAMC,GAAN,CAAW;AACZ,UAAK,EAAb,KAAAA,GAAA,KAAmBA,GAAnB,GAAyBD,GAAzB;AACA,YAAME,MAAM,IAAKZ,CAAAA,QAAjB;AACA,WAAK,IAAIa,IAAI,CAAb,EAAgBA,CAAhB,GAAoBH,GAAII,CAAAA,MAAxB,EAAgCD,CAAhC,IAAqC,CAArC,CAAwC;AAAA,cAChCE,IAAIL,GAAA,CAAIG,CAAJ,CAD4B,EACpBG,IAAIN,GAAA,CAAIG,CAAJ,GAAQ,CAAR,CADgB;AAEtCF,WAAA,CAAIE,CAAJ,CAAA,GAASE,CAAT,GAAaH,GAAIK,CAAAA,CAAjB,GAAqBD,CAArB,GAAyBJ,GAAIM,CAAAA,CAA7B,GAAiCN,GAAIO,CAAAA,EAArC;AAAyCR,WAAA,CAAIE,CAAJ,GAAQ,CAAR,CAAA,GAAaE,CAAb,GAAiBH,GAAIQ,CAAAA,CAArB,GAAyBJ,CAAzB,GAA6BJ,GAAIS,CAAAA,CAAjC,GAAqCT,GAAIU,CAAAA,EAAzC;AAFH;AAIxC,aAAOX,GAAP;AAPoB;AActBY,UAAM,CAACC,WAAD,CAAc;AAClB,YAAMC,MAAM,IAAK1B,CAAAA,QAAjB;AACA,UAAI,CAAC0B,GAAL,IAAY,CAACA,GAAIC,CAAAA,KAAjB,IAA0B,CAACF,WAA3B,IAA0C,IAAKpB,CAAAA,UAA/C,KAA8DqB,GAAInB,CAAAA,SAAlE;AACE,eAAO,CAAA,CAAP;AADF;AAEA,UAAKF,CAAAA,UAAL,GAAkBqB,GAAInB,CAAAA,SAAtB;AAAiC,UAAKA,CAAAA,SAAL,EAAA;AAC3BI,iBAAAA,GAAMe,GAAIE,CAAAA,IAAVjB;AACN,UAAKV,CAAAA,QAAS4B,CAAAA,GAAd,CAAkBlB,WAAImB,CAAAA,EAAtB,GAA2BnB,WAAIoB,CAAAA,EAA/B,EAAmCpB,WAAIqB,CAAAA,EAAvC,GAA4CrB,WAAIsB,CAAAA,EAAhD,EAAoDtB,WAAIuB,CAAAA,EAAxD,GAA6DvB,WAAIoB,CAAAA,EAAjE,EAAqEpB,WAAIwB,CAAAA,EAAzE,GAA8ExB,WAAIsB,CAAAA,EAAlF,EAAsFtB,WAAIoB,CAAAA,EAA1F,EAA8FpB,WAAIsB,CAAAA,EAAlG,CAAA;AACMG,iBAAAA,GAAOV,GAAIU,CAAAA,IAAXA;AAAN,UAAuBC,OAAOX,GAAIW,CAAAA,IAAlC;AACAA,UAAA,KAAS3C,OAAQmC,CAAAA,GAAR,CACPO,WAAKE,CAAAA,KADE,GACMD,IAAKC,CAAAA,KADX,EAEP,CAFO,EAGP,CAHO,EAIPF,WAAKG,CAAAA,MAJE,GAIOF,IAAKE,CAAAA,MAJZ,EAKP,CAACF,IAAKrB,CAAAA,CALC,GAKGqB,IAAKC,CAAAA,KALR,EAMP,CAACD,IAAKpB,CAAAA,CANC,GAMGoB,IAAKE,CAAAA,MANR,CAAA,EAON,IAAKtC,CAAAA,QAASuC,CAAAA,MAAd,CAAqB9C,OAArB,CAPH;AAQM+C,iBAAAA,GAAUf,GAAIgB,CAAAA,WAAdD;AAA2BE,UAAAA,GAAQ,IAAKzC,CAAAA,WAAbyC;AAhBf,YAgByCC,SAAS,IAAK7C,CAAAA,WAAd6C,GAA4BH,WAAQI,CAAAA,UAhB7E,EAgByFC,SAAS,IAAKxC,CAAAA,WAhBvG;AAiBlB,aAAOqC,IAAA,CAAM,CAAN,CAAA,IAAYjB,GAAIqB,CAAAA,MAAO/B,CAAAA,CAAvB,GAA2B4B,MAA3B,GAAoCE,MAApC,IAA8CL,WAAQH,CAAAA,KAAtD,EAA6DK,IAAA,CAAM,CAAN,CAA7D,IAAyEjB,GAAIqB,CAAAA,MAAO9B,CAAAA,CAApF,GAAwF2B,MAAxF,GAAiGE,MAAjG,IAA2GL,WAAQF,CAAAA,MAAnH,EAA2HI,IAAA,CAAM,CAAN,CAA3H,IAAuIjB,GAAIqB,CAAAA,MAAO/B,CAAAA,CAAlJ,GAAsJU,GAAIqB,CAAAA,MAAOT,CAAAA,KAAjK,GAAyKM,MAAzK,GAAkLE,MAAlL,IAA4LL,WAAQH,CAAAA,KAApM,EAA2MK,IAAA,CAAM,CAAN,CAA3M,IAAuNjB,GAAIqB,CAAAA,MAAO9B,CAAAA,CAAlO,GAAsOS,GAAIqB,CAAAA,MAAOR,CAAAA,MAAjP,GAA0PK,MAA1P,GAAmQE,MAAnQ,IAA6QL,WAAQF,CAAAA,MAArR,EAA6R,IAAKnC,CAAAA,YAAL,CAAkB,CAAlB,CAA7R,GAAoT0C,MAApT,GAA6TL,WAAQO,CAAAA,SAArU,EAAgV,IAAK5C,CAAAA,YAAL,CAAkB,CAAlB,CAAhV,GAAuW0C,MAAvW,GAAgXL,WAAQQ,CAAAA,UAAxX,EAAoY,IAAKzC,CAAAA,QAAzY,GAAoZkB,GAAIqB,CAAAA,MAAOT,CAAAA,KAA/Z,KAAyaG,WAAQH,CAAAA,KAAjb,IAA0bZ,GAAIqB,CAAAA,MAAOR,CAAAA,MAArc;AAAgdE,iBAAQF,CAAAA,MAAxd,IAAif,CAAjf,KAAkeb,GAAIwB,CAAAA,MAAte,EAAof,CAAA,CAA3f;AAjBkB;AAnCtB;AAuDA1D,SAAQI,CAAAA,aAAR,GAAwBA,aAAxB;AA3DsH,CAAtH;;",
"sources":["node_modules/@pixi/core/lib/textures/TextureMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$TextureMatrix\"] = function(global,require,module,exports) {\n\"use strict\";\nvar math = require(\"@pixi/math\");\nconst tempMat = new math.Matrix();\nclass TextureMatrix {\n  /**\n   * @param texture - observed texture\n   * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n   */\n  constructor(texture, clampMargin) {\n    this._texture = texture, this.mapCoord = new math.Matrix(), this.uClampFrame = new Float32Array(4), this.uClampOffset = new Float32Array(2), this._textureID = -1, this._updateID = 0, this.clampOffset = 0, this.clampMargin = typeof clampMargin > \"u\" ? 0.5 : clampMargin, this.isSimple = !1;\n  }\n  /** Texture property. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    this._texture = value, this._textureID = -1;\n  }\n  /**\n   * Multiplies uvs array to transform\n   * @param uvs - mesh uvs\n   * @param [out=uvs] - output\n   * @returns - output\n   */\n  multiplyUvs(uvs, out) {\n    out === void 0 && (out = uvs);\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i], y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx, out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  /**\n   * Updates matrices if texture was changed.\n   * @param [forceUpdate=false] - if true, matrices will be updated any case\n   * @returns - Whether or not it was updated\n   */\n  update(forceUpdate) {\n    const tex = this._texture;\n    if (!tex || !tex.valid || !forceUpdate && this._textureID === tex._updateID)\n      return !1;\n    this._textureID = tex._updateID, this._updateID++;\n    const uvs = tex._uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig, trim = tex.trim;\n    trim && (tempMat.set(\n      orig.width / trim.width,\n      0,\n      0,\n      orig.height / trim.height,\n      -trim.x / trim.width,\n      -trim.y / trim.height\n    ), this.mapCoord.append(tempMat));\n    const texBase = tex.baseTexture, frame = this.uClampFrame, margin = this.clampMargin / texBase.resolution, offset = this.clampOffset;\n    return frame[0] = (tex._frame.x + margin + offset) / texBase.width, frame[1] = (tex._frame.y + margin + offset) / texBase.height, frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width, frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height, this.uClampOffset[0] = offset / texBase.realWidth, this.uClampOffset[1] = offset / texBase.realHeight, this.isSimple = tex._frame.width === texBase.width && tex._frame.height === texBase.height && tex.rotate === 0, !0;\n  }\n}\nexports.TextureMatrix = TextureMatrix;\n//# sourceMappingURL=TextureMatrix.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","math","tempMat","Matrix","TextureMatrix","constructor","texture","clampMargin","_texture","mapCoord","uClampFrame","Float32Array","uClampOffset","_textureID","clampOffset","_updateID","isSimple","value","multiplyUvs","uvs","out","mat","i","length","x","y","a","c","tx","b","d","ty","update","forceUpdate","tex","valid","_uvs","set","x1","x0","y1","y0","x3","y3","orig","trim","width","height","append","texBase","baseTexture","frame","margin","resolution","offset","_frame","realWidth","realHeight","rotate"]
}
