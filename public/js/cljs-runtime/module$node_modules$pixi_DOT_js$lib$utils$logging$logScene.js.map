{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$utils$logging$logScene.js",
"lineCount":37,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,GAA+E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AA6BvHC,UAASA,SAAQ,CAACC,SAAD,EAAYC,KAAA,GAAQ,CAApB,EAAuBC,IAAA,GAAO,CAAEC,MAAO,SAAT,CAA9B,CAAoD;AAC/DH,aAAUI,CAAAA,WAAd,KACEF,IAAKC,CAAAA,KADP,GACeE,MAAA,CAAOC,SAAA,EAAP,CADf;AAGA,QAAIC,SAAS,EAAb;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBP,KAApB,EAA2BO,CAAA,EAA3B;AACED,YAAA,IAAU,MAAV;AADF;AAGIE,KAAAA,GAAQT,SAAUS,CAAAA,KAAlBA;AACA,KAACA,CAAL,IAAcT,SAAd,YAAmCU,MAAOA,CAAAA,MAA1C,KACED,CADF,GACW,UAAST,SAAUW,CAAAA,OAAQF,CAAAA,KAA3B,EADX;AAGIG,UAAAA,GAAU,MAAKL,MAAL,MAAiBE,CAAjB,YAAkCT,SAAUa,CAAAA,cAAeC,CAAAA,EAA3D,qBAAkFd,SAAUe,CAAAA,sBAAuBD,CAAAA,EAAnH,aAAkId,SAAUgB,CAAAA,cAAeF,CAAAA,EAA3J,YAAyKd,SAAUiB,CAAAA,CAAnL,GAAVL;AACAZ,aAAUI,CAAAA,WAAd,KACEQ,MADF,IACY,gBADZ;AAGIZ,aAAUkB,CAAAA,OAAd,KACEN,MADF,IACY,YADZ;AAGAO,WAAQC,CAAAA,GAAR,CAAYR,MAAZ,EAAqB,SAAQV,IAAKC,CAAAA,KAAb,qBAArB,CAAA;AACAF,SAAA,EAAA;AACA,SAASO,MAAT,GAAa,CAAb,EAAgBA,MAAhB,GAAoBR,SAAUqB,CAAAA,QAASC,CAAAA,MAAvC,EAA+Cd,MAAA,EAA/C;AAEET,cAAA,CADcC,SAAUqB,CAAAA,QAAVE,CAAmBf,MAAnBe,CACd,EAAgBtB,KAAhB,EAAuB,CAAE,GAAGC,IAAL,CAAvB,CAAA;AAFF;AArBmE;AA0BrEsB,UAASA,oBAAmB,CAACpB,WAAD,EAAcH,KAAA,GAAQ,CAAtB,EAAyBC,IAAA,GAAO,CAAEuB,MAAO,CAAT,EAAYtB,MAAO,SAAnB,CAAhC,CAAgE;AAC1F,QAAII,SAAS,EAAb;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBP,KAApB,EAA2BO,CAAA,EAA3B;AACED,YAAA,IAAU,MAAV;AADF;AAIAY,WAAQC,CAAAA,GAAR,CADgBR,MAAKL,MAALK,KAAgBV,IAAKuB,CAAAA,KAArBb,KAA+BR,WAAYsB,CAAAA,IAAKjB,CAAAA,KAAhDG,WAAgER,WAAYS,CAAAA,cAAeC,CAAAA,EAA3FF,EAChB,EAAqB,SAAQV,IAAKC,CAAAA,KAAb,qBAArB,CAAA;AACAF,SAAA,EAAA;AACA,SAASO,MAAT,GAAa,CAAb,EAAgBA,MAAhB,GAAoBJ,WAAYuB,CAAAA,mBAAoBL,CAAAA,MAApD,EAA4Dd,MAAA,EAA5D;AAEEgB,yBAAA,CADcpB,WAAYuB,CAAAA,mBAAZJ,CAAgCf,MAAhCe,CACd,EAA2BtB,KAA3B,EAAkC,CAAE,GAAGC,IAAL,EAAWuB,MAAOjB,MAAlB,CAAlC,CAAA;AAFF;AAR0F;AApD5F,MAAIE,SAASd,OAAA,CAAQ,yDAAR,CAAb;AAEA,cAAA;AACA,QAAMS,SAAS,iFAAA,CAAA,KAAA,CAAA,GAAA,CAAf;AAsBA,MAAIC,YAAY,CAAhB;AAyCAR,SAAQ0B,CAAAA,mBAAR,GAA8BA,mBAA9B;AACA1B,SAAQC,CAAAA,QAAR,GAAmBA,QAAnB;AAtEuH,CAAvH;;",
"sources":["node_modules/pixi_DOT_js/lib/utils/logging/logScene.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$utils$logging$logScene\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Sprite = require('../../scene/sprite/Sprite.js');\n\n\"use strict\";\nconst colors = [\n  \"#000080\",\n  // Navy Blue\n  \"#228B22\",\n  // Forest Green\n  \"#8B0000\",\n  // Dark Red\n  \"#4169E1\",\n  // Royal Blue\n  \"#008080\",\n  // Teal\n  \"#800000\",\n  // Maroon\n  \"#9400D3\",\n  // Dark Violet\n  \"#FF8C00\",\n  // Dark Orange\n  \"#556B2F\",\n  // Olive Green\n  \"#8B008B\"\n  // Dark Magenta\n];\nlet colorTick = 0;\nfunction logScene(container, depth = 0, data = { color: \"#000000\" }) {\n  if (container.renderGroup) {\n    data.color = colors[colorTick++];\n  }\n  let spaces = \"\";\n  for (let i = 0; i < depth; i++) {\n    spaces += \"    \";\n  }\n  let label = container.label;\n  if (!label && container instanceof Sprite.Sprite) {\n    label = `sprite:${container.texture.label}`;\n  }\n  let output = `%c ${spaces}|- ${label} (worldX:${container.worldTransform.tx}, relativeRenderX:${container.relativeGroupTransform.tx}, renderX:${container.groupTransform.tx}, localX:${container.x})`;\n  if (container.renderGroup) {\n    output += \" (RenderGroup)\";\n  }\n  if (container.filters) {\n    output += \"(*filters)\";\n  }\n  console.log(output, `color:${data.color}; font-weight:bold;`);\n  depth++;\n  for (let i = 0; i < container.children.length; i++) {\n    const child = container.children[i];\n    logScene(child, depth, { ...data });\n  }\n}\nfunction logRenderGroupScene(renderGroup, depth = 0, data = { index: 0, color: \"#000000\" }) {\n  let spaces = \"\";\n  for (let i = 0; i < depth; i++) {\n    spaces += \"    \";\n  }\n  const output = `%c ${spaces}- ${data.index}: ${renderGroup.root.label} worldX:${renderGroup.worldTransform.tx}`;\n  console.log(output, `color:${data.color}; font-weight:bold;`);\n  depth++;\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    const child = renderGroup.renderGroupChildren[i];\n    logRenderGroupScene(child, depth, { ...data, index: i });\n  }\n}\n\nexports.logRenderGroupScene = logRenderGroupScene;\nexports.logScene = logScene;\n//# sourceMappingURL=logScene.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","logScene","container","depth","data","color","renderGroup","colors","colorTick","spaces","i","label","Sprite","texture","output","worldTransform","tx","relativeGroupTransform","groupTransform","x","filters","console","log","children","length","child","logRenderGroupScene","index","root","renderGroupChildren"]
}
