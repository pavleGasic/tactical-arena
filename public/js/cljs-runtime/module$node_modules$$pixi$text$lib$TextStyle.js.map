{
"version":3,
"file":"module$node_modules$$pixi$text$lib$TextStyle.js",
"lineCount":240,
"mappings":"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",
"sources":["node_modules/@pixi/text/lib/TextStyle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text$lib$TextStyle\"] = function(global,require,module,exports) {\n\"use strict\";\nvar _const = require(\"./const.js\"), core = require(\"@pixi/core\");\nconst genericFontFamilies = [\n  \"serif\",\n  \"sans-serif\",\n  \"monospace\",\n  \"cursive\",\n  \"fantasy\",\n  \"system-ui\"\n], _TextStyle = class _TextStyle2 {\n  /**\n   * @param style - TextStyle properties to be set on the text. See {@link PIXI.TextStyle.defaultStyle}\n   *       for the default values.\n   */\n  constructor(style) {\n    this.styleID = 0, this.reset(), deepCopyProperties(this, style, style);\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * Note that the only the properties of the object are cloned.\n   *\n   * @return New cloned TextStyle object\n   */\n  clone() {\n    const clonedProperties = {};\n    return deepCopyProperties(clonedProperties, this, _TextStyle2.defaultStyle), new _TextStyle2(clonedProperties);\n  }\n  /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n  reset() {\n    deepCopyProperties(this, _TextStyle2.defaultStyle, _TextStyle2.defaultStyle);\n  }\n  /**\n   * Alignment for multiline text, does not affect single line text.\n   *\n   * @member {'left'|'center'|'right'|'justify'}\n   */\n  get align() {\n    return this._align;\n  }\n  set align(align) {\n    this._align !== align && (this._align = align, this.styleID++);\n  }\n  /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n  get breakWords() {\n    return this._breakWords;\n  }\n  set breakWords(breakWords) {\n    this._breakWords !== breakWords && (this._breakWords = breakWords, this.styleID++);\n  }\n  /** Set a drop shadow for the text. */\n  get dropShadow() {\n    return this._dropShadow;\n  }\n  set dropShadow(dropShadow) {\n    this._dropShadow !== dropShadow && (this._dropShadow = dropShadow, this.styleID++);\n  }\n  /** Set alpha for the drop shadow. */\n  get dropShadowAlpha() {\n    return this._dropShadowAlpha;\n  }\n  set dropShadowAlpha(dropShadowAlpha) {\n    this._dropShadowAlpha !== dropShadowAlpha && (this._dropShadowAlpha = dropShadowAlpha, this.styleID++);\n  }\n  /** Set a angle of the drop shadow. */\n  get dropShadowAngle() {\n    return this._dropShadowAngle;\n  }\n  set dropShadowAngle(dropShadowAngle) {\n    this._dropShadowAngle !== dropShadowAngle && (this._dropShadowAngle = dropShadowAngle, this.styleID++);\n  }\n  /** Set a shadow blur radius. */\n  get dropShadowBlur() {\n    return this._dropShadowBlur;\n  }\n  set dropShadowBlur(dropShadowBlur) {\n    this._dropShadowBlur !== dropShadowBlur && (this._dropShadowBlur = dropShadowBlur, this.styleID++);\n  }\n  /** A fill style to be used on the dropshadow e.g., 'red', '#00FF00'. */\n  get dropShadowColor() {\n    return this._dropShadowColor;\n  }\n  set dropShadowColor(dropShadowColor) {\n    const outputColor = getColor(dropShadowColor);\n    this._dropShadowColor !== outputColor && (this._dropShadowColor = outputColor, this.styleID++);\n  }\n  /** Set a distance of the drop shadow. */\n  get dropShadowDistance() {\n    return this._dropShadowDistance;\n  }\n  set dropShadowDistance(dropShadowDistance) {\n    this._dropShadowDistance !== dropShadowDistance && (this._dropShadowDistance = dropShadowDistance, this.styleID++);\n  }\n  /**\n   * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n   *\n   * Can be an array to create a gradient e.g., `['#000000','#FFFFFF']`\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n   *\n   * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  get fill() {\n    return this._fill;\n  }\n  set fill(fill) {\n    const outputColor = getColor(fill);\n    this._fill !== outputColor && (this._fill = outputColor, this.styleID++);\n  }\n  /**\n   * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n   *\n   * @type {PIXI.TEXT_GRADIENT}\n   */\n  get fillGradientType() {\n    return this._fillGradientType;\n  }\n  set fillGradientType(fillGradientType) {\n    this._fillGradientType !== fillGradientType && (this._fillGradientType = fillGradientType, this.styleID++);\n  }\n  /**\n   * If fill is an array of colours to create a gradient, this array can set the stop points\n   * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n   */\n  get fillGradientStops() {\n    return this._fillGradientStops;\n  }\n  set fillGradientStops(fillGradientStops) {\n    areArraysEqual(this._fillGradientStops, fillGradientStops) || (this._fillGradientStops = fillGradientStops, this.styleID++);\n  }\n  /**\n   * The font family, can be a single font name, or a list of names where the first\n   * is the preferred font.\n   */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(fontFamily) {\n    this.fontFamily !== fontFamily && (this._fontFamily = fontFamily, this.styleID++);\n  }\n  /**\n   * The font size\n   * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n  set fontSize(fontSize) {\n    this._fontSize !== fontSize && (this._fontSize = fontSize, this.styleID++);\n  }\n  /**\n   * The font style.\n   *\n   * @member {'normal'|'italic'|'oblique'}\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(fontStyle) {\n    this._fontStyle !== fontStyle && (this._fontStyle = fontStyle, this.styleID++);\n  }\n  /**\n   * The font variant.\n   *\n   * @member {'normal'|'small-caps'}\n   */\n  get fontVariant() {\n    return this._fontVariant;\n  }\n  set fontVariant(fontVariant) {\n    this._fontVariant !== fontVariant && (this._fontVariant = fontVariant, this.styleID++);\n  }\n  /**\n   * The font weight.\n   *\n   * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(fontWeight) {\n    this._fontWeight !== fontWeight && (this._fontWeight = fontWeight, this.styleID++);\n  }\n  /** The amount of spacing between letters, default is 0. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(letterSpacing) {\n    this._letterSpacing !== letterSpacing && (this._letterSpacing = letterSpacing, this.styleID++);\n  }\n  /** The line height, a number that represents the vertical space that a letter uses. */\n  get lineHeight() {\n    return this._lineHeight;\n  }\n  set lineHeight(lineHeight) {\n    this._lineHeight !== lineHeight && (this._lineHeight = lineHeight, this.styleID++);\n  }\n  /** The space between lines. */\n  get leading() {\n    return this._leading;\n  }\n  set leading(leading) {\n    this._leading !== leading && (this._leading = leading, this.styleID++);\n  }\n  /**\n   * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n   * Default is 'miter' (creates a sharp corner).\n   *\n   * @member {'miter'|'round'|'bevel'}\n   */\n  get lineJoin() {\n    return this._lineJoin;\n  }\n  set lineJoin(lineJoin) {\n    this._lineJoin !== lineJoin && (this._lineJoin = lineJoin, this.styleID++);\n  }\n  /**\n   * The miter limit to use when using the 'miter' lineJoin mode.\n   *\n   * This can reduce or increase the spikiness of rendered text.\n   */\n  get miterLimit() {\n    return this._miterLimit;\n  }\n  set miterLimit(miterLimit) {\n    this._miterLimit !== miterLimit && (this._miterLimit = miterLimit, this.styleID++);\n  }\n  /**\n   * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n   * by adding padding to all sides of the text.\n   */\n  get padding() {\n    return this._padding;\n  }\n  set padding(padding) {\n    this._padding !== padding && (this._padding = padding, this.styleID++);\n  }\n  /**\n   * A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'\n   */\n  get stroke() {\n    return this._stroke;\n  }\n  set stroke(stroke) {\n    const outputColor = getColor(stroke);\n    this._stroke !== outputColor && (this._stroke = outputColor, this.styleID++);\n  }\n  /**\n   * A number that represents the thickness of the stroke.\n   *\n   * @default 0\n   */\n  get strokeThickness() {\n    return this._strokeThickness;\n  }\n  set strokeThickness(strokeThickness) {\n    this._strokeThickness !== strokeThickness && (this._strokeThickness = strokeThickness, this.styleID++);\n  }\n  /**\n   * The baseline of the text that is rendered.\n   *\n   * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  get textBaseline() {\n    return this._textBaseline;\n  }\n  set textBaseline(textBaseline) {\n    this._textBaseline !== textBaseline && (this._textBaseline = textBaseline, this.styleID++);\n  }\n  /** Trim transparent borders. */\n  get trim() {\n    return this._trim;\n  }\n  set trim(trim) {\n    this._trim !== trim && (this._trim = trim, this.styleID++);\n  }\n  /**\n   * How newlines and spaces should be handled.\n   * Default is 'pre' (preserve, preserve).\n   *\n   *  value       | New lines     |   Spaces\n   *  ---         | ---           |   ---\n   * 'normal'     | Collapse      |   Collapse\n   * 'pre'        | Preserve      |   Preserve\n   * 'pre-line'   | Preserve      |   Collapse\n   *\n   * @member {'normal'|'pre'|'pre-line'}\n   */\n  get whiteSpace() {\n    return this._whiteSpace;\n  }\n  set whiteSpace(whiteSpace) {\n    this._whiteSpace !== whiteSpace && (this._whiteSpace = whiteSpace, this.styleID++);\n  }\n  /** Indicates if word wrap should be used. */\n  get wordWrap() {\n    return this._wordWrap;\n  }\n  set wordWrap(wordWrap) {\n    this._wordWrap !== wordWrap && (this._wordWrap = wordWrap, this.styleID++);\n  }\n  /** The width at which text will wrap, it needs wordWrap to be set to true. */\n  get wordWrapWidth() {\n    return this._wordWrapWidth;\n  }\n  set wordWrapWidth(wordWrapWidth) {\n    this._wordWrapWidth !== wordWrapWidth && (this._wordWrapWidth = wordWrapWidth, this.styleID++);\n  }\n  /**\n   * Generates a font style string to use for `TextMetrics.measureFont()`.\n   *\n   * @return Font style string, for passing to `TextMetrics.measureFont()`\n   */\n  toFontString() {\n    const fontSizeString = typeof this.fontSize == \"number\" ? `${this.fontSize}px` : this.fontSize;\n    let fontFamilies = this.fontFamily;\n    Array.isArray(this.fontFamily) || (fontFamilies = this.fontFamily.split(\",\"));\n    for (let i = fontFamilies.length - 1; i >= 0; i--) {\n      let fontFamily = fontFamilies[i].trim();\n      !/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && !genericFontFamilies.includes(fontFamily) && (fontFamily = `\"${fontFamily}\"`), fontFamilies[i] = fontFamily;\n    }\n    return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(\",\")}`;\n  }\n};\n_TextStyle.defaultStyle = {\n  /**\n   * See {@link PIXI.TextStyle.align}\n   * @type {'left'|'center'|'right'|'justify'}\n   */\n  align: \"left\",\n  /** See {@link PIXI.TextStyle.breakWords} */\n  breakWords: !1,\n  /** See {@link PIXI.TextStyle.dropShadow} */\n  dropShadow: !1,\n  /** See {@link PIXI.TextStyle.dropShadowAlpha} */\n  dropShadowAlpha: 1,\n  /**\n   * See {@link PIXI.TextStyle.dropShadowAngle}\n   * @type {number}\n   * @default Math.PI / 6\n   */\n  dropShadowAngle: Math.PI / 6,\n  /** See {@link PIXI.TextStyle.dropShadowBlur} */\n  dropShadowBlur: 0,\n  /**\n   * See {@link PIXI.TextStyle.dropShadowColor}\n   * @type {string|number}\n   */\n  dropShadowColor: \"black\",\n  /** See {@link PIXI.TextStyle.dropShadowDistance} */\n  dropShadowDistance: 5,\n  /**\n   * See {@link PIXI.TextStyle.fill}\n   * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  fill: \"black\",\n  /**\n   * See {@link PIXI.TextStyle.fillGradientType}\n   * @type {PIXI.TEXT_GRADIENT}\n   * @default PIXI.TEXT_GRADIENT.LINEAR_VERTICAL\n   */\n  fillGradientType: _const.TEXT_GRADIENT.LINEAR_VERTICAL,\n  /**\n   * See {@link PIXI.TextStyle.fillGradientStops}\n   * @type {number[]}\n   * @default []\n   */\n  fillGradientStops: [],\n  /**\n   * See {@link PIXI.TextStyle.fontFamily}\n   * @type {string|string[]}\n   */\n  fontFamily: \"Arial\",\n  /**\n   * See {@link PIXI.TextStyle.fontSize}\n   * @type {number|string} \n   */\n  fontSize: 26,\n  /**\n   * See {@link PIXI.TextStyle.fontStyle}\n   * @type {'normal'|'italic'|'oblique'}\n   */\n  fontStyle: \"normal\",\n  /**\n   * See {@link PIXI.TextStyle.fontVariant}\n   * @type {'normal'|'small-caps'}\n   */\n  fontVariant: \"normal\",\n  /**\n   * See {@link PIXI.TextStyle.fontWeight}\n   * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  fontWeight: \"normal\",\n  /** See {@link PIXI.TextStyle.leading} */\n  leading: 0,\n  /** See {@link PIXI.TextStyle.letterSpacing} */\n  letterSpacing: 0,\n  /** See {@link PIXI.TextStyle.lineHeight} */\n  lineHeight: 0,\n  /**\n   * See {@link PIXI.TextStyle.lineJoin}\n   * @type {'miter'|'round'|'bevel'}\n   */\n  lineJoin: \"miter\",\n  /** See {@link PIXI.TextStyle.miterLimit} */\n  miterLimit: 10,\n  /** See {@link PIXI.TextStyle.padding} */\n  padding: 0,\n  /**\n   * See {@link PIXI.TextStyle.stroke}\n   * @type {string|number}\n   */\n  stroke: \"black\",\n  /** See {@link PIXI.TextStyle.strokeThickness} */\n  strokeThickness: 0,\n  /**\n   * See {@link PIXI.TextStyle.textBaseline} \n   * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  textBaseline: \"alphabetic\",\n  /** See {@link PIXI.TextStyle.trim} */\n  trim: !1,\n  /**\n   * See {@link PIXI.TextStyle.whiteSpace}\n   * @type {'normal'|'pre'|'pre-line'}\n   */\n  whiteSpace: \"pre\",\n  /** See {@link PIXI.TextStyle.wordWrap} */\n  wordWrap: !1,\n  /** See {@link PIXI.TextStyle.wordWrapWidth} */\n  wordWrapWidth: 100\n};\nlet TextStyle = _TextStyle;\nfunction getColor(color) {\n  const temp = core.Color.shared, format = (color2) => {\n    const res = temp.setValue(color2);\n    return res.alpha === 1 ? res.toHex() : res.toRgbaString();\n  };\n  return Array.isArray(color) ? color.map(format) : format(color);\n}\nfunction areArraysEqual(array1, array2) {\n  if (!Array.isArray(array1) || !Array.isArray(array2) || array1.length !== array2.length)\n    return !1;\n  for (let i = 0; i < array1.length; ++i)\n    if (array1[i] !== array2[i])\n      return !1;\n  return !0;\n}\nfunction deepCopyProperties(target, source, propertyObj) {\n  for (const prop in propertyObj)\n    Array.isArray(source[prop]) ? target[prop] = source[prop].slice() : target[prop] = source[prop];\n}\nexports.TextStyle = TextStyle;\n//# sourceMappingURL=TextStyle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getColor","color","temp","core","Color","shared","format","color2","res","setValue","alpha","toHex","toRgbaString","Array","isArray","map","deepCopyProperties","target","source","propertyObj","prop","slice","_const","genericFontFamilies","_TextStyle","constructor","style","styleID","reset","clone","clonedProperties","_TextStyle2","defaultStyle","_align","align","_breakWords","breakWords","_dropShadow","dropShadow","_dropShadowAlpha","dropShadowAlpha","_dropShadowAngle","dropShadowAngle","_dropShadowBlur","dropShadowBlur","_dropShadowColor","dropShadowColor","outputColor","_dropShadowDistance","dropShadowDistance","_fill","fill","_fillGradientType","fillGradientType","_fillGradientStops","fillGradientStops","array1","length","i","_fontFamily","fontFamily","_fontSize","fontSize","_fontStyle","fontStyle","_fontVariant","fontVariant","_fontWeight","fontWeight","_letterSpacing","letterSpacing","_lineHeight","lineHeight","_leading","leading","_lineJoin","lineJoin","_miterLimit","miterLimit","_padding","padding","_stroke","stroke","_strokeThickness","strokeThickness","_textBaseline","textBaseline","_trim","trim","_whiteSpace","whiteSpace","_wordWrap","wordWrap","_wordWrapWidth","wordWrapWidth","toFontString","fontSizeString","fontFamilies","split","test","includes","join","Math","PI","TEXT_GRADIENT","LINEAR_VERTICAL","TextStyle"]
}
