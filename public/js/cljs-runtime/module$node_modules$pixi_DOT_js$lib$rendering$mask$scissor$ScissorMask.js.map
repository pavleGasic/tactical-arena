{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$mask$scissor$ScissorMask.js",
"lineCount":31,
"mappings":"AAAAA,cAAA,CAAA,sEAAA,GAA2F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGnI,MAAIC,gBAAgBH,OAAA,CAAQ,wEAAR,CAApB,EACII,qBAAqBJ,OAAA,CAAQ,6EAAR,CADzB;AAGA,cAAA;AACA,OAAMK,YAAN;AACEC,eAAW,CAACC,IAAD,CAAO;AAChB,UAAKC,CAAAA,QAAL,GAAgB,CAAhB;AACA,UAAKC,CAAAA,IAAL,GAAY,aAAZ;AACA,UAAKF,CAAAA,IAAL,GAAYA,IAAZ;AACA,UAAKA,CAAAA,IAAKG,CAAAA,UAAV,GAAuB,CAAA,CAAvB;AACA,UAAKH,CAAAA,IAAKI,CAAAA,UAAV,GAAuB,CAAA,CAAvB;AALgB;AAOlBC,aAAS,CAACC,MAAD,EAASC,mBAAT,CAA8B;AACrCX,mBAAcA,CAAAA,aAAd,CAA4B,IAAKI,CAAAA,IAAjC,EAAuCM,MAAvC,EAA+CC,mBAA/C,CAAA;AADqC;AAGvCC,kBAAc,CAACF,MAAD,EAASG,SAAT,CAAoB;AAChCZ,wBAAmBA,CAAAA,kBAAnB,CAAsC,IAAKG,CAAAA,IAA3C,EAAiDM,MAAjD,EAAyDG,SAAzD,CAAA;AADgC;AAGlCC,iBAAa,CAACC,KAAD,EAAQC,SAAR,CAAmB;AAE9B,aAAOA,SAAA,CADM,IAAKZ,CAAAA,IACX,EAAgBW,KAAhB,CAAP;AAF8B;AAIhCE,SAAK,EAAG;AACN,UAAKb,CAAAA,IAAKI,CAAAA,UAAV,GAAuB,CAAA,CAAvB;AACA,UAAKJ,CAAAA,IAAL,GAAY,IAAZ;AAFM;AAIRc,WAAO,EAAG;AACR,UAAKD,CAAAA,KAAL,EAAA;AADQ;AAtBZ;AA2BAlB,SAAQG,CAAAA,WAAR,GAAsBA,WAAtB;AAlCmI,CAAnI;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/mask/scissor/ScissorMask.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$mask$scissor$ScissorMask\"] = function(global,require,module,exports) {\n'use strict';\n\nvar addMaskBounds = require('../utils/addMaskBounds.js');\nvar addMaskLocalBounds = require('../utils/addMaskLocalBounds.js');\n\n\"use strict\";\nclass ScissorMask {\n  constructor(mask) {\n    this.priority = 0;\n    this.pipe = \"scissorMask\";\n    this.mask = mask;\n    this.mask.renderable = false;\n    this.mask.measurable = false;\n  }\n  addBounds(bounds, skipUpdateTransform) {\n    addMaskBounds.addMaskBounds(this.mask, bounds, skipUpdateTransform);\n  }\n  addLocalBounds(bounds, localRoot) {\n    addMaskLocalBounds.addMaskLocalBounds(this.mask, bounds, localRoot);\n  }\n  containsPoint(point, hitTestFn) {\n    const mask = this.mask;\n    return hitTestFn(mask, point);\n  }\n  reset() {\n    this.mask.measurable = true;\n    this.mask = null;\n  }\n  destroy() {\n    this.reset();\n  }\n}\n\nexports.ScissorMask = ScissorMask;\n//# sourceMappingURL=ScissorMask.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","addMaskBounds","addMaskLocalBounds","ScissorMask","constructor","mask","priority","pipe","renderable","measurable","addBounds","bounds","skipUpdateTransform","addLocalBounds","localRoot","containsPoint","point","hitTestFn","reset","destroy"]
}
