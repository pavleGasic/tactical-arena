shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$ImageSource = function(global, require, module, exports) {
  var adapter = require("module$node_modules$pixi_DOT_js$lib$environment$adapter");
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  var warn = require("module$node_modules$pixi_DOT_js$lib$utils$logging$warn");
  require = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$TextureSource");
  "use strict";
  class ImageSource extends require.TextureSource {
    constructor(options) {
      if (options.resource && globalThis.HTMLImageElement && options.resource instanceof HTMLImageElement) {
        const canvas = adapter.DOMAdapter.get().createCanvas(options.resource.width, options.resource.height);
        canvas.getContext("2d").drawImage(options.resource, 0, 0, options.resource.width, options.resource.height);
        options.resource = canvas;
        warn.warn("ImageSource: Image element passed, converting to canvas. Use CanvasSource instead.");
      }
      super(options);
      this.uploadMethodId = "image";
      this.autoGarbageCollect = !0;
    }
    static test(resource) {
      return globalThis.HTMLImageElement && resource instanceof HTMLImageElement || "undefined" !== typeof ImageBitmap && resource instanceof ImageBitmap || globalThis.VideoFrame && resource instanceof VideoFrame;
    }
  }
  ImageSource.extension = global.ExtensionType.TextureSource;
  exports.ImageSource = ImageSource;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$ImageSource.js.map
