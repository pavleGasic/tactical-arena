{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$State.js",
"lineCount":80,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/state/State.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$State\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexports.State = State;\n//# sourceMappingURL=State.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","blendModeIds","normal","add","multiply","screen","overlay","erase","min","max","constructor","data","blendMode","polygonOffset","depthMask","blend","value","culling","clockwiseFrontFace","_blendMode","_blendModeId","_polygonOffset","offsets","toString","for2d","state","_State","depthTest","default2d","State"]
}
