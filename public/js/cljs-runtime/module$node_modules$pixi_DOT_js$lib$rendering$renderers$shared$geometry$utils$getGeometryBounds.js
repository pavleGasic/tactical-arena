shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$utils$getGeometryBounds = function(global, require, module, exports) {
  exports.getGeometryBounds = function(geometry, attributeId, bounds) {
    var attribute = geometry.getAttribute(attributeId);
    if (!attribute) {
      return bounds.minX = 0, bounds.minY = 0, bounds.maxX = 0, bounds.maxY = 0, bounds;
    }
    geometry = attribute.buffer.data;
    let minY = attributeId = Infinity, maxX = -Infinity, maxY = -Infinity;
    var byteSize = geometry.BYTES_PER_ELEMENT, offset = (attribute.offset || 0) / byteSize;
    for (attribute = (attribute.stride || 8) / byteSize; offset < geometry.length; offset += attribute) {
      byteSize = geometry[offset];
      const y = geometry[offset + 1];
      byteSize > maxX && (maxX = byteSize);
      y > maxY && (maxY = y);
      byteSize < attributeId && (attributeId = byteSize);
      y < minY && (minY = y);
    }
    bounds.minX = attributeId;
    bounds.minY = minY;
    bounds.maxX = maxX;
    bounds.maxY = maxY;
    return bounds;
  };
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$utils$getGeometryBounds.js.map
