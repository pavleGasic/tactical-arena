{
"version":3,
"file":"module$node_modules$$pixi$text_bitmap$lib$loadBitmapFont.js",
"lineCount":31,
"mappings":"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",
"sources":["node_modules/@pixi/text-bitmap/lib/loadBitmapFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text_bitmap$lib$loadBitmapFont\"] = function(global,require,module,exports) {\n\"use strict\";\nvar assets = require(\"@pixi/assets\"), core = require(\"@pixi/core\"), BitmapFont = require(\"./BitmapFont.js\");\nrequire(\"./formats/index.js\");\nvar TextFormat = require(\"./formats/TextFormat.js\"), XMLStringFormat = require(\"./formats/XMLStringFormat.js\");\nconst validExtensions = [\".xml\", \".fnt\"], loadBitmapFont = {\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: assets.LoaderParserPriority.Normal\n  },\n  name: \"loadBitmapFont\",\n  test(url) {\n    return validExtensions.includes(core.utils.path.extname(url).toLowerCase());\n  },\n  async testParse(data) {\n    return TextFormat.TextFormat.test(data) || XMLStringFormat.XMLStringFormat.test(data);\n  },\n  async parse(asset, data, loader) {\n    const fontData = TextFormat.TextFormat.test(asset) ? TextFormat.TextFormat.parse(asset) : XMLStringFormat.XMLStringFormat.parse(asset), { src } = data, { page: pages } = fontData, textureUrls = [];\n    for (let i = 0; i < pages.length; ++i) {\n      const pageFile = pages[i].file;\n      let imagePath = core.utils.path.join(core.utils.path.dirname(src), pageFile);\n      imagePath = assets.copySearchParams(imagePath, src), textureUrls.push(imagePath);\n    }\n    const loadedTextures = await loader.load(textureUrls), textures = textureUrls.map((url) => loadedTextures[url]);\n    return BitmapFont.BitmapFont.install(fontData, textures, !0);\n  },\n  async load(url, _options) {\n    return (await core.settings.ADAPTER.fetch(url)).text();\n  },\n  unload(bitmapFont) {\n    bitmapFont.destroy();\n  }\n};\ncore.extensions.add(loadBitmapFont);\nexports.loadBitmapFont = loadBitmapFont;\n//# sourceMappingURL=loadBitmapFont.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","assets","core","BitmapFont","TextFormat","XMLStringFormat","validExtensions","loadBitmapFont","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","Normal","name","test","url","includes","utils","path","extname","toLowerCase","testParse","data","parse","asset","loader","fontData","src","pages","textureUrls","i","length","pageFile","file","imagePath","join","dirname","copySearchParams","push","loadedTextures","load","textures","map","install","_options","text","settings","ADAPTER","fetch","unload","bitmapFont","destroy","extensions","add"]
}
