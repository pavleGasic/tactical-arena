{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$layers$RenderLayer.js",
"lineCount":73,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/layers/RenderLayer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$layers$RenderLayer\"] = function(global,require,module,exports) {\n'use strict';\n\nvar warn = require('../../utils/logging/warn.js');\nvar Container = require('../container/Container.js');\n\n\"use strict\";\nconst _RenderLayerClass = class _RenderLayerClass extends Container.Container {\n  /**\n   * Creates a new RenderLayer instance\n   * @param options - Configuration options for the RenderLayer\n   * @param {boolean} [options.sortableChildren=false] - If true, layer children will be automatically sorted each render\n   * @param {Function} [options.sortFunction] - Custom function to sort layer children. Default sorts by zIndex\n   */\n  constructor(options = {}) {\n    options = { ..._RenderLayerClass.defaultOptions, ...options };\n    super();\n    /** List of objects to be rendered by this layer */\n    this.renderLayerChildren = [];\n    this.sortableChildren = options.sortableChildren;\n    this.sortFunction = options.sortFunction;\n  }\n  /**\n   * Add an Container to this render layer. The Container will be rendered as part of this layer\n   * while maintaining its original parent in the scene graph.\n   * If the Container already belongs to a layer, it will be removed from the old layer before being added to this one.\n   * @param children - The Container(s) to add to this layer\n   */\n  attach(...children) {\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.parentRenderLayer) {\n        if (child.parentRenderLayer === this)\n          continue;\n        child.parentRenderLayer.detach(child);\n      }\n      this.renderLayerChildren.push(child);\n      child.parentRenderLayer = this;\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      if (renderGroup) {\n        renderGroup.structureDidChange = true;\n      }\n    }\n    return children[0];\n  }\n  /**\n   * Remove an Container from this render layer. The Container will no longer be rendered\n   * as part of this layer but maintains its original parent.\n   * @param children - The Container(s) to remove from this layer\n   */\n  detach(...children) {\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const index = this.renderLayerChildren.indexOf(child);\n      if (index !== -1) {\n        this.renderLayerChildren.splice(index, 1);\n      }\n      child.parentRenderLayer = null;\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      if (renderGroup) {\n        renderGroup.structureDidChange = true;\n      }\n    }\n    return children[0];\n  }\n  /** Remove all objects from this render layer. */\n  detachAll() {\n    const layerChildren = this.renderLayerChildren;\n    for (let i = 0; i < layerChildren.length; i++) {\n      layerChildren[i].parentRenderLayer = null;\n    }\n    this.renderLayerChildren.length = 0;\n  }\n  collectRenderables(instructionSet, renderer, _currentLayer) {\n    const layerChildren = this.renderLayerChildren;\n    const length = layerChildren.length;\n    if (this.sortableChildren) {\n      this.sortRenderLayerChildren();\n    }\n    for (let i = 0; i < length; i++) {\n      if (!layerChildren[i].parent) {\n        warn.warn(\n          \"Container must be added to both layer and scene graph. Layers only handle render order - the scene graph is required for transforms (addChild)\",\n          layerChildren[i]\n        );\n      }\n      layerChildren[i].collectRenderables(instructionSet, renderer, this);\n    }\n  }\n  /**\n   * Sort the layer's children using the defined sort function.\n   * Will be called each render if sortableChildren is true.\n   * Otherwise can call this manually.\n   */\n  sortRenderLayerChildren() {\n    this.renderLayerChildren.sort(this.sortFunction);\n  }\n  _getGlobalBoundsRecursive(factorRenderLayers, bounds, _currentLayer) {\n    if (!factorRenderLayers)\n      return;\n    const children = this.renderLayerChildren;\n    for (let i = 0; i < children.length; i++) {\n      children[i]._getGlobalBoundsRecursive(true, bounds, this);\n    }\n  }\n};\n/**\n * Default options for RenderLayer instances\n * @property {boolean} sortableChildren - If true, layer children will be automatically sorted each render.\n * Default false.\n * @property {Function} sortFunction - Function used to sort layer children. Default sorts by zIndex.\n */\n_RenderLayerClass.defaultOptions = {\n  sortableChildren: false,\n  sortFunction: (a, b) => a.zIndex - b.zIndex\n};\nlet RenderLayerClass = _RenderLayerClass;\nconst RenderLayer = RenderLayerClass;\n\nexports.RenderLayer = RenderLayer;\nexports.RenderLayerClass = RenderLayerClass;\n//# sourceMappingURL=RenderLayer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","warn","Container","constructor","options","_RenderLayerClass","defaultOptions","renderLayerChildren","sortableChildren","sortFunction","attach","children","i","length","child","parentRenderLayer","detach","push","renderGroup","parentRenderGroup","structureDidChange","index","indexOf","splice","detachAll","layerChildren","collectRenderables","instructionSet","renderer","_currentLayer","sortRenderLayerChildren","parent","sort","_getGlobalBoundsRecursive","factorRenderLayers","bounds","a","b","zIndex","RenderLayer","RenderLayerClass"]
}
