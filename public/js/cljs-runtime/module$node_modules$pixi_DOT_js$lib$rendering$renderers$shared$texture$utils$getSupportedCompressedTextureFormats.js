shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getSupportedCompressedTextureFormats = function(global, require, module, exports) {
  var isWebGLSupported = require("module$node_modules$pixi_DOT_js$lib$utils$browser$isWebGLSupported"), isWebGPUSupported = require("module$node_modules$pixi_DOT_js$lib$utils$browser$isWebGPUSupported"), getSupportedGlCompressedTextureFormats = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$utils$getSupportedGlCompressedTextureFormats"), getSupportedGPUCompressedTextureFormats = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$utils$getSupportedGPUCompressedTextureFormats");
  "use strict";
  let supportedCompressedTextureFormats;
  exports.getSupportedCompressedTextureFormats = async function() {
    return void 0 !== supportedCompressedTextureFormats ? supportedCompressedTextureFormats : supportedCompressedTextureFormats = await (async() => {
      var _isWebGPUSupported = await isWebGPUSupported.isWebGPUSupported();
      const _isWebGLSupported = isWebGLSupported.isWebGLSupported();
      if (_isWebGPUSupported && _isWebGLSupported) {
        _isWebGPUSupported = await getSupportedGPUCompressedTextureFormats.getSupportedGPUCompressedTextureFormats();
        const glTextureFormats = getSupportedGlCompressedTextureFormats.getSupportedGlCompressedTextureFormats();
        return _isWebGPUSupported.filter(format => glTextureFormats.includes(format));
      }
      return _isWebGPUSupported ? await getSupportedGPUCompressedTextureFormats.getSupportedGPUCompressedTextureFormats() : _isWebGLSupported ? getSupportedGlCompressedTextureFormats.getSupportedGlCompressedTextureFormats() : [];
    })();
  };
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getSupportedCompressedTextureFormats.js.map
