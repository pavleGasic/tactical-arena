{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$utils$compileInputs.js",
"lineCount":23,
"mappings":"AAAAA,cAAA,CAAA,sFAAA,GAA2G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAInJC,UAASA,cAAa,CAACC,cAAD,EAAiBC,GAAjB,CAAsB;AAC1C,QAAIC,KAAJ;AACA,UAAMC,QAAQ,iBAAd;AACA,SAAA,EAAgD,IAAhD,MAAQD,KAAR,GAAgBC,KAAMC,CAAAA,IAAN,CAAWJ,cAAX,CAAhB,EAAA;AACEC,SAAII,CAAAA,IAAJ,CAASH,KAAA,CAAM,CAAN,CAAT,CAAA;AADF;AAH0C;AA2B5CJ,SAAQQ,CAAAA,aAAR,GApBAA,QAAsB,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,IAAA,GAAO,CAAA,CAA7B,CAAoC;AACxD,UAAMC,UAAU,EAAhB;AACAX,iBAAA,CAAcS,QAAd,EAAwBE,OAAxB,CAAA;AACAH,aAAUI,CAAAA,OAAV,CAAmBC,QAAD,IAAc;AAC1BA,cAASC,CAAAA,MAAb,IACEd,aAAA,CAAca,QAASC,CAAAA,MAAvB,EAA+BH,OAA/B,CADF;AAD8B,KAAhC,CAAA;AAMID,QAAJ,IADkBC,OAEND,CAAAA,IAAV,EADF;AAGMK,aAAAA,GAJYJ,OAIYK,CAAAA,GAAV,CAAc,CAACC,OAAD,EAAUC,CAAV,CAAA,IAAiB,oBAAmBA,CAAnB,KAAyBD,OAAzB,GAA/B,CAAoEE,CAAAA,IAApE,CAAyE,IAAzE,CAAdJ;AACFK,YAAAA,GAAgBX,QAASY,CAAAA,OAAT,CAAiB,kBAAjB,EAAqC,EAArC,CAAhBD;AAIJ,WAHAA,QAGA,GAHgBA,QAAcC,CAAAA,OAAd,CAAsB,QAAtB,EAAiC;EACjDN,SADiD;CAAjC,CAGhB;AAjBwD,GAoB1D;AA/BmJ,CAAnJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/high-shader/compiler/utils/compileInputs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$utils$compileInputs\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nfunction extractInputs(fragmentSource, out) {\n  let match;\n  const regex = /@in\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction compileInputs(fragments, template, sort = false) {\n  const results = [];\n  extractInputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractInputs(fragment.header, results);\n    }\n  });\n  const mainInput = results;\n  if (sort) {\n    mainInput.sort();\n  }\n  const finalString = mainInput.map((inValue, i) => `       @location(${i}) ${inValue},`).join(\"\\n\");\n  let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, \"\");\n  cleanedString = cleanedString.replace(\"{{in}}\", `\n${finalString}\n`);\n  return cleanedString;\n}\n\nexports.compileInputs = compileInputs;\n//# sourceMappingURL=compileInputs.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extractInputs","fragmentSource","out","match","regex","exec","push","compileInputs","fragments","template","sort","results","forEach","fragment","header","finalString","map","inValue","i","join","cleanedString","replace"]
}
