{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text$AbstractText.js",
"lineCount":107,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text/AbstractText.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text$AbstractText\"] = function(global,require,module,exports) {\n'use strict';\n\nvar ObservablePoint = require('../../maths/point/ObservablePoint.js');\nvar deprecation = require('../../utils/logging/deprecation.js');\nvar ViewContainer = require('../view/ViewContainer.js');\n\n\"use strict\";\nclass AbstractText extends ViewContainer.ViewContainer {\n  constructor(options, styleClass) {\n    const { text, resolution, style, anchor, width, height, roundPixels, ...rest } = options;\n    super({\n      ...rest\n    });\n    this.batched = true;\n    this._resolution = null;\n    this._autoResolution = true;\n    this._didTextUpdate = true;\n    this._styleClass = styleClass;\n    this.text = text ?? \"\";\n    this.style = style;\n    this.resolution = resolution ?? null;\n    this.allowChildren = false;\n    this._anchor = new ObservablePoint.ObservablePoint(\n      {\n        _onUpdate: () => {\n          this.onViewUpdate();\n        }\n      }\n    );\n    if (anchor)\n      this.anchor = anchor;\n    this.roundPixels = roundPixels ?? false;\n    if (width !== void 0)\n      this.width = width;\n    if (height !== void 0)\n      this.height = height;\n  }\n  /**\n   * The anchor sets the origin point of the text.\n   * The default is `(0,0)`, this means the text's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n   *\n   * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n   * @example\n   * import { Text } from 'pixi.js';\n   *\n   * const text = new Text('hello world');\n   * text.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value === \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** Set the copy for the text object. To split a line you can use '\\n'. */\n  set text(value) {\n    value = value.toString();\n    if (this._text === value)\n      return;\n    this._text = value;\n    this.onViewUpdate();\n  }\n  get text() {\n    return this._text;\n  }\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   * @default 1\n   */\n  set resolution(value) {\n    this._autoResolution = value === null;\n    this._resolution = value;\n    this.onViewUpdate();\n  }\n  get resolution() {\n    return this._resolution;\n  }\n  get style() {\n    return this._style;\n  }\n  /**\n   * Set the style of the text.\n   *\n   * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n   *\n   * If setting the `style` can also be partial {@link AnyTextStyleOptions}.\n   * @type {\n   * text.TextStyle |\n   * Partial<text.TextStyle> |\n   * text.TextStyleOptions |\n   * text.HTMLTextStyle |\n   * Partial<text.HTMLTextStyle> |\n   * text.HTMLTextStyleOptions\n   * }\n   */\n  set style(style) {\n    style || (style = {});\n    this._style?.off(\"update\", this.onViewUpdate, this);\n    if (style instanceof this._styleClass) {\n      this._style = style;\n    } else {\n      this._style = new this._styleClass(style);\n    }\n    this._style.on(\"update\", this.onViewUpdate, this);\n    this.onViewUpdate();\n  }\n  /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return Math.abs(this.scale.x) * this.bounds.width;\n  }\n  set width(value) {\n    this._setWidth(value, this.bounds.width);\n  }\n  /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return Math.abs(this.scale.y) * this.bounds.height;\n  }\n  set height(value) {\n    this._setHeight(value, this.bounds.height);\n  }\n  /**\n   * Retrieves the size of the Text as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the Text.\n   */\n  getSize(out) {\n    out || (out = {});\n    out.width = Math.abs(this.scale.x) * this.bounds.width;\n    out.height = Math.abs(this.scale.y) * this.bounds.height;\n    return out;\n  }\n  /**\n   * Sets the size of the Text to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, this.bounds.width);\n    height !== void 0 && this._setHeight(height, this.bounds.height);\n  }\n  /**\n   * Checks if the text contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    const width = this.bounds.width;\n    const height = this.bounds.height;\n    const x1 = -width * this.anchor.x;\n    let y1 = 0;\n    if (point.x >= x1 && point.x <= x1 + width) {\n      y1 = -height * this.anchor.y;\n      if (point.y >= y1 && point.y <= y1 + height)\n        return true;\n    }\n    return false;\n  }\n  onViewUpdate() {\n    if (!this.didViewUpdate)\n      this._didTextUpdate = true;\n    super.onViewUpdate();\n  }\n  _getKey() {\n    return `${this.text}:${this._style.styleKey}:${this._resolution}`;\n  }\n  /**\n   * Destroys this text renderable and optionally its style texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the texture of the text style\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the text style\n   * @param {boolean} [options.style=false] - Should it destroy the style of the text\n   */\n  destroy(options = false) {\n    super.destroy(options);\n    this.owner = null;\n    this._bounds = null;\n    this._anchor = null;\n    if (typeof options === \"boolean\" ? options : options?.style) {\n      this._style.destroy(options);\n    }\n    this._style = null;\n    this._text = null;\n  }\n}\nfunction ensureTextOptions(args, name) {\n  let options = args[0] ?? {};\n  if (typeof options === \"string\" || args[1]) {\n    deprecation.deprecation(deprecation.v8_0_0, `use new ${name}({ text: \"hi!\", style }) instead`);\n    options = {\n      text: options,\n      style: args[1]\n    };\n  }\n  return options;\n}\n\nexports.AbstractText = AbstractText;\nexports.ensureTextOptions = ensureTextOptions;\n//# sourceMappingURL=AbstractText.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ObservablePoint","deprecation","ViewContainer","AbstractText","constructor","options","styleClass","text","resolution","style","anchor","width","height","roundPixels","rest","batched","_resolution","_didTextUpdate","_autoResolution","_styleClass","allowChildren","_anchor","_onUpdate","onViewUpdate","value","set","copyFrom","toString","_text","_style","off","on","Math","abs","scale","x","bounds","_setWidth","y","_setHeight","getSize","out","setSize","containsPoint","point","x1","y1","didViewUpdate","_getKey","styleKey","destroy","_bounds","owner","ensureTextOptions","args","name","v8_0_0"]
}
