{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$filters$defaults$noise$noise_frag.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,GAA0F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGlIC,QAAOC,CAAAA,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAAA;AAIAH,SAAQI,CAAAA,OAAR,GAFeC,qvBAEf;AAPkI,CAAlI;;",
"sources":["node_modules/pixi_DOT_js/lib/filters/defaults/noise/noise.frag.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$filters$defaults$noise$noise_frag\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar fragment = \"\\nin vec2 vTextureCoord;\\nin vec4 vColor;\\n\\nout vec4 finalColor;\\n\\nuniform float uNoise;\\nuniform float uSeed;\\nuniform sampler2D uTexture;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture(uTexture, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\\n    float diff = (randomValue - 0.5) *  uNoise;\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    color.r += diff;\\n    color.g += diff;\\n    color.b += diff;\\n\\n    // Premultiply alpha again.\\n    color.rgb *= color.a;\\n\\n    finalColor = color;\\n}\\n\";\n\nexports.default = fragment;\n//# sourceMappingURL=noise.frag.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","fragment"]
}
