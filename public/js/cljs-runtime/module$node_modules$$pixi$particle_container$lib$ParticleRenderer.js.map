{
"version":3,
"file":"module$node_modules$$pixi$particle_container$lib$ParticleRenderer.js",
"lineCount":125,
"mappings":"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",
"sources":["node_modules/@pixi/particle-container/lib/ParticleRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$particle_container$lib$ParticleRenderer\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), ParticleBuffer = require(\"./ParticleBuffer.js\"), particles$1 = require(\"./particles.frag.js\"), particles = require(\"./particles.vert.js\");\nclass ParticleRenderer extends core.ObjectRenderer {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   */\n  constructor(renderer) {\n    super(renderer), this.shader = null, this.properties = null, this.tempMatrix = new core.Matrix(), this.properties = [\n      // verticesData\n      {\n        attributeName: \"aVertexPosition\",\n        size: 2,\n        uploadFunction: this.uploadVertices,\n        offset: 0\n      },\n      // positionData\n      {\n        attributeName: \"aPositionCoord\",\n        size: 2,\n        uploadFunction: this.uploadPosition,\n        offset: 0\n      },\n      // rotationData\n      {\n        attributeName: \"aRotation\",\n        size: 1,\n        uploadFunction: this.uploadRotation,\n        offset: 0\n      },\n      // uvsData\n      {\n        attributeName: \"aTextureCoord\",\n        size: 2,\n        uploadFunction: this.uploadUvs,\n        offset: 0\n      },\n      // tintData\n      {\n        attributeName: \"aColor\",\n        size: 1,\n        type: core.TYPES.UNSIGNED_BYTE,\n        uploadFunction: this.uploadTint,\n        offset: 0\n      }\n    ], this.shader = core.Shader.from(particles.default, particles$1.default, {}), this.state = core.State.for2d();\n  }\n  /**\n   * Renders the particle container object.\n   * @param container - The container to render using this ParticleRenderer.\n   */\n  render(container) {\n    const children = container.children, maxSize = container._maxSize, batchSize = container._batchSize, renderer = this.renderer;\n    let totalChildren = children.length;\n    if (totalChildren === 0)\n      return;\n    totalChildren > maxSize && !container.autoResize && (totalChildren = maxSize);\n    let buffers = container._buffers;\n    buffers || (buffers = container._buffers = this.generateBuffers(container));\n    const baseTexture = children[0]._texture.baseTexture, premultiplied = baseTexture.alphaMode > 0;\n    this.state.blendMode = core.utils.correctBlendMode(container.blendMode, premultiplied), renderer.state.set(this.state);\n    const gl = renderer.gl, m = container.worldTransform.copyTo(this.tempMatrix);\n    m.prepend(renderer.globalUniforms.uniforms.projectionMatrix), this.shader.uniforms.translationMatrix = m.toArray(!0), this.shader.uniforms.uColor = core.Color.shared.setValue(container.tintRgb).premultiply(container.worldAlpha, premultiplied).toArray(this.shader.uniforms.uColor), this.shader.uniforms.uSampler = baseTexture, this.renderer.shader.bind(this.shader);\n    let updateStatic = !1;\n    for (let i = 0, j = 0; i < totalChildren; i += batchSize, j += 1) {\n      let amount = totalChildren - i;\n      amount > batchSize && (amount = batchSize), j >= buffers.length && buffers.push(this._generateOneMoreBuffer(container));\n      const buffer = buffers[j];\n      buffer.uploadDynamic(children, i, amount);\n      const bid = container._bufferUpdateIDs[j] || 0;\n      updateStatic = updateStatic || buffer._updateID < bid, updateStatic && (buffer._updateID = container._updateID, buffer.uploadStatic(children, i, amount)), renderer.geometry.bind(buffer.geometry), gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n    }\n  }\n  /**\n   * Creates one particle buffer for each child in the container we want to render and updates internal properties.\n   * @param container - The container to render using this ParticleRenderer\n   * @returns - The buffers\n   */\n  generateBuffers(container) {\n    const buffers = [], size = container._maxSize, batchSize = container._batchSize, dynamicPropertyFlags = container._properties;\n    for (let i = 0; i < size; i += batchSize)\n      buffers.push(new ParticleBuffer.ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n    return buffers;\n  }\n  /**\n   * Creates one more particle buffer, because container has autoResize feature.\n   * @param container - The container to render using this ParticleRenderer\n   * @returns - The generated buffer\n   */\n  _generateOneMoreBuffer(container) {\n    const batchSize = container._batchSize, dynamicPropertyFlags = container._properties;\n    return new ParticleBuffer.ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n  }\n  /**\n   * Uploads the vertices.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their vertices uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadVertices(children, startIndex, amount, array, stride, offset) {\n    let w0 = 0, w1 = 0, h0 = 0, h1 = 0;\n    for (let i = 0; i < amount; ++i) {\n      const sprite = children[startIndex + i], texture = sprite._texture, sx = sprite.scale.x, sy = sprite.scale.y, trim = texture.trim, orig = texture.orig;\n      trim ? (w1 = trim.x - sprite.anchor.x * orig.width, w0 = w1 + trim.width, h1 = trim.y - sprite.anchor.y * orig.height, h0 = h1 + trim.height) : (w0 = orig.width * (1 - sprite.anchor.x), w1 = orig.width * -sprite.anchor.x, h0 = orig.height * (1 - sprite.anchor.y), h1 = orig.height * -sprite.anchor.y), array[offset] = w1 * sx, array[offset + 1] = h1 * sy, array[offset + stride] = w0 * sx, array[offset + stride + 1] = h1 * sy, array[offset + stride * 2] = w0 * sx, array[offset + stride * 2 + 1] = h0 * sy, array[offset + stride * 3] = w1 * sx, array[offset + stride * 3 + 1] = h0 * sy, offset += stride * 4;\n    }\n  }\n  /**\n   * Uploads the position.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their positions uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadPosition(children, startIndex, amount, array, stride, offset) {\n    for (let i = 0; i < amount; i++) {\n      const spritePosition = children[startIndex + i].position;\n      array[offset] = spritePosition.x, array[offset + 1] = spritePosition.y, array[offset + stride] = spritePosition.x, array[offset + stride + 1] = spritePosition.y, array[offset + stride * 2] = spritePosition.x, array[offset + stride * 2 + 1] = spritePosition.y, array[offset + stride * 3] = spritePosition.x, array[offset + stride * 3 + 1] = spritePosition.y, offset += stride * 4;\n    }\n  }\n  /**\n   * Uploads the rotation.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadRotation(children, startIndex, amount, array, stride, offset) {\n    for (let i = 0; i < amount; i++) {\n      const spriteRotation = children[startIndex + i].rotation;\n      array[offset] = spriteRotation, array[offset + stride] = spriteRotation, array[offset + stride * 2] = spriteRotation, array[offset + stride * 3] = spriteRotation, offset += stride * 4;\n    }\n  }\n  /**\n   * Uploads the UVs.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadUvs(children, startIndex, amount, array, stride, offset) {\n    for (let i = 0; i < amount; ++i) {\n      const textureUvs = children[startIndex + i]._texture._uvs;\n      textureUvs ? (array[offset] = textureUvs.x0, array[offset + 1] = textureUvs.y0, array[offset + stride] = textureUvs.x1, array[offset + stride + 1] = textureUvs.y1, array[offset + stride * 2] = textureUvs.x2, array[offset + stride * 2 + 1] = textureUvs.y2, array[offset + stride * 3] = textureUvs.x3, array[offset + stride * 3 + 1] = textureUvs.y3, offset += stride * 4) : (array[offset] = 0, array[offset + 1] = 0, array[offset + stride] = 0, array[offset + stride + 1] = 0, array[offset + stride * 2] = 0, array[offset + stride * 2 + 1] = 0, array[offset + stride * 3] = 0, array[offset + stride * 3 + 1] = 0, offset += stride * 4);\n    }\n  }\n  /**\n   * Uploads the tint.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadTint(children, startIndex, amount, array, stride, offset) {\n    for (let i = 0; i < amount; ++i) {\n      const sprite = children[startIndex + i], result = core.Color.shared.setValue(sprite._tintRGB).toPremultiplied(sprite.alpha, sprite.texture.baseTexture.alphaMode > 0);\n      array[offset] = result, array[offset + stride] = result, array[offset + stride * 2] = result, array[offset + stride * 3] = result, offset += stride * 4;\n    }\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    super.destroy(), this.shader && (this.shader.destroy(), this.shader = null), this.tempMatrix = null;\n  }\n}\nParticleRenderer.extension = {\n  name: \"particle\",\n  type: core.ExtensionType.RendererPlugin\n};\ncore.extensions.add(ParticleRenderer);\nexports.ParticleRenderer = ParticleRenderer;\n//# sourceMappingURL=ParticleRenderer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","ParticleBuffer","particles$1","particles","ParticleRenderer","ObjectRenderer","constructor","renderer","properties","shader","tempMatrix","Matrix","attributeName","size","uploadFunction","uploadVertices","offset","uploadPosition","uploadRotation","uploadUvs","type","TYPES","UNSIGNED_BYTE","uploadTint","Shader","from","default","state","State","for2d","render","container","children","maxSize","_maxSize","batchSize","_batchSize","totalChildren","length","autoResize","buffers","_buffers","generateBuffers","baseTexture","_texture","premultiplied","alphaMode","blendMode","utils","correctBlendMode","set","gl","m","worldTransform","copyTo","prepend","globalUniforms","uniforms","projectionMatrix","translationMatrix","toArray","uColor","Color","shared","setValue","tintRgb","premultiply","worldAlpha","uSampler","bind","updateStatic","i","j","amount","push","_generateOneMoreBuffer","buffer","uploadDynamic","bid","_bufferUpdateIDs","_updateID","uploadStatic","geometry","drawElements","TRIANGLES","UNSIGNED_SHORT","dynamicPropertyFlags","_properties","startIndex","array","stride","w0","w1","h0","h1","sprite","texture","sx","scale","x","sy","y","trim","orig","anchor","width","height","spritePosition","position","spriteRotation","rotation","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","result","_tintRGB","toPremultiplied","alpha","destroy","extension","name","ExtensionType","RendererPlugin","extensions","add"]
}
