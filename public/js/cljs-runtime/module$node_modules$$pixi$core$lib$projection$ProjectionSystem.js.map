{
"version":3,
"file":"module$node_modules$$pixi$core$lib$projection$ProjectionSystem.js",
"lineCount":40,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/projection/ProjectionSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$projection$ProjectionSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar extensions = require(\"@pixi/extensions\"), math = require(\"@pixi/math\");\nclass ProjectionSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this.renderer = renderer, this.destinationFrame = null, this.sourceFrame = null, this.defaultFrame = null, this.projectionMatrix = new math.Matrix(), this.transform = null;\n  }\n  /**\n   * Updates the projection-matrix based on the sourceFrame \u2192 destinationFrame mapping provided.\n   *\n   * NOTE: It is expected you call `renderer.framebuffer.setViewport(destinationFrame)` after this. This is because\n   * the framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.\n   *\n   * NOTE-2: {@link PIXI.RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture.\n   * It is expected\n   * that you dirty the current bindings when calling this manually.\n   * @param destinationFrame - The rectangle in the render-target to render the contents into. If rendering to the canvas,\n   *  the origin is on the top-left; if rendering to a render-texture, the origin is on the bottom-left.\n   * @param sourceFrame - The rectangle in world space that contains the contents being rendered.\n   * @param resolution - The resolution of the render-target, which is the ratio of\n   *  world-space (or CSS) pixels to physical pixels.\n   * @param root - Whether the render-target is the screen. This is required because rendering to textures\n   *  is y-flipped (i.e. upside down relative to the screen).\n   */\n  update(destinationFrame, sourceFrame, resolution, root) {\n    this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame, this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame, this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root), this.transform && this.projectionMatrix.append(this.transform);\n    const renderer = this.renderer;\n    renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix, renderer.globalUniforms.update(), renderer.shader.shader && renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);\n  }\n  /**\n   * Calculates the `projectionMatrix` to map points inside `sourceFrame` to inside `destinationFrame`.\n   * @param _destinationFrame - The destination frame in the render-target.\n   * @param sourceFrame - The source frame in world space.\n   * @param _resolution - The render-target's resolution, i.e. ratio of CSS to physical pixels.\n   * @param root - Whether rendering into the screen. Otherwise, if rendering to a framebuffer, the projection\n   *  is y-flipped.\n   */\n  calculateProjection(_destinationFrame, sourceFrame, _resolution, root) {\n    const pm = this.projectionMatrix, sign = root ? -1 : 1;\n    pm.identity(), pm.a = 1 / sourceFrame.width * 2, pm.d = sign * (1 / sourceFrame.height * 2), pm.tx = -1 - sourceFrame.x * pm.a, pm.ty = -sign - sourceFrame.y * pm.d;\n  }\n  /**\n   * Sets the transform of the active render target to the given matrix.\n   * @param _matrix - The transformation matrix\n   */\n  setTransform(_matrix) {\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nProjectionSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"projection\"\n};\nextensions.extensions.add(ProjectionSystem);\nexports.ProjectionSystem = ProjectionSystem;\n//# sourceMappingURL=ProjectionSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extensions","math","ProjectionSystem","constructor","renderer","defaultFrame","sourceFrame","destinationFrame","projectionMatrix","Matrix","transform","update","resolution","root","calculateProjection","append","globalUniforms","uniforms","shader","syncUniformGroup","globals","_destinationFrame","_resolution","pm","sign","identity","a","width","d","height","tx","x","ty","y","setTransform","_matrix","destroy","extension","type","ExtensionType","RendererSystem","name","add"]
}
