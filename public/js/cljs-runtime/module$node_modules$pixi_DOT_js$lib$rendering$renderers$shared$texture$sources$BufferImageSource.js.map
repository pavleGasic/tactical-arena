{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$BufferImageSource.js",
"lineCount":20,
"mappings":"AAAAA,cAAA,CAAA,gGAAA,GAAqH,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGzJC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACAC,SAAAA,GAAgBJ,OAAA,CAAQ,8FAAR,CAAhBI;AAEJ,cAAA;AACA,OAAMC,kBAAN,QAAgCD,QAAcA,CAAAA,aAA9C;AACEE,eAAW,CAACC,OAAD,CAAU;AACnB,YAAMC,SAASD,OAAQE,CAAAA,QAAjBD,IAA6B,IAAIE,YAAJ,CAAiBH,OAAQI,CAAAA,KAAzB,GAAiCJ,OAAQK,CAAAA,MAAzC,GAAkD,CAAlD,CAAnC;AACA,UAAIC,SAASN,OAAQM,CAAAA,MAArB;AACKA,YAAL,KAEIA,MAFJ,GACML,MAAJ,YAAsBE,YAAtB,GACW,aADX,GAEWF,MAAJ,YAAsBM,UAAtB,GACI,YADJ,GAEIN,MAAJ,YAAsBO,WAAtB,GACI,YADJ,GAEIP,MAAJ,YAAsBQ,UAAtB,GACI,YADJ,GAEIR,MAAJ,YAAsBS,WAAtB,GACI,YADJ,GAGI,YAZb;AAiBA,WAAA,CAAM,CACJ,GAAGV,OADC,EAEJE,SAAUD,MAFN,EAGJK,MAHI,CAAN,CAAA;AAKA,UAAKK,CAAAA,cAAL,GAAsB,QAAtB;AAzBmB;AA2BdC,eAAI,CAACV,QAAD,CAAW;AACpB,aAAOA,QAAP,YAA2BW,SAA3B,IAAwCX,QAAxC,YAA4DY,UAA5D,IAA0EZ,QAA1E,YAA8Fa,iBAA9F,IAAmHb,QAAnH,YAAuIO,UAAvI,IAAqJP,QAArJ,YAAyKQ,WAAzK,IAAwLR,QAAxL,YAA4MK,UAA5M,IAA0NL,QAA1N,YAA8OM,WAA9O,IAA6PN,QAA7P,YAAiRC,YAAjR;AADoB;AA5BxB;AAgCAL,mBAAkBkB,CAAAA,SAAlB,GAA8BpB,MAAWqB,CAAAA,aAAcpB,CAAAA,aAAvD;AAEAF,SAAQG,CAAAA,iBAAR,GAA4BA,iBAA5B;AAzC6J,CAA7J;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/sources/BufferImageSource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$BufferImageSource\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../../extensions/Extensions.js');\nvar TextureSource = require('./TextureSource.js');\n\n\"use strict\";\nclass BufferImageSource extends TextureSource.TextureSource {\n  constructor(options) {\n    const buffer = options.resource || new Float32Array(options.width * options.height * 4);\n    let format = options.format;\n    if (!format) {\n      if (buffer instanceof Float32Array) {\n        format = \"rgba32float\";\n      } else if (buffer instanceof Int32Array) {\n        format = \"rgba32uint\";\n      } else if (buffer instanceof Uint32Array) {\n        format = \"rgba32uint\";\n      } else if (buffer instanceof Int16Array) {\n        format = \"rgba16uint\";\n      } else if (buffer instanceof Uint16Array) {\n        format = \"rgba16uint\";\n      } else if (buffer instanceof Int8Array) {\n        format = \"bgra8unorm\";\n      } else {\n        format = \"bgra8unorm\";\n      }\n    }\n    super({\n      ...options,\n      resource: buffer,\n      format\n    });\n    this.uploadMethodId = \"buffer\";\n  }\n  static test(resource) {\n    return resource instanceof Int8Array || resource instanceof Uint8Array || resource instanceof Uint8ClampedArray || resource instanceof Int16Array || resource instanceof Uint16Array || resource instanceof Int32Array || resource instanceof Uint32Array || resource instanceof Float32Array;\n  }\n}\nBufferImageSource.extension = Extensions.ExtensionType.TextureSource;\n\nexports.BufferImageSource = BufferImageSource;\n//# sourceMappingURL=BufferImageSource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","TextureSource","BufferImageSource","constructor","options","buffer","resource","Float32Array","width","height","format","Int32Array","Uint32Array","Int16Array","Uint16Array","uploadMethodId","test","Int8Array","Uint8Array","Uint8ClampedArray","extension","ExtensionType"]
}
