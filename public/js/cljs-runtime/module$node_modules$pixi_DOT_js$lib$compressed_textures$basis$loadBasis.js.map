{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$basis$loadBasis.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,GAA4F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGhIC,QAAAA,GAAeH,OAAA,CAAQ,wEAAR,CAAfG;AACJ,MAAIC,gBAAgBJ,OAAA,CAAQ,wFAAR,CAApB,EACIK,iBAAiBL,OAAA,CAAQ,iEAAR,CADrB;AAEIM,QAAAA,GAAaN,OAAA,CAAQ,2DAAR,CAAbM;AACJ,MAAIC,mBAAmBP,OAAA,CAAQ,iGAAR,CAAvB,EACIQ,6BAA6BR,OAAA,CAAQ,yGAAR,CADjC,EAEIS,oBAAoBT,OAAA,CAAQ,wFAAR,CAFxB;AAIA,cAAA;AA0BAE,SAAQQ,CAAAA,SAAR,GAzBkBA,CAChBC,UAAW,CACTC,KAAMN,MAAWO,CAAAA,aAAcC,CAAAA,UADtB,EAETC,SAAUZ,MAAaa,CAAAA,oBAAqBC,CAAAA,IAFnC,EAGTC,KAAM,WAHG,CADKR,EAMhBQ,KAAM,WANUR,EAOhBS,IAAI,CAACC,GAAD,CAAM;AACR,WAAOf,cAAeA,CAAAA,cAAf,CAA8Be,GAA9B,EAAmC,CAAC,QAAD,CAAnC,CAAP;AADQ,GAPMV,EAUVW,UAAI,CAACD,GAAD,EAAME,MAAN,EAAcC,MAAd,CAAsB;AACxBC,UAAAA,GAAoB,MAAMhB,0BAA2BA,CAAAA,0BAA3B,EAA1BgB;AACAC,UAAAA,GAAiB,MAAMhB,iBAAkBA,CAAAA,iBAAlB,CAAoCW,GAApC,EAAyCI,MAAzC,CAAvBC;AACAC,UAAAA,GAA0B,IAAInB,gBAAiBA,CAAAA,gBAArB,CAAsCkB,MAAtC,CAA1BC;AACN,WAAOtB,aAAcA,CAAAA,aAAd,CAA4BsB,MAA5B,EAAqDH,MAArD,EAA6DH,GAA7D,CAAP;AAJ8B,GAVhBV,EAgBhBiB,MAAM,CAACC,OAAD,CAAU;AACVC,SAAMC,CAAAA,OAAN,CAAcF,OAAd,CAAJ,GACEA,OAAQG,CAAAA,OAAR,CAAiBC,CAAD,IAAOA,CAAEC,CAAAA,OAAF,CAAU,CAAA,CAAV,CAAvB,CADF,GAGEL,OAAQK,CAAAA,OAAR,CAAgB,CAAA,CAAhB,CAHF;AADc,GAhBAvB,CAyBlB;AArCoI,CAApI;;",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/basis/loadBasis.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$basis$loadBasis\"] = function(global,require,module,exports) {\n'use strict';\n\nvar LoaderParser = require('../../assets/loader/parsers/LoaderParser.js');\nvar createTexture = require('../../assets/loader/parsers/textures/utils/createTexture.js');\nvar checkExtension = require('../../assets/utils/checkExtension.js');\nvar Extensions = require('../../extensions/Extensions.js');\nvar CompressedSource = require('../../rendering/renderers/shared/texture/sources/CompressedSource.js');\nvar getSupportedTextureFormats = require('../../rendering/renderers/shared/texture/utils/getSupportedTextureFormats.js');\nvar loadBasisOnWorker = require('./worker/loadBasisOnWorker.js');\n\n\"use strict\";\nconst loadBasis = {\n  extension: {\n    type: Extensions.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.High,\n    name: \"loadBasis\"\n  },\n  name: \"loadBasis\",\n  test(url) {\n    return checkExtension.checkExtension(url, [\".basis\"]);\n  },\n  async load(url, _asset, loader) {\n    const supportedTextures = await getSupportedTextureFormats.getSupportedTextureFormats();\n    const textureOptions = await loadBasisOnWorker.loadBasisOnWorker(url, supportedTextures);\n    const compressedTextureSource = new CompressedSource.CompressedSource(textureOptions);\n    return createTexture.createTexture(compressedTextureSource, loader, url);\n  },\n  unload(texture) {\n    if (Array.isArray(texture)) {\n      texture.forEach((t) => t.destroy(true));\n    } else {\n      texture.destroy(true);\n    }\n  }\n};\n\nexports.loadBasis = loadBasis;\n//# sourceMappingURL=loadBasis.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","LoaderParser","createTexture","checkExtension","Extensions","CompressedSource","getSupportedTextureFormats","loadBasisOnWorker","loadBasis","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","load","_asset","loader","supportedTextures","textureOptions","compressedTextureSource","unload","texture","Array","isArray","forEach","t","destroy"]
}
