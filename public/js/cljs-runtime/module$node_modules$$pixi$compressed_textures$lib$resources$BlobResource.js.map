{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$resources$BlobResource.js",
"lineCount":23,
"mappings":"AAAAA,cAAA,CAAA,wEAAA,GAA6F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAErI,MAAIC,OAAOH,OAAA,CAAQ,0CAAR,CAAX;AACA,OAAMI,aAAN,QAA2BD,KAAKE,CAAAA,cAAhC;AAUEC,eAAW,CAACC,MAAD,EAASC,OAAA,GAAU,CAAEC,MAAO,CAAT,EAAYC,OAAQ,CAApB,EAAuBC,SAAU,CAAA,CAAjC,CAAnB,CAA0D;AAAA,UAC/DC,MAD+D,EACvDC,IADuD;AAElD,cAAjB,IAAA,MAAON,OAAP,IAA6BK,MAAA,GAASL,MAAT,EAAiBM,IAAjB,GAAwB,IAAIC,UAAJ,EAArD,KAA0EF,MAAA,GAAS,IAAT,EAAeC,IAAf,GAAsBN,MAAhG,CAAA;AAAyG,WAAA,CAAMM,IAAN,EAAYL,OAAZ,CAAA;AAAsB,UAAKI,CAAAA,MAAL,GAAcA,MAAd;AAAsB,UAAKG,CAAAA,MAAL,GAAcF,IAAA,GAAO,IAAIV,IAAKa,CAAAA,cAAT,CAAwBH,IAAxB,CAAP,GAAuC,IAArD;AAA2D,UAAKI,CAAAA,KAAL,GAAa,IAAb;AAAmB,UAAKC,CAAAA,MAAL,GAAc,CAAA,CAAd;AAAkC,UAAhB,KAAA,IAAKN,CAAAA,MAAL,IAA6C,CAAA,CAA7C,KAAwBJ,OAAQG,CAAAA,QAAhC,IAAmD,IAAKQ,CAAAA,IAAL,EAAnD;AAAgF,UAAhB,KAAA,IAAKP,CAAAA,MAAL,IAAwB,IAAKG,CAAAA,MAA7B,KAAwC,IAAKE,CAAAA,KAAL,GAAaG,OAAQC,CAAAA,OAAR,CAAgB,IAAhB,CAAb,EAAoC,IAAKH,CAAAA,MAAzC,GAAkD,CAAA,CAAlD,EAAsD,IAAKI,CAAAA,YAAL,CAAkB,IAAKP,CAAAA,MAAOQ,CAAAA,aAA9B,CAA9F;AAFlP;AAIrED,gBAAY,CAACE,KAAD,CAAQ;;AAGpBL,QAAI,EAAG;AACL,aAAO,IAAKF,CAAAA,KAAL,GAAa,IAAKA,CAAAA,KAAlB,IAA2B,IAAKA,CAAAA,KAAL,GAAaQ,KAAA,CAAM,IAAKb,CAAAA,MAAX,CAAmBc,CAAAA,IAAnB,CAAyBC,QAAD,IAAcA,QAASC,CAAAA,IAAT,EAAtC,CAAuDF,CAAAA,IAAvD,CAA6DE,IAAD,IAAUA,IAAKC,CAAAA,WAAL,EAAtE,CAA0FH,CAAAA,IAA1F,CAAgGG,WAAD,KAAkB,IAAKhB,CAAAA,IAAL,GAAY,IAAIiB,WAAJ,CAAgBD,WAAhB,CAAZ,EAA0C,IAAKd,CAAAA,MAA/C,GAAwD,IAAIZ,IAAKa,CAAAA,cAAT,CAAwBa,WAAxB,CAAxD,EAA8F,IAAKX,CAAAA,MAAnG,GAA4G,CAAA,CAA5G,EAAgH,IAAKI,CAAAA,YAAL,CAAkBO,WAAlB,CAAhH,EAAgJ,IAAKE,CAAAA,MAAL,EAAhJ,EAA+J,IAAjL,CAA/F,CAAb,EAAqS,IAAKd,CAAAA,KAArU,CAAP;AADK;AAjBT;AAqBAf,SAAQE,CAAAA,YAAR,GAAuBA,YAAvB;AAxBqI,CAArI;;",
"sources":["node_modules/@pixi/compressed-textures/lib/resources/BlobResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$resources$BlobResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nclass BlobResource extends core.BufferResource {\n  /**\n   * @param source - The buffer/URL of the texture file.\n   * @param {PIXI.IBlobResourceOptions} [options]\n   * @param {boolean} [options.autoLoad=false] - Whether to fetch the data immediately;\n   *  you can fetch it later via {@link PIXI.BlobResource#load}.\n   * @param {number} [options.width=1] - The width in pixels.\n   * @param {number} [options.height=1] - The height in pixels.\n   * @param {1|2|4|8} [options.unpackAlignment=4] - The alignment of the pixel rows.\n   */\n  constructor(source, options = { width: 1, height: 1, autoLoad: !0 }) {\n    let origin, data;\n    typeof source == \"string\" ? (origin = source, data = new Uint8Array()) : (origin = null, data = source), super(data, options), this.origin = origin, this.buffer = data ? new core.ViewableBuffer(data) : null, this._load = null, this.loaded = !1, this.origin !== null && options.autoLoad !== !1 && this.load(), this.origin === null && this.buffer && (this._load = Promise.resolve(this), this.loaded = !0, this.onBlobLoaded(this.buffer.rawBinaryData));\n  }\n  onBlobLoaded(_data) {\n  }\n  /** Loads the blob */\n  load() {\n    return this._load ? this._load : (this._load = fetch(this.origin).then((response) => response.blob()).then((blob) => blob.arrayBuffer()).then((arrayBuffer) => (this.data = new Uint32Array(arrayBuffer), this.buffer = new core.ViewableBuffer(arrayBuffer), this.loaded = !0, this.onBlobLoaded(arrayBuffer), this.update(), this)), this._load);\n  }\n}\nexports.BlobResource = BlobResource;\n//# sourceMappingURL=BlobResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","BlobResource","BufferResource","constructor","source","options","width","height","autoLoad","origin","data","Uint8Array","buffer","ViewableBuffer","_load","loaded","load","Promise","resolve","onBlobLoaded","rawBinaryData","_data","fetch","then","response","blob","arrayBuffer","Uint32Array","update"]
}
