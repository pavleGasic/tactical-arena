{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$bounds$Bounds.js",
"lineCount":226,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/bounds/Bounds.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$bounds$Bounds\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar Rectangle = require('../../../maths/shapes/Rectangle.js');\n\n\"use strict\";\nconst defaultMatrix = new Matrix.Matrix();\nclass Bounds {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /** @default Infinity */\n    this.minX = Infinity;\n    /** @default Infinity */\n    this.minY = Infinity;\n    /** @default -Infinity */\n    this.maxX = -Infinity;\n    /** @default -Infinity */\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if bounds are empty.\n   * @returns - True if empty.\n   */\n  isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  }\n  /** The bounding rectangle of the bounds. */\n  get rectangle() {\n    if (!this._rectangle) {\n      this._rectangle = new Rectangle.Rectangle();\n    }\n    const rectangle = this._rectangle;\n    if (this.minX > this.maxX || this.minY > this.maxY) {\n      rectangle.x = 0;\n      rectangle.y = 0;\n      rectangle.width = 0;\n      rectangle.height = 0;\n    } else {\n      rectangle.copyFromBounds(this);\n    }\n    return rectangle;\n  }\n  /** Clears the bounds and resets. */\n  clear() {\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    return this;\n  }\n  /**\n   * Sets the bounds.\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   */\n  set(x0, y0, x1, y1) {\n    this.minX = x0;\n    this.minY = y0;\n    this.maxX = x1;\n    this.maxY = y1;\n  }\n  /**\n   * Adds sprite frame\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   * @param matrix\n   */\n  addFrame(x0, y0, x1, y1, matrix) {\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    let x = a * x0 + c * y0 + tx;\n    let y = b * x0 + d * y0 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x1 + c * y0 + tx;\n    y = b * x1 + d * y0 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x0 + c * y1 + tx;\n    y = b * x0 + d * y1 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x1 + c * y1 + tx;\n    y = b * x1 + d * y1 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Adds a rectangle to the bounds.\n   * @param rect - The rectangle to be added.\n   * @param matrix - The matrix to apply to the bounds.\n   */\n  addRect(rect, matrix) {\n    this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, matrix);\n  }\n  /**\n   * Adds other {@link Bounds}.\n   * @param bounds - The Bounds to be added\n   * @param matrix\n   */\n  addBounds(bounds, matrix) {\n    this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY, matrix);\n  }\n  /**\n   * Adds other Bounds, masked with Bounds.\n   * @param mask - The Bounds to be added.\n   */\n  addBoundsMask(mask) {\n    this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n    this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n    this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n    this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n  }\n  /**\n   * Adds other Bounds, multiplied with matrix.\n   * @param matrix - The matrix to apply to the bounds.\n   */\n  applyMatrix(matrix) {\n    const minX = this.minX;\n    const minY = this.minY;\n    const maxX = this.maxX;\n    const maxY = this.maxY;\n    const { a, b, c, d, tx, ty } = matrix;\n    let x = a * minX + c * minY + tx;\n    let y = b * minX + d * minY + ty;\n    this.minX = x;\n    this.minY = y;\n    this.maxX = x;\n    this.maxY = y;\n    x = a * maxX + c * minY + tx;\n    y = b * maxX + d * minY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * minX + c * maxY + tx;\n    y = b * minX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * maxX + c * maxY + tx;\n    y = b * maxX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n  }\n  /**\n   * Resizes the bounds object to include the given rectangle.\n   * @param rect - The rectangle to be included.\n   */\n  fit(rect) {\n    if (this.minX < rect.left)\n      this.minX = rect.left;\n    if (this.maxX > rect.right)\n      this.maxX = rect.right;\n    if (this.minY < rect.top)\n      this.minY = rect.top;\n    if (this.maxY > rect.bottom)\n      this.maxY = rect.bottom;\n    return this;\n  }\n  /**\n   * Resizes the bounds object to include the given bounds.\n   * @param left - The left value of the bounds.\n   * @param right - The right value of the bounds.\n   * @param top - The top value of the bounds.\n   * @param bottom - The bottom value of the bounds.\n   */\n  fitBounds(left, right, top, bottom) {\n    if (this.minX < left)\n      this.minX = left;\n    if (this.maxX > right)\n      this.maxX = right;\n    if (this.minY < top)\n      this.minY = top;\n    if (this.maxY > bottom)\n      this.maxY = bottom;\n    return this;\n  }\n  /**\n   * Pads bounds object, making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   */\n  pad(paddingX, paddingY = paddingX) {\n    this.minX -= paddingX;\n    this.maxX += paddingX;\n    this.minY -= paddingY;\n    this.maxY += paddingY;\n    return this;\n  }\n  /** Ceils the bounds. */\n  ceil() {\n    this.minX = Math.floor(this.minX);\n    this.minY = Math.floor(this.minY);\n    this.maxX = Math.ceil(this.maxX);\n    this.maxY = Math.ceil(this.maxY);\n    return this;\n  }\n  /** Clones the bounds. */\n  clone() {\n    return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n  }\n  /**\n   * Scales the bounds by the given values\n   * @param x - The X value to scale by.\n   * @param y - The Y value to scale by.\n   */\n  scale(x, y = x) {\n    this.minX *= x;\n    this.minY *= y;\n    this.maxX *= x;\n    this.maxY *= y;\n    return this;\n  }\n  /** the x value of the bounds. */\n  get x() {\n    return this.minX;\n  }\n  set x(value) {\n    const width = this.maxX - this.minX;\n    this.minX = value;\n    this.maxX = value + width;\n  }\n  /** the y value of the bounds. */\n  get y() {\n    return this.minY;\n  }\n  set y(value) {\n    const height = this.maxY - this.minY;\n    this.minY = value;\n    this.maxY = value + height;\n  }\n  /** the width value of the bounds. */\n  get width() {\n    return this.maxX - this.minX;\n  }\n  set width(value) {\n    this.maxX = this.minX + value;\n  }\n  /** the height value of the bounds. */\n  get height() {\n    return this.maxY - this.minY;\n  }\n  set height(value) {\n    this.maxY = this.minY + value;\n  }\n  /** the left value of the bounds. */\n  get left() {\n    return this.minX;\n  }\n  /** the right value of the bounds. */\n  get right() {\n    return this.maxX;\n  }\n  /** the top value of the bounds. */\n  get top() {\n    return this.minY;\n  }\n  /** the bottom value of the bounds. */\n  get bottom() {\n    return this.maxY;\n  }\n  /** Is the bounds positive. */\n  get isPositive() {\n    return this.maxX - this.minX > 0 && this.maxY - this.minY > 0;\n  }\n  get isValid() {\n    return this.minX + this.minY !== Infinity;\n  }\n  /**\n   * Adds screen vertices from array\n   * @param vertexData - calculated vertices\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   * @param matrix\n   */\n  addVertexData(vertexData, beginOffset, endOffset, matrix) {\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const localX = vertexData[i];\n      const localY = vertexData[i + 1];\n      const x = a * localX + c * localY + tx;\n      const y = b * localX + d * localY + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n    }\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if the point is contained within the bounds.\n   * @param x - x coordinate\n   * @param y - y coordinate\n   */\n  containsPoint(x, y) {\n    if (this.minX <= x && this.minY <= y && this.maxX >= x && this.maxY >= y) {\n      return true;\n    }\n    return false;\n  }\n  toString() {\n    return `[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n  }\n  /**\n   * Copies the bounds from another bounds object.\n   * @param bounds - The bounds to copy from.\n   * @returns - This bounds object.\n   */\n  copyFrom(bounds) {\n    this.minX = bounds.minX;\n    this.minY = bounds.minY;\n    this.maxX = bounds.maxX;\n    this.maxY = bounds.maxY;\n    return this;\n  }\n}\n\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matrix","Rectangle","defaultMatrix","Bounds","constructor","minX","Infinity","minY","maxX","maxY","matrix","isEmpty","_rectangle","rectangle","x","y","width","height","copyFromBounds","clear","set","x0","y0","x1","y1","addFrame","a","b","c","d","tx","ty","addRect","rect","addBounds","bounds","addBoundsMask","mask","applyMatrix","fit","left","right","top","bottom","fitBounds","pad","paddingX","paddingY","ceil","Math","floor","clone","scale","value","addVertexData","vertexData","beginOffset","endOffset","i","localX","localY","containsPoint","toString","copyFrom"]
}
