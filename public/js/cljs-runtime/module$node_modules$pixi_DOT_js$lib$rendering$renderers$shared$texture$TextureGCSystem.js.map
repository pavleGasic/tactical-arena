{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureGCSystem.js",
"lineCount":34,
"mappings":"AAAAA,cAAA,CAAA,sFAAA,GAA2G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG/IC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AAEJ,cAAA;AACyB,QAAA,kGAAA,KAAA;AAEvBC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKC,CAAAA,SAAL,GAAiBD,QAAjB;AAEA,UAAKE,CAAAA,UAAL,GADA,IAAKC,CAAAA,KACL,GADa,CACb;AAHoB;AAKtBC,QAAI,CAACC,OAAD,CAAU;AACZA,aAAA,GAAU,CAAE,GAAGC,+FAAiBC,CAAAA,cAAtB,EAAsC,GAAGF,OAAzC,CAAV;AACA,UAAKG,CAAAA,aAAL,GAAqBH,OAAQI,CAAAA,sBAA7B;AACA,UAAKC,CAAAA,OAAL,GAAeL,OAAQM,CAAAA,iBAAvB,IAA4CN,OAAQO,CAAAA,gBAApD;AACA,UAAKC,CAAAA,MAAL,GAAcR,OAAQS,CAAAA,eAAtB;AAJY;AAUdC,cAAU,EAAG;AACN,UAAKd,CAAAA,SAAUe,CAAAA,iBAApB,KAGA,IAAKb,CAAAA,KAAL,EACA,EAAK,IAAKU,CAAAA,MAAV,KAEA,IAAKX,CAAAA,UAAL,EACA,EAAI,IAAKA,CAAAA,UAAT,GAAsB,IAAKM,CAAAA,aAA3B,KACE,IAAKN,CAAAA,UACL,GADkB,CAClB,EAAA,IAAKe,CAAAA,GAAL,EAFF,CAHA,CAJA;AADW;AAiBbA,OAAG,EAAG;AACJ,YAAMC,kBAAkB,IAAKjB,CAAAA,SAAUkB,CAAAA,OAAQD,CAAAA,eAA/C;AACA,WAAK,IAAIE,IAAI,CAAb,EAAgBA,CAAhB,GAAoBF,eAAgBG,CAAAA,MAApC,EAA4CD,CAAA,EAA5C,CAAiD;AAC/C,cAAMD,UAAUD,eAAA,CAAgBE,CAAhB,CAAhB;AACID,eAAQG,CAAAA,kBAAZ,IAAkCH,OAAQI,CAAAA,QAA1C,IAAyE,CAAC,CAA1E,GAAsDJ,OAAQK,CAAAA,QAA9D,IAA+E,IAAKrB,CAAAA,KAApF,GAA4FgB,OAAQK,CAAAA,QAApG,GAA+G,IAAKd,CAAAA,OAApH,KACES,OAAQK,CAAAA,QACR,GADmB,CAAC,CACpB,EAAAL,OAAQM,CAAAA,MAAR,EAFF;AAF+C;AAF7C;AAUNC,WAAO,EAAG;AACR,UAAKzB,CAAAA,SAAL,GAAiB,IAAjB;AADQ;AA5Ca,GAAA;AAAnBK,SAAAA,GAAmB,+FAAnBA;AAiDNA,SAAiBqB,CAAAA,SAAjB,GAA6B,CAC3BC,KAAM,CACJ9B,MAAW+B,CAAAA,aAAcC,CAAAA,WADrB,EAEJhC,MAAW+B,CAAAA,aAAcE,CAAAA,YAFrB,CADqB,EAK3BC,KAAM,WALqB,CAA7B;AAQA1B,SAAiBC,CAAAA,cAAjB,GAAkC,CAKhCO,gBAAiB,CAAA,CALe,EAUhCH,kBAAmB,IAVa,EAehCC,iBAAkB,IAfc,EAoBhCH,uBAAwB,GApBQ,CAAlC;AAwBAZ,SAAQoC,CAAAA,eAAR,GAFsB3B,OAEtB;AAvFmJ,CAAnJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/TextureGCSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureGCSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * @deprecated since 8.3.0\n   * @see {@link TextureGCSystem.textureGCMaxIdle}\n   */\n  textureGCAMaxIdle: null,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\n\nexports.TextureGCSystem = TextureGCSystem;\n//# sourceMappingURL=TextureGCSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","constructor","renderer","_renderer","checkCount","count","init","options","_TextureGCSystem","defaultOptions","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","postrender","renderingToScreen","run","managedTextures","texture","i","length","autoGarbageCollect","resource","_touched","unload","destroy","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","name","TextureGCSystem"]
}
