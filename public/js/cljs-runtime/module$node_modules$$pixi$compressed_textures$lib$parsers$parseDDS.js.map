{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$parsers$parseDDS.js",
"lineCount":57,
"mappings":"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",
"sources":["node_modules/@pixi/compressed-textures/lib/parsers/parseDDS.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$parsers$parseDDS\"] = function(global,require,module,exports) {\n\"use strict\";\nvar _const = require(\"../const.js\");\nrequire(\"../resources/index.js\");\nvar CompressedTextureResource = require(\"../resources/CompressedTextureResource.js\");\nconst DDS_MAGIC_SIZE = 4, DDS_HEADER_SIZE = 124, DDS_HEADER_PF_SIZE = 32, DDS_HEADER_DX10_SIZE = 20, DDS_MAGIC = 542327876, DDS_FIELDS = {\n  SIZE: 1,\n  FLAGS: 2,\n  HEIGHT: 3,\n  WIDTH: 4,\n  MIPMAP_COUNT: 7,\n  PIXEL_FORMAT: 19\n}, DDS_PF_FIELDS = {\n  SIZE: 0,\n  FLAGS: 1,\n  FOURCC: 2,\n  RGB_BITCOUNT: 3,\n  R_BIT_MASK: 4,\n  G_BIT_MASK: 5,\n  B_BIT_MASK: 6,\n  A_BIT_MASK: 7\n}, DDS_DX10_FIELDS = {\n  DXGI_FORMAT: 0,\n  RESOURCE_DIMENSION: 1,\n  MISC_FLAG: 2,\n  ARRAY_SIZE: 3,\n  MISC_FLAGS2: 4\n}, PF_FLAGS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072, FOURCC_DXT1 = 827611204, FOURCC_DXT3 = 861165636, FOURCC_DXT5 = 894720068, FOURCC_DX10 = 808540228, DDS_RESOURCE_MISC_TEXTURECUBE = 4, FOURCC_TO_FORMAT = {\n  [FOURCC_DXT1]: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n  [FOURCC_DXT3]: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  [FOURCC_DXT5]: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n}, DXGI_TO_FORMAT = {\n  // WEBGL_compressed_texture_s3tc\n  70: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n  71: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n  73: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  74: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  76: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n  77: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n  // WEBGL_compressed_texture_s3tc_srgb\n  72: _const.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n  75: _const.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n  78: _const.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n  // EXT_texture_compression_bptc\n  // BC6H\n  96: _const.INTERNAL_FORMATS.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n  95: _const.INTERNAL_FORMATS.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n  // BC7\n  98: _const.INTERNAL_FORMATS.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n  99: _const.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT\n};\nfunction parseDDS(arrayBuffer) {\n  const data = new Uint32Array(arrayBuffer);\n  if (data[0] !== DDS_MAGIC)\n    throw new Error(\"Invalid DDS file magic word\");\n  const header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT), height = header[DDS_FIELDS.HEIGHT], width = header[DDS_FIELDS.WIDTH], mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT], pixelFormat = new Uint32Array(\n    arrayBuffer,\n    DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT,\n    DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT\n  ), formatFlags = pixelFormat[PF_FLAGS];\n  if (formatFlags & DDPF_FOURCC) {\n    const fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n    if (fourCC !== FOURCC_DX10) {\n      const internalFormat2 = FOURCC_TO_FORMAT[fourCC], dataOffset2 = DDS_MAGIC_SIZE + DDS_HEADER_SIZE, texData = new Uint8Array(arrayBuffer, dataOffset2);\n      return [new CompressedTextureResource.CompressedTextureResource(texData, {\n        format: internalFormat2,\n        width,\n        height,\n        levels: mipmapCount\n        // CompressedTextureResource will separate the levelBuffers for us!\n      })];\n    }\n    const dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE, dx10Header = new Uint32Array(\n      data.buffer,\n      dx10Offset,\n      DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT\n    ), dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT], resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION], miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG], arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE], internalFormat = DXGI_TO_FORMAT[dxgiFormat];\n    if (internalFormat === void 0)\n      throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n    if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE)\n      throw new Error(\"DDSParser does not support cubemap textures\");\n    if (resourceDimension === 6)\n      throw new Error(\"DDSParser does not supported 3D texture data\");\n    const imageBuffers = new Array(), dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE + DDS_HEADER_DX10_SIZE;\n    if (arraySize === 1)\n      imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n    else {\n      const pixelSize = _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];\n      let imageSize = 0, levelWidth = width, levelHeight = height;\n      for (let i = 0; i < mipmapCount; i++) {\n        const alignedLevelWidth = Math.max(1, levelWidth + 3 & -4), alignedLevelHeight = Math.max(1, levelHeight + 3 & -4), levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n        imageSize += levelSize, levelWidth = levelWidth >>> 1, levelHeight = levelHeight >>> 1;\n      }\n      let imageOffset = dataOffset;\n      for (let i = 0; i < arraySize; i++)\n        imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize)), imageOffset += imageSize;\n    }\n    return imageBuffers.map((buffer) => new CompressedTextureResource.CompressedTextureResource(buffer, {\n      format: internalFormat,\n      width,\n      height,\n      levels: mipmapCount\n    }));\n  }\n  throw formatFlags & DDPF_RGB ? new Error(\"DDSParser does not support uncompressed texture data.\") : formatFlags & DDPF_YUV ? new Error(\"DDSParser does not supported YUV uncompressed texture data.\") : formatFlags & DDPF_LUMINANCE ? new Error(\"DDSParser does not support single-channel (lumninance) texture data!\") : formatFlags & DDPF_ALPHA ? new Error(\"DDSParser does not support single-channel (alpha) texture data!\") : new Error(\"DDSParser failed to load a texture file due to an unknown reason!\");\n}\nexports.parseDDS = parseDDS;\n//# sourceMappingURL=parseDDS.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","CompressedTextureResource","FOURCC_TO_FORMAT","FOURCC_DXT1","INTERNAL_FORMATS","COMPRESSED_RGBA_S3TC_DXT1_EXT","FOURCC_DXT3","COMPRESSED_RGBA_S3TC_DXT3_EXT","FOURCC_DXT5","COMPRESSED_RGBA_S3TC_DXT5_EXT","DXGI_TO_FORMAT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT","COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","parseDDS","arrayBuffer","data","Uint32Array","DDS_MAGIC","Error","header","DDS_HEADER_SIZE","BYTES_PER_ELEMENT","height","HEIGHT","width","WIDTH","mipmapCount","MIPMAP_COUNT","pixelFormat","PIXEL_FORMAT","DDS_HEADER_PF_SIZE","formatFlags","PF_FLAGS","DDPF_FOURCC","fourCC","FOURCC","FOURCC_DX10","internalFormat2","texData","Uint8Array","dataOffset2","format","levels","dx10Header","buffer","dx10Offset","DDS_HEADER_DX10_SIZE","dxgiFormat","DXGI_FORMAT","resourceDimension","RESOURCE_DIMENSION","miscFlag","MISC_FLAG","arraySize","ARRAY_SIZE","internalFormat","DDS_RESOURCE_MISC_TEXTURECUBE","imageBuffers","push","dataOffset","pixelSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL","imageSize","levelWidth","levelHeight","i","Math","max","alignedLevelWidth","alignedLevelHeight","imageOffset","map","DDPF_RGB","DDPF_YUV","DDPF_LUMINANCE","DDPF_ALPHA"]
}
