{
"version":3,
"file":"module$node_modules$$pixi$filter_blur$lib$BlurFilterPass.js",
"lineCount":52,
"mappings":"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",
"sources":["node_modules/@pixi/filter-blur/lib/BlurFilterPass.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$filter_blur$lib$BlurFilterPass\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), generateBlurFragSource = require(\"./generateBlurFragSource.js\"), generateBlurVertSource = require(\"./generateBlurVertSource.js\");\nclass BlurFilterPass extends core.Filter {\n  /**\n   * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n   * @param strength - The strength of the blur filter.\n   * @param quality - The quality of the blur filter.\n   * @param {number|null} [resolution=PIXI.Filter.defaultResolution] - The resolution of the blur filter.\n   * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n  constructor(horizontal, strength = 8, quality = 4, resolution = core.Filter.defaultResolution, kernelSize = 5) {\n    const vertSrc = generateBlurVertSource.generateBlurVertSource(kernelSize, horizontal), fragSrc = generateBlurFragSource.generateBlurFragSource(kernelSize);\n    super(\n      // vertex shader\n      vertSrc,\n      // fragment shader\n      fragSrc\n    ), this.horizontal = horizontal, this.resolution = resolution, this._quality = 0, this.quality = quality, this.blur = strength;\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - How to clear\n   */\n  apply(filterManager, input, output, clearMode) {\n    if (output ? this.horizontal ? this.uniforms.strength = 1 / output.width * (output.width / input.width) : this.uniforms.strength = 1 / output.height * (output.height / input.height) : this.horizontal ? this.uniforms.strength = 1 / filterManager.renderer.width * (filterManager.renderer.width / input.width) : this.uniforms.strength = 1 / filterManager.renderer.height * (filterManager.renderer.height / input.height), this.uniforms.strength *= this.strength, this.uniforms.strength /= this.passes, this.passes === 1)\n      filterManager.applyFilter(this, input, output, clearMode);\n    else {\n      const renderTarget = filterManager.getFilterTexture(), renderer = filterManager.renderer;\n      let flip = input, flop = renderTarget;\n      this.state.blend = !1, filterManager.applyFilter(this, flip, flop, core.CLEAR_MODES.CLEAR);\n      for (let i = 1; i < this.passes - 1; i++) {\n        filterManager.bindAndClear(flip, core.CLEAR_MODES.BLIT), this.uniforms.uSampler = flop;\n        const temp = flop;\n        flop = flip, flip = temp, renderer.shader.bind(this), renderer.geometry.draw(5);\n      }\n      this.state.blend = !0, filterManager.applyFilter(this, flop, output, clearMode), filterManager.returnFilterTexture(renderTarget);\n    }\n  }\n  /**\n   * Sets the strength of both the blur.\n   * @default 16\n   */\n  get blur() {\n    return this.strength;\n  }\n  set blur(value) {\n    this.padding = 1 + Math.abs(value) * 2, this.strength = value;\n  }\n  /**\n   * Sets the quality of the blur by modifying the number of passes. More passes means higher\n   * quality bluring but the lower the performance.\n   * @default 4\n   */\n  get quality() {\n    return this._quality;\n  }\n  set quality(value) {\n    this._quality = value, this.passes = value;\n  }\n}\nexports.BlurFilterPass = BlurFilterPass;\n//# sourceMappingURL=BlurFilterPass.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","generateBlurFragSource","generateBlurVertSource","BlurFilterPass","Filter","constructor","horizontal","strength","quality","resolution","defaultResolution","kernelSize","vertSrc","fragSrc","_quality","blur","apply","filterManager","input","output","clearMode","uniforms","width","height","renderer","passes","applyFilter","renderTarget","getFilterTexture","flop","state","blend","flip","CLEAR_MODES","CLEAR","i","bindAndClear","BLIT","temp","uSampler","shader","bind","geometry","draw","returnFilterTexture","value","padding","Math","abs"]
}
