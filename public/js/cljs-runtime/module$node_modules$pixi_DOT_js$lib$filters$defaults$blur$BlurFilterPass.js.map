{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$filters$defaults$blur$BlurFilterPass.js",
"lineCount":55,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/filters/defaults/blur/BlurFilterPass.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$filters$defaults$blur$BlurFilterPass\"] = function(global,require,module,exports) {\n'use strict';\n\nvar TexturePool = require('../../../rendering/renderers/shared/texture/TexturePool.js');\nvar types = require('../../../rendering/renderers/types.js');\nvar Filter = require('../../Filter.js');\nvar generateBlurGlProgram = require('./gl/generateBlurGlProgram.js');\nvar generateBlurProgram = require('./gpu/generateBlurProgram.js');\n\n\"use strict\";\nconst _BlurFilterPass = class _BlurFilterPass extends Filter.Filter {\n  /**\n   * @param options\n   * @param options.horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n   * @param options.strength - The strength of the blur filter.\n   * @param options.quality - The quality of the blur filter.\n   * @param options.kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n  constructor(options) {\n    options = { ..._BlurFilterPass.defaultOptions, ...options };\n    const glProgram = generateBlurGlProgram.generateBlurGlProgram(options.horizontal, options.kernelSize);\n    const gpuProgram = generateBlurProgram.generateBlurProgram(options.horizontal, options.kernelSize);\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        blurUniforms: {\n          uStrength: { value: 0, type: \"f32\" }\n        }\n      },\n      ...options\n    });\n    this.horizontal = options.horizontal;\n    this._quality = 0;\n    this.quality = options.quality;\n    this.blur = options.strength;\n    this._uniforms = this.resources.blurUniforms.uniforms;\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - How to clear\n   */\n  apply(filterManager, input, output, clearMode) {\n    this._uniforms.uStrength = this.strength / this.passes;\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clearMode);\n    } else {\n      const tempTexture = TexturePool.TexturePool.getSameSizeTexture(input);\n      let flip = input;\n      let flop = tempTexture;\n      this._state.blend = false;\n      const shouldClear = filterManager.renderer.type === types.RendererType.WEBGPU;\n      for (let i = 0; i < this.passes - 1; i++) {\n        filterManager.applyFilter(this, flip, flop, i === 0 ? true : shouldClear);\n        const temp = flop;\n        flop = flip;\n        flip = temp;\n      }\n      this._state.blend = true;\n      filterManager.applyFilter(this, flip, output, clearMode);\n      TexturePool.TexturePool.returnTexture(tempTexture);\n    }\n  }\n  /**\n   * Sets the strength of both the blur.\n   * @default 16\n   */\n  get blur() {\n    return this.strength;\n  }\n  set blur(value) {\n    this.padding = 1 + Math.abs(value) * 2;\n    this.strength = value;\n  }\n  /**\n   * Sets the quality of the blur by modifying the number of passes. More passes means higher\n   * quality blurring but the lower the performance.\n   * @default 4\n   */\n  get quality() {\n    return this._quality;\n  }\n  set quality(value) {\n    this._quality = value;\n    this.passes = value;\n  }\n};\n/** Default blur filter pass options */\n_BlurFilterPass.defaultOptions = {\n  /** The strength of the blur filter. */\n  strength: 8,\n  /** The quality of the blur filter. */\n  quality: 4,\n  /** The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15. */\n  kernelSize: 5\n};\nlet BlurFilterPass = _BlurFilterPass;\n\nexports.BlurFilterPass = BlurFilterPass;\n//# sourceMappingURL=BlurFilterPass.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","TexturePool","types","Filter","generateBlurGlProgram","generateBlurProgram","constructor","options","_BlurFilterPass","defaultOptions","glProgram","horizontal","kernelSize","gpuProgram","resources","blurUniforms","uStrength","value","type","_quality","quality","blur","strength","_uniforms","uniforms","apply","filterManager","input","output","clearMode","passes","applyFilter","tempTexture","getSameSizeTexture","flop","_state","blend","shouldClear","renderer","RendererType","WEBGPU","i","flip","temp","returnTexture","padding","Math","abs","BlurFilterPass"]
}
