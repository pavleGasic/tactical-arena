{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$uploaders$glUploadCompressedTextureResource.js",
"lineCount":17,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$uploaders$glUploadCompressedTextureResource\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst compressedFormatMap = {\n  \"bc1-rgba-unorm\": true,\n  \"bc1-rgba-unorm-srgb\": true,\n  \"bc2-rgba-unorm\": true,\n  \"bc2-rgba-unorm-srgb\": true,\n  \"bc3-rgba-unorm\": true,\n  \"bc3-rgba-unorm-srgb\": true,\n  \"bc4-r-unorm\": true,\n  \"bc4-r-snorm\": true,\n  \"bc5-rg-unorm\": true,\n  \"bc5-rg-snorm\": true,\n  \"bc6h-rgb-ufloat\": true,\n  \"bc6h-rgb-float\": true,\n  \"bc7-rgba-unorm\": true,\n  \"bc7-rgba-unorm-srgb\": true,\n  // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  \"etc2-rgb8unorm\": true,\n  \"etc2-rgb8unorm-srgb\": true,\n  \"etc2-rgb8a1unorm\": true,\n  \"etc2-rgb8a1unorm-srgb\": true,\n  \"etc2-rgba8unorm\": true,\n  \"etc2-rgba8unorm-srgb\": true,\n  \"eac-r11unorm\": true,\n  \"eac-r11snorm\": true,\n  \"eac-rg11unorm\": true,\n  \"eac-rg11snorm\": true,\n  // ASTC compressed formats usable if \"texture-compression-astc\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  \"astc-4x4-unorm\": true,\n  \"astc-4x4-unorm-srgb\": true,\n  \"astc-5x4-unorm\": true,\n  \"astc-5x4-unorm-srgb\": true,\n  \"astc-5x5-unorm\": true,\n  \"astc-5x5-unorm-srgb\": true,\n  \"astc-6x5-unorm\": true,\n  \"astc-6x5-unorm-srgb\": true,\n  \"astc-6x6-unorm\": true,\n  \"astc-6x6-unorm-srgb\": true,\n  \"astc-8x5-unorm\": true,\n  \"astc-8x5-unorm-srgb\": true,\n  \"astc-8x6-unorm\": true,\n  \"astc-8x6-unorm-srgb\": true,\n  \"astc-8x8-unorm\": true,\n  \"astc-8x8-unorm-srgb\": true,\n  \"astc-10x5-unorm\": true,\n  \"astc-10x5-unorm-srgb\": true,\n  \"astc-10x6-unorm\": true,\n  \"astc-10x6-unorm-srgb\": true,\n  \"astc-10x8-unorm\": true,\n  \"astc-10x8-unorm-srgb\": true,\n  \"astc-10x10-unorm\": true,\n  \"astc-10x10-unorm-srgb\": true,\n  \"astc-12x10-unorm\": true,\n  \"astc-12x10-unorm-srgb\": true,\n  \"astc-12x12-unorm\": true,\n  \"astc-12x12-unorm-srgb\": true\n};\nconst glUploadCompressedTextureResource = {\n  id: \"compressed\",\n  upload(source, glTexture, gl) {\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const compressed = !!compressedFormatMap[source.format];\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      if (compressed) {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_2D,\n          i,\n          glTexture.internalFormat,\n          mipWidth,\n          mipHeight,\n          0,\n          levelBuffer\n        );\n      } else {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          i,\n          glTexture.internalFormat,\n          mipWidth,\n          mipHeight,\n          0,\n          glTexture.format,\n          glTexture.type,\n          levelBuffer\n        );\n      }\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\n\nexports.glUploadCompressedTextureResource = glUploadCompressedTextureResource;\n//# sourceMappingURL=glUploadCompressedTextureResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","compressedFormatMap","glUploadCompressedTextureResource","id","upload","source","glTexture","gl","pixelStorei","UNPACK_ALIGNMENT","mipWidth","pixelWidth","mipHeight","pixelHeight","compressed","format","i","resource","length","levelBuffer","compressedTexImage2D","TEXTURE_2D","internalFormat","texImage2D","type","Math","max"]
}
