{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$color$Color.js",
"lineCount":214,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/color/Color.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$color$Color\"] = function(global,require,module,exports) {\n'use strict';\n\nvar colord = require('@pixi/colord');\nvar namesPlugin = require('@pixi/colord/plugins/names');\n\n\"use strict\";\ncolord.extend([namesPlugin]);\nconst _Color = class _Color {\n  /**\n   * @param {ColorSource} value - Optional value to use, if not provided, white is used.\n   */\n  constructor(value = 16777215) {\n    this._value = null;\n    this._components = new Float32Array(4);\n    this._components.fill(1);\n    this._int = 16777215;\n    this.value = value;\n  }\n  /** Get red component (0 - 1) */\n  get red() {\n    return this._components[0];\n  }\n  /** Get green component (0 - 1) */\n  get green() {\n    return this._components[1];\n  }\n  /** Get blue component (0 - 1) */\n  get blue() {\n    return this._components[2];\n  }\n  /** Get alpha component (0 - 1) */\n  get alpha() {\n    return this._components[3];\n  }\n  /**\n   * Set the value, suitable for chaining\n   * @param value\n   * @see Color.value\n   */\n  setValue(value) {\n    this.value = value;\n    return this;\n  }\n  /**\n   * The current color source.\n   *\n   * When setting:\n   * - Setting to an instance of `Color` will copy its color source and components.\n   * - Otherwise, `Color` will try to normalize the color source and set the components.\n   *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n   *\n   * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n   * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n   *\n   * When getting:\n   * - A return value of `null` means the previous value was overridden (e.g., {@link Color.multiply multiply},\n   *   {@link Color.premultiply premultiply} or {@link Color.round round}).\n   * - Otherwise, the color source used when setting is returned.\n   */\n  set value(value) {\n    if (value instanceof _Color) {\n      this._value = this._cloneSource(value._value);\n      this._int = value._int;\n      this._components.set(value._components);\n    } else if (value === null) {\n      throw new Error(\"Cannot set Color#value to null\");\n    } else if (this._value === null || !this._isSourceEqual(this._value, value)) {\n      this._value = this._cloneSource(value);\n      this._normalize(this._value);\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  /**\n   * Copy a color source internally.\n   * @param value - Color source\n   */\n  _cloneSource(value) {\n    if (typeof value === \"string\" || typeof value === \"number\" || value instanceof Number || value === null) {\n      return value;\n    } else if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      return value.slice(0);\n    } else if (typeof value === \"object\" && value !== null) {\n      return { ...value };\n    }\n    return value;\n  }\n  /**\n   * Equality check for color sources.\n   * @param value1 - First color source\n   * @param value2 - Second color source\n   * @returns `true` if the color sources are equal, `false` otherwise.\n   */\n  _isSourceEqual(value1, value2) {\n    const type1 = typeof value1;\n    const type2 = typeof value2;\n    if (type1 !== type2) {\n      return false;\n    } else if (type1 === \"number\" || type1 === \"string\" || value1 instanceof Number) {\n      return value1 === value2;\n    } else if (Array.isArray(value1) && Array.isArray(value2) || ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2)) {\n      if (value1.length !== value2.length) {\n        return false;\n      }\n      return value1.every((v, i) => v === value2[i]);\n    } else if (value1 !== null && value2 !== null) {\n      const keys1 = Object.keys(value1);\n      const keys2 = Object.keys(value2);\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      return keys1.every((key) => value1[key] === value2[key]);\n    }\n    return value1 === value2;\n  }\n  /**\n   * Convert to a RGBA color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n   */\n  toRgba() {\n    const [r, g, b, a] = this._components;\n    return { r, g, b, a };\n  }\n  /**\n   * Convert to a RGB color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n   */\n  toRgb() {\n    const [r, g, b] = this._components;\n    return { r, g, b };\n  }\n  /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n  toRgbaString() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return `rgba(${r},${g},${b},${this.alpha})`;\n  }\n  toUint8RgbArray(out) {\n    const [r, g, b] = this._components;\n    if (!this._arrayRgb) {\n      this._arrayRgb = [];\n    }\n    out || (out = this._arrayRgb);\n    out[0] = Math.round(r * 255);\n    out[1] = Math.round(g * 255);\n    out[2] = Math.round(b * 255);\n    return out;\n  }\n  toArray(out) {\n    if (!this._arrayRgba) {\n      this._arrayRgba = [];\n    }\n    out || (out = this._arrayRgba);\n    const [r, g, b, a] = this._components;\n    out[0] = r;\n    out[1] = g;\n    out[2] = b;\n    out[3] = a;\n    return out;\n  }\n  toRgbArray(out) {\n    if (!this._arrayRgb) {\n      this._arrayRgb = [];\n    }\n    out || (out = this._arrayRgb);\n    const [r, g, b] = this._components;\n    out[0] = r;\n    out[1] = g;\n    out[2] = b;\n    return out;\n  }\n  /**\n   * Convert to a hexadecimal number.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toNumber(); // returns 16777215\n   */\n  toNumber() {\n    return this._int;\n  }\n  /**\n   * Convert to a BGR number\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color(0xffcc99).toBgrNumber(); // returns 0x99ccff\n   */\n  toBgrNumber() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return (b << 16) + (g << 8) + r;\n  }\n  /**\n   * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n   * @returns {number} - The color as a number in little endian format.\n   */\n  toLittleEndianNumber() {\n    const value = this._int;\n    return (value >> 16) + (value & 65280) + ((value & 255) << 16);\n  }\n  /**\n   * Multiply with another color. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param {ColorSource} value - The color to multiply by.\n   */\n  multiply(value) {\n    const [r, g, b, a] = _Color._temp.setValue(value)._components;\n    this._components[0] *= r;\n    this._components[1] *= g;\n    this._components[2] *= b;\n    this._components[3] *= a;\n    this._refreshInt();\n    this._value = null;\n    return this;\n  }\n  /**\n   * Converts color to a premultiplied alpha format. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {Color} - Itself.\n   */\n  premultiply(alpha, applyToRGB = true) {\n    if (applyToRGB) {\n      this._components[0] *= alpha;\n      this._components[1] *= alpha;\n      this._components[2] *= alpha;\n    }\n    this._components[3] = alpha;\n    this._refreshInt();\n    this._value = null;\n    return this;\n  }\n  /**\n   * Premultiplies alpha with current color.\n   * @param {number} alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {number} tint multiplied by alpha\n   */\n  toPremultiplied(alpha, applyToRGB = true) {\n    if (alpha === 1) {\n      return (255 << 24) + this._int;\n    }\n    if (alpha === 0) {\n      return applyToRGB ? 0 : this._int;\n    }\n    let r = this._int >> 16 & 255;\n    let g = this._int >> 8 & 255;\n    let b = this._int & 255;\n    if (applyToRGB) {\n      r = r * alpha + 0.5 | 0;\n      g = g * alpha + 0.5 | 0;\n      b = b * alpha + 0.5 | 0;\n    }\n    return (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n  }\n  /**\n   * Convert to a hexadecimal string.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHex(); // returns \"#ffffff\"\n   */\n  toHex() {\n    const hexString = this._int.toString(16);\n    return `#${\"000000\".substring(0, 6 - hexString.length) + hexString}`;\n  }\n  /**\n   * Convert to a hexadecimal string with alpha.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHexa(); // returns \"#ffffffff\"\n   */\n  toHexa() {\n    const alphaValue = Math.round(this._components[3] * 255);\n    const alphaString = alphaValue.toString(16);\n    return this.toHex() + \"00\".substring(0, 2 - alphaString.length) + alphaString;\n  }\n  /**\n   * Set alpha, suitable for chaining.\n   * @param alpha\n   */\n  setAlpha(alpha) {\n    this._components[3] = this._clamp(alpha);\n    return this;\n  }\n  /**\n   * Normalize the input value into rgba\n   * @param value - Input value\n   */\n  _normalize(value) {\n    let r;\n    let g;\n    let b;\n    let a;\n    if ((typeof value === \"number\" || value instanceof Number) && value >= 0 && value <= 16777215) {\n      const int = value;\n      r = (int >> 16 & 255) / 255;\n      g = (int >> 8 & 255) / 255;\n      b = (int & 255) / 255;\n      a = 1;\n    } else if ((Array.isArray(value) || value instanceof Float32Array) && value.length >= 3 && value.length <= 4) {\n      value = this._clamp(value);\n      [r, g, b, a = 1] = value;\n    } else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray) && value.length >= 3 && value.length <= 4) {\n      value = this._clamp(value, 0, 255);\n      [r, g, b, a = 255] = value;\n      r /= 255;\n      g /= 255;\n      b /= 255;\n      a /= 255;\n    } else if (typeof value === \"string\" || typeof value === \"object\") {\n      if (typeof value === \"string\") {\n        const match = _Color.HEX_PATTERN.exec(value);\n        if (match) {\n          value = `#${match[2]}`;\n        }\n      }\n      const color = colord.colord(value);\n      if (color.isValid()) {\n        ({ r, g, b, a } = color.rgba);\n        r /= 255;\n        g /= 255;\n        b /= 255;\n      }\n    }\n    if (r !== void 0) {\n      this._components[0] = r;\n      this._components[1] = g;\n      this._components[2] = b;\n      this._components[3] = a;\n      this._refreshInt();\n    } else {\n      throw new Error(`Unable to convert color ${value}`);\n    }\n  }\n  /** Refresh the internal color rgb number */\n  _refreshInt() {\n    this._clamp(this._components);\n    const [r, g, b] = this._components;\n    this._int = (r * 255 << 16) + (g * 255 << 8) + (b * 255 | 0);\n  }\n  /**\n   * Clamps values to a range. Will override original values\n   * @param value - Value(s) to clamp\n   * @param min - Minimum value\n   * @param max - Maximum value\n   */\n  _clamp(value, min = 0, max = 1) {\n    if (typeof value === \"number\") {\n      return Math.min(Math.max(value, min), max);\n    }\n    value.forEach((v, i) => {\n      value[i] = Math.min(Math.max(v, min), max);\n    });\n    return value;\n  }\n  /**\n   * Check if the value is a color-like object\n   * @param value - Value to check\n   * @returns True if the value is a color-like object\n   * @static\n   * @example\n   * import { Color } from 'pixi.js';\n   * Color.isColorLike('white'); // returns true\n   * Color.isColorLike(0xffffff); // returns true\n   * Color.isColorLike([1, 1, 1]); // returns true\n   */\n  static isColorLike(value) {\n    return typeof value === \"number\" || typeof value === \"string\" || value instanceof Number || value instanceof _Color || Array.isArray(value) || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Float32Array || value.r !== void 0 && value.g !== void 0 && value.b !== void 0 || value.r !== void 0 && value.g !== void 0 && value.b !== void 0 && value.a !== void 0 || value.h !== void 0 && value.s !== void 0 && value.l !== void 0 || value.h !== void 0 && value.s !== void 0 && value.l !== void 0 && value.a !== void 0 || value.h !== void 0 && value.s !== void 0 && value.v !== void 0 || value.h !== void 0 && value.s !== void 0 && value.v !== void 0 && value.a !== void 0;\n  }\n};\n/**\n * Default Color object for static uses\n * @example\n * import { Color } from 'pixi.js';\n * Color.shared.setValue(0xffffff).toHex(); // '#ffffff'\n */\n_Color.shared = new _Color();\n/**\n * Temporary Color object for static uses internally.\n * As to not conflict with Color.shared.\n * @ignore\n */\n_Color._temp = new _Color();\n/** Pattern for hex strings */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n_Color.HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\nlet Color = _Color;\n\nexports.Color = Color;\n//# sourceMappingURL=Color.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","colord","namesPlugin","extend","constructor","value","_value","_components","Float32Array","fill","_int","setValue","_Color","_cloneSource","set","Error","_isSourceEqual","_normalize","Number","Array","isArray","ArrayBuffer","isView","slice","value1","value2","type1","type2","length","every","v","i","keys1","Object","keys","keys2","key","toRgba","r","g","b","a","toRgb","toRgbaString","toUint8RgbArray","alpha","out","_arrayRgb","Math","round","toArray","_arrayRgba","toRgbArray","toNumber","toBgrNumber","toLittleEndianNumber","multiply","_temp","_refreshInt","premultiply","applyToRGB","toPremultiplied","toHex","hexString","toString","substring","toHexa","alphaString","alphaValue","setAlpha","_clamp","int","Uint8Array","Uint8ClampedArray","match","HEX_PATTERN","exec","color","isValid","rgba","min","max","forEach","isColorLike","h","s","l","shared","Color"]
}
