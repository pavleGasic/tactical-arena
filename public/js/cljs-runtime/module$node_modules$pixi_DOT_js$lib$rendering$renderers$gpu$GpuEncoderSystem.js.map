{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuEncoderSystem.js",
"lineCount":120,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/GpuEncoderSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuEncoderSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\n\n\"use strict\";\nclass GpuEncoderSystem {\n  constructor(renderer) {\n    this._boundBindGroup = /* @__PURE__ */ Object.create(null);\n    this._boundVertexBuffer = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  renderStart() {\n    this.commandFinished = new Promise((resolve) => {\n      this._resolveCommandFinished = resolve;\n    });\n    this.commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n  }\n  beginRenderPass(gpuRenderTarget) {\n    this.endRenderPass();\n    this._clearCache();\n    this.renderPassEncoder = this.commandEncoder.beginRenderPass(gpuRenderTarget.descriptor);\n  }\n  endRenderPass() {\n    if (this.renderPassEncoder) {\n      this.renderPassEncoder.end();\n    }\n    this.renderPassEncoder = null;\n  }\n  setViewport(viewport) {\n    this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n  }\n  setPipelineFromGeometryProgramAndState(geometry, program, state, topology) {\n    const pipeline = this._renderer.pipeline.getPipeline(geometry, program, state, topology);\n    this.setPipeline(pipeline);\n  }\n  setPipeline(pipeline) {\n    if (this._boundPipeline === pipeline)\n      return;\n    this._boundPipeline = pipeline;\n    this.renderPassEncoder.setPipeline(pipeline);\n  }\n  _setVertexBuffer(index, buffer) {\n    if (this._boundVertexBuffer[index] === buffer)\n      return;\n    this._boundVertexBuffer[index] = buffer;\n    this.renderPassEncoder.setVertexBuffer(index, this._renderer.buffer.updateBuffer(buffer));\n  }\n  _setIndexBuffer(buffer) {\n    if (this._boundIndexBuffer === buffer)\n      return;\n    this._boundIndexBuffer = buffer;\n    const indexFormat = buffer.data.BYTES_PER_ELEMENT === 2 ? \"uint16\" : \"uint32\";\n    this.renderPassEncoder.setIndexBuffer(this._renderer.buffer.updateBuffer(buffer), indexFormat);\n  }\n  resetBindGroup(index) {\n    this._boundBindGroup[index] = null;\n  }\n  setBindGroup(index, bindGroup, program) {\n    if (this._boundBindGroup[index] === bindGroup)\n      return;\n    this._boundBindGroup[index] = bindGroup;\n    bindGroup._touch(this._renderer.textureGC.count);\n    const gpuBindGroup = this._renderer.bindGroup.getBindGroup(bindGroup, program, index);\n    this.renderPassEncoder.setBindGroup(index, gpuBindGroup);\n  }\n  setGeometry(geometry, program) {\n    const buffersToBind = this._renderer.pipeline.getBufferNamesToBind(geometry, program);\n    for (const i in buffersToBind) {\n      this._setVertexBuffer(i, geometry.attributes[buffersToBind[i]].buffer);\n    }\n    if (geometry.indexBuffer) {\n      this._setIndexBuffer(geometry.indexBuffer);\n    }\n  }\n  _setShaderBindGroups(shader, skipSync) {\n    for (const i in shader.groups) {\n      const bindGroup = shader.groups[i];\n      if (!skipSync) {\n        this._syncBindGroup(bindGroup);\n      }\n      this.setBindGroup(i, bindGroup, shader.gpuProgram);\n    }\n  }\n  _syncBindGroup(bindGroup) {\n    for (const j in bindGroup.resources) {\n      const resource = bindGroup.resources[j];\n      if (resource.isUniformGroup) {\n        this._renderer.ubo.updateUniformGroup(resource);\n      }\n    }\n  }\n  draw(options) {\n    const { geometry, shader, state, topology, size, start, instanceCount, skipSync } = options;\n    this.setPipelineFromGeometryProgramAndState(geometry, shader.gpuProgram, state, topology);\n    this.setGeometry(geometry, shader.gpuProgram);\n    this._setShaderBindGroups(shader, skipSync);\n    if (geometry.indexBuffer) {\n      this.renderPassEncoder.drawIndexed(\n        size || geometry.indexBuffer.data.length,\n        instanceCount ?? geometry.instanceCount,\n        start || 0\n      );\n    } else {\n      this.renderPassEncoder.draw(size || geometry.getSize(), instanceCount ?? geometry.instanceCount, start || 0);\n    }\n  }\n  finishRenderPass() {\n    if (this.renderPassEncoder) {\n      this.renderPassEncoder.end();\n      this.renderPassEncoder = null;\n    }\n  }\n  postrender() {\n    this.finishRenderPass();\n    this._gpu.device.queue.submit([this.commandEncoder.finish()]);\n    this._resolveCommandFinished();\n    this.commandEncoder = null;\n  }\n  // restores a render pass if finishRenderPass was called\n  // not optimised as really used for debugging!\n  // used when we want to stop drawing and log a texture..\n  restoreRenderPass() {\n    const descriptor = this._renderer.renderTarget.adaptor.getDescriptor(\n      this._renderer.renderTarget.renderTarget,\n      false,\n      [0, 0, 0, 1]\n    );\n    this.renderPassEncoder = this.commandEncoder.beginRenderPass(descriptor);\n    const boundPipeline = this._boundPipeline;\n    const boundVertexBuffer = { ...this._boundVertexBuffer };\n    const boundIndexBuffer = this._boundIndexBuffer;\n    const boundBindGroup = { ...this._boundBindGroup };\n    this._clearCache();\n    const viewport = this._renderer.renderTarget.viewport;\n    this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n    this.setPipeline(boundPipeline);\n    for (const i in boundVertexBuffer) {\n      this._setVertexBuffer(i, boundVertexBuffer[i]);\n    }\n    for (const i in boundBindGroup) {\n      this.setBindGroup(i, boundBindGroup[i], null);\n    }\n    this._setIndexBuffer(boundIndexBuffer);\n  }\n  _clearCache() {\n    for (let i = 0; i < 16; i++) {\n      this._boundBindGroup[i] = null;\n      this._boundVertexBuffer[i] = null;\n    }\n    this._boundIndexBuffer = null;\n    this._boundPipeline = null;\n  }\n  destroy() {\n    this._renderer = null;\n    this._gpu = null;\n    this._boundBindGroup = null;\n    this._boundVertexBuffer = null;\n    this._boundIndexBuffer = null;\n    this._boundPipeline = null;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n}\n/** @ignore */\nGpuEncoderSystem.extension = {\n  type: [Extensions.ExtensionType.WebGPUSystem],\n  name: \"encoder\",\n  priority: 1\n};\n\nexports.GpuEncoderSystem = GpuEncoderSystem;\n//# sourceMappingURL=GpuEncoderSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","GpuEncoderSystem","constructor","renderer","_boundBindGroup","Object","create","_boundVertexBuffer","_renderer","renderStart","commandFinished","Promise","resolve","_resolveCommandFinished","commandEncoder","gpu","device","createCommandEncoder","beginRenderPass","gpuRenderTarget","endRenderPass","_clearCache","renderPassEncoder","descriptor","end","setViewport","viewport","x","y","width","height","setPipelineFromGeometryProgramAndState","geometry","program","state","topology","pipeline","getPipeline","setPipeline","_boundPipeline","_setVertexBuffer","index","buffer","setVertexBuffer","updateBuffer","_setIndexBuffer","_boundIndexBuffer","indexFormat","data","BYTES_PER_ELEMENT","setIndexBuffer","resetBindGroup","setBindGroup","bindGroup","_touch","textureGC","count","gpuBindGroup","getBindGroup","setGeometry","buffersToBind","getBufferNamesToBind","i","attributes","indexBuffer","_setShaderBindGroups","shader","skipSync","groups","_syncBindGroup","gpuProgram","j","resources","resource","isUniformGroup","ubo","updateUniformGroup","draw","options","size","start","instanceCount","drawIndexed","length","getSize","finishRenderPass","postrender","_gpu","queue","submit","finish","restoreRenderPass","renderTarget","adaptor","getDescriptor","boundPipeline","boundVertexBuffer","boundIndexBuffer","boundBindGroup","destroy","contextChange","extension","type","ExtensionType","WebGPUSystem","name","priority"]
}
