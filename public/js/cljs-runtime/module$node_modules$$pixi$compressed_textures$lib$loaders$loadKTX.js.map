{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$loaders$loadKTX.js",
"lineCount":21,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,GAAsF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE1HC,SAASH,OAAA,CAAQ,4CAAR,CAFiH,EAExFI,OAAOJ,OAAA,CAAQ,0CAAR,CAFiF;AAG9HA,SAAA,CAAQ,iEAAR,CAAA;AACA,MAAIK,WAAWL,OAAA,CAAQ,oEAAR,CAAf;AACMM,QAAAA,GAAU,CACdC,UAAW,CACTC,KAAMJ,IAAKK,CAAAA,aAAcC,CAAAA,UADhB,EAETC,SAAUR,MAAOS,CAAAA,oBAAqBC,CAAAA,IAF7B,CADG,EAKdC,KAAM,SALQ,EAMdC,IAAI,CAACC,GAAD,CAAM;AACR,WAAOb,MAAOc,CAAAA,cAAP,CAAsBD,GAAtB,EAA2B,MAA3B,CAAP;AADQ,GANI,EASRE,UAAI,CAACF,GAAD,EAAMG,KAAN,EAAaC,MAAb,CAAqB;AAAA,UACvBC,cAAc,MAA+CA,CAAxC,MAAMjB,IAAKkB,CAAAA,QAASC,CAAAA,OAAQC,CAAAA,KAAtB,CAA4BR,GAA5B,CAAkCK,EAAAA,WAAzC,EADG,EACqD,CAAEI,UAAF,EAAcC,YAAd,EAA4BC,MAA5B,CAAA,GAAuCtB,QAASA,CAAAA,QAAT,CAAkBW,GAAlB,EAAuBK,WAAvB,CAD5F,EACiIO,YAAYH,UAAZG,IAA0BF,YAD3J,EACyKG,UAAU,CAC9MC,OAAQ1B,IAAK2B,CAAAA,YAAaC,CAAAA,GADoL,EAE9MC,UAAW7B,IAAK8B,CAAAA,WAAYC,CAAAA,sBAFkL,EAG9MC,WAAYhC,IAAKiC,CAAAA,KAAMC,CAAAA,kBAAX,CAA8BtB,GAA9B,CAHkM,EAI9M,GAAGG,KAAMoB,CAAAA,IAJqM,CADnL;AAM1BC,SAAAA,GAAWZ,SAAUa,CAAAA,GAAV,CAAeC,QAAD,IAAc;AACxCd,eAAA,KAAcF,YAAd,IAA8BiB,MAAOC,CAAAA,MAAP,CAAcf,OAAd,EAAuB,CACnDrB,KAAMkC,QAASlC,CAAAA,IADoC,EAEnDqC,OAAQH,QAASG,CAAAA,MAFkC,CAAvB,CAA9B;AAI2CC,cAAAA,GAAO,IAAI1C,IAAK2C,CAAAA,WAAT,CAAtCL,QAASA,CAAAA,QAA6B,IAAjBA,QAAiB,EAA0Bb,OAA1B,CAAPiB;AAC3C,aAAOA,QAAKE,CAAAA,eAAL,GAAuBrB,MAAvB,EAA+BxB,MAAO8C,CAAAA,aAAP,CAAqBH,QAArB,EAA2B1B,MAA3B,EAAmCJ,GAAnC,CAAtC;AANwC,KAA5B,CAAXwB;AAQH,WAA2B,CAApB,KAAAA,KAASU,CAAAA,MAAT,GAAwBV,KAAA,CAAS,CAAT,CAAxB,GAAsCA,KAA7C;AAd6B,GATjB,EAyBdW,MAAM,CAACC,OAAD,CAAU;AACdC,SAAMC,CAAAA,OAAN,CAAcF,OAAd,CAAA,GAAyBA,OAAQG,CAAAA,OAAR,CAAiBC,CAAD,IAAOA,CAAEC,CAAAA,OAAF,CAAU,CAAA,CAAV,CAAvB,CAAzB,GAAiEL,OAAQK,CAAAA,OAAR,CAAgB,CAAA,CAAhB,CAAjE;AADc,GAzBF,CAAVnD;AA6BNF,MAAKsD,CAAAA,UAAWC,CAAAA,GAAhB,CAAoBrD,MAApB,CAAA;AACAJ,SAAQI,CAAAA,OAAR,GAAkBA,MAAlB;AAnC8H,CAA9H;;",
"sources":["node_modules/@pixi/compressed-textures/lib/loaders/loadKTX.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$loaders$loadKTX\"] = function(global,require,module,exports) {\n\"use strict\";\nvar assets = require(\"@pixi/assets\"), core = require(\"@pixi/core\");\nrequire(\"../parsers/index.js\");\nvar parseKTX = require(\"../parsers/parseKTX.js\");\nconst loadKTX = {\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: assets.LoaderParserPriority.High\n  },\n  name: \"loadKTX\",\n  test(url) {\n    return assets.checkExtension(url, \".ktx\");\n  },\n  async load(url, asset, loader) {\n    const arrayBuffer = await (await core.settings.ADAPTER.fetch(url)).arrayBuffer(), { compressed, uncompressed, kvData } = parseKTX.parseKTX(url, arrayBuffer), resources = compressed ?? uncompressed, options = {\n      mipmap: core.MIPMAP_MODES.OFF,\n      alphaMode: core.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n      resolution: core.utils.getResolutionOfUrl(url),\n      ...asset.data\n    }, textures = resources.map((resource) => {\n      resources === uncompressed && Object.assign(options, {\n        type: resource.type,\n        format: resource.format\n      });\n      const res = resource.resource ?? resource, base = new core.BaseTexture(res, options);\n      return base.ktxKeyValueData = kvData, assets.createTexture(base, loader, url);\n    });\n    return textures.length === 1 ? textures[0] : textures;\n  },\n  unload(texture) {\n    Array.isArray(texture) ? texture.forEach((t) => t.destroy(!0)) : texture.destroy(!0);\n  }\n};\ncore.extensions.add(loadKTX);\nexports.loadKTX = loadKTX;\n//# sourceMappingURL=loadKTX.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","assets","core","parseKTX","loadKTX","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","checkExtension","load","asset","loader","arrayBuffer","settings","ADAPTER","fetch","compressed","uncompressed","kvData","resources","options","mipmap","MIPMAP_MODES","OFF","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","resolution","utils","getResolutionOfUrl","data","textures","map","resource","Object","assign","format","base","BaseTexture","ktxKeyValueData","createTexture","length","unload","texture","Array","isArray","forEach","t","destroy","extensions","add"]
}
