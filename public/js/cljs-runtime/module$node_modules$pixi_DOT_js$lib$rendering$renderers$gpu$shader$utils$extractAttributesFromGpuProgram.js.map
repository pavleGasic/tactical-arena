{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$extractAttributesFromGpuProgram.js",
"lineCount":20,
"mappings":"AAAAA,cAAA,CAAA,wGAAA,GAA6H,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGrK,MAAIC,6BAA6BH,OAAA,CAAQ,0GAAR,CAAjC;AAEA,cAAA;AACA,QAAMI,uBAAuB,CAC3BC,IAAK,SADsB,EAE3B,kBAAa,WAFc,EAG3B,kBAAa,WAHc,EAI3B,kBAAa,WAJc,EAK3BC,MAAO,WALoB,EAM3BC,MAAO,WANoB,EAO3BC,MAAO,WAPoB,EAQ3BC,IAAK,QARsB,EAS3B,kBAAa,UATc,EAU3B,kBAAa,UAVc,EAW3B,kBAAa,UAXc,EAY3BC,IAAK,QAZsB,EAa3B,kBAAa,UAbc,EAc3B,kBAAa,UAdc,EAe3B,kBAAa,UAfc,EAgB3BC,KAAM,QAhBqB,EAiB3B,mBAAc,UAjBa,EAkB3B,mBAAc,UAlBa,EAmB3B,mBAAc,UAnBa,CAA7B;AA8CAT,SAAQU,CAAAA,+BAAR,GAzBAA,QAAwC,CAAC,CAAEC,MAAF,EAAUC,UAAV,CAAD,CAAyB;AAC/D,UAAMC,UAAU,EAAhB;AACMC,cAAAA,GAAgBH,MAAOI,CAAAA,OAAP,CAAgB,MAAKH,UAAL,EAAhB,CAAhBE;AACN,QAAsB,CAAC,CAAvB,KAAIA,UAAJ,CAA0B;AACxB,UAAME,qBAAqBL,MAAOI,CAAAA,OAAP,CAAe,OAAf,EAAqBD,UAArB,CAA3B;AACA,UAA2B,CAAC,CAA5B,KAAIE,kBAAJ;AAIE,aAHMC,MACAC,GADwBP,MAAOQ,CAAAA,SAAP,CAAiBL,UAAjB,EAAgCE,kBAAhC,CACxBE,EAAAA,UAAAA,GAAc,yEAEpB,EAA6D,IAA7D,MAAQE,kBAAR,GAAgBF,UAAYG,CAAAA,IAAZ,CAAiBJ,MAAjB,CAAhB,EAAA,CAAmE;AACjE,gBAAMK,SAASpB,oBAAA,CAAqBkB,kBAAA,CAAM,CAAN,CAArB,CAATE,IAA2C,SAAjD;AACAT,iBAAA,CAAQO,kBAAA,CAAM,CAAN,CAAR,CAAA,GAAoB,CAClBG,SAAUC,QAAA,CAASJ,kBAAA,CAAM,CAAN,CAAT,EAAmB,EAAnB,CADQ,EAElBE,MAFkB,EAGlBG,OAAQxB,0BAA2BA,CAAAA,0BAA3B,CAAsDqB,MAAtD,CAA8DG,CAAAA,MAHpD,EAIlBC,OAAQ,CAJU,EAKlBC,SAAU,CAAA,CALQ,EAMlBC,MAAO,CANW,CAApB;AAFiE;AAJrE;AAFwB;AAmB1B,WAAOf,OAAP;AAtB+D,GAyBjE;AApDqK,CAArK;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$extractAttributesFromGpuProgram\"] = function(global,require,module,exports) {\n'use strict';\n\nvar getAttributeInfoFromFormat = require('../../../shared/geometry/utils/getAttributeInfoFromFormat.js');\n\n\"use strict\";\nconst WGSL_TO_VERTEX_TYPES = {\n  f32: \"float32\",\n  \"vec2<f32>\": \"float32x2\",\n  \"vec3<f32>\": \"float32x3\",\n  \"vec4<f32>\": \"float32x4\",\n  vec2f: \"float32x2\",\n  vec3f: \"float32x3\",\n  vec4f: \"float32x4\",\n  i32: \"sint32\",\n  \"vec2<i32>\": \"sint32x2\",\n  \"vec3<i32>\": \"sint32x3\",\n  \"vec4<i32>\": \"sint32x4\",\n  u32: \"uint32\",\n  \"vec2<u32>\": \"uint32x2\",\n  \"vec3<u32>\": \"uint32x3\",\n  \"vec4<u32>\": \"uint32x4\",\n  bool: \"uint32\",\n  \"vec2<bool>\": \"uint32x2\",\n  \"vec3<bool>\": \"uint32x3\",\n  \"vec4<bool>\": \"uint32x4\"\n};\nfunction extractAttributesFromGpuProgram({ source, entryPoint }) {\n  const results = {};\n  const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n  if (mainVertStart !== -1) {\n    const arrowFunctionStart = source.indexOf(\"->\", mainVertStart);\n    if (arrowFunctionStart !== -1) {\n      const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n      const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n      let match;\n      while ((match = inputsRegex.exec(functionArgsSubstring)) !== null) {\n        const format = WGSL_TO_VERTEX_TYPES[match[3]] ?? \"float32\";\n        results[match[2]] = {\n          location: parseInt(match[1], 10),\n          format,\n          stride: getAttributeInfoFromFormat.getAttributeInfoFromFormat(format).stride,\n          offset: 0,\n          instance: false,\n          start: 0\n        };\n      }\n    }\n  }\n  return results;\n}\n\nexports.extractAttributesFromGpuProgram = extractAttributesFromGpuProgram;\n//# sourceMappingURL=extractAttributesFromGpuProgram.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getAttributeInfoFromFormat","WGSL_TO_VERTEX_TYPES","f32","vec2f","vec3f","vec4f","i32","u32","bool","extractAttributesFromGpuProgram","source","entryPoint","results","mainVertStart","indexOf","arrowFunctionStart","functionArgsSubstring","inputsRegex","substring","match","exec","format","location","parseInt","stride","offset","instance","start"]
}
