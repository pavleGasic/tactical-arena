{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$PerspectivePlaneGeometry.js",
"lineCount":33,
"mappings":"AAAAA,cAAA,CAAA,mFAAA,GAAwG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG5IC,QAAAA,GAAgBH,OAAA,CAAQ,oEAAR,CAAhBG;AACJ,MAAIC,uCAAuCJ,OAAA,CAAQ,uGAAR,CAA3C,EACIK,uBAAuBL,OAAA,CAAQ,uFAAR,CAD3B;AAGA,cAAA;AACA,OAAMM,yBAAN,QAAuCH,OAAcA,CAAAA,aAArD;AAQEI,eAAW,CAACC,OAAD,CAAU;AACnB,WAAA,CAAMA,OAAN,CAAA;AACA,UAAKC,CAAAA,iBAAL,GAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAzB;AACA,YAAM,CAAEC,KAAF,EAASC,MAAT,CAAA,GAAoBH,OAA1B;AACA,UAAKI,CAAAA,OAAL,GAAe,CAAC,CAAD,EAAI,CAAJ,EAAOF,KAAP,EAAc,CAAd,EAAiBA,KAAjB,EAAwBC,MAAxB,EAAgC,CAAhC,EAAmCA,MAAnC,CAAf;AAJmB;AAkBrBE,cAAU,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,CAAiC;AACzC,YAAMT,UAAU,IAAKA,CAAAA,OAArB;AACAA,aAAA,CAAQ,CAAR,CAAA,GAAaE,EAAb;AACAF,aAAA,CAAQ,CAAR,CAAA,GAAaG,EAAb;AACAH,aAAA,CAAQ,CAAR,CAAA,GAAaI,EAAb;AACAJ,aAAA,CAAQ,CAAR,CAAA,GAAaK,EAAb;AACAL,aAAA,CAAQ,CAAR,CAAA,GAAaM,EAAb;AACAN,aAAA,CAAQ,CAAR,CAAA,GAAaO,EAAb;AACAP,aAAA,CAAQ,CAAR,CAAA,GAAaQ,EAAb;AACAR,aAAA,CAAQ,CAAR,CAAA,GAAaS,EAAb;AACA,UAAKC,CAAAA,gBAAL,EAAA;AAVyC;AAa3CA,oBAAgB,EAAG;AACjB,YAAM,CAAEZ,KAAF,EAASC,MAAT,CAAA,GAAoB,IAA1B;AACA,UAAMC,UAAU,IAAKA,CAAAA,OAArB;AACMW,aAAAA,GAAmBlB,oBAAqBmB,CAAAA,mBAArB,CACvB,IAAKf,CAAAA,iBADkB,EAEvB,CAFuB,EAGvB,CAHuB,EAKvBG,OAAA,CAAQ,CAAR,CALuB,EAMvBA,OAAA,CAAQ,CAAR,CANuB,EAQvBF,KARuB,EASvB,CATuB,EAWvBE,OAAA,CAAQ,CAAR,CAXuB,EAYvBA,OAAA,CAAQ,CAAR,CAZuB,EAcvBF,KAduB,EAevBC,MAfuB,EAiBvBC,OAAA,CAAQ,CAAR,CAjBuB,EAkBvBA,OAAA,CAAQ,CAAR,CAlBuB,EAoBvB,CApBuB,EAqBvBD,MArBuB,EAuBvBC,OAAA,CAAQ,CAAR,CAvBuB,EAwBvBA,OAAA,CAAQ,CAAR,CAxBuB,CAAnBW;AA2BNnB,0CAAqCA,CAAAA,oCAArC,CACEM,KADF,EAEEC,MAFF,EAGE,IAHF,EAIEY,OAJF,CAAA;AA9BiB;AAvCrB;AA8EArB,SAAQI,CAAAA,wBAAR,GAAmCA,wBAAnC;AAtFgJ,CAAhJ;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh-perspective/PerspectivePlaneGeometry.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh_perspective$PerspectivePlaneGeometry\"] = function(global,require,module,exports) {\n'use strict';\n\nvar PlaneGeometry = require('../mesh-plane/PlaneGeometry.js');\nvar applyProjectiveTransformationToPlane = require('./utils/applyProjectiveTransformationToPlane.js');\nvar compute2DProjections = require('./utils/compute2DProjections.js');\n\n\"use strict\";\nclass PerspectivePlaneGeometry extends PlaneGeometry.PlaneGeometry {\n  /**\n   * @param options - Options to be applied to MeshPlane\n   * @param options.width - The width of the plane\n   * @param options.height - The height of the plane\n   * @param options.verticesX - The amount of vertices on the x axis\n   * @param options.verticesY - The amount of vertices on the y axis\n   */\n  constructor(options) {\n    super(options);\n    this._projectionMatrix = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const { width, height } = options;\n    this.corners = [0, 0, width, 0, width, height, 0, height];\n  }\n  /**\n   * Will set the corners of the quad to the given coordinates\n   * Calculating the perspective so it looks correct!\n   * @param x0 - x coordinate of the first corner\n   * @param y0 - y coordinate of the first corner\n   * @param x1 - x coordinate of the second corner\n   * @param y1 - y coordinate of the second corner\n   * @param x2 - x coordinate of the third corner\n   * @param y2 - y coordinate of the third corner\n   * @param x3 - x coordinate of the fourth corner\n   * @param y3 - y coordinate of the fourth corner\n   */\n  setCorners(x0, y0, x1, y1, x2, y2, x3, y3) {\n    const corners = this.corners;\n    corners[0] = x0;\n    corners[1] = y0;\n    corners[2] = x1;\n    corners[3] = y1;\n    corners[4] = x2;\n    corners[5] = y2;\n    corners[6] = x3;\n    corners[7] = y3;\n    this.updateProjection();\n  }\n  /** Update the projection matrix based on the corners */\n  updateProjection() {\n    const { width, height } = this;\n    const corners = this.corners;\n    const projectionMatrix = compute2DProjections.compute2DProjection(\n      this._projectionMatrix,\n      0,\n      0,\n      // top-left source\n      corners[0],\n      corners[1],\n      // top-left dest\n      width,\n      0,\n      // top-right source\n      corners[2],\n      corners[3],\n      // top-right dest\n      width,\n      height,\n      // bottom-right source\n      corners[4],\n      corners[5],\n      // bottom-right dest\n      0,\n      height,\n      // bottom-left source\n      corners[6],\n      corners[7]\n      // bottom-left dest\n    );\n    applyProjectiveTransformationToPlane.applyProjectiveTransformationToPlane(\n      width,\n      height,\n      this,\n      projectionMatrix\n    );\n  }\n}\n\nexports.PerspectivePlaneGeometry = PerspectivePlaneGeometry;\n//# sourceMappingURL=PerspectivePlaneGeometry.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","PlaneGeometry","applyProjectiveTransformationToPlane","compute2DProjections","PerspectivePlaneGeometry","constructor","options","_projectionMatrix","width","height","corners","setCorners","x0","y0","x1","y1","x2","y2","x3","y3","updateProjection","projectionMatrix","compute2DProjection"]
}
