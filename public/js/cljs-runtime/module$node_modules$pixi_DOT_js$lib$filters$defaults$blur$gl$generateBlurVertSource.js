shadow$provide.module$node_modules$pixi_DOT_js$lib$filters$defaults$blur$gl$generateBlurVertSource = function(global, require, module, exports) {
  exports.generateBlurVertSource = function(kernelSize, x) {
    const halfLength = Math.ceil(kernelSize / 2);
    let vertSource = "\n    in vec2 aPosition;\n\n    uniform float uStrength;\n\n    out vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 uInputSize;\n    uniform vec4 uOutputFrame;\n    uniform vec4 uOutputTexture;\n\n    vec4 filterVertexPosition( void )\n{\n    vec2 position \x3d aPosition * uOutputFrame.zw + uOutputFrame.xy;\n    \n    position.x \x3d position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y \x3d position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\n    vec2 filterTextureCoord( void )\n    {\n        return aPosition * (uOutputFrame.zw * uInputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position \x3d filterVertexPosition();\n\n        float pixelStrength \x3d uInputSize.%dimension% * uStrength;\n\n        vec2 textureCoord \x3d filterTextureCoord();\n        %blur%\n    }", 
    blurLoop = "", template;
    template = x ? "vBlurTexCoords[%index%] \x3d  textureCoord + vec2(%sampleIndex% * pixelStrength, 0.0);" : "vBlurTexCoords[%index%] \x3d  textureCoord + vec2(0.0, %sampleIndex% * pixelStrength);";
    for (let i = 0; i < kernelSize; i++) {
      let blur = template.replace("%index%", i.toString());
      blur = blur.replace("%sampleIndex%", `${i - (halfLength - 1)}.0`);
      blurLoop += blur;
      blurLoop += "\n";
    }
    vertSource = vertSource.replace("%blur%", blurLoop);
    vertSource = vertSource.replace("%size%", kernelSize.toString());
    return vertSource = vertSource.replace("%dimension%", x ? "z" : "w");
  };
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$filters$defaults$blur$gl$generateBlurVertSource.js.map
