{
"version":3,
"file":"module$node_modules$$pixi$display$lib$Bounds.js",
"lineCount":179,
"mappings":"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",
"sources":["node_modules/@pixi/display/lib/Bounds.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$display$lib$Bounds\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nclass Bounds {\n  constructor() {\n    this.minX = 1 / 0, this.minY = 1 / 0, this.maxX = -1 / 0, this.maxY = -1 / 0, this.rect = null, this.updateID = -1;\n  }\n  /**\n   * Checks if bounds are empty.\n   * @returns - True if empty.\n   */\n  isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  }\n  /** Clears the bounds and resets. */\n  clear() {\n    this.minX = 1 / 0, this.minY = 1 / 0, this.maxX = -1 / 0, this.maxY = -1 / 0;\n  }\n  /**\n   * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n   * It is not guaranteed that it will return tempRect\n   * @param rect - Temporary object will be used if AABB is not empty\n   * @returns - A rectangle of the bounds\n   */\n  getRectangle(rect) {\n    return this.minX > this.maxX || this.minY > this.maxY ? core.Rectangle.EMPTY : (rect = rect || new core.Rectangle(0, 0, 1, 1), rect.x = this.minX, rect.y = this.minY, rect.width = this.maxX - this.minX, rect.height = this.maxY - this.minY, rect);\n  }\n  /**\n   * This function should be inlined when its possible.\n   * @param point - The point to add.\n   */\n  addPoint(point) {\n    this.minX = Math.min(this.minX, point.x), this.maxX = Math.max(this.maxX, point.x), this.minY = Math.min(this.minY, point.y), this.maxY = Math.max(this.maxY, point.y);\n  }\n  /**\n   * Adds a point, after transformed. This should be inlined when its possible.\n   * @param matrix\n   * @param point\n   */\n  addPointMatrix(matrix, point) {\n    const { a, b, c, d, tx, ty } = matrix, x = a * point.x + c * point.y + tx, y = b * point.x + d * point.y + ty;\n    this.minX = Math.min(this.minX, x), this.maxX = Math.max(this.maxX, x), this.minY = Math.min(this.minY, y), this.maxY = Math.max(this.maxY, y);\n  }\n  /**\n   * Adds a quad, not transformed\n   * @param vertices - The verts to add.\n   */\n  addQuad(vertices) {\n    let minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY, x = vertices[0], y = vertices[1];\n    minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = vertices[2], y = vertices[3], minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = vertices[4], y = vertices[5], minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = vertices[6], y = vertices[7], minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, this.minX = minX, this.minY = minY, this.maxX = maxX, this.maxY = maxY;\n  }\n  /**\n   * Adds sprite frame, transformed.\n   * @param transform - transform to apply\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   */\n  addFrame(transform, x0, y0, x1, y1) {\n    this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n  }\n  /**\n   * Adds sprite frame, multiplied by matrix\n   * @param matrix - matrix to apply\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   */\n  addFrameMatrix(matrix, x0, y0, x1, y1) {\n    const a = matrix.a, b = matrix.b, c = matrix.c, d = matrix.d, tx = matrix.tx, ty = matrix.ty;\n    let minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY, x = a * x0 + c * y0 + tx, y = b * x0 + d * y0 + ty;\n    minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = a * x1 + c * y0 + tx, y = b * x1 + d * y0 + ty, minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = a * x0 + c * y1 + tx, y = b * x0 + d * y1 + ty, minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = a * x1 + c * y1 + tx, y = b * x1 + d * y1 + ty, minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, this.minX = minX, this.minY = minY, this.maxX = maxX, this.maxY = maxY;\n  }\n  /**\n   * Adds screen vertices from array\n   * @param vertexData - calculated vertices\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   */\n  addVertexData(vertexData, beginOffset, endOffset) {\n    let minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const x = vertexData[i], y = vertexData[i + 1];\n      minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY;\n    }\n    this.minX = minX, this.minY = minY, this.maxX = maxX, this.maxY = maxY;\n  }\n  /**\n   * Add an array of mesh vertices\n   * @param transform - mesh transform\n   * @param vertices - mesh coordinates in array\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   */\n  addVertices(transform, vertices, beginOffset, endOffset) {\n    this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n  }\n  /**\n   * Add an array of mesh vertices.\n   * @param matrix - mesh matrix\n   * @param vertices - mesh coordinates in array\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   * @param padX - x padding\n   * @param padY - y padding\n   */\n  addVerticesMatrix(matrix, vertices, beginOffset, endOffset, padX = 0, padY = padX) {\n    const a = matrix.a, b = matrix.b, c = matrix.c, d = matrix.d, tx = matrix.tx, ty = matrix.ty;\n    let minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const rawX = vertices[i], rawY = vertices[i + 1], x = a * rawX + c * rawY + tx, y = d * rawY + b * rawX + ty;\n      minX = Math.min(minX, x - padX), maxX = Math.max(maxX, x + padX), minY = Math.min(minY, y - padY), maxY = Math.max(maxY, y + padY);\n    }\n    this.minX = minX, this.minY = minY, this.maxX = maxX, this.maxY = maxY;\n  }\n  /**\n   * Adds other {@link PIXI.Bounds}.\n   * @param bounds - The Bounds to be added\n   */\n  addBounds(bounds) {\n    const minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n    this.minX = bounds.minX < minX ? bounds.minX : minX, this.minY = bounds.minY < minY ? bounds.minY : minY, this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX, this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n  }\n  /**\n   * Adds other Bounds, masked with Bounds.\n   * @param bounds - The Bounds to be added.\n   * @param mask - TODO\n   */\n  addBoundsMask(bounds, mask) {\n    const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX, _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY, _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX, _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n    if (_minX <= _maxX && _minY <= _maxY) {\n      const minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n      this.minX = _minX < minX ? _minX : minX, this.minY = _minY < minY ? _minY : minY, this.maxX = _maxX > maxX ? _maxX : maxX, this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  }\n  /**\n   * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.\n   * @param bounds - other bounds\n   * @param matrix - multiplicator\n   */\n  addBoundsMatrix(bounds, matrix) {\n    this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n  }\n  /**\n   * Adds other Bounds, masked with Rectangle.\n   * @param bounds - TODO\n   * @param area - TODO\n   */\n  addBoundsArea(bounds, area) {\n    const _minX = bounds.minX > area.x ? bounds.minX : area.x, _minY = bounds.minY > area.y ? bounds.minY : area.y, _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width, _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;\n    if (_minX <= _maxX && _minY <= _maxY) {\n      const minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n      this.minX = _minX < minX ? _minX : minX, this.minY = _minY < minY ? _minY : minY, this.maxX = _maxX > maxX ? _maxX : maxX, this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  }\n  /**\n   * Pads bounds object, making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   */\n  pad(paddingX = 0, paddingY = paddingX) {\n    this.isEmpty() || (this.minX -= paddingX, this.maxX += paddingX, this.minY -= paddingY, this.maxY += paddingY);\n  }\n  /**\n   * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   * @param padX - padding X\n   * @param padY - padding Y\n   */\n  addFramePad(x0, y0, x1, y1, padX, padY) {\n    x0 -= padX, y0 -= padY, x1 += padX, y1 += padY, this.minX = this.minX < x0 ? this.minX : x0, this.maxX = this.maxX > x1 ? this.maxX : x1, this.minY = this.minY < y0 ? this.minY : y0, this.maxY = this.maxY > y1 ? this.maxY : y1;\n  }\n}\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","Bounds","constructor","minX","minY","maxX","maxY","rect","updateID","isEmpty","clear","getRectangle","Rectangle","EMPTY","x","y","width","height","addPoint","point","Math","min","max","addPointMatrix","matrix","a","b","c","d","tx","ty","addQuad","vertices","addFrame","transform","x0","y0","x1","y1","addFrameMatrix","worldTransform","addVertexData","vertexData","beginOffset","endOffset","i","addVertices","addVerticesMatrix","padX","padY","rawX","rawY","addBounds","bounds","addBoundsMask","mask","_minX","_minY","_maxX","_maxY","addBoundsMatrix","addBoundsArea","area","pad","paddingX","paddingY","addFramePad"]
}
