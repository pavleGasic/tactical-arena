{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsPipe.js",
"lineCount":93,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/GraphicsPipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$GraphicsPipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar State = require('../../../rendering/renderers/shared/state/State.js');\nvar PoolGroup = require('../../../utils/pool/PoolGroup.js');\nvar colorToUniform = require('../gpu/colorToUniform.js');\nvar BatchableGraphics = require('./BatchableGraphics.js');\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    this.renderer.renderableGC.addManagedHash(this, \"_graphicsBatchesHash\");\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    colorToUniform.color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = PoolGroup.BigPool.get(BatchableGraphics.BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      PoolGroup.BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexports.GraphicsPipe = GraphicsPipe;\n//# sourceMappingURL=GraphicsPipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","State","PoolGroup","colorToUniform","BatchableGraphics","GraphicsPipe","constructor","renderer","adaptor","state","for2d","_graphicsBatchesHash","Object","create","_destroyRenderableBound","destroyRenderable","bind","_adaptor","init","renderableGC","addManagedHash","validateRenderable","graphics","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","context","isBatchable","addRenderable","instructionSet","didViewUpdate","_rebuild","_addToBatcher","renderPipes","batch","break","add","updateRenderable","batches","i","length","_batcher","updateElement","_removeBatchForRenderable","off","execute","isRenderable","getGpuContext","shader","customShader","blendMode","groupBlendMode","localUniforms","resources","uniforms","uTransformMatrix","groupTransform","uRound","_roundPixels","color32BitToUniform","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BigPool","get","copyTo","renderable","on","graphicsUid","forEach","return","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"]
}
