{
"version":3,
"file":"module$node_modules$$pixi$utils$lib$media$CanvasRenderTarget.js",
"lineCount":51,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,GAAiF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEzH,MAAIC,WAAWH,OAAA,CAAQ,8CAAR,CAAf;AACA,OAAMI,mBAAN;AAMEC,eAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBC,UAAhB,CAA4B;AACrC,UAAKC,CAAAA,OAAL,GAAeN,QAASA,CAAAA,QAASO,CAAAA,OAAQC,CAAAA,YAA1B,EAAf;AAAyD,UAAKC,CAAAA,QAAL,GAAgB,IAAKH,CAAAA,OAAQI,CAAAA,UAAb,CAAwB,IAAxB,CAAhB;AAA+C,UAAKL,CAAAA,UAAL,GAAkBA,UAAlB,IAAgCL,QAASA,CAAAA,QAASW,CAAAA,UAAlD;AAA8D,UAAKC,CAAAA,MAAL,CAAYT,KAAZ,EAAmBC,MAAnB,CAAA;AADjI;AAOvCS,SAAK,EAAG;AACN,UAAKC,CAAAA,eAAL,EAAA;AAAwB,UAAKL,CAAAA,QAASM,CAAAA,YAAd,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,CAA1C,CAAA;AAA8C,UAAKN,CAAAA,QAASO,CAAAA,SAAd,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,IAAKV,CAAAA,OAAQH,CAAAA,KAA3C,EAAkD,IAAKG,CAAAA,OAAQF,CAAAA,MAA/D,CAAA;AADhE;AAQRQ,UAAM,CAACK,YAAD,EAAeC,aAAf,CAA8B;AAClC,UAAKJ,CAAAA,eAAL,EAAA;AAAwB,UAAKR,CAAAA,OAAQH,CAAAA,KAAb,GAAqBgB,IAAKC,CAAAA,KAAL,CAAWH,YAAX,GAA0B,IAAKZ,CAAAA,UAA/B,CAArB;AAAiE,UAAKC,CAAAA,OAAQF,CAAAA,MAAb,GAAsBe,IAAKC,CAAAA,KAAL,CAAWF,aAAX,GAA2B,IAAKb,CAAAA,UAAhC,CAAtB;AADvD;AAIpCgB,WAAO,EAAG;AACc,UAAKf,CAAAA,OAAL,GAAtB,IAAKG,CAAAA,QAAiB,GAAN,IAAM;AADd;AAON,aAAQ,EAAA;AACV,aAAO,IAAKK,CAAAA,eAAL,EAAA,EAAwB,IAAKR,CAAAA,OAAQH,CAAAA,KAA5C;AADU;AAGR,aAAK,CAACmB,GAAD,CAAM;AACb,UAAKR,CAAAA,eAAL,EAAA;AAAwB,UAAKR,CAAAA,OAAQH,CAAAA,KAAb,GAAqBgB,IAAKC,CAAAA,KAAL,CAAWE,GAAX,CAArB;AADX;AAOX,cAAS,EAAA;AACX,aAAO,IAAKR,CAAAA,eAAL,EAAA,EAAwB,IAAKR,CAAAA,OAAQF,CAAAA,MAA5C;AADW;AAGT,cAAM,CAACkB,GAAD,CAAM;AACd,UAAKR,CAAAA,eAAL,EAAA;AAAwB,UAAKR,CAAAA,OAAQF,CAAAA,MAAb,GAAsBe,IAAKC,CAAAA,KAAL,CAAWE,GAAX,CAAtB;AADV;AAIZ,cAAS,EAAA;AACX,aAAO,IAAKR,CAAAA,eAAL,EAAA,EAAwB,IAAKR,CAAAA,OAApC;AADW;AAIT,eAAU,EAAA;AACZ,aAAO,IAAKQ,CAAAA,eAAL,EAAA,EAAwB,IAAKL,CAAAA,QAApC;AADY;AAGdK,mBAAe,EAAG;AAChB,UAAqB,IAArB,KAAI,IAAKR,CAAAA,OAAT;AACE,cAAM,IAAIiB,SAAJ,CAAc,mDAAd,CAAN;AADF;AADgB;AAxDpB;AA6DAxB,SAAQE,CAAAA,kBAAR,GAA6BA,kBAA7B;AAhEyH,CAAzH;;",
"sources":["node_modules/@pixi/utils/lib/media/CanvasRenderTarget.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$utils$lib$media$CanvasRenderTarget\"] = function(global,require,module,exports) {\n\"use strict\";\nvar settings = require(\"@pixi/settings\");\nclass CanvasRenderTarget {\n  /**\n   * @param width - the width for the newly created canvas\n   * @param height - the height for the newly created canvas\n   * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n   */\n  constructor(width, height, resolution) {\n    this._canvas = settings.settings.ADAPTER.createCanvas(), this._context = this._canvas.getContext(\"2d\"), this.resolution = resolution || settings.settings.RESOLUTION, this.resize(width, height);\n  }\n  /**\n   * Clears the canvas that was created by the CanvasRenderTarget class.\n   * @private\n   */\n  clear() {\n    this._checkDestroyed(), this._context.setTransform(1, 0, 0, 1, 0, 0), this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n  /**\n   * Resizes the canvas to the specified width and height.\n   * @param desiredWidth - the desired width of the canvas\n   * @param desiredHeight - the desired height of the canvas\n   */\n  resize(desiredWidth, desiredHeight) {\n    this._checkDestroyed(), this._canvas.width = Math.round(desiredWidth * this.resolution), this._canvas.height = Math.round(desiredHeight * this.resolution);\n  }\n  /** Destroys this canvas. */\n  destroy() {\n    this._context = null, this._canvas = null;\n  }\n  /**\n   * The width of the canvas buffer in pixels.\n   * @member {number}\n   */\n  get width() {\n    return this._checkDestroyed(), this._canvas.width;\n  }\n  set width(val) {\n    this._checkDestroyed(), this._canvas.width = Math.round(val);\n  }\n  /**\n   * The height of the canvas buffer in pixels.\n   * @member {number}\n   */\n  get height() {\n    return this._checkDestroyed(), this._canvas.height;\n  }\n  set height(val) {\n    this._checkDestroyed(), this._canvas.height = Math.round(val);\n  }\n  /** The Canvas object that belongs to this CanvasRenderTarget. */\n  get canvas() {\n    return this._checkDestroyed(), this._canvas;\n  }\n  /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n  get context() {\n    return this._checkDestroyed(), this._context;\n  }\n  _checkDestroyed() {\n    if (this._canvas === null)\n      throw new TypeError(\"The CanvasRenderTarget has already been destroyed\");\n  }\n}\nexports.CanvasRenderTarget = CanvasRenderTarget;\n//# sourceMappingURL=CanvasRenderTarget.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","settings","CanvasRenderTarget","constructor","width","height","resolution","_canvas","ADAPTER","createCanvas","_context","getContext","RESOLUTION","resize","clear","_checkDestroyed","setTransform","clearRect","desiredWidth","desiredHeight","Math","round","destroy","val","TypeError"]
}
