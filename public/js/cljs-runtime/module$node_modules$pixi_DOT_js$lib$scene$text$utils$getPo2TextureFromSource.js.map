{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text$utils$getPo2TextureFromSource.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,CAAA,4EAAA,GAAiG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGzI,MAAIC,cAAcH,OAAA,CAAQ,oFAAR,CAAlB;AACII,QAAAA,GAASJ,OAAA,CAAQ,mEAAR,CAATI;AAEJ,cAAA;AACA,QAAMC,aAAa,IAAID,MAAOA,CAAAA,MAAX,EAAnB;AAuBAF,SAAQI,CAAAA,uBAAR,GAtBAA,QAAgC,CAACC,KAAD,EAAQC,KAAR,EAAeC,MAAf,EAAuBC,UAAvB,CAAmC;AAClDL,cACRM,CAAAA,IAAP,GAAc,CAAd;AADeN,cAERO,CAAAA,IAAP,GAAc,CAAd;AAFeP,cAGRQ,CAAAA,IAAP,GAAcN,KAAMC,CAAAA,KAApB,GAA4BE,UAA5B,GAAyC,CAAzC;AAHeL,cAIRS,CAAAA,IAAP,GAAcP,KAAME,CAAAA,MAApB,GAA6BC,UAA7B,GAA0C,CAA1C;AACA,UAAMK,UAAUZ,WAAYA,CAAAA,WAAYa,CAAAA,iBAAxB,CALDX,UAMNG,CAAAA,KADO,EALDH,UAONI,CAAAA,MAFO,EAGdC,UAHc,EAId,CAAA,CAJc,CAAhB;AAMAK,WAAQE,CAAAA,MAAOC,CAAAA,cAAf,GAAgC,OAAhC;AACAH,WAAQE,CAAAA,MAAOE,CAAAA,QAAf,GAA0BZ,KAA1B;AACAQ,WAAQE,CAAAA,MAAOG,CAAAA,SAAf,GAA2B,6BAA3B;AACAL,WAAQM,CAAAA,KAAMb,CAAAA,KAAd,GAAsBA,KAAtB,GAA8BE,UAA9B;AACAK,WAAQM,CAAAA,KAAMZ,CAAAA,MAAd,GAAuBA,MAAvB,GAAgCC,UAAhC;AACAK,WAAQE,CAAAA,MAAOK,CAAAA,IAAf,CAAoB,QAApB,EAA8BP,OAAQE,CAAAA,MAAtC,CAAA;AACAF,WAAQQ,CAAAA,SAAR,EAAA;AACA,WAAOR,OAAP;AAnBiE,GAsBnE;AA9ByI,CAAzI;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/text/utils/getPo2TextureFromSource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text$utils$getPo2TextureFromSource\"] = function(global,require,module,exports) {\n'use strict';\n\nvar TexturePool = require('../../../rendering/renderers/shared/texture/TexturePool.js');\nvar Bounds = require('../../container/bounds/Bounds.js');\n\n\"use strict\";\nconst tempBounds = new Bounds.Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexports.getPo2TextureFromSource = getPo2TextureFromSource;\n//# sourceMappingURL=getPo2TextureFromSource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","TexturePool","Bounds","tempBounds","getPo2TextureFromSource","image","width","height","resolution","minX","minY","maxX","maxY","texture","getOptimalTexture","source","uploadMethodId","resource","alphaMode","frame","emit","updateUvs"]
}
