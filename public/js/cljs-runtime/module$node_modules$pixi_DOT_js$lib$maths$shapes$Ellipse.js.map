{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$maths$shapes$Ellipse.js",
"lineCount":63,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/maths/shapes/Ellipse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$maths$shapes$Ellipse\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Rectangle = require('./Rectangle.js');\n\n\"use strict\";\nclass Ellipse {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'ellipse'\n     */\n    this.type = \"ellipse\";\n    this.x = x;\n    this.y = y;\n    this.halfWidth = halfWidth;\n    this.halfHeight = halfHeight;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   * @returns {Ellipse} A copy of the ellipse\n   */\n  clone() {\n    return new Ellipse(this.x, this.y, this.halfWidth, this.halfHeight);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  contains(x, y) {\n    if (this.halfWidth <= 0 || this.halfHeight <= 0) {\n      return false;\n    }\n    let normx = (x - this.x) / this.halfWidth;\n    let normy = (y - this.y) / this.halfHeight;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse including stroke\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param alignment - The alignment of the stroke\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  strokeContains(x, y, strokeWidth, alignment = 0.5) {\n    const { halfWidth, halfHeight } = this;\n    if (halfWidth <= 0 || halfHeight <= 0) {\n      return false;\n    }\n    const strokeOuterWidth = strokeWidth * (1 - alignment);\n    const strokeInnerWidth = strokeWidth - strokeOuterWidth;\n    const innerHorizontal = halfWidth - strokeInnerWidth;\n    const innerVertical = halfHeight - strokeInnerWidth;\n    const outerHorizontal = halfWidth + strokeOuterWidth;\n    const outerVertical = halfHeight + strokeOuterWidth;\n    const normalizedX = x - this.x;\n    const normalizedY = y - this.y;\n    const innerEllipse = normalizedX * normalizedX / (innerHorizontal * innerHorizontal) + normalizedY * normalizedY / (innerVertical * innerVertical);\n    const outerEllipse = normalizedX * normalizedX / (outerHorizontal * outerHorizontal) + normalizedY * normalizedY / (outerVertical * outerVertical);\n    return innerEllipse > 1 && outerEllipse <= 1;\n  }\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   * @param out\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle.Rectangle());\n    out.x = this.x - this.halfWidth;\n    out.y = this.y - this.halfHeight;\n    out.width = this.halfWidth * 2;\n    out.height = this.halfHeight * 2;\n    return out;\n  }\n  /**\n   * Copies another ellipse to this one.\n   * @param ellipse - The ellipse to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(ellipse) {\n    this.x = ellipse.x;\n    this.y = ellipse.y;\n    this.halfWidth = ellipse.halfWidth;\n    this.halfHeight = ellipse.halfHeight;\n    return this;\n  }\n  /**\n   * Copies this ellipse to another one.\n   * @param ellipse - The ellipse to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(ellipse) {\n    ellipse.copyFrom(this);\n    return ellipse;\n  }\n  toString() {\n    return `[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`;\n  }\n}\n\nexports.Ellipse = Ellipse;\n//# sourceMappingURL=Ellipse.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Rectangle","Ellipse","constructor","x","y","halfWidth","halfHeight","type","clone","contains","normx","normy","strokeContains","strokeWidth","alignment","strokeOuterWidth","strokeInnerWidth","innerHorizontal","innerVertical","outerHorizontal","outerVertical","normalizedX","normalizedY","getBounds","out","width","height","copyFrom","ellipse","copyTo","toString"]
}
