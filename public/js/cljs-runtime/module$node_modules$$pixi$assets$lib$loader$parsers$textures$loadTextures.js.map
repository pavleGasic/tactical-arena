{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$loader$parsers$textures$loadTextures.js",
"lineCount":37,
"mappings":"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",
"sources":["node_modules/@pixi/assets/lib/loader/parsers/textures/loadTextures.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$loader$parsers$textures$loadTextures\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), checkDataUrl = require(\"../../../utils/checkDataUrl.js\"), checkExtension = require(\"../../../utils/checkExtension.js\"), LoaderParser = require(\"../LoaderParser.js\"), WorkerManager = require(\"../WorkerManager.js\"), createTexture = require(\"./utils/createTexture.js\");\nconst validImageExtensions = [\".jpeg\", \".jpg\", \".png\", \".webp\", \".avif\"], validImageMIMEs = [\n  \"image/jpeg\",\n  \"image/png\",\n  \"image/webp\",\n  \"image/avif\"\n];\nasync function loadImageBitmap(url) {\n  const response = await core.settings.ADAPTER.fetch(url);\n  if (!response.ok)\n    throw new Error(`[loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);\n  const imageBlob = await response.blob();\n  return await createImageBitmap(imageBlob);\n}\nconst loadTextures = {\n  name: \"loadTextures\",\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.High\n  },\n  config: {\n    preferWorkers: !0,\n    preferCreateImageBitmap: !0,\n    crossOrigin: \"anonymous\"\n  },\n  test(url) {\n    return checkDataUrl.checkDataUrl(url, validImageMIMEs) || checkExtension.checkExtension(url, validImageExtensions);\n  },\n  async load(url, asset, loader) {\n    const useImageBitmap = globalThis.createImageBitmap && this.config.preferCreateImageBitmap;\n    let src;\n    useImageBitmap ? this.config.preferWorkers && await WorkerManager.WorkerManager.isImageBitmapSupported() ? src = await WorkerManager.WorkerManager.loadImageBitmap(url) : src = await loadImageBitmap(url) : src = await new Promise((resolve, reject) => {\n      const src2 = new Image();\n      src2.crossOrigin = this.config.crossOrigin, src2.src = url, src2.complete ? resolve(src2) : (src2.onload = () => resolve(src2), src2.onerror = (e) => reject(e));\n    });\n    const options = { ...asset.data };\n    options.resolution ?? (options.resolution = core.utils.getResolutionOfUrl(url)), useImageBitmap && options.resourceOptions?.ownsImageBitmap === void 0 && (options.resourceOptions = { ...options.resourceOptions }, options.resourceOptions.ownsImageBitmap = !0);\n    const base = new core.BaseTexture(src, options);\n    return base.resource.src = url, createTexture.createTexture(base, loader, url);\n  },\n  unload(texture) {\n    texture.destroy(!0);\n  }\n};\ncore.extensions.add(loadTextures);\nexports.loadImageBitmap = loadImageBitmap;\nexports.loadTextures = loadTextures;\n//# sourceMappingURL=loadTextures.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","loadImageBitmap","url","response","core","settings","ADAPTER","fetch","ok","Error","status","statusText","imageBlob","blob","createImageBitmap","checkDataUrl","checkExtension","LoaderParser","WorkerManager","createTexture","validImageExtensions","validImageMIMEs","loadTextures","name","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","config","preferWorkers","preferCreateImageBitmap","crossOrigin","test","load","asset","loader","useImageBitmap","globalThis","src","isImageBitmapSupported","Promise","resolve","reject","src2","Image","complete","onload","src2.onload","onerror","e","src2.onerror","options","data","resolution","utils","getResolutionOfUrl","resourceOptions","ownsImageBitmap","base","BaseTexture","resource","unload","texture","destroy","extensions","add"]
}
