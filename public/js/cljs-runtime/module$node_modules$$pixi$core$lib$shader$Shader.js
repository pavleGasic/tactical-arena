shadow$provide.module$node_modules$$pixi$core$lib$shader$Shader = function(global, require, module, exports) {
  var runner = require("module$node_modules$$pixi$runner$lib$index"), Program = require("module$node_modules$$pixi$core$lib$shader$Program"), UniformGroup = require("module$node_modules$$pixi$core$lib$shader$UniformGroup");
  class Shader {
    constructor(program, uniforms) {
      this.uniformBindCount = 0;
      this.program = program;
      uniforms ? uniforms instanceof UniformGroup.UniformGroup ? this.uniformGroup = uniforms : this.uniformGroup = new UniformGroup.UniformGroup(uniforms) : this.uniformGroup = new UniformGroup.UniformGroup({});
      this.disposeRunner = new runner.Runner("disposeShader");
    }
    checkUniformExists(name, group) {
      if (group.uniforms[name]) {
        return !0;
      }
      for (const i in group.uniforms) {
        const uniform = group.uniforms[i];
        if (!0 === uniform.group && this.checkUniformExists(name, uniform)) {
          return !0;
        }
      }
      return !1;
    }
    destroy() {
      this.uniformGroup = null;
      this.disposeRunner.emit(this);
      this.disposeRunner.destroy();
    }
    get uniforms() {
      return this.uniformGroup.uniforms;
    }
    static from(vertexSrc, fragmentSrc, uniforms) {
      vertexSrc = Program.Program.from(vertexSrc, fragmentSrc);
      return new Shader(vertexSrc, uniforms);
    }
  }
  exports.Shader = Shader;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$shader$Shader.js.map
