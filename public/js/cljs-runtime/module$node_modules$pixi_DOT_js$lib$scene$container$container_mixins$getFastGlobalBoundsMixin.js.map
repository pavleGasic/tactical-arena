{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$getFastGlobalBoundsMixin.js",
"lineCount":47,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/container-mixins/getFastGlobalBoundsMixin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$getFastGlobalBoundsMixin\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar Bounds = require('../bounds/Bounds.js');\nvar matrixAndBoundsPool = require('../bounds/utils/matrixAndBoundsPool.js');\n\n\"use strict\";\nconst tempMatrix = new Matrix.Matrix();\nconst getFastGlobalBoundsMixin = {\n  /**\n   * Computes the global bounds for the container, considering its children and optionally\n   * factoring in render layers. It starts by clearing the provided bounds object, then\n   * recursively calculates the bounds, and finally applies the world transformation.\n   * @param {boolean} [factorRenderLayers] - Whether to consider render layers in the calculation.\n   * @param {Bounds} [bounds] - The bounds object to store the result. If not provided, a new one is created.\n   * @returns {Bounds} The computed bounds.\n   * @memberof scene.Container#\n   */\n  getFastGlobalBounds(factorRenderLayers, bounds) {\n    bounds || (bounds = new Bounds.Bounds());\n    bounds.clear();\n    this._getGlobalBoundsRecursive(!!factorRenderLayers, bounds, this.parentRenderLayer);\n    if (!bounds.isValid) {\n      bounds.set(0, 0, 0, 0);\n    }\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    bounds.applyMatrix(renderGroup.worldTransform);\n    return bounds;\n  },\n  /**\n   * Recursively calculates the global bounds for the container and its children.\n   * It considers visibility, measurability, and effects, and applies transformations\n   * as necessary to compute the bounds accurately.\n   * @param {boolean} factorRenderLayers - Whether to consider render layers in the calculation.\n   * @param {Bounds} bounds - The bounds object to update with the calculated values.\n   * @param {IRenderLayer} currentLayer - The current render layer being processed.\n   * @memberof scene.Container#\n   */\n  _getGlobalBoundsRecursive(factorRenderLayers, bounds, currentLayer) {\n    let localBounds = bounds;\n    if (factorRenderLayers && this.parentRenderLayer && this.parentRenderLayer !== currentLayer)\n      return;\n    if (this.localDisplayStatus !== 7 || !this.measurable) {\n      return;\n    }\n    const manageEffects = !!this.effects.length;\n    if (this.renderGroup || manageEffects) {\n      localBounds = matrixAndBoundsPool.boundsPool.get().clear();\n    }\n    if (this.boundsArea) {\n      bounds.addRect(this.boundsArea, this.worldTransform);\n    } else {\n      if (this.renderPipeId) {\n        const viewBounds = this.bounds;\n        localBounds.addFrame(\n          viewBounds.minX,\n          viewBounds.minY,\n          viewBounds.maxX,\n          viewBounds.maxY,\n          this.groupTransform\n        );\n      }\n      const children = this.children;\n      for (let i = 0; i < children.length; i++) {\n        children[i]._getGlobalBoundsRecursive(factorRenderLayers, localBounds, currentLayer);\n      }\n    }\n    if (manageEffects) {\n      let advanced = false;\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      for (let i = 0; i < this.effects.length; i++) {\n        if (this.effects[i].addBounds) {\n          if (!advanced) {\n            advanced = true;\n            localBounds.applyMatrix(renderGroup.worldTransform);\n          }\n          this.effects[i].addBounds(localBounds, true);\n        }\n      }\n      if (advanced) {\n        localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n        bounds.addBounds(localBounds, this.relativeGroupTransform);\n      }\n      bounds.addBounds(localBounds);\n      matrixAndBoundsPool.boundsPool.return(localBounds);\n    } else if (this.renderGroup) {\n      bounds.addBounds(localBounds, this.relativeGroupTransform);\n      matrixAndBoundsPool.boundsPool.return(localBounds);\n    }\n  }\n};\n\nexports.getFastGlobalBoundsMixin = getFastGlobalBoundsMixin;\n//# sourceMappingURL=getFastGlobalBoundsMixin.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matrix","Bounds","matrixAndBoundsPool","tempMatrix","getFastGlobalBoundsMixin","getFastGlobalBounds","factorRenderLayers","bounds","clear","_getGlobalBoundsRecursive","parentRenderLayer","isValid","set","applyMatrix","worldTransform","renderGroup","parentRenderGroup","currentLayer","localBounds","localDisplayStatus","measurable","manageEffects","effects","length","boundsPool","get","boundsArea","addRect","renderPipeId","viewBounds","addFrame","minX","minY","maxX","maxY","groupTransform","children","i","advanced","addBounds","copyTo","invert","relativeGroupTransform","return"]
}
