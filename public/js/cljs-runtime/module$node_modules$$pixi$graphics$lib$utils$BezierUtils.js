shadow$provide.module$node_modules$$pixi$graphics$lib$utils$BezierUtils = function(global, require, module, exports) {
  var _const = require("module$node_modules$$pixi$graphics$lib$const");
  class BezierUtils {
    static curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {
      let result = 0;
      let nt, nt2, nt3, x, prevX = fromX, prevY = fromY;
      for (let i = 1; 10 >= i; ++i) {
        var t = i / 10;
        var t2 = t * t;
        var t3 = t2 * t;
        nt = 1 - t;
        nt2 = nt * nt;
        nt3 = nt2 * nt;
        x = nt3 * fromX + 3 * nt2 * t * cpX + 3 * nt * t2 * cpX2 + t3 * toX;
        t = nt3 * fromY + 3 * nt2 * t * cpY + 3 * nt * t2 * cpY2 + t3 * toY;
        t2 = prevX - x;
        t3 = prevY - t;
        prevX = x;
        prevY = t;
        result += Math.sqrt(t2 * t2 + t3 * t3);
      }
      return result;
    }
    static curveTo(cpX, cpY, cpX2, cpY2, toX, toY, points) {
      const fromX = points[points.length - 2], fromY = points[points.length - 1];
      points.length -= 2;
      const n = _const.curves._segmentsCount(BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY));
      let dt, dt2, dt3, t2, t3;
      points.push(fromX, fromY);
      for (let i = 1, j = 0; i <= n; ++i) {
        j = i / n, dt = 1 - j, dt2 = dt * dt, dt3 = dt2 * dt, t2 = j * j, t3 = t2 * j, points.push(dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX, dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY);
      }
    }
  }
  exports.BezierUtils = BezierUtils;
};

//# sourceMappingURL=module$node_modules$$pixi$graphics$lib$utils$BezierUtils.js.map
