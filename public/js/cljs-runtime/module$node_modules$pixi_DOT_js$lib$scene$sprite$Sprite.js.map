{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$sprite$Sprite.js",
"lineCount":97,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/sprite/Sprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$sprite$Sprite\"] = function(global,require,module,exports) {\n'use strict';\n\nvar ObservablePoint = require('../../maths/point/ObservablePoint.js');\nvar Texture = require('../../rendering/renderers/shared/texture/Texture.js');\nvar updateQuadBounds = require('../../utils/data/updateQuadBounds.js');\nvar deprecation = require('../../utils/logging/deprecation.js');\nvar ViewContainer = require('../view/ViewContainer.js');\n\n\"use strict\";\nclass Sprite extends ViewContainer.ViewContainer {\n  /**\n   * @param options - The options for creating the sprite.\n   */\n  constructor(options = Texture.Texture.EMPTY) {\n    if (options instanceof Texture.Texture) {\n      options = { texture: options };\n    }\n    const { texture = Texture.Texture.EMPTY, anchor, roundPixels, width, height, ...rest } = options;\n    super({\n      label: \"Sprite\",\n      ...rest\n    });\n    this.renderPipeId = \"sprite\";\n    this.batched = true;\n    this._visualBounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    this._anchor = new ObservablePoint.ObservablePoint(\n      {\n        _onUpdate: () => {\n          this.onViewUpdate();\n        }\n      }\n    );\n    if (anchor) {\n      this.anchor = anchor;\n    } else if (texture.defaultAnchor) {\n      this.anchor = texture.defaultAnchor;\n    }\n    this.texture = texture;\n    this.allowChildren = false;\n    this.roundPixels = roundPixels ?? false;\n    if (width !== void 0)\n      this.width = width;\n    if (height !== void 0)\n      this.height = height;\n  }\n  /**\n   * Helper function that creates a new sprite based on the source you provide.\n   * The source can be - frame id, image, video, canvas element, video element, texture\n   * @param source - Source to create texture from\n   * @param [skipCache] - Whether to skip the cache or not\n   * @returns The newly created sprite\n   */\n  static from(source, skipCache = false) {\n    if (source instanceof Texture.Texture) {\n      return new Sprite(source);\n    }\n    return new Sprite(Texture.Texture.from(source, skipCache));\n  }\n  set texture(value) {\n    value || (value = Texture.Texture.EMPTY);\n    const currentTexture = this._texture;\n    if (currentTexture === value)\n      return;\n    if (currentTexture && currentTexture.dynamic)\n      currentTexture.off(\"update\", this.onViewUpdate, this);\n    if (value.dynamic)\n      value.on(\"update\", this.onViewUpdate, this);\n    this._texture = value;\n    if (this._width) {\n      this._setWidth(this._width, this._texture.orig.width);\n    }\n    if (this._height) {\n      this._setHeight(this._height, this._texture.orig.height);\n    }\n    this.onViewUpdate();\n  }\n  /** The texture that the sprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  /**\n   * The bounds of the sprite, taking the texture's trim into account.\n   * @type {rendering.Bounds}\n   */\n  get visualBounds() {\n    updateQuadBounds.updateQuadBounds(this._visualBounds, this._anchor, this._texture);\n    return this._visualBounds;\n  }\n  /**\n   * @deprecated\n   */\n  get sourceBounds() {\n    deprecation.deprecation(\"8.6.1\", \"Sprite.sourceBounds is deprecated, use visualBounds instead.\");\n    return this.visualBounds;\n  }\n  /** @private */\n  updateBounds() {\n    const anchor = this._anchor;\n    const texture = this._texture;\n    const bounds = this._bounds;\n    const { width, height } = texture.orig;\n    bounds.minX = -anchor._x * width;\n    bounds.maxX = bounds.minX + width;\n    bounds.minY = -anchor._y * height;\n    bounds.maxY = bounds.minY + height;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options = false) {\n    super.destroy(options);\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      this._texture.destroy(destroyTextureSource);\n    }\n    this._texture = null;\n    this._visualBounds = null;\n    this._bounds = null;\n    this._anchor = null;\n  }\n  /**\n   * The anchor sets the origin point of the sprite. The default value is taken from the {@link Texture}\n   * and passed to the constructor.\n   *\n   * The default is `(0,0)`, this means the sprite's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n   *\n   * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n   * @example\n   * import { Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite({texture: Texture.WHITE});\n   * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value === \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    this._setWidth(value, this._texture.orig.width);\n    this._width = value;\n  }\n  /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    this._setHeight(value, this._texture.orig.height);\n    this._height = value;\n  }\n  /**\n   * Retrieves the size of the Sprite as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the Sprite.\n   */\n  getSize(out) {\n    out || (out = {});\n    out.width = Math.abs(this.scale.x) * this._texture.orig.width;\n    out.height = Math.abs(this.scale.y) * this._texture.orig.height;\n    return out;\n  }\n  /**\n   * Sets the size of the Sprite to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, this._texture.orig.width);\n    height !== void 0 && this._setHeight(height, this._texture.orig.height);\n  }\n}\n\nexports.Sprite = Sprite;\n//# sourceMappingURL=Sprite.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ObservablePoint","Texture","updateQuadBounds","deprecation","ViewContainer","Sprite","constructor","options","EMPTY","texture","anchor","roundPixels","width","height","rest","label","renderPipeId","batched","_visualBounds","minX","maxX","minY","maxY","_anchor","_onUpdate","onViewUpdate","defaultAnchor","allowChildren","from","source","skipCache","value","currentTexture","_texture","dynamic","off","on","_width","_setWidth","orig","_height","_setHeight","visualBounds","updateBounds","bounds","_bounds","_x","_y","destroy","destroyTexture","destroyTextureSource","textureSource","set","copyFrom","Math","abs","scale","x","y","getSize","out","setSize"]
}
