{
"version":3,
"file":"module$node_modules$$pixi$sprite$lib$Sprite.js",
"lineCount":150,
"mappings":"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",
"sources":["node_modules/@pixi/sprite/lib/Sprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$sprite$lib$Sprite\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), display = require(\"@pixi/display\");\nconst tempPoint = new core.Point(), indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\nclass Sprite extends display.Container {\n  /** @param texture - The texture for this sprite. */\n  constructor(texture) {\n    super(), this._anchor = new core.ObservablePoint(\n      this._onAnchorUpdate,\n      this,\n      texture ? texture.defaultAnchor.x : 0,\n      texture ? texture.defaultAnchor.y : 0\n    ), this._texture = null, this._width = 0, this._height = 0, this._tintColor = new core.Color(16777215), this._tintRGB = null, this.tint = 16777215, this.blendMode = core.BLEND_MODES.NORMAL, this._cachedTint = 16777215, this.uvs = null, this.texture = texture || core.Texture.EMPTY, this.vertexData = new Float32Array(8), this.vertexTrimmedData = null, this._transformID = -1, this._textureID = -1, this._transformTrimmedID = -1, this._textureTrimmedID = -1, this.indices = indices, this.pluginName = \"batch\", this.isSprite = !0, this._roundPixels = core.settings.ROUND_PIXELS;\n  }\n  /** When the texture is updated, this event will fire to update the scale and frame. */\n  _onTextureUpdate() {\n    this._textureID = -1, this._textureTrimmedID = -1, this._cachedTint = 16777215, this._width && (this.scale.x = core.utils.sign(this.scale.x) * this._width / this._texture.orig.width), this._height && (this.scale.y = core.utils.sign(this.scale.y) * this._height / this._texture.orig.height);\n  }\n  /** Called when the anchor position updates. */\n  _onAnchorUpdate() {\n    this._transformID = -1, this._transformTrimmedID = -1;\n  }\n  /** Calculates worldTransform * vertices, store it in vertexData. */\n  calculateVertices() {\n    const texture = this._texture;\n    if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n      return;\n    this._textureID !== texture._updateID && (this.uvs = this._texture._uvs.uvsFloat32), this._transformID = this.transform._worldID, this._textureID = texture._updateID;\n    const wt = this.transform.worldTransform, a = wt.a, b = wt.b, c = wt.c, d = wt.d, tx = wt.tx, ty = wt.ty, vertexData = this.vertexData, trim = texture.trim, orig = texture.orig, anchor = this._anchor;\n    let w0 = 0, w1 = 0, h0 = 0, h1 = 0;\n    if (trim ? (w1 = trim.x - anchor._x * orig.width, w0 = w1 + trim.width, h1 = trim.y - anchor._y * orig.height, h0 = h1 + trim.height) : (w1 = -anchor._x * orig.width, w0 = w1 + orig.width, h1 = -anchor._y * orig.height, h0 = h1 + orig.height), vertexData[0] = a * w1 + c * h1 + tx, vertexData[1] = d * h1 + b * w1 + ty, vertexData[2] = a * w0 + c * h1 + tx, vertexData[3] = d * h1 + b * w0 + ty, vertexData[4] = a * w0 + c * h0 + tx, vertexData[5] = d * h0 + b * w0 + ty, vertexData[6] = a * w1 + c * h0 + tx, vertexData[7] = d * h0 + b * w1 + ty, this._roundPixels) {\n      const resolution = core.settings.RESOLUTION;\n      for (let i = 0; i < vertexData.length; ++i)\n        vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n    }\n  }\n  /**\n   * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n   *\n   * This is used to ensure that the true width and height of a trimmed texture is respected.\n   */\n  calculateTrimmedVertices() {\n    if (!this.vertexTrimmedData)\n      this.vertexTrimmedData = new Float32Array(8);\n    else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n      return;\n    this._transformTrimmedID = this.transform._worldID, this._textureTrimmedID = this._texture._updateID;\n    const texture = this._texture, vertexData = this.vertexTrimmedData, orig = texture.orig, anchor = this._anchor, wt = this.transform.worldTransform, a = wt.a, b = wt.b, c = wt.c, d = wt.d, tx = wt.tx, ty = wt.ty, w1 = -anchor._x * orig.width, w0 = w1 + orig.width, h1 = -anchor._y * orig.height, h0 = h1 + orig.height;\n    if (vertexData[0] = a * w1 + c * h1 + tx, vertexData[1] = d * h1 + b * w1 + ty, vertexData[2] = a * w0 + c * h1 + tx, vertexData[3] = d * h1 + b * w0 + ty, vertexData[4] = a * w0 + c * h0 + tx, vertexData[5] = d * h0 + b * w0 + ty, vertexData[6] = a * w1 + c * h0 + tx, vertexData[7] = d * h0 + b * w1 + ty, this._roundPixels) {\n      const resolution = core.settings.RESOLUTION;\n      for (let i = 0; i < vertexData.length; ++i)\n        vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n    }\n  }\n  /**\n   *\n   * Renders the object using the WebGL renderer\n   * @param renderer - The webgl renderer to use.\n   */\n  _render(renderer) {\n    this.calculateVertices(), renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]), renderer.plugins[this.pluginName].render(this);\n  }\n  /** Updates the bounds of the sprite. */\n  _calculateBounds() {\n    const trim = this._texture.trim, orig = this._texture.orig;\n    !trim || trim.width === orig.width && trim.height === orig.height ? (this.calculateVertices(), this._bounds.addQuad(this.vertexData)) : (this.calculateTrimmedVertices(), this._bounds.addQuad(this.vertexTrimmedData));\n  }\n  /**\n   * Gets the local bounds of the sprite object.\n   * @param rect - Optional output rectangle.\n   * @returns The bounds.\n   */\n  getLocalBounds(rect) {\n    return this.children.length === 0 ? (this._localBounds || (this._localBounds = new display.Bounds()), this._localBounds.minX = this._texture.orig.width * -this._anchor._x, this._localBounds.minY = this._texture.orig.height * -this._anchor._y, this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x), this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y), rect || (this._localBoundsRect || (this._localBoundsRect = new core.Rectangle()), rect = this._localBoundsRect), this._localBounds.getRectangle(rect)) : super.getLocalBounds.call(this, rect);\n  }\n  /**\n   * Tests if a point is inside this sprite\n   * @param point - the point to test\n   * @returns The result of the test\n   */\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    const width = this._texture.orig.width, height = this._texture.orig.height, x1 = -width * this.anchor.x;\n    let y1 = 0;\n    return tempPoint.x >= x1 && tempPoint.x < x1 + width && (y1 = -height * this.anchor.y, tempPoint.y >= y1 && tempPoint.y < y1 + height);\n  }\n  /**\n   * Destroys this sprite and optionally its texture and children.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n  destroy(options) {\n    if (super.destroy(options), this._texture.off(\"update\", this._onTextureUpdate, this), this._anchor = null, typeof options == \"boolean\" ? options : options?.texture) {\n      const destroyBaseTexture = typeof options == \"boolean\" ? options : options?.baseTexture;\n      this._texture.destroy(!!destroyBaseTexture);\n    }\n    this._texture = null;\n  }\n  // some helper functions..\n  /**\n   * Helper function that creates a new sprite based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   * @param {string|PIXI.Texture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n   *     - Source to create texture from\n   * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n   * @returns The newly created sprite\n   */\n  static from(source, options) {\n    const texture = source instanceof core.Texture ? source : core.Texture.from(source, options);\n    return new Sprite(texture);\n  }\n  /**\n   * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n   *\n   * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n   * The main disadvantage is movement of objects may appear less smooth.\n   *\n   * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n   * @default false\n   */\n  set roundPixels(value) {\n    this._roundPixels !== value && (this._transformID = -1, this._transformTrimmedID = -1), this._roundPixels = value;\n  }\n  get roundPixels() {\n    return this._roundPixels;\n  }\n  /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    const s = core.utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._texture.orig.width, this._width = value;\n  }\n  /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    const s = core.utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._texture.orig.height, this._height = value;\n  }\n  /**\n   * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n   * and passed to the constructor.\n   *\n   * The default is `(0,0)`, this means the sprite's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n   *\n   * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n   * @example\n   * import { Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite(Texture.WHITE);\n   * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    this._anchor.copyFrom(value);\n  }\n  /**\n   * The tint applied to the sprite. This is a hex value.\n   *\n   * A value of 0xFFFFFF will remove any tint effect.\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    return this._tintColor.value;\n  }\n  set tint(value) {\n    this._tintColor.setValue(value), this._tintRGB = this._tintColor.toLittleEndianNumber();\n  }\n  /**\n   * Get the tint as a RGB integer.\n   * @ignore\n   */\n  get tintValue() {\n    return this._tintColor.toNumber();\n  }\n  /** The texture that the sprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    this._texture !== value && (this._texture && this._texture.off(\"update\", this._onTextureUpdate, this), this._texture = value || core.Texture.EMPTY, this._cachedTint = 16777215, this._textureID = -1, this._textureTrimmedID = -1, value && (value.baseTexture.valid ? this._onTextureUpdate() : value.once(\"update\", this._onTextureUpdate, this)));\n  }\n}\nexports.Sprite = Sprite;\n//# sourceMappingURL=Sprite.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","display","tempPoint","Point","indices","Uint16Array","Sprite","Container","constructor","texture","_anchor","ObservablePoint","_onAnchorUpdate","defaultAnchor","x","y","_texture","_height","_width","_tintColor","Color","_tintRGB","tint","blendMode","BLEND_MODES","NORMAL","_cachedTint","uvs","Texture","EMPTY","vertexData","Float32Array","vertexTrimmedData","_textureTrimmedID","_transformTrimmedID","_textureID","_transformID","pluginName","isSprite","_roundPixels","settings","ROUND_PIXELS","_onTextureUpdate","scale","utils","sign","orig","width","height","calculateVertices","transform","_worldID","_updateID","_uvs","uvsFloat32","wt","worldTransform","a","b","c","d","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","resolution","i","RESOLUTION","length","Math","round","calculateTrimmedVertices","_render","renderer","batch","setObjectRenderer","plugins","render","_calculateBounds","_bounds","addQuad","getLocalBounds","rect","children","_localBounds","Bounds","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","call","containsPoint","point","applyInverse","x1","y1","destroy","options","off","destroyBaseTexture","baseTexture","from","source","value","abs","s","copyFrom","setValue","toLittleEndianNumber","toNumber","valid","once"]
}
