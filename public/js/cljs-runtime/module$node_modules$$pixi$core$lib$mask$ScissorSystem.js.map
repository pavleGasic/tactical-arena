{
"version":3,
"file":"module$node_modules$$pixi$core$lib$mask$ScissorSystem.js",
"lineCount":70,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,GAA0E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE9GC,QAAAA,GAAaH,OAAA,CAAQ,gDAAR,CAAbG;AAF8G,MAEpEC,OAAOJ,OAAA,CAAQ,0CAAR,CAF6D,EAEtCK,WAAWL,OAAA,CAAQ,8CAAR,CAF2B,EAEAM,qBAAqBN,OAAA,CAAQ,4DAAR,CAFrB;AAAA,QAG5GO,aAAa,IAAIH,IAAKI,CAAAA,MAAT,EAH+F,EAG5EC,WAAW,EAHiE;AAG7DC,SAAAA,GAAiB,CAAA,EAAA,IAAA;AAAA,UAAA,gEAAA,aAA8BJ,mBAAmBA,CAAAA,kBAAjD;AAIpEK,iBAAW,CAACC,QAAD,CAAW;AACpB,aAAA,CAAMA,QAAN,CAAA;AAAiB,YAAKC,CAAAA,OAAL,GAAeR,QAASA,CAAAA,QAASS,CAAAA,OAAQC,CAAAA,wBAA1B,EAAqDC,CAAAA,YAApE;AADG;AAGtBC,oBAAc,EAAG;AACf,cAAMC,WAAW,IAAKC,CAAAA,SAAL,CAAe,IAAKA,CAAAA,SAAUC,CAAAA,MAA9B,GAAuC,CAAvC,CAAjB;AACA,eAAOF,QAAA,GAAWA,QAASG,CAAAA,eAApB,GAAsC,CAA7C;AAFe;AAQjBC,qBAAe,CAACJ,QAAD,CAAW;AACxB,YAAaK,CAATL,QAASK,CAAAA,iBAAb,CAAA;AADwB,cAGlBC,WAAWN,QAASO,CAAAA,YAHF,EAGgB,CAAEC,UAAF,CAAA,GAAiBR,QAHjC,EAG2C,CAAEN,QAAF,CAAA,GAAe,IAH1D,EAGgEe,sBAAsBf,QAASgB,CAAAA,aAH/F;AAG8GC,oBAAAA,GAAOH,UAAWI,CAAAA,SAAX,CAAqB,CAAA,CAArB,EAAyBrB,QAASsB,CAAAA,GAAT,EAAzB,IAA2C,IAAI3B,IAAK4B,CAAAA,SAAT,EAA3C,CAAPH;AACtI,cAAKI,CAAAA,kBAAL,CACEJ,UADF,EAEEF,mBAAoBO,CAAAA,OAApB,GAA8BP,mBAAoBO,CAAAA,OAAQC,CAAAA,UAA1D,GAAuEvB,QAASuB,CAAAA,UAFlF,EAGER,mBAAoBS,CAAAA,WAHtB,EAIET,mBAAoBU,CAAAA,gBAJtB,EAKEzB,QAAS0B,CAAAA,UAAWC,CAAAA,SALtB,CAAA;AAMGf,kBAAA,IAAYK,UAAKW,CAAAA,GAAL,CAAShB,QAAT,CAAZ;AAAgCN,kBAASK,CAAAA,iBAAT,GAA6BM,UAA7B;AATnC;AADwB;AAYnBY,4BAAe,CAACC,MAAD,CAAS;AAC7B,YAAI,CAACA,MAAL;AACE,iBAAO,CAAA,CAAP;AADF;AAEA,cAAM,CAAEC,CAAF,EAAKC,CAAL,EAAQC,CAAR,EAAWC,CAAX,CAAA,GAAiBJ,MAAvB;AACA,gBAAsB,IAAtB,GAAQK,IAAKC,CAAAA,GAAL,CAASJ,CAAT,CAAR,IAA4C,IAA5C,GAA8BG,IAAKC,CAAAA,GAAL,CAASH,CAAT,CAA9B,MAAoE,IAApE,GAAsDE,IAAKC,CAAAA,GAAL,CAASL,CAAT,CAAtD,IAA0F,IAA1F,GAA4EI,IAAKC,CAAAA,GAAL,CAASF,CAAT,CAA5E;AAJ6B;AAY/BG,iBAAW,CAAC/B,QAAD,CAAW;AACpB,cAAM,CAAEQ,UAAF,CAAA,GAAiBR,QAAvB;AACA,YAAI,CAACQ,UAAWwB,CAAAA,UAAhB,IAA8B,CAACxB,UAAWwB,CAAAA,UAAX,EAA/B,IAA0DC,6DAAgBV,CAAAA,eAAhB,CAAgCf,UAAW0B,CAAAA,cAA3C,CAA1D,IAAwHD,6DAAgBV,CAAAA,eAAhB,CAAgC,IAAK7B,CAAAA,QAAS0B,CAAAA,UAAWC,CAAAA,SAAzD,CAAxH;AACE,iBAAO,CAAA,CAAP;AADF;AAEA,YAAKjB,CAAAA,eAAL,CAAqBJ,QAArB,CAAA;AACMW,gBAAAA,GAAOX,QAASK,CAAAA,iBAAhBM;AACN,eAAoB,CAApB,GAAOA,QAAKwB,CAAAA,KAAZ,IAAuC,CAAvC,GAAyBxB,QAAKyB,CAAAA,MAA9B;AANoB;AAQtBrB,wBAAkB,CAACsB,KAAD,EAAQpB,UAAR,EAAoBqB,kBAApB,EAAwCC,uBAAxC,EAAiElB,SAAjE,CAA4E;AAC5FY,qEAAgBV,CAAAA,eAAhB,CAAgCF,SAAhC,CAAA,KAA+CA,SAAA,GAAYA,SAAA,GAAYhC,UAAWmD,CAAAA,QAAX,CAAoBnB,SAApB,CAAZ,GAA6ChC,UAAWoD,CAAAA,QAAX,EAAzD,EAAgFpB,SAAUqB,CAAAA,SAAV,CAAoB,CAACJ,kBAAmBK,CAAAA,CAAxC,EAA2C,CAACL,kBAAmBM,CAAAA,CAA/D,CAAkEC,CAAAA,KAAlE,CAC7HN,uBAAwBJ,CAAAA,KADqG,GAC7FG,kBAAmBH,CAAAA,KAD0E,EAE7HI,uBAAwBH,CAAAA,MAFqG,GAE5FE,kBAAmBF,CAAAA,MAFyE,CAG7HM,CAAAA,SAH6H,CAGnHH,uBAAwBI,CAAAA,CAH2F,EAGxFJ,uBAAwBK,CAAAA,CAHgE,CAAhF,EAGoB,IAAKlD,CAAAA,QAASoD,CAAAA,MAAOC,CAAAA,aAArB,CAAmC1B,SAAnC,EAA8CgB,KAA9C,CAHpB,EAG0EA,KAAMf,CAAAA,GAAN,CAAUiB,uBAAV,CAH1E;AAG8GF,aAAMM,CAAAA,CAHpH,GAGwHd,IAAKmB,CAAAA,KAAL,CAAWX,KAAMM,CAAAA,CAAjB,GAAqB1B,UAArB,CAHxH,EAG0JoB,KAAMO,CAAAA,CAHhK,GAGoKf,IAAKmB,CAAAA,KAAL,CAAWX,KAAMO,CAAAA,CAAjB,GAAqB3B,UAArB,CAHpK,EAGsMoB,KAAMF,CAAAA,KAH5M,GAGoNN,IAAKmB,CAAAA,KAAL,CAAWX,KAAMF,CAAAA,KAAjB,GAAyBlB,UAAzB,CAHpN,EAG0PoB,KAAMD,CAAAA,MAHhQ,GAGyQP,IAAKmB,CAAAA,KAAL,CAAWX,KAAMD,CAAAA,MAAjB,GAA0BnB,UAA1B,CAHxT;AAD4F;AAW9FgC,UAAI,CAACjD,QAAD,CAAW;AACbA,gBAASK,CAAAA,iBAAT,IAA8B,IAAKD,CAAAA,eAAL,CAAqBJ,QAArB,CAA9B;AACA,cAAM,CAAEkD,EAAF,CAAA,GAAS,IAAKxD,CAAAA,QAApB;AACAM,gBAASO,CAAAA,YAAT,IAAyB2C,EAAGC,CAAAA,MAAH,CAAUD,EAAGpD,CAAAA,YAAb,CAAzB;AAAqDE,gBAASG,CAAAA,eAAT,EAAA;AAA4BH,gBAASO,CAAAA,YAAT,GAAwBP,QAASK,CAAAA,iBAAjC;AAAoD,YAAK+C,CAAAA,WAAL,EAAA;AAHxH;AAYfvC,SAAG,CAACb,QAAD,CAAW;AACZ,cAAM,CAAEkD,EAAF,CAAA,GAAS,IAAKxD,CAAAA,QAApB;AACAM,gBAAA,IAAYT,QAAS0D,CAAAA,IAAT,CAAcjD,QAASK,CAAAA,iBAAvB,CAAZ;AAA+E,SAAxB,GAAA,IAAKN,CAAAA,cAAL,EAAA,GAA4B,IAAKqD,CAAAA,WAAL,EAA5B,GAAiDF,EAAGG,CAAAA,OAAH,CAAWH,EAAGpD,CAAAA,YAAd,CAAjD;AAF3C;AAQdsD,iBAAW,EAAG;AACZ,cAAMzC,OAAO,IAAKV,CAAAA,SAAL,CAAe,IAAKA,CAAAA,SAAUC,CAAAA,MAA9B,GAAuC,CAAvC,CAA0CK,CAAAA,YAAvD;AACA,YAAIqC,CAAJ;AACA,YAAKlD,CAAAA,QAASgB,CAAAA,aAAcM,CAAAA,OAA5B,GAAsC4B,CAAtC,GAA0CjC,IAAKiC,CAAAA,CAA/C,GAAmDA,CAAnD,GAAuD,IAAKlD,CAAAA,QAAS0C,CAAAA,MAArE,GAA8EzB,IAAKyB,CAAAA,MAAnF,GAA4FzB,IAAKiC,CAAAA,CAAjG;AAAoG,YAAKlD,CAAAA,QAASwD,CAAAA,EAAGI,CAAAA,OAAjB,CAAyB3C,IAAKgC,CAAAA,CAA9B,EAAiCC,CAAjC,EAAoCjC,IAAKwB,CAAAA,KAAzC,EAAgDxB,IAAKyB,CAAAA,MAArD,CAAA;AAHxF;AA9EsD,KAAA;AAAA,WAAA,6DAAA;AAAA,GAAA,CAAA,EAAjB5C;AAoFrDA,SAAe+D,CAAAA,SAAf,GAA2B,CACzBC,KAAMvE,MAAWwE,CAAAA,aAAcC,CAAAA,cADN,EAEzBC,KAAM,SAFmB,CAA3B;AAKA1E,QAAWA,CAAAA,UAAW2E,CAAAA,GAAtB,CADoBpE,OACpB,CAAA;AACAR,SAAQ6E,CAAAA,aAAR,GAFoBrE,OAEpB;AA7FkH,CAAlH;;",
"sources":["node_modules/@pixi/core/lib/mask/ScissorSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$mask$ScissorSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar extensions = require(\"@pixi/extensions\"), math = require(\"@pixi/math\"), settings = require(\"@pixi/settings\"), AbstractMaskSystem = require(\"./AbstractMaskSystem.js\");\nconst tempMatrix = new math.Matrix(), rectPool = [], _ScissorSystem = class _ScissorSystem2 extends AbstractMaskSystem.AbstractMaskSystem {\n  /**\n   * @param {PIXI.Renderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    super(renderer), this.glConst = settings.settings.ADAPTER.getWebGLRenderingContext().SCISSOR_TEST;\n  }\n  getStackLength() {\n    const maskData = this.maskStack[this.maskStack.length - 1];\n    return maskData ? maskData._scissorCounter : 0;\n  }\n  /**\n   * evaluates _boundsTransformed, _scissorRect for MaskData\n   * @param maskData\n   */\n  calcScissorRect(maskData) {\n    if (maskData._scissorRectLocal)\n      return;\n    const prevData = maskData._scissorRect, { maskObject } = maskData, { renderer } = this, renderTextureSystem = renderer.renderTexture, rect = maskObject.getBounds(!0, rectPool.pop() ?? new math.Rectangle());\n    this.roundFrameToPixels(\n      rect,\n      renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution,\n      renderTextureSystem.sourceFrame,\n      renderTextureSystem.destinationFrame,\n      renderer.projection.transform\n    ), prevData && rect.fit(prevData), maskData._scissorRectLocal = rect;\n  }\n  static isMatrixRotated(matrix) {\n    if (!matrix)\n      return !1;\n    const { a, b, c, d } = matrix;\n    return (Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4) && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4);\n  }\n  /**\n   * Test, whether the object can be scissor mask with current renderer projection.\n   * Calls \"calcScissorRect()\" if its true.\n   * @param maskData - mask data\n   * @returns whether Whether the object can be scissor mask\n   */\n  testScissor(maskData) {\n    const { maskObject } = maskData;\n    if (!maskObject.isFastRect || !maskObject.isFastRect() || _ScissorSystem2.isMatrixRotated(maskObject.worldTransform) || _ScissorSystem2.isMatrixRotated(this.renderer.projection.transform))\n      return !1;\n    this.calcScissorRect(maskData);\n    const rect = maskData._scissorRectLocal;\n    return rect.width > 0 && rect.height > 0;\n  }\n  roundFrameToPixels(frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {\n    _ScissorSystem2.isMatrixRotated(transform) || (transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity(), transform.translate(-bindingSourceFrame.x, -bindingSourceFrame.y).scale(\n      bindingDestinationFrame.width / bindingSourceFrame.width,\n      bindingDestinationFrame.height / bindingSourceFrame.height\n    ).translate(bindingDestinationFrame.x, bindingDestinationFrame.y), this.renderer.filter.transformAABB(transform, frame), frame.fit(bindingDestinationFrame), frame.x = Math.round(frame.x * resolution), frame.y = Math.round(frame.y * resolution), frame.width = Math.round(frame.width * resolution), frame.height = Math.round(frame.height * resolution));\n  }\n  /**\n   * Applies the Mask and adds it to the current stencil stack.\n   * @author alvin\n   * @param maskData - The mask data.\n   */\n  push(maskData) {\n    maskData._scissorRectLocal || this.calcScissorRect(maskData);\n    const { gl } = this.renderer;\n    maskData._scissorRect || gl.enable(gl.SCISSOR_TEST), maskData._scissorCounter++, maskData._scissorRect = maskData._scissorRectLocal, this._useCurrent();\n  }\n  /**\n   * This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the\n   * last mask in the stack.\n   *\n   * This can also be called when you directly modify the scissor box and want to restore PixiJS state.\n   * @param maskData - The mask data.\n   */\n  pop(maskData) {\n    const { gl } = this.renderer;\n    maskData && rectPool.push(maskData._scissorRectLocal), this.getStackLength() > 0 ? this._useCurrent() : gl.disable(gl.SCISSOR_TEST);\n  }\n  /**\n   * Setup renderer to use the current scissor data.\n   * @private\n   */\n  _useCurrent() {\n    const rect = this.maskStack[this.maskStack.length - 1]._scissorRect;\n    let y;\n    this.renderer.renderTexture.current ? y = rect.y : y = this.renderer.height - rect.height - rect.y, this.renderer.gl.scissor(rect.x, y, rect.width, rect.height);\n  }\n};\n_ScissorSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"scissor\"\n};\nlet ScissorSystem = _ScissorSystem;\nextensions.extensions.add(ScissorSystem);\nexports.ScissorSystem = ScissorSystem;\n//# sourceMappingURL=ScissorSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extensions","math","settings","AbstractMaskSystem","tempMatrix","Matrix","rectPool","_ScissorSystem","constructor","renderer","glConst","ADAPTER","getWebGLRenderingContext","SCISSOR_TEST","getStackLength","maskData","maskStack","length","_scissorCounter","calcScissorRect","_scissorRectLocal","prevData","_scissorRect","maskObject","renderTextureSystem","renderTexture","rect","getBounds","pop","Rectangle","roundFrameToPixels","current","resolution","sourceFrame","destinationFrame","projection","transform","fit","isMatrixRotated","matrix","a","b","c","d","Math","abs","testScissor","isFastRect","_ScissorSystem2","worldTransform","width","height","frame","bindingSourceFrame","bindingDestinationFrame","copyFrom","identity","translate","x","y","scale","filter","transformAABB","round","push","gl","enable","_useCurrent","disable","scissor","extension","type","ExtensionType","RendererSystem","name","add","ScissorSystem"]
}
