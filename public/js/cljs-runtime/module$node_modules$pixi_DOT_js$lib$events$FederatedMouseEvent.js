shadow$provide.module$node_modules$pixi_DOT_js$lib$events$FederatedMouseEvent = function(global, require, module, exports) {
  var Point = require("module$node_modules$pixi_DOT_js$lib$maths$point$Point");
  global = require("module$node_modules$pixi_DOT_js$lib$events$FederatedEvent");
  "use strict";
  class FederatedMouseEvent extends global.FederatedEvent {
    constructor() {
      super(...arguments);
      this.client = new Point.Point();
      this.movement = new Point.Point();
      this.offset = new Point.Point();
      this.global = new Point.Point();
      this.screen = new Point.Point();
    }
    get clientX() {
      return this.client.x;
    }
    get clientY() {
      return this.client.y;
    }
    get x() {
      return this.clientX;
    }
    get y() {
      return this.clientY;
    }
    get movementX() {
      return this.movement.x;
    }
    get movementY() {
      return this.movement.y;
    }
    get offsetX() {
      return this.offset.x;
    }
    get offsetY() {
      return this.offset.y;
    }
    get globalX() {
      return this.global.x;
    }
    get globalY() {
      return this.global.y;
    }
    get screenX() {
      return this.screen.x;
    }
    get screenY() {
      return this.screen.y;
    }
    getLocalPosition(container, point, globalPos) {
      return container.worldTransform.applyInverse(globalPos || this.global, point);
    }
    getModifierState(key) {
      return "getModifierState" in this.nativeEvent && this.nativeEvent.getModifierState(key);
    }
    initMouseEvent(_typeArg, _canBubbleArg, _cancelableArg, _viewArg, _detailArg, _screenXArg, _screenYArg, _clientXArg, _clientYArg, _ctrlKeyArg, _altKeyArg, _shiftKeyArg, _metaKeyArg, _buttonArg, _relatedTargetArg) {
      throw Error("Method not implemented.");
    }
  }
  exports.FederatedMouseEvent = FederatedMouseEvent;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$events$FederatedMouseEvent.js.map
