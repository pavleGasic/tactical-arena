shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$findMixin = function(global, require, module, exports) {
  var deprecation = require("module$node_modules$pixi_DOT_js$lib$utils$logging$deprecation");
  "use strict";
  exports.findMixin = {label:null, get name() {
    deprecation.deprecation(deprecation.v8_0_0, "Container.name property has been removed, use Container.label instead");
    return this.label;
  }, set name(value) {
    deprecation.deprecation(deprecation.v8_0_0, "Container.name property has been removed, use Container.label instead");
    this.label = value;
  }, getChildByName(name, deep = !1) {
    return this.getChildByLabel(name, deep);
  }, getChildByLabel(label, deep = !1) {
    const children = this.children;
    for (var i = 0; i < children.length; i++) {
      const child = children[i];
      if (child.label === label || label instanceof RegExp && label.test(child.label)) {
        return child;
      }
    }
    if (deep) {
      for (deep = 0; deep < children.length; deep++) {
        if (i = children[deep].getChildByLabel(label, !0)) {
          return i;
        }
      }
    }
    return null;
  }, getChildrenByLabel(label, deep = !1, out = []) {
    const children = this.children;
    for (let i = 0; i < children.length; i++) {
      const child = children[i];
      (child.label === label || label instanceof RegExp && label.test(child.label)) && out.push(child);
    }
    if (deep) {
      for (deep = 0; deep < children.length; deep++) {
        children[deep].getChildrenByLabel(label, !0, out);
      }
    }
    return out;
  }};
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$findMixin.js.map
