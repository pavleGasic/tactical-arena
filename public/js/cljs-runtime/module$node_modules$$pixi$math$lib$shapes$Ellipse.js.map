{
"version":3,
"file":"module$node_modules$$pixi$math$lib$shapes$Ellipse.js",
"lineCount":31,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,GAAsE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE1GC,SAASH,OAAA,CAAQ,0CAAR,CAFiG,EAEzEI,YAAYJ,OAAA,CAAQ,qDAAR,CAF6D;AAG9G,OAAMK,QAAN;AAOEC,eAAW,CAACC,CAAA,GAAI,CAAL,EAAQC,CAAA,GAAI,CAAZ,EAAeC,SAAA,GAAY,CAA3B,EAA8BC,UAAA,GAAa,CAA3C,CAA8C;AACvD,UAAKH,CAAAA,CAAL,GAASA,CAAT;AAAY,UAAKC,CAAAA,CAAL,GAASA,CAAT;AAAY,UAAKG,CAAAA,KAAL,GAAaF,SAAb;AAAwB,UAAKG,CAAAA,MAAL,GAAcF,UAAd;AAA0B,UAAKG,CAAAA,IAAL,GAAYV,MAAOW,CAAAA,MAAOC,CAAAA,IAA1B;AADnB;AAOzDC,SAAK,EAAG;AACN,aAAO,IAAIX,OAAJ,CAAY,IAAKE,CAAAA,CAAjB,EAAoB,IAAKC,CAAAA,CAAzB,EAA4B,IAAKG,CAAAA,KAAjC,EAAwC,IAAKC,CAAAA,MAA7C,CAAP;AADM;AASRK,YAAQ,CAACV,CAAD,EAAIC,CAAJ,CAAO;AACb,UAAkB,CAAlB,IAAI,IAAKG,CAAAA,KAAT,IAAsC,CAAtC,IAAuB,IAAKC,CAAAA,MAA5B;AACE,eAAO,CAAA,CAAP;AADF;AAEIM,OAAAA,IAASX,CAATW,GAAa,IAAKX,CAAAA,CAAlBW,IAAuB,IAAKP,CAAAA,KAA5BO;AAAmCC,OAAAA,IAASX,CAATW,GAAa,IAAKX,CAAAA,CAAlBW,IAAuB,IAAKP,CAAAA,MAA5BO;AACvC,aAAOD,CAAA,IAASA,CAAT,EAAgBC,CAAhB,IAAyBA,CAAzB,EAAiD,CAAjD,IAAgCD,CAAhC,GAAwCC,CAA/C;AAJa;AAUfC,aAAS,EAAG;AACV,aAAO,IAAIhB,SAAUA,CAAAA,SAAd,CAAwB,IAAKG,CAAAA,CAA7B,GAAiC,IAAKI,CAAAA,KAAtC,EAA6C,IAAKH,CAAAA,CAAlD,GAAsD,IAAKI,CAAAA,MAA3D,EAAmE,IAAKD,CAAAA,KAAxE,EAA+E,IAAKC,CAAAA,MAApF,CAAP;AADU;AAjCd;AAqCAP,SAAQgB,CAAAA,SAAUC,CAAAA,QAAlB,GAA6BC,QAAQ,EAAG;AACtC,WAAQ,yBAAwB,IAAKhB,CAAAA,CAA7B,MAAoC,IAAKC,CAAAA,CAAzC,UAAoD,IAAKG,CAAAA,KAAzD,WAAyE,IAAKC,CAAAA,MAA9E,GAAR;AADsC,GAAxC;AAGAV,SAAQG,CAAAA,OAAR,GAAkBA,OAAlB;AA3C8G,CAA9G;;",
"sources":["node_modules/@pixi/math/lib/shapes/Ellipse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$math$lib$shapes$Ellipse\"] = function(global,require,module,exports) {\n\"use strict\";\nvar _const = require(\"../const.js\"), Rectangle = require(\"./Rectangle.js\");\nclass Ellipse {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0) {\n    this.x = x, this.y = y, this.width = halfWidth, this.height = halfHeight, this.type = _const.SHAPES.ELIP;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   * @returns {PIXI.Ellipse} A copy of the ellipse\n   */\n  clone() {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0)\n      return !1;\n    let normx = (x - this.x) / this.width, normy = (y - this.y) / this.height;\n    return normx *= normx, normy *= normy, normx + normy <= 1;\n  }\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   * @returns The framing rectangle\n   */\n  getBounds() {\n    return new Rectangle.Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n  }\n}\nEllipse.prototype.toString = function() {\n  return `[@pixi/math:Ellipse x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n};\nexports.Ellipse = Ellipse;\n//# sourceMappingURL=Ellipse.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","Rectangle","Ellipse","constructor","x","y","halfWidth","halfHeight","width","height","type","SHAPES","ELIP","clone","contains","normx","normy","getBounds","prototype","toString","Ellipse.prototype.toString"]
}
