shadow$provide.module$node_modules$$pixi$core$lib$textures$resources$Resource = function(global, require, module, exports) {
  var runner = require("module$node_modules$$pixi$runner$lib$index");
  class Resource {
    constructor(width = 0, height = 0) {
      this._width = width;
      this._height = height;
      this.internal = this.destroyed = !1;
      this.onResize = new runner.Runner("setRealSize");
      this.onUpdate = new runner.Runner("update");
      this.onError = new runner.Runner("onError");
    }
    bind(baseTexture) {
      this.onResize.add(baseTexture);
      this.onUpdate.add(baseTexture);
      this.onError.add(baseTexture);
      (this._width || this._height) && this.onResize.emit(this._width, this._height);
    }
    unbind(baseTexture) {
      this.onResize.remove(baseTexture);
      this.onUpdate.remove(baseTexture);
      this.onError.remove(baseTexture);
    }
    resize(width, height) {
      width === this._width && height === this._height || (this._width = width, this._height = height, this.onResize.emit(width, height));
    }
    get valid() {
      return !!this._width && !!this._height;
    }
    update() {
      this.destroyed || this.onUpdate.emit();
    }
    load() {
      return Promise.resolve(this);
    }
    get width() {
      return this._width;
    }
    get height() {
      return this._height;
    }
    style(_renderer, _baseTexture, _glTexture) {
      return !1;
    }
    dispose() {
    }
    destroy() {
      this.destroyed || (this.destroyed = !0, this.dispose(), this.onError.removeAll(), this.onError = null, this.onResize.removeAll(), this.onResize = null, this.onUpdate.removeAll(), this.onUpdate = null);
    }
    static test(_source, _extension) {
      return !1;
    }
  }
  exports.Resource = Resource;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$textures$resources$Resource.js.map
