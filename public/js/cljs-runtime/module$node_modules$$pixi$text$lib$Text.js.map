{
"version":3,
"file":"module$node_modules$$pixi$text$lib$Text.js",
"lineCount":222,
"mappings":"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",
"sources":["node_modules/@pixi/text/lib/Text.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text$lib$Text\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), sprite = require(\"@pixi/sprite\"), _const = require(\"./const.js\"), TextMetrics = require(\"./TextMetrics.js\"), TextStyle = require(\"./TextStyle.js\");\nconst defaultDestroyOptions = {\n  texture: !0,\n  children: !1,\n  baseTexture: !0\n}, _Text = class _Text2 extends sprite.Sprite {\n  /**\n   * @param text - The string that you would like the text to display\n   * @param style - The style parameters\n   * @param canvas - The canvas element for drawing text\n   */\n  constructor(text, style, canvas) {\n    let ownCanvas = !1;\n    canvas || (canvas = core.settings.ADAPTER.createCanvas(), ownCanvas = !0), canvas.width = 3, canvas.height = 3;\n    const texture = core.Texture.from(canvas);\n    texture.orig = new core.Rectangle(), texture.trim = new core.Rectangle(), super(texture), this._ownCanvas = ownCanvas, this.canvas = canvas, this.context = canvas.getContext(\"2d\", {\n      // required for trimming to work without warnings\n      willReadFrequently: !0\n    }), this._resolution = _Text2.defaultResolution ?? core.settings.RESOLUTION, this._autoResolution = _Text2.defaultAutoResolution, this._text = null, this._style = null, this._styleListener = null, this._font = \"\", this.text = text, this.style = style, this.localStyleID = -1;\n  }\n  /**\n   * @see PIXI.TextMetrics.experimentalLetterSpacing\n   * @deprecated since 7.1.0\n   */\n  static get experimentalLetterSpacing() {\n    return TextMetrics.TextMetrics.experimentalLetterSpacing;\n  }\n  static set experimentalLetterSpacing(value) {\n    core.utils.deprecation(\n      \"7.1.0\",\n      \"Text.experimentalLetterSpacing is deprecated, use TextMetrics.experimentalLetterSpacing\"\n    ), TextMetrics.TextMetrics.experimentalLetterSpacing = value;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n   */\n  updateText(respectDirty) {\n    const style = this._style;\n    if (this.localStyleID !== style.styleID && (this.dirty = !0, this.localStyleID = style.styleID), !this.dirty && respectDirty)\n      return;\n    this._font = this._style.toFontString();\n    const context = this.context, measured = TextMetrics.TextMetrics.measureText(this._text || \" \", this._style, this._style.wordWrap, this.canvas), width = measured.width, height = measured.height, lines = measured.lines, lineHeight = measured.lineHeight, lineWidths = measured.lineWidths, maxLineWidth = measured.maxLineWidth, fontProperties = measured.fontProperties;\n    this.canvas.width = Math.ceil(Math.ceil(Math.max(1, width) + style.padding * 2) * this._resolution), this.canvas.height = Math.ceil(Math.ceil(Math.max(1, height) + style.padding * 2) * this._resolution), context.scale(this._resolution, this._resolution), context.clearRect(0, 0, this.canvas.width, this.canvas.height), context.font = this._font, context.lineWidth = style.strokeThickness, context.textBaseline = style.textBaseline, context.lineJoin = style.lineJoin, context.miterLimit = style.miterLimit;\n    let linePositionX, linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0, dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0, dsOffsetShadow = dsOffsetText * this._resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\", context.strokeStyle = \"black\";\n        const dropShadowColor = style.dropShadowColor, dropShadowBlur = style.dropShadowBlur * this._resolution, dropShadowDistance = style.dropShadowDistance * this._resolution;\n        context.shadowColor = core.Color.shared.setValue(dropShadowColor).setAlpha(style.dropShadowAlpha).toRgbaString(), context.shadowBlur = dropShadowBlur, context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance, context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance + dsOffsetShadow;\n      } else\n        context.fillStyle = this._generateFillStyle(style, lines, measured), context.strokeStyle = style.stroke, context.shadowColor = \"black\", context.shadowBlur = 0, context.shadowOffsetX = 0, context.shadowOffsetY = 0;\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      lineHeight - fontProperties.fontSize < 0 && (linePositionYShift = 0);\n      for (let i2 = 0; i2 < lines.length; i2++)\n        linePositionX = style.strokeThickness / 2, linePositionY = style.strokeThickness / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift, style.align === \"right\" ? linePositionX += maxLineWidth - lineWidths[i2] : style.align === \"center\" && (linePositionX += (maxLineWidth - lineWidths[i2]) / 2), style.stroke && style.strokeThickness && this.drawLetterSpacing(\n          lines[i2],\n          linePositionX + style.padding,\n          linePositionY + style.padding - dsOffsetText,\n          !0\n        ), style.fill && this.drawLetterSpacing(\n          lines[i2],\n          linePositionX + style.padding,\n          linePositionY + style.padding - dsOffsetText\n        );\n    }\n    this.updateTexture();\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  drawLetterSpacing(text, x, y, isStroke = !1) {\n    const letterSpacing = this._style.letterSpacing;\n    let useExperimentalLetterSpacing = !1;\n    if (TextMetrics.TextMetrics.experimentalLetterSpacingSupported && (TextMetrics.TextMetrics.experimentalLetterSpacing ? (this.context.letterSpacing = `${letterSpacing}px`, this.context.textLetterSpacing = `${letterSpacing}px`, useExperimentalLetterSpacing = !0) : (this.context.letterSpacing = \"0px\", this.context.textLetterSpacing = \"0px\")), letterSpacing === 0 || useExperimentalLetterSpacing) {\n      isStroke ? this.context.strokeText(text, x, y) : this.context.fillText(text, x, y);\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = TextMetrics.TextMetrics.graphemeSegmenter(text);\n    let previousWidth = this.context.measureText(text).width, currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      isStroke ? this.context.strokeText(currentChar, currentPosition, y) : this.context.fillText(currentChar, currentPosition, y);\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j)\n        textStr += stringArray[j];\n      currentWidth = this.context.measureText(textStr).width, currentPosition += previousWidth - currentWidth + letterSpacing, previousWidth = currentWidth;\n    }\n  }\n  /** Updates texture size based on canvas size. */\n  updateTexture() {\n    const canvas = this.canvas;\n    if (this._style.trim) {\n      const trimmed = core.utils.trimCanvas(canvas);\n      trimmed.data && (canvas.width = trimmed.width, canvas.height = trimmed.height, this.context.putImageData(trimmed.data, 0, 0));\n    }\n    const texture = this._texture, style = this._style, padding = style.trim ? 0 : style.padding, baseTexture = texture.baseTexture;\n    texture.trim.width = texture._frame.width = canvas.width / this._resolution, texture.trim.height = texture._frame.height = canvas.height / this._resolution, texture.trim.x = -padding, texture.trim.y = -padding, texture.orig.width = texture._frame.width - padding * 2, texture.orig.height = texture._frame.height - padding * 2, this._onTextureUpdate(), baseTexture.setRealSize(canvas.width, canvas.height, this._resolution), texture.updateUvs(), this.dirty = !1;\n  }\n  /**\n   * Renders the object using the WebGL renderer\n   * @param renderer - The renderer\n   */\n  _render(renderer) {\n    this._autoResolution && this._resolution !== renderer.resolution && (this._resolution = renderer.resolution, this.dirty = !0), this.updateText(!0), super._render(renderer);\n  }\n  /** Updates the transform on all children of this container for rendering. */\n  updateTransform() {\n    this.updateText(!0), super.updateTransform();\n  }\n  getBounds(skipUpdate, rect) {\n    return this.updateText(!0), this._textureID === -1 && (skipUpdate = !1), super.getBounds(skipUpdate, rect);\n  }\n  /**\n   * Gets the local bounds of the text object.\n   * @param rect - The output rectangle.\n   * @returns The bounds.\n   */\n  getLocalBounds(rect) {\n    return this.updateText(!0), super.getLocalBounds.call(this, rect);\n  }\n  /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n  _calculateBounds() {\n    this.calculateVertices(), this._bounds.addQuad(this.vertexData);\n  }\n  /**\n   * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n   * @param style - The style.\n   * @param lines - The lines of text.\n   * @param metrics\n   * @returns The fill style\n   */\n  _generateFillStyle(style, lines, metrics) {\n    const fillStyle = style.fill;\n    if (Array.isArray(fillStyle)) {\n      if (fillStyle.length === 1)\n        return fillStyle[0];\n    } else\n      return fillStyle;\n    let gradient;\n    const dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0, padding = style.padding || 0, width = this.canvas.width / this._resolution - dropShadowCorrection - padding * 2, height = this.canvas.height / this._resolution - dropShadowCorrection - padding * 2, fill = fillStyle.slice(), fillGradientStops = style.fillGradientStops.slice();\n    if (!fillGradientStops.length) {\n      const lengthPlus1 = fill.length + 1;\n      for (let i = 1; i < lengthPlus1; ++i)\n        fillGradientStops.push(i / lengthPlus1);\n    }\n    if (fill.unshift(fillStyle[0]), fillGradientStops.unshift(0), fill.push(fillStyle[fillStyle.length - 1]), fillGradientStops.push(1), style.fillGradientType === _const.TEXT_GRADIENT.LINEAR_VERTICAL) {\n      gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n      const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n      for (let i = 0; i < lines.length; i++) {\n        const lastLineBottom = metrics.lineHeight * (i - 1) + textHeight, thisLineTop = metrics.lineHeight * i;\n        let thisLineGradientStart = thisLineTop;\n        i > 0 && lastLineBottom > thisLineTop && (thisLineGradientStart = (thisLineTop + lastLineBottom) / 2);\n        const thisLineBottom = thisLineTop + textHeight, nextLineTop = metrics.lineHeight * (i + 1);\n        let thisLineGradientEnd = thisLineBottom;\n        i + 1 < lines.length && nextLineTop < thisLineBottom && (thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2);\n        const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n        for (let j = 0; j < fill.length; j++) {\n          let lineStop = 0;\n          typeof fillGradientStops[j] == \"number\" ? lineStop = fillGradientStops[j] : lineStop = j / fill.length;\n          let globalStop = Math.min(1, Math.max(\n            0,\n            thisLineGradientStart / height + lineStop * gradStopLineHeight\n          ));\n          globalStop = Number(globalStop.toFixed(5)), gradient.addColorStop(globalStop, fill[j]);\n        }\n      }\n    } else {\n      gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n      const totalIterations = fill.length + 1;\n      let currentIteration = 1;\n      for (let i = 0; i < fill.length; i++) {\n        let stop;\n        typeof fillGradientStops[i] == \"number\" ? stop = fillGradientStops[i] : stop = currentIteration / totalIterations, gradient.addColorStop(stop, fill[i]), currentIteration++;\n      }\n    }\n    return gradient;\n  }\n  /**\n   * Destroys this text object.\n   *\n   * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n   * the majority of the time the texture will not be shared with any other Sprites.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n   */\n  destroy(options) {\n    typeof options == \"boolean\" && (options = { children: options }), options = Object.assign({}, defaultDestroyOptions, options), super.destroy(options), this._ownCanvas && (this.canvas.height = this.canvas.width = 0), this.context = null, this.canvas = null, this._style = null;\n  }\n  /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return this.updateText(!0), Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    this.updateText(!0);\n    const s = core.utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._texture.orig.width, this._width = value;\n  }\n  /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return this.updateText(!0), Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    this.updateText(!0);\n    const s = core.utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._texture.orig.height, this._height = value;\n  }\n  /**\n   * Set the style of the text.\n   *\n   * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n   *\n   * If setting the `style` can also be partial {@link PIXI.ITextStyle}.\n   */\n  get style() {\n    return this._style;\n  }\n  set style(style) {\n    style = style || {}, style instanceof TextStyle.TextStyle ? this._style = style : this._style = new TextStyle.TextStyle(style), this.localStyleID = -1, this.dirty = !0;\n  }\n  /** Set the copy for the text object. To split a line you can use '\\n'. */\n  get text() {\n    return this._text;\n  }\n  set text(text) {\n    text = String(text ?? \"\"), this._text !== text && (this._text = text, this.dirty = !0);\n  }\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   *\n   * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n   * @default 1\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._autoResolution = !1, this._resolution !== value && (this._resolution = value, this.dirty = !0);\n  }\n};\n_Text.defaultAutoResolution = !0;\nlet Text = _Text;\nexports.Text = Text;\n//# sourceMappingURL=Text.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","sprite","_const","TextMetrics","TextStyle","defaultDestroyOptions","texture","children","baseTexture","_Text","Sprite","constructor","text","style","canvas","ownCanvas","settings","ADAPTER","createCanvas","width","height","Texture","from","orig","Rectangle","trim","_ownCanvas","context","getContext","willReadFrequently","_resolution","_Text2","defaultResolution","RESOLUTION","_autoResolution","defaultAutoResolution","_styleListener","_style","_text","_font","localStyleID","experimentalLetterSpacing","value","utils","deprecation","updateText","respectDirty","styleID","dirty","toFontString","measured","measureText","wordWrap","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","Math","ceil","max","padding","scale","clearRect","font","lineWidth","strokeThickness","textBaseline","lineJoin","miterLimit","linePositionY","passesCount","dropShadow","i","dsOffsetText","isShadowPass","dsOffsetShadow","fillStyle","strokeStyle","dropShadowBlur","dropShadowDistance","shadowColor","Color","shared","setValue","dropShadowColor","setAlpha","dropShadowAlpha","toRgbaString","shadowBlur","shadowOffsetX","cos","dropShadowAngle","shadowOffsetY","sin","_generateFillStyle","stroke","linePositionYShift","fontSize","i2","length","linePositionX","ascent","align","drawLetterSpacing","fill","updateTexture","x","y","isStroke","letterSpacing","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","textLetterSpacing","strokeText","fillText","stringArray","graphemeSegmenter","previousWidth","currentChar","currentPosition","textStr","j","currentWidth","trimmed","trimCanvas","data","putImageData","_texture","_frame","_onTextureUpdate","setRealSize","updateUvs","_render","renderer","resolution","updateTransform","getBounds","skipUpdate","rect","_textureID","getLocalBounds","call","_calculateBounds","calculateVertices","_bounds","addQuad","vertexData","metrics","Array","isArray","dropShadowCorrection","slice","fillGradientStops","lengthPlus1","push","unshift","fillGradientType","TEXT_GRADIENT","LINEAR_VERTICAL","gradient","createLinearGradient","textHeight","lastLineBottom","thisLineGradientStart","thisLineTop","thisLineBottom","nextLineTop","thisLineGradientEnd","gradStopLineHeight","lineStop","globalStop","min","Number","toFixed","addColorStop","totalIterations","currentIteration","stop","destroy","options","Object","assign","abs","s","sign","_width","_height","String","Text"]
}
