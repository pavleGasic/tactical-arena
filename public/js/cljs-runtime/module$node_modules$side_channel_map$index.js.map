{
"version":3,
"file":"module$node_modules$side_channel_map$index.js",
"lineCount":25,
"mappings":"AAAAA,cAAA,CAAA,0CAAA,GAA+D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGnGC,QAAAA,GAAeH,OAAA,CAAQ,yCAAR,CAAfG;AACAC,SAAAA,GAAYJ,OAAA,CAAQ,sCAAR,CAAZI;AACJ,MAAIC,UAAUL,OAAA,CAAQ,0CAAR,CAAd,EAEIM,aAAaN,OAAA,CAAQ,oCAAR,CAFjB,EAGIO,OAAOJ,MAAA,CAAa,OAAb,EAAsB,CAAA,CAAtB,CAHX,EAMIK,UAAUJ,OAAA,CAAU,mBAAV,EAA+B,CAAA,CAA/B,CANd,EAQIK,UAAUL,OAAA,CAAU,mBAAV,EAA+B,CAAA,CAA/B,CARd,EAUIM,UAAUN,OAAA,CAAU,mBAAV,EAA+B,CAAA,CAA/B,CAVd,EAYIO,aAAaP,OAAA,CAAU,sBAAV,EAAkC,CAAA,CAAlC,CAZjB,EAcIQ,WAAWR,OAAA,CAAU,oBAAV,EAAgC,CAAA,CAAhC,CAdf;AAiBAH,QAAOC,CAAAA,OAAP,GAAiB,CAAC,CAACK,IAAnB,IAAsEM,QAA0B,EAAG;AAK7D,QAAIC,EAAJ,EAGjCC,UAAU,CACbC,OAAQA,QAAS,CAACC,GAAD,CAAM;AACtB,UAAI,CAACF,OAAQG,CAAAA,GAAR,CAAYD,GAAZ,CAAL;AACC,cAAM,IAAIX,UAAJ,CAAe,gCAAf,GAAkDD,OAAA,CAAQY,GAAR,CAAlD,CAAN;AADD;AADsB,KADV,EAMb,SAAUE,QAAS,CAACF,GAAD,CAAM;AACxB,aAAIH,EAAJ,IACKM,GAIGA,GAJMT,UAAA,CAAWG,EAAX,EAAeG,GAAf,CAING,EAHc,CAGdA,KAHHR,QAAA,CAASE,EAAT,CAGGM,KAFNN,EAEMM,GAFD,IAAKC,EAEJD,GAAAA,GALR,IAOO,CAAA,CAPP;AADwB,KANZ,EAgBbE,IAAKA,QAAS,CAACL,GAAD,CAAM;AACnB,UAAIH,EAAJ;AACC,eAAON,OAAA,CAAQM,EAAR,EAAYG,GAAZ,CAAP;AADD;AADmB,KAhBP,EAqBbC,IAAKA,QAAS,CAACD,GAAD,CAAM;AACnB,aAAIH,EAAJ,GACQJ,OAAA,CAAQI,EAAR,EAAYG,GAAZ,CADR,GAGO,CAAA,CAHP;AADmB,KArBP,EA2BbM,IAAKA,QAAS,CAACN,GAAD,EAAMO,KAAN,CAAa;AACrBV,QAAL,KAECA,EAFD,GAEM,IAAIP,IAAJ,EAFN;AAIAE,aAAA,CAAQK,EAAR,EAAYG,GAAZ,EAAiBO,KAAjB,CAAA;AAL0B,KA3Bd,CAHuB;AAwCrC,WAAOT,OAAP;AA7CkG,GAAnG;AAtBuG,CAAvG;;",
"sources":["node_modules/side-channel-map/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$side_channel_map$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\nvar $Map = GetIntrinsic('%Map%', true);\n\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */\nvar $mapGet = callBound('Map.prototype.get', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */\nvar $mapSet = callBound('Map.prototype.set', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapHas = callBound('Map.prototype.has', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapDelete = callBound('Map.prototype.delete', true);\n/** @type {<K, V>(thisArg: Map<K, V>) => number} */\nvar $mapSize = callBound('Map.prototype.size', true);\n\n/** @type {import('.')} */\nmodule.exports = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {\n\t/** @typedef {ReturnType<typeof getSideChannelMap>} Channel */\n\t/** @typedef {Parameters<Channel['get']>[0]} K */\n\t/** @typedef {Parameters<Channel['set']>[1]} V */\n\n\t/** @type {Map<K, V> | undefined} */ var $m;\n\n\t/** @type {Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\t'delete': function (key) {\n\t\t\tif ($m) {\n\t\t\t\tvar result = $mapDelete($m, key);\n\t\t\t\tif ($mapSize($m) === 0) {\n\t\t\t\t\t$m = void undefined;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($m) {\n\t\t\t\treturn $mapGet($m, key);\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($m) {\n\t\t\t\treturn $mapHas($m, key);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (!$m) {\n\t\t\t\t// @ts-expect-error TS can't handle narrowing a variable inside a closure\n\t\t\t\t$m = new $Map();\n\t\t\t}\n\t\t\t$mapSet($m, key, value);\n\t\t}\n\t};\n\n\t// @ts-expect-error TODO: figure out why TS is erroring here\n\treturn channel;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetIntrinsic","callBound","inspect","$TypeError","$Map","$mapGet","$mapSet","$mapHas","$mapDelete","$mapSize","getSideChannelMap","$m","channel","assert","key","has","delete","result","undefined","get","set","value"]
}
