shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$layers$RenderLayer = function(global, require, module, exports) {
  var warn = require("module$node_modules$pixi_DOT_js$lib$utils$logging$warn");
  global = require("module$node_modules$pixi_DOT_js$lib$scene$container$Container");
  "use strict";
  const node_modules$pixi_DOT_js$lib$scene$layers$RenderLayer$classdecl$var41 = class extends global.Container {
    constructor(options = {}) {
      options = {...node_modules$pixi_DOT_js$lib$scene$layers$RenderLayer$classdecl$var41.defaultOptions, ...options};
      super();
      this.renderLayerChildren = [];
      this.sortableChildren = options.sortableChildren;
      this.sortFunction = options.sortFunction;
    }
    attach(...children) {
      for (let i = 0; i < children.length; i++) {
        var child = children[i];
        if (child.parentRenderLayer) {
          if (child.parentRenderLayer === this) {
            continue;
          }
          child.parentRenderLayer.detach(child);
        }
        this.renderLayerChildren.push(child);
        child.parentRenderLayer = this;
        if (child = this.renderGroup || this.parentRenderGroup) {
          child.structureDidChange = !0;
        }
      }
      return children[0];
    }
    detach(...children) {
      for (let i = 0; i < children.length; i++) {
        var child = children[i];
        const index = this.renderLayerChildren.indexOf(child);
        -1 !== index && this.renderLayerChildren.splice(index, 1);
        child.parentRenderLayer = null;
        if (child = this.renderGroup || this.parentRenderGroup) {
          child.structureDidChange = !0;
        }
      }
      return children[0];
    }
    detachAll() {
      const layerChildren = this.renderLayerChildren;
      for (let i = 0; i < layerChildren.length; i++) {
        layerChildren[i].parentRenderLayer = null;
      }
      this.renderLayerChildren.length = 0;
    }
    collectRenderables(instructionSet, renderer, _currentLayer) {
      _currentLayer = this.renderLayerChildren;
      const length = _currentLayer.length;
      this.sortableChildren && this.sortRenderLayerChildren();
      for (let i = 0; i < length; i++) {
        _currentLayer[i].parent || warn.warn("Container must be added to both layer and scene graph. Layers only handle render order - the scene graph is required for transforms (addChild)", _currentLayer[i]), _currentLayer[i].collectRenderables(instructionSet, renderer, this);
      }
    }
    sortRenderLayerChildren() {
      this.renderLayerChildren.sort(this.sortFunction);
    }
    _getGlobalBoundsRecursive(factorRenderLayers, bounds, _currentLayer) {
      if (factorRenderLayers) {
        for (factorRenderLayers = this.renderLayerChildren, _currentLayer = 0; _currentLayer < factorRenderLayers.length; _currentLayer++) {
          factorRenderLayers[_currentLayer]._getGlobalBoundsRecursive(!0, bounds, this);
        }
      }
    }
  };
  global = node_modules$pixi_DOT_js$lib$scene$layers$RenderLayer$classdecl$var41;
  global.defaultOptions = {sortableChildren:!1, sortFunction:(a, b) => a.zIndex - b.zIndex};
  exports.RenderLayer = global;
  exports.RenderLayerClass = global;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$layers$RenderLayer.js.map
