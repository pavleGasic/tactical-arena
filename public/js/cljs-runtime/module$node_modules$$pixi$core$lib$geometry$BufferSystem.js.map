{
"version":3,
"file":"module$node_modules$$pixi$core$lib$geometry$BufferSystem.js",
"lineCount":75,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,GAA6E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEjHC,QAAAA,GAAaH,OAAA,CAAQ,gDAAR,CAAbG;AAAJ,MAA8CC,WAAWJ,OAAA,CAAQ,sDAAR,CAAzD;AACA,OAAMK,aAAN;AAIEC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKA,CAAAA,QAAL,GAAgBA,QAAhB;AAA0B,UAAKC,CAAAA,cAAL,GAAsB,EAAtB;AAA0B,UAAKC,CAAAA,gBAAL,GAAwB,EAAxB;AADhC;AAMtBC,WAAO,EAAG;AACR,UAAKH,CAAAA,QAAL,GAAgB,IAAhB;AADQ;AAIVI,iBAAa,EAAG;AACd,UAAKC,CAAAA,UAAL,CAAgB,CAAA,CAAhB,CAAA;AAAqB,UAAKC,CAAAA,EAAL,GAAU,IAAKN,CAAAA,QAASM,CAAAA,EAAxB;AAA4B,UAAKC,CAAAA,WAAL,GAAmB,IAAKP,CAAAA,QAASO,CAAAA,WAAjC;AADnC;AAOhBC,QAAI,CAACC,MAAD,CAAS;AAAA,YACL,CAAEH,EAAF,EAAMC,WAAN,CAAA,GAAsB,IADjB,EACuBG,WAAWD,MAAOE,CAAAA,UAAP,CAAkBJ,WAAlB,CAAXG,IAA6C,IAAKE,CAAAA,cAAL,CAAoBH,MAApB,CADpE;AAEXH,QAAGO,CAAAA,UAAH,CAAcJ,MAAOK,CAAAA,IAArB,EAA2BJ,QAASD,CAAAA,MAApC,CAAA;AAFW;AAIbM,UAAM,CAACD,IAAD,CAAO;AACX,YAAM,CAAER,EAAF,CAAA,GAAS,IAAf;AACAA,QAAGO,CAAAA,UAAH,CAAcC,IAAd,EAAoB,IAApB,CAAA;AAFW;AAWbE,kBAAc,CAACP,MAAD,EAASQ,KAAT,CAAgB;AAC5B,YAAM,CAAEX,EAAF,EAAMC,WAAN,CAAA,GAAsB,IAA5B;AACA,UAAI,IAAKL,CAAAA,gBAAL,CAAsBe,KAAtB,CAAJ,KAAqCR,MAArC,CAA6C;AAC3C,cAAMC,WAAWD,MAAOE,CAAAA,UAAP,CAAkBJ,WAAlB,CAAXG,IAA6C,IAAKE,CAAAA,cAAL,CAAoBH,MAApB,CAAnD;AACA,YAAKP,CAAAA,gBAAL,CAAsBe,KAAtB,CAAA,GAA+BR,MAA/B;AAAuCH,UAAGU,CAAAA,cAAH,CAAkBV,EAAGY,CAAAA,cAArB,EAAqCD,KAArC,EAA4CP,QAASD,CAAAA,MAArD,CAAA;AAFI;AAFjB;AAc9BU,mBAAe,CAACV,MAAD,EAASQ,KAAT,EAAgBG,MAAhB,CAAwB;AACrC,YAAM,CAAEd,EAAF,EAAMC,WAAN,CAAA,GAAsB,IAA5B;AACAa,YAAA,GAASA,MAAT,IAAmB,CAAnB;AACMV,YAAAA,GAAWD,MAAOE,CAAAA,UAAP,CAAkBJ,WAAlB,CAAXG,IAA6C,IAAKE,CAAAA,cAAL,CAAoBH,MAApB,CAA7CC;AACNJ,QAAGa,CAAAA,eAAH,CAAmBb,EAAGY,CAAAA,cAAtB,EAAsCD,KAAtC,IAA+C,CAA/C,EAAkDP,MAASD,CAAAA,MAA3D,EAA4E,GAA5E,GAAmEW,MAAnE,EAAiF,GAAjF,CAAA;AAJqC;AAUvCC,UAAM,CAACZ,MAAD,CAAS;AAAA,YACP,CAAEH,EAAF,EAAMC,WAAN,CAAA,GAAsB,IADf,EACqBG,WAAWD,MAAOE,CAAAA,UAAP,CAAkBJ,WAAlB,CAAXG,IAA6C,IAAKE,CAAAA,cAAL,CAAoBH,MAApB,CADlE;AAEb,UAAIA,MAAOa,CAAAA,SAAX,KAAyBZ,QAASa,CAAAA,QAAlC;AACE,YAAIb,QAASa,CAAAA,QAAT,GAAoBd,MAAOa,CAAAA,SAA3B,EAAsChB,EAAGO,CAAAA,UAAH,CAAcJ,MAAOK,CAAAA,IAArB,EAA2BJ,QAASD,CAAAA,MAApC,CAAtC,EAAmFC,QAASc,CAAAA,UAA5F,IAA0Gf,MAAOgB,CAAAA,IAAKD,CAAAA,UAA1H;AACElB,YAAGoB,CAAAA,aAAH,CAAiBjB,MAAOK,CAAAA,IAAxB,EAA8B,CAA9B,EAAiCL,MAAOgB,CAAAA,IAAxC,CAAA;AADF,cAEK;AACH,gBAAME,WAAWlB,MAAOmB,CAAAA,MAAP,GAAgBtB,EAAGuB,CAAAA,WAAnB,GAAiCvB,EAAGwB,CAAAA,YAArD;AACApB,kBAASc,CAAAA,UAAT,GAAsBf,MAAOgB,CAAAA,IAAKD,CAAAA,UAAlC;AAA8ClB,YAAGyB,CAAAA,UAAH,CAActB,MAAOK,CAAAA,IAArB,EAA2BL,MAAOgB,CAAAA,IAAlC,EAAwCE,QAAxC,CAAA;AAF3C;AAHP;AAFa;AAefK,WAAO,CAACvB,MAAD,EAASwB,WAAT,CAAsB;AAC3B,UAAK,IAAKhC,CAAAA,cAAL,CAAoBQ,MAAOyB,CAAAA,EAA3B,CAAL,CAAA;AAEA,eAAO,IAAKjC,CAAAA,cAAL,CAAoBQ,MAAOyB,CAAAA,EAA3B,CAAP;AAH2B,YAIrBxB,WAAWD,MAAOE,CAAAA,UAAP,CAAkB,IAAKJ,CAAAA,WAAvB,CAJU,EAI2BD,KAAK,IAAKA,CAAAA,EAJrC;AAK3BG,cAAO0B,CAAAA,aAAcC,CAAAA,MAArB,CAA4B,IAA5B,CAAA;AAAmC1B,gBAAA,KAAauB,WAAA,IAAe3B,EAAG+B,CAAAA,YAAH,CAAgB3B,QAASD,CAAAA,MAAzB,CAAf,EAAiD,OAAOA,MAAOE,CAAAA,UAAP,CAAkB,IAAKJ,CAAAA,WAAvB,CAArE;AAJnC;AAD2B;AAW7BF,cAAU,CAAC4B,WAAD,CAAc;AACtB,YAAMK,MAAMC,MAAOC,CAAAA,IAAP,CAAY,IAAKvC,CAAAA,cAAjB,CAAZ;AACA,WAAK,IAAIwC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBH,GAAII,CAAAA,MAAxB,EAAgCD,CAAA,EAAhC;AACE,YAAKT,CAAAA,OAAL,CAAa,IAAK/B,CAAAA,cAAL,CAAoBqC,GAAA,CAAIG,CAAJ,CAApB,CAAb,EAA0CR,WAA1C,CAAA;AADF;AAFsB;AAUxBrB,kBAAc,CAACH,MAAD,CAAS;AACrB,YAAM,CAAEF,WAAF,EAAeD,EAAf,CAAA,GAAsB,IAA5B;AACA,aAAOG,MAAOE,CAAAA,UAAP,CAAkBJ,WAAlB,CAAA,GAAiC,IAAIV,QAASA,CAAAA,QAAb,CAAsBS,EAAGqC,CAAAA,YAAH,EAAtB,CAAjC,EAA2E,IAAK1C,CAAAA,cAAL,CAAoBQ,MAAOyB,CAAAA,EAA3B,CAA3E,GAA4GzB,MAA5G,EAAoHA,MAAO0B,CAAAA,aAAcS,CAAAA,GAArB,CAAyB,IAAzB,CAApH,EAAoJnC,MAAOE,CAAAA,UAAP,CAAkBJ,WAAlB,CAA3J;AAFqB;AAhGzB;AAqGAT,cAAa+C,CAAAA,SAAb,GAAyB,CACvB/B,KAAMlB,MAAWkD,CAAAA,aAAcC,CAAAA,cADR,EAEvBC,KAAM,QAFiB,CAAzB;AAIApD,QAAWA,CAAAA,UAAWgD,CAAAA,GAAtB,CAA0B9C,YAA1B,CAAA;AACAH,SAAQG,CAAAA,YAAR,GAAuBA,YAAvB;AA7GqH,CAArH;;",
"sources":["node_modules/@pixi/core/lib/geometry/BufferSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$geometry$BufferSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar extensions = require(\"@pixi/extensions\"), GLBuffer = require(\"./GLBuffer.js\");\nclass BufferSystem {\n  /**\n   * @param {PIXI.Renderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.managedBuffers = {}, this.boundBufferBases = {};\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this.renderer = null;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    this.disposeAll(!0), this.gl = this.renderer.gl, this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n  }\n  /**\n   * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n   * @param buffer - the buffer to bind to the renderer\n   */\n  bind(buffer) {\n    const { gl, CONTEXT_UID } = this, glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n    gl.bindBuffer(buffer.type, glBuffer.buffer);\n  }\n  unbind(type) {\n    const { gl } = this;\n    gl.bindBuffer(type, null);\n  }\n  /**\n   * Binds an uniform buffer to at the given index.\n   *\n   * A cache is used so a buffer will not be bound again if already bound.\n   * @param buffer - the buffer to bind\n   * @param index - the base index to bind it to.\n   */\n  bindBufferBase(buffer, index) {\n    const { gl, CONTEXT_UID } = this;\n    if (this.boundBufferBases[index] !== buffer) {\n      const glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n      this.boundBufferBases[index] = buffer, gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n    }\n  }\n  /**\n   * Binds a buffer whilst also binding its range.\n   * This will make the buffer start from the offset supplied rather than 0 when it is read.\n   * @param buffer - the buffer to bind\n   * @param index - the base index to bind at, defaults to 0\n   * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n   */\n  bindBufferRange(buffer, index, offset) {\n    const { gl, CONTEXT_UID } = this;\n    offset = offset || 0;\n    const glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n    gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n  }\n  /**\n   * Will ensure the data in the buffer is uploaded to the GPU.\n   * @param {PIXI.Buffer} buffer - the buffer to update\n   */\n  update(buffer) {\n    const { gl, CONTEXT_UID } = this, glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n    if (buffer._updateID !== glBuffer.updateID)\n      if (glBuffer.updateID = buffer._updateID, gl.bindBuffer(buffer.type, glBuffer.buffer), glBuffer.byteLength >= buffer.data.byteLength)\n        gl.bufferSubData(buffer.type, 0, buffer.data);\n      else {\n        const drawType = buffer.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n        glBuffer.byteLength = buffer.data.byteLength, gl.bufferData(buffer.type, buffer.data, drawType);\n      }\n  }\n  /**\n   * Disposes buffer\n   * @param {PIXI.Buffer} buffer - buffer with data\n   * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n   */\n  dispose(buffer, contextLost) {\n    if (!this.managedBuffers[buffer.id])\n      return;\n    delete this.managedBuffers[buffer.id];\n    const glBuffer = buffer._glBuffers[this.CONTEXT_UID], gl = this.gl;\n    buffer.disposeRunner.remove(this), glBuffer && (contextLost || gl.deleteBuffer(glBuffer.buffer), delete buffer._glBuffers[this.CONTEXT_UID]);\n  }\n  /**\n   * dispose all WebGL resources of all managed buffers\n   * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n   */\n  disposeAll(contextLost) {\n    const all = Object.keys(this.managedBuffers);\n    for (let i = 0; i < all.length; i++)\n      this.dispose(this.managedBuffers[all[i]], contextLost);\n  }\n  /**\n   * creates and attaches a GLBuffer object tied to the current context.\n   * @param buffer\n   * @protected\n   */\n  createGLBuffer(buffer) {\n    const { CONTEXT_UID, gl } = this;\n    return buffer._glBuffers[CONTEXT_UID] = new GLBuffer.GLBuffer(gl.createBuffer()), this.managedBuffers[buffer.id] = buffer, buffer.disposeRunner.add(this), buffer._glBuffers[CONTEXT_UID];\n  }\n}\nBufferSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"buffer\"\n};\nextensions.extensions.add(BufferSystem);\nexports.BufferSystem = BufferSystem;\n//# sourceMappingURL=BufferSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extensions","GLBuffer","BufferSystem","constructor","renderer","managedBuffers","boundBufferBases","destroy","contextChange","disposeAll","gl","CONTEXT_UID","bind","buffer","glBuffer","_glBuffers","createGLBuffer","bindBuffer","type","unbind","bindBufferBase","index","UNIFORM_BUFFER","bindBufferRange","offset","update","_updateID","updateID","byteLength","data","bufferSubData","drawType","static","STATIC_DRAW","DYNAMIC_DRAW","bufferData","dispose","contextLost","id","disposeRunner","remove","deleteBuffer","all","Object","keys","i","length","createBuffer","add","extension","ExtensionType","RendererSystem","name"]
}
