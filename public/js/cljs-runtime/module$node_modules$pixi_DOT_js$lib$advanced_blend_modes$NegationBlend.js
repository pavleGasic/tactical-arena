shadow$provide.module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$NegationBlend = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  require = require("module$node_modules$pixi_DOT_js$lib$filters$blend_modes$BlendModeFilter");
  "use strict";
  class NegationBlend extends require.BlendModeFilter {
    constructor() {
      super({gl:{functions:"\n                vec3 negation(vec3 base, vec3 blend)\n                {\n                    return 1.0-abs(1.0-base-blend);\n                }\n\n                vec3 blendNegation(vec3 base, vec3 blend, float opacity)\n                {\n                    return (negation(base, blend) * opacity + base * (1.0 - opacity));\n                }\n                ", main:"\n                finalColor \x3d vec4(blendNegation(back.rgb, front.rgb, front.a), blendedAlpha) * uBlend;\n                "}, 
      gpu:{functions:"\n                fn blendNegation(base: vec3\x3cf32\x3e, blend: vec3\x3cf32\x3e) -\x3e vec3\x3cf32\x3e\n                {\n                    return 1.0-abs(1.0-base-blend);\n                }\n\n                fn blendNegationOpacity(base: vec3\x3cf32\x3e, blend: vec3\x3cf32\x3e, opacity: f32) -\x3e vec3\x3cf32\x3e\n                {\n                    return (blendNegation(base, blend) * opacity + base * (1.0 - opacity));\n                }\n            ", main:"\n                out \x3d vec4\x3cf32\x3e(blendNegationOpacity(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n            "}});
    }
  }
  NegationBlend.extension = {name:"negation", type:global.ExtensionType.BlendMode};
  exports.NegationBlend = NegationBlend;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$NegationBlend.js.map
