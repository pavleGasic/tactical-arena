shadow$provide.module$node_modules$$pixi$core$lib$view$ViewSystem = function(global, require, module, exports) {
  global = require("module$node_modules$$pixi$extensions$lib$index");
  var math = require("module$node_modules$$pixi$math$lib$index"), settings = require("module$node_modules$$pixi$settings$lib$index");
  class ViewSystem {
    constructor(renderer) {
      this.renderer = renderer;
    }
    init(options) {
      this.screen = new math.Rectangle(0, 0, options.width, options.height);
      this.element = options.view || settings.settings.ADAPTER.createCanvas();
      this.resolution = options.resolution || settings.settings.RESOLUTION;
      this.autoDensity = !!options.autoDensity;
    }
    resizeView(desiredScreenWidth, desiredScreenHeight) {
      this.element.width = Math.round(desiredScreenWidth * this.resolution);
      this.element.height = Math.round(desiredScreenHeight * this.resolution);
      desiredScreenWidth = this.element.width / this.resolution;
      desiredScreenHeight = this.element.height / this.resolution;
      this.screen.width = desiredScreenWidth;
      this.screen.height = desiredScreenHeight;
      this.autoDensity && (this.element.style.width = `${desiredScreenWidth}px`, this.element.style.height = `${desiredScreenHeight}px`);
      this.renderer.emit("resize", desiredScreenWidth, desiredScreenHeight);
      this.renderer.runners.resize.emit(this.screen.width, this.screen.height);
    }
    destroy(removeView) {
      removeView && this.element.parentNode?.removeChild(this.element);
      this.screen = this.element = this.renderer = null;
    }
  }
  ViewSystem.defaultOptions = {width:800, height:600, resolution:void 0, autoDensity:!1};
  ViewSystem.extension = {type:[global.ExtensionType.RendererSystem, global.ExtensionType.CanvasRendererSystem], name:"_view"};
  global.extensions.add(ViewSystem);
  exports.ViewSystem = ViewSystem;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$view$ViewSystem.js.map
