{
"version":3,
"file":"module$node_modules$$pixi$core$lib$geometry$Buffer.js",
"lineCount":38,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,GAAuE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE3GC,YAAYH,OAAA,CAAQ,+CAAR,CAF+F,EAEnEI,SAASJ,OAAA,CAAQ,4CAAR,CAF0D;AAG/G,MAAIK,MAAM,CAAV;AACA,OAAMC,OAAN;AAMEC,eAAW,CAACC,IAAD,EAAOC,OAAA,GAAU,CAAA,CAAjB,EAAqBC,KAAA,GAAQ,CAAA,CAA7B,CAAiC;AAC1C,UAAKF,CAAAA,IAAL,GAAYA,IAAZ,IAAoB,IAAIG,YAAJ,CAAiB,CAAjB,CAApB;AAAyC,UAAKC,CAAAA,UAAL,GAAkB,EAAlB;AAAsB,UAAKC,CAAAA,SAAL,GAAiB,CAAjB;AAAoB,UAAKH,CAAAA,KAAL,GAAaA,KAAb;AAAoB,UAAKI,CAAAA,MAAL,GAAcL,OAAd;AAAuB,UAAKM,CAAAA,EAAL,GAAUV,GAAA,EAAV;AAAiB,UAAKW,CAAAA,aAAL,GAAqB,IAAIZ,MAAOa,CAAAA,MAAX,CAAkB,eAAlB,CAArB;AADrG;AAQ5CC,UAAM,CAACV,IAAD,CAAO;AACXA,UAAA,YAAgBW,KAAhB,KAA0BX,IAA1B,GAAiC,IAAIG,YAAJ,CAAiBH,IAAjB,CAAjC;AAA0D,UAAKA,CAAAA,IAAL,GAAYA,IAAZ,IAAoB,IAAKA,CAAAA,IAAzB;AAA+B,UAAKK,CAAAA,SAAL,EAAA;AAD9E;AAIbO,WAAO,EAAG;AACR,UAAKJ,CAAAA,aAAcK,CAAAA,IAAnB,CAAwB,IAAxB,EAA8B,CAAA,CAA9B,CAAA;AADQ;AAIVC,WAAO,EAAG;AACR,UAAKF,CAAAA,OAAL,EAAA;AAAgB,UAAKZ,CAAAA,IAAL,GAAY,IAAZ;AADR;AAWN,aAAK,CAACe,KAAD,CAAQ;AACf,UAAKC,CAAAA,IAAL,GAAYD,KAAA,GAAQpB,SAAUsB,CAAAA,WAAYC,CAAAA,oBAA9B,GAAqDvB,SAAUsB,CAAAA,WAAYE,CAAAA,YAAvF;AADe;AAGb,aAAQ,EAAA;AACV,aAAO,IAAKH,CAAAA,IAAZ,KAAqBrB,SAAUsB,CAAAA,WAAYC,CAAAA,oBAA3C;AADU;AAQLE,eAAI,CAACpB,IAAD,CAAO;AAChB,aAAOA,IAAA,YAAgBW,KAAhB,KAA0BX,IAA1B,GAAiC,IAAIG,YAAJ,CAAiBH,IAAjB,CAAjC,GAA0D,IAAIF,MAAJ,CAAWE,IAAX,CAAjE;AADgB;AA5CpB;AAgDAN,SAAQI,CAAAA,MAAR,GAAiBA,MAAjB;AApD+G,CAA/G;;",
"sources":["node_modules/@pixi/core/lib/geometry/Buffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$geometry$Buffer\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), runner = require(\"@pixi/runner\");\nlet UID = 0;\nclass Buffer {\n  /**\n   * @param {PIXI.IArrayBuffer} data - the data to store in the buffer.\n   * @param _static - `true` for static buffer\n   * @param index - `true` for index buffer\n   */\n  constructor(data, _static = !0, index = !1) {\n    this.data = data || new Float32Array(1), this._glBuffers = {}, this._updateID = 0, this.index = index, this.static = _static, this.id = UID++, this.disposeRunner = new runner.Runner(\"disposeBuffer\");\n  }\n  // TODO could explore flagging only a partial upload?\n  /**\n   * Flags this buffer as requiring an upload to the GPU.\n   * @param {PIXI.IArrayBuffer|number[]} [data] - the data to update in the buffer.\n   */\n  update(data) {\n    data instanceof Array && (data = new Float32Array(data)), this.data = data || this.data, this._updateID++;\n  }\n  /** Disposes WebGL resources that are connected to this geometry. */\n  dispose() {\n    this.disposeRunner.emit(this, !1);\n  }\n  /** Destroys the buffer. */\n  destroy() {\n    this.dispose(), this.data = null;\n  }\n  /**\n   * Flags whether this is an index buffer.\n   *\n   * Index buffers are of type `ELEMENT_ARRAY_BUFFER`. Note that setting this property to false will make\n   * the buffer of type `ARRAY_BUFFER`.\n   *\n   * For backwards compatibility.\n   */\n  set index(value) {\n    this.type = value ? constants.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER : constants.BUFFER_TYPE.ARRAY_BUFFER;\n  }\n  get index() {\n    return this.type === constants.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n  }\n  /**\n   * Helper function that creates a buffer based on an array or TypedArray\n   * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\n   * @returns - A new Buffer based on the data provided.\n   */\n  static from(data) {\n    return data instanceof Array && (data = new Float32Array(data)), new Buffer(data);\n  }\n}\nexports.Buffer = Buffer;\n//# sourceMappingURL=Buffer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","runner","UID","Buffer","constructor","data","_static","index","Float32Array","_glBuffers","_updateID","static","id","disposeRunner","Runner","update","Array","dispose","emit","destroy","value","type","BUFFER_TYPE","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","from"]
}
