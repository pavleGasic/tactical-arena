{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$utils$path.js",
"lineCount":216,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/utils/path.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$utils$path\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../environment/adapter.js');\n\n\"use strict\";\nfunction assertPath(path2) {\n  if (typeof path2 !== \"string\") {\n    throw new TypeError(`Path must be a string. Received ${JSON.stringify(path2)}`);\n  }\n}\nfunction removeUrlParams(url) {\n  const re = url.split(\"?\")[0];\n  return re.split(\"#\")[0];\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace);\n}\nfunction normalizeStringPosix(path2, allowAboveRoot) {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code = -1;\n  for (let i = 0; i <= path2.length; ++i) {\n    if (i < path2.length) {\n      code = path2.charCodeAt(i);\n    } else if (code === 47) {\n      break;\n    } else {\n      code = 47;\n    }\n    if (code === 47) {\n      if (lastSlash === i - 1 || dots === 1) {\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = \"\";\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) {\n            res += \"/..\";\n          } else {\n            res = \"..\";\n          }\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += `/${path2.slice(lastSlash + 1, i)}`;\n        } else {\n          res = path2.slice(lastSlash + 1, i);\n        }\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nconst path = {\n  /**\n   * Converts a path to posix format.\n   * @param path - The path to convert to posix\n   */\n  toPosix(path2) {\n    return replaceAll(path2, \"\\\\\", \"/\");\n  },\n  /**\n   * Checks if the path is a URL e.g. http://, https://\n   * @param path - The path to check\n   */\n  isUrl(path2) {\n    return /^https?:/.test(this.toPosix(path2));\n  },\n  /**\n   * Checks if the path is a data URL\n   * @param path - The path to check\n   */\n  isDataUrl(path2) {\n    return /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i.test(path2);\n  },\n  /**\n   * Checks if the path is a blob URL\n   * @param path - The path to check\n   */\n  isBlobUrl(path2) {\n    return path2.startsWith(\"blob:\");\n  },\n  /**\n   * Checks if the path has a protocol e.g. http://, https://, file:///, data:, blob:, C:/\n   * This will return true for windows file paths\n   * @param path - The path to check\n   */\n  hasProtocol(path2) {\n    return /^[^/:]+:/.test(this.toPosix(path2));\n  },\n  /**\n   * Returns the protocol of the path e.g. http://, https://, file:///, data:, blob:, C:/\n   * @param path - The path to get the protocol from\n   */\n  getProtocol(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    const matchFile = /^file:\\/\\/\\//.exec(path2);\n    if (matchFile) {\n      return matchFile[0];\n    }\n    const matchProtocol = /^[^/:]+:\\/{0,2}/.exec(path2);\n    if (matchProtocol) {\n      return matchProtocol[0];\n    }\n    return \"\";\n  },\n  /**\n   * Converts URL to an absolute path.\n   * When loading from a Web Worker, we must use absolute paths.\n   * If the URL is already absolute we return it as is\n   * If it's not, we convert it\n   * @param url - The URL to test\n   * @param customBaseUrl - The base URL to use\n   * @param customRootUrl - The root URL to use\n   */\n  toAbsolute(url, customBaseUrl, customRootUrl) {\n    assertPath(url);\n    if (this.isDataUrl(url) || this.isBlobUrl(url))\n      return url;\n    const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? adapter.DOMAdapter.get().getBaseUrl()));\n    const rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n    url = this.toPosix(url);\n    if (url.startsWith(\"/\")) {\n      return path.join(rootUrl, url.slice(1));\n    }\n    const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n    return absolutePath;\n  },\n  /**\n   * Normalizes the given path, resolving '..' and '.' segments\n   * @param path - The path to normalize\n   */\n  normalize(path2) {\n    assertPath(path2);\n    if (path2.length === 0)\n      return \".\";\n    if (this.isDataUrl(path2) || this.isBlobUrl(path2))\n      return path2;\n    path2 = this.toPosix(path2);\n    let protocol = \"\";\n    const isAbsolute = path2.startsWith(\"/\");\n    if (this.hasProtocol(path2)) {\n      protocol = this.rootname(path2);\n      path2 = path2.slice(protocol.length);\n    }\n    const trailingSeparator = path2.endsWith(\"/\");\n    path2 = normalizeStringPosix(path2, false);\n    if (path2.length > 0 && trailingSeparator)\n      path2 += \"/\";\n    if (isAbsolute)\n      return `/${path2}`;\n    return protocol + path2;\n  },\n  /**\n   * Determines if path is an absolute path.\n   * Absolute paths can be urls, data urls, or paths on disk\n   * @param path - The path to test\n   */\n  isAbsolute(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    if (this.hasProtocol(path2))\n      return true;\n    return path2.startsWith(\"/\");\n  },\n  /**\n   * Joins all given path segments together using the platform-specific separator as a delimiter,\n   * then normalizes the resulting path\n   * @param segments - The segments of the path to join\n   */\n  join(...segments) {\n    if (segments.length === 0) {\n      return \".\";\n    }\n    let joined;\n    for (let i = 0; i < segments.length; ++i) {\n      const arg = segments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === void 0)\n          joined = arg;\n        else {\n          const prevArg = segments[i - 1] ?? \"\";\n          if (this.joinExtensions.includes(this.extname(prevArg).toLowerCase())) {\n            joined += `/../${arg}`;\n          } else {\n            joined += `/${arg}`;\n          }\n        }\n      }\n    }\n    if (joined === void 0) {\n      return \".\";\n    }\n    return this.normalize(joined);\n  },\n  /**\n   * Returns the directory name of a path\n   * @param path - The path to parse\n   */\n  dirname(path2) {\n    assertPath(path2);\n    if (path2.length === 0)\n      return \".\";\n    path2 = this.toPosix(path2);\n    let code = path2.charCodeAt(0);\n    const hasRoot = code === 47;\n    let end = -1;\n    let matchedSlash = true;\n    const proto = this.getProtocol(path2);\n    const origpath = path2;\n    path2 = path2.slice(proto.length);\n    for (let i = path2.length - 1; i >= 1; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        matchedSlash = false;\n      }\n    }\n    if (end === -1)\n      return hasRoot ? \"/\" : this.isUrl(origpath) ? proto + path2 : proto;\n    if (hasRoot && end === 1)\n      return \"//\";\n    return proto + path2.slice(0, end);\n  },\n  /**\n   * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n   * @param path - The path to parse\n   */\n  rootname(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    let root = \"\";\n    if (path2.startsWith(\"/\"))\n      root = \"/\";\n    else {\n      root = this.getProtocol(path2);\n    }\n    if (this.isUrl(path2)) {\n      const index = path2.indexOf(\"/\", root.length);\n      if (index !== -1) {\n        root = path2.slice(0, index);\n      } else\n        root = path2;\n      if (!root.endsWith(\"/\"))\n        root += \"/\";\n    }\n    return root;\n  },\n  /**\n   * Returns the last portion of a path\n   * @param path - The path to test\n   * @param ext - Optional extension to remove\n   */\n  basename(path2, ext) {\n    assertPath(path2);\n    if (ext)\n      assertPath(ext);\n    path2 = removeUrlParams(this.toPosix(path2));\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n    if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {\n      if (ext.length === path2.length && ext === path2)\n        return \"\";\n      let extIdx = ext.length - 1;\n      let firstNonSlashEnd = -1;\n      for (i = path2.length - 1; i >= 0; --i) {\n        const code = path2.charCodeAt(i);\n        if (code === 47) {\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                end = i;\n              }\n            } else {\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end)\n        end = firstNonSlashEnd;\n      else if (end === -1)\n        end = path2.length;\n      return path2.slice(start, end);\n    }\n    for (i = path2.length - 1; i >= 0; --i) {\n      if (path2.charCodeAt(i) === 47) {\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1)\n      return \"\";\n    return path2.slice(start, end);\n  },\n  /**\n   * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n   * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n   * the first character of the basename of path, an empty string is returned.\n   * @param path - The path to parse\n   */\n  extname(path2) {\n    assertPath(path2);\n    path2 = removeUrlParams(this.toPosix(path2));\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let preDotState = 0;\n    for (let i = path2.length - 1; i >= 0; --i) {\n      const code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return \"\";\n    }\n    return path2.slice(startDot, end);\n  },\n  /**\n   * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n   * @param path - The path to parse\n   */\n  parse(path2) {\n    assertPath(path2);\n    const ret = { root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\" };\n    if (path2.length === 0)\n      return ret;\n    path2 = removeUrlParams(this.toPosix(path2));\n    let code = path2.charCodeAt(0);\n    const isAbsolute = this.isAbsolute(path2);\n    let start;\n    const protocol = \"\";\n    ret.root = this.rootname(path2);\n    if (isAbsolute || this.hasProtocol(path2)) {\n      start = 1;\n    } else {\n      start = 0;\n    }\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path2.length - 1;\n    let preDotState = 0;\n    for (; i >= start; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute)\n          ret.base = ret.name = path2.slice(1, end);\n        else\n          ret.base = ret.name = path2.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path2.slice(1, startDot);\n        ret.base = path2.slice(1, end);\n      } else {\n        ret.name = path2.slice(startPart, startDot);\n        ret.base = path2.slice(startPart, end);\n      }\n      ret.ext = path2.slice(startDot, end);\n    }\n    ret.dir = this.dirname(path2);\n    if (protocol)\n      ret.dir = protocol + ret.dir;\n    return ret;\n  },\n  sep: \"/\",\n  delimiter: \":\",\n  joinExtensions: [\".html\"]\n};\n\nexports.path = path;\n//# sourceMappingURL=path.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","assertPath","path2","TypeError","JSON","stringify","removeUrlParams","url","split","re","adapter","path","toPosix","replace","RegExp","find","isUrl","test","isDataUrl","isBlobUrl","startsWith","hasProtocol","getProtocol","matchFile","exec","matchProtocol","toAbsolute","customBaseUrl","customRootUrl","baseUrl","DOMAdapter","get","getBaseUrl","rootUrl","rootname","join","slice","isAbsolute","absolutePath","normalize","length","protocol","trailingSeparator","endsWith","res","lastSegmentLength","lastSlash","dots","code","i","charCodeAt","lastSlashIndex","lastIndexOf","segments","joined","arg","joinExtensions","includes","extname","toLowerCase","dirname","hasRoot","end","matchedSlash","proto","origpath","root","index","indexOf","basename","ext","start","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","parse","ret","dir","base","name","sep","delimiter"]
}
