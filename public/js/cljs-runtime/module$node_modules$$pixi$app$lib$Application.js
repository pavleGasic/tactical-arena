shadow$provide.module$node_modules$$pixi$app$lib$Application = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index"), display = require("module$node_modules$$pixi$display$lib$index");
  const node_modules$$pixi$app$lib$Application$classdecl$var15 = class {
    constructor(options) {
      this.stage = new display.Container();
      options = Object.assign({forceCanvas:!1}, options);
      this.renderer = core.autoDetectRenderer(options);
      node_modules$$pixi$app$lib$Application$classdecl$var15._plugins.forEach(plugin => {
        plugin.init.call(this, options);
      });
    }
    render() {
      this.renderer.render(this.stage);
    }
    get view() {
      return this.renderer?.view;
    }
    get screen() {
      return this.renderer?.screen;
    }
    destroy(removeView, stageOptions) {
      const plugins = node_modules$$pixi$app$lib$Application$classdecl$var15._plugins.slice(0);
      plugins.reverse();
      plugins.forEach(plugin => {
        plugin.destroy.call(this);
      });
      this.stage.destroy(stageOptions);
      this.stage = null;
      this.renderer.destroy(removeView);
      this.renderer = null;
    }
  };
  global = node_modules$$pixi$app$lib$Application$classdecl$var15;
  global._plugins = [];
  core.extensions.handleByList(core.ExtensionType.Application, global._plugins);
  exports.Application = global;
};

//# sourceMappingURL=module$node_modules$$pixi$app$lib$Application.js.map
