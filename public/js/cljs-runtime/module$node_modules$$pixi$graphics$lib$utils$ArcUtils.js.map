{
"version":3,
"file":"module$node_modules$$pixi$graphics$lib$utils$ArcUtils.js",
"lineCount":40,
"mappings":"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",
"sources":["node_modules/@pixi/graphics/lib/utils/ArcUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$graphics$lib$utils$ArcUtils\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), _const = require(\"../const.js\");\nclass ArcUtils {\n  /**\n   * Calculate information of the arc for {@link PIXI.Graphics.arcTo}.\n   * @private\n   * @param x1 - The x-coordinate of the first control point of the arc\n   * @param y1 - The y-coordinate of the first control point of the arc\n   * @param x2 - The x-coordinate of the second control point of the arc\n   * @param y2 - The y-coordinate of the second control point of the arc\n   * @param radius - The radius of the arc\n   * @param points - Collection of points to add to\n   * @returns - If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n   */\n  static curveTo(x1, y1, x2, y2, radius, points) {\n    const fromX = points[points.length - 2], a1 = points[points.length - 1] - y1, b1 = fromX - x1, a2 = y2 - y1, b2 = x2 - x1, mm = Math.abs(a1 * b2 - b1 * a2);\n    if (mm < 1e-8 || radius === 0)\n      return (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) && points.push(x1, y1), null;\n    const dd = a1 * a1 + b1 * b1, cc = a2 * a2 + b2 * b2, tt = a1 * a2 + b1 * b2, k1 = radius * Math.sqrt(dd) / mm, k2 = radius * Math.sqrt(cc) / mm, j1 = k1 * tt / dd, j2 = k2 * tt / cc, cx = k1 * b2 + k2 * b1, cy = k1 * a2 + k2 * a1, px = b1 * (k2 + j1), py = a1 * (k2 + j1), qx = b2 * (k1 + j2), qy = a2 * (k1 + j2), startAngle = Math.atan2(py - cy, px - cx), endAngle = Math.atan2(qy - cy, qx - cx);\n    return {\n      cx: cx + x1,\n      cy: cy + y1,\n      radius,\n      startAngle,\n      endAngle,\n      anticlockwise: b1 * a2 > b2 * a1\n    };\n  }\n  /**\n   * The arc method creates an arc/curve (used to create circles, or parts of circles).\n   * @private\n   * @param _startX - Start x location of arc\n   * @param _startY - Start y location of arc\n   * @param cx - The x-coordinate of the center of the circle\n   * @param cy - The y-coordinate of the center of the circle\n   * @param radius - The radius of the circle\n   * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n   *  of the arc's circle)\n   * @param endAngle - The ending angle, in radians\n   * @param _anticlockwise - Specifies whether the drawing should be\n   *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n   *  indicates counter-clockwise.\n   * @param points - Collection of points to add to\n   */\n  static arc(_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {\n    const sweep = endAngle - startAngle, n = _const.curves._segmentsCount(\n      Math.abs(sweep) * radius,\n      Math.ceil(Math.abs(sweep) / core.PI_2) * 40\n    ), theta = sweep / (n * 2), theta2 = theta * 2, cTheta = Math.cos(theta), sTheta = Math.sin(theta), segMinus = n - 1, remainder = segMinus % 1 / segMinus;\n    for (let i = 0; i <= segMinus; ++i) {\n      const real = i + remainder * i, angle = theta + startAngle + theta2 * real, c = Math.cos(angle), s = -Math.sin(angle);\n      points.push(\n        (cTheta * c + sTheta * s) * radius + cx,\n        (cTheta * -s + sTheta * c) * radius + cy\n      );\n    }\n  }\n}\nexports.ArcUtils = ArcUtils;\n//# sourceMappingURL=ArcUtils.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","_const","ArcUtils","curveTo","x1","y1","x2","y2","radius","points","a1","length","b1","fromX","a2","b2","mm","Math","abs","push","dd","cc","tt","k1","sqrt","k2","j1","j2","cx","cy","startAngle","atan2","endAngle","anticlockwise","arc","_startX","_startY","_anticlockwise","sweep","n","curves","_segmentsCount","ceil","PI_2","theta","theta2","cTheta","cos","sTheta","sin","segMinus","remainder","i","angle","c","s"]
}
