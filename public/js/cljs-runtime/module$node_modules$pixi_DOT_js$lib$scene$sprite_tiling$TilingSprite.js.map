{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$TilingSprite.js",
"lineCount":138,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/sprite-tiling/TilingSprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$sprite_tiling$TilingSprite\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Cache = require('../../assets/cache/Cache.js');\nvar ObservablePoint = require('../../maths/point/ObservablePoint.js');\nvar Texture = require('../../rendering/renderers/shared/texture/Texture.js');\nvar deprecation = require('../../utils/logging/deprecation.js');\nvar warn = require('../../utils/logging/warn.js');\nvar Transform = require('../../utils/misc/Transform.js');\nvar ViewContainer = require('../view/ViewContainer.js');\n\n\"use strict\";\nconst _TilingSprite = class _TilingSprite extends ViewContainer.ViewContainer {\n  constructor(...args) {\n    let options = args[0] || {};\n    if (options instanceof Texture.Texture) {\n      options = { texture: options };\n    }\n    if (args.length > 1) {\n      deprecation.deprecation(deprecation.v8_0_0, \"use new TilingSprite({ texture, width:100, height:100 }) instead\");\n      options.width = args[1];\n      options.height = args[2];\n    }\n    options = { ..._TilingSprite.defaultOptions, ...options };\n    const {\n      texture,\n      anchor,\n      tilePosition,\n      tileScale,\n      tileRotation,\n      width,\n      height,\n      applyAnchorToTexture,\n      roundPixels,\n      ...rest\n    } = options ?? {};\n    super({\n      label: \"TilingSprite\",\n      ...rest\n    });\n    this.renderPipeId = \"tilingSprite\";\n    this.batched = true;\n    this.allowChildren = false;\n    this._anchor = new ObservablePoint.ObservablePoint(\n      {\n        _onUpdate: () => {\n          this.onViewUpdate();\n        }\n      }\n    );\n    this.applyAnchorToTexture = applyAnchorToTexture;\n    this.texture = texture;\n    this._width = width ?? texture.width;\n    this._height = height ?? texture.height;\n    this._tileTransform = new Transform.Transform({\n      observer: {\n        _onUpdate: () => this.onViewUpdate()\n      }\n    });\n    if (anchor)\n      this.anchor = anchor;\n    this.tilePosition = tilePosition;\n    this.tileScale = tileScale;\n    this.tileRotation = tileRotation;\n    this.roundPixels = roundPixels ?? false;\n  }\n  /**\n   * Creates a new tiling sprite.\n   * @param source - The source to create the texture from.\n   * @param options - The options for creating the tiling sprite.\n   * @returns A new tiling sprite.\n   */\n  static from(source, options = {}) {\n    if (typeof source === \"string\") {\n      return new _TilingSprite({\n        texture: Cache.Cache.get(source),\n        ...options\n      });\n    }\n    return new _TilingSprite({\n      texture: source,\n      ...options\n    });\n  }\n  /**\n   * @see {@link scene.TilingSpriteOptions.applyAnchorToTexture}\n   * @deprecated since 8.0.0\n   */\n  get uvRespectAnchor() {\n    warn.warn(\"uvRespectAnchor is deprecated, please use applyAnchorToTexture instead\");\n    return this.applyAnchorToTexture;\n  }\n  set uvRespectAnchor(value) {\n    warn.warn(\"uvRespectAnchor is deprecated, please use applyAnchorToTexture instead\");\n    this.applyAnchorToTexture = value;\n  }\n  /**\n   * Changes frame clamping in corresponding textureMatrix\n   * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n   * @default 0.5\n   * @member {number}\n   */\n  get clampMargin() {\n    return this._texture.textureMatrix.clampMargin;\n  }\n  set clampMargin(value) {\n    this._texture.textureMatrix.clampMargin = value;\n  }\n  /**\n   * The anchor sets the origin point of the sprite. The default value is taken from the {@link Texture}\n   * and passed to the constructor.\n   *\n   * The default is `(0,0)`, this means the sprite's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n   *\n   * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n   * @example\n   * import { TilingSprite } from 'pixi.js';\n   *\n   * const sprite = new TilingSprite({texture: Texture.WHITE});\n   * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value === \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** The offset of the image that is being tiled. */\n  get tilePosition() {\n    return this._tileTransform.position;\n  }\n  set tilePosition(value) {\n    this._tileTransform.position.copyFrom(value);\n  }\n  /** The scaling of the image that is being tiled. */\n  get tileScale() {\n    return this._tileTransform.scale;\n  }\n  set tileScale(value) {\n    typeof value === \"number\" ? this._tileTransform.scale.set(value) : this._tileTransform.scale.copyFrom(value);\n  }\n  set tileRotation(value) {\n    this._tileTransform.rotation = value;\n  }\n  /** The rotation of the image that is being tiled. */\n  get tileRotation() {\n    return this._tileTransform.rotation;\n  }\n  /** The transform of the image that is being tiled. */\n  get tileTransform() {\n    return this._tileTransform;\n  }\n  set texture(value) {\n    value || (value = Texture.Texture.EMPTY);\n    const currentTexture = this._texture;\n    if (currentTexture === value)\n      return;\n    if (currentTexture && currentTexture.dynamic)\n      currentTexture.off(\"update\", this.onViewUpdate, this);\n    if (value.dynamic)\n      value.on(\"update\", this.onViewUpdate, this);\n    this._texture = value;\n    this.onViewUpdate();\n  }\n  /** The texture that the sprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  /** The width of the tiling area. */\n  set width(value) {\n    this._width = value;\n    this.onViewUpdate();\n  }\n  get width() {\n    return this._width;\n  }\n  set height(value) {\n    this._height = value;\n    this.onViewUpdate();\n  }\n  /** The height of the tiling area. */\n  get height() {\n    return this._height;\n  }\n  /**\n   * Sets the size of the TilingSprite to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    }\n    this._width = value;\n    this._height = height ?? value;\n    this.onViewUpdate();\n  }\n  /**\n   * Retrieves the size of the TilingSprite as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the TilingSprite.\n   */\n  getSize(out) {\n    out || (out = {});\n    out.width = this._width;\n    out.height = this._height;\n    return out;\n  }\n  /**\n   * @private\n   */\n  updateBounds() {\n    const bounds = this._bounds;\n    const anchor = this._anchor;\n    const width = this._width;\n    const height = this._height;\n    bounds.minX = -anchor._x * width;\n    bounds.maxX = bounds.minX + width;\n    bounds.minY = -anchor._y * height;\n    bounds.maxY = bounds.minY + height;\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    const width = this._width;\n    const height = this._height;\n    const x1 = -width * this._anchor._x;\n    let y1 = 0;\n    if (point.x >= x1 && point.x <= x1 + width) {\n      y1 = -height * this._anchor._y;\n      if (point.y >= y1 && point.y <= y1 + height)\n        return true;\n    }\n    return false;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options = false) {\n    super.destroy(options);\n    this._anchor = null;\n    this._tileTransform = null;\n    this._bounds = null;\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      this._texture.destroy(destroyTextureSource);\n    }\n    this._texture = null;\n  }\n};\n/** default options for the TilingSprite */\n_TilingSprite.defaultOptions = {\n  /** The texture to use for the sprite. */\n  texture: Texture.Texture.EMPTY,\n  /** The anchor point of the sprite */\n  anchor: { x: 0, y: 0 },\n  /** The offset of the image that is being tiled. */\n  tilePosition: { x: 0, y: 0 },\n  /** Scaling of the image that is being tiled. */\n  tileScale: { x: 1, y: 1 },\n  /** The rotation of the image that is being tiled. */\n  tileRotation: 0,\n  /**\n   * Flags whether the tiling pattern should originate from the origin instead of the top-left corner in\n   * local space.\n   *\n   * This will make the texture coordinates assigned to each vertex dependent on the value of the anchor. Without\n   * this, the top-left corner always gets the (0, 0) texture coordinate.\n   * @default false\n   */\n  applyAnchorToTexture: false\n};\nlet TilingSprite = _TilingSprite;\n\nexports.TilingSprite = TilingSprite;\n//# sourceMappingURL=TilingSprite.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Cache","ObservablePoint","Texture","deprecation","warn","Transform","ViewContainer","constructor","args","options","texture","length","v8_0_0","width","height","_TilingSprite","defaultOptions","anchor","tilePosition","tileScale","tileRotation","applyAnchorToTexture","roundPixels","rest","label","renderPipeId","batched","allowChildren","_anchor","_onUpdate","onViewUpdate","_width","_height","_tileTransform","observer","from","source","get","value","_texture","textureMatrix","clampMargin","set","copyFrom","position","scale","rotation","EMPTY","currentTexture","dynamic","off","on","setSize","getSize","out","updateBounds","bounds","_bounds","minX","_x","maxX","minY","_y","maxY","containsPoint","point","x1","x","y1","y","destroy","destroyTexture","destroyTextureSource","textureSource","TilingSprite"]
}
