{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$instructions$InstructionSet.js",
"lineCount":25,
"mappings":"AAAAA,cAAA,CAAA,0FAAA,GAA+G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGvJ,MAAIC,MAAMH,OAAA,CAAQ,oDAAR,CAAV;AAEA,cAAA;AACA,OAAMI,eAAN;AACEC,eAAW,EAAG;AAEZ,UAAKF,CAAAA,GAAL,GAAWA,GAAIA,CAAAA,GAAJ,CAAQ,gBAAR,CAAX;AAEA,UAAKG,CAAAA,YAAL,GAAoB,EAApB;AAEA,UAAKC,CAAAA,eAAL,GAAuB,CAAvB;AACA,UAAKC,CAAAA,WAAL,GAAmB,EAAnB;AAEA,UAAKC,CAAAA,MAAL,GAAc,CAAd;AATY;AAYdC,SAAK,EAAG;AACN,UAAKH,CAAAA,eAAL,GAAuB,CAAvB;AADM;AAORI,OAAG,CAACC,WAAD,CAAc;AACf,UAAKN,CAAAA,YAAL,CAAkB,IAAKC,CAAAA,eAAL,EAAlB,CAAA,GAA4CK,WAA5C;AADe;AAQjBC,OAAG,EAAG;AACJ,UAAKP,CAAAA,YAAaQ,CAAAA,MAAlB,GAA2B,IAAKP,CAAAA,eAAhC;AACAQ,aAAQC,CAAAA,KAAR,CAAc,IAAKV,CAAAA,YAAnB,EAAiC,CAAC,MAAD,EAAS,QAAT,CAAjC,CAAA;AAFI;AA5BR;AAkCAJ,SAAQE,CAAAA,cAAR,GAAyBA,cAAzB;AAxCuJ,CAAvJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/instructions/InstructionSet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$instructions$InstructionSet\"] = function(global,require,module,exports) {\n'use strict';\n\nvar uid = require('../../../../utils/data/uid.js');\n\n\"use strict\";\nclass InstructionSet {\n  constructor() {\n    /** a unique id for this instruction set used through the renderer */\n    this.uid = uid.uid(\"instructionSet\");\n    /** the array of instructions */\n    this.instructions = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    this.instructionSize = 0;\n    this.renderables = [];\n    /** used by the garbage collector to track when the instruction set was last used */\n    this.gcTick = 0;\n  }\n  /** reset the instruction set so it can be reused set size back to 0 */\n  reset() {\n    this.instructionSize = 0;\n  }\n  /**\n   * Add an instruction to the set\n   * @param instruction - add an instruction to the set\n   */\n  add(instruction) {\n    this.instructions[this.instructionSize++] = instruction;\n  }\n  /**\n   * Log the instructions to the console (for debugging)\n   * @internal\n   * @ignore\n   */\n  log() {\n    this.instructions.length = this.instructionSize;\n    console.table(this.instructions, [\"type\", \"action\"]);\n  }\n}\n\nexports.InstructionSet = InstructionSet;\n//# sourceMappingURL=InstructionSet.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","uid","InstructionSet","constructor","instructions","instructionSize","renderables","gcTick","reset","add","instruction","log","length","console","table"]
}
