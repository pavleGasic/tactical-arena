shadow$provide.module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$VividLightBlend = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  require = require("module$node_modules$pixi_DOT_js$lib$filters$blend_modes$BlendModeFilter");
  "use strict";
  class VividLightBlend extends require.BlendModeFilter {
    constructor() {
      super({gl:{functions:"\n                float colorBurn(float base, float blend)\n                {\n                    return max((1.0-((1.0-base)/blend)),0.0);\n                }\n\n                float colorDodge(float base, float blend)\n                {\n                    return min(1.0, base / (1.0-blend));\n                }\n\n                float vividLight(float base, float blend)\n                {\n                    return (blend \x3c 0.5) ? colorBurn(base,(2.0*blend)) : colorDodge(base,(2.0*(blend-0.5)));\n                }\n\n                vec3 blendVividLight(vec3 base, vec3 blend, float opacity)\n                {\n                    vec3 blended \x3d vec3(\n                        vividLight(base.r, blend.r),\n                        vividLight(base.g, blend.g),\n                        vividLight(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            ", 
      main:"\n                finalColor \x3d vec4(blendVividLight(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n            "}, gpu:{functions:"\n                fn colorBurn(base:f32, blend:f32) -\x3e f32\n                {\n                    return max((1.0-((1.0-base)/blend)),0.0);\n                }\n\n                fn colorDodge(base: f32, blend: f32) -\x3e f32\n                {\n                    return min(1.0, base / (1.0-blend));\n                }\n\n                fn vividLight(base: f32, blend: f32) -\x3e f32\n                {\n                    return select(colorDodge(base,(2.0*(blend-0.5))), colorBurn(base,(2.0*blend)), blend\x3c0.5);\n                }\n\n                fn blendVividLight(base: vec3\x3cf32\x3e, blend: vec3\x3cf32\x3e, opacity: f32) -\x3e vec3\x3cf32\x3e\n                {\n                    let blended: vec3\x3cf32\x3e \x3d vec3\x3cf32\x3e(\n                        vividLight(base.r, blend.r),\n                        vividLight(base.g, blend.g),\n                        vividLight(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                ", 
      main:"\n                out \x3d vec4\x3cf32\x3e(blendVividLight(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n                "}});
    }
  }
  VividLightBlend.extension = {name:"vivid-light", type:global.ExtensionType.BlendMode};
  exports.VividLightBlend = VividLightBlend;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$VividLightBlend.js.map
