shadow$provide.module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$LinearDodgeBlend = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  require = require("module$node_modules$pixi_DOT_js$lib$filters$blend_modes$BlendModeFilter");
  "use strict";
  class LinearDodgeBlend extends require.BlendModeFilter {
    constructor() {
      super({gl:{functions:"\n                float linearDodge(float base, float blend) {\n                    return min(1.0, base + blend);\n                }\n\n                vec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n                    vec3 blended \x3d vec3(\n                        linearDodge(base.r, blend.r),\n                        linearDodge(base.g, blend.g),\n                        linearDodge(base.b, blend.b)\n                    );\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                ", 
      main:"\n                finalColor \x3d vec4(blendLinearDodge(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n                "}, gpu:{functions:"\n                fn linearDodge(base: f32, blend: f32) -\x3e f32\n                {\n                    return min(1, base + blend);\n                }\n\n                fn blendLinearDodge(base:vec3\x3cf32\x3e, blend:vec3\x3cf32\x3e,  opacity:f32) -\x3e vec3\x3cf32\x3e\n                {\n                    let blended \x3d vec3\x3cf32\x3e(\n                        linearDodge(base.r, blend.r),\n                        linearDodge(base.g, blend.g),\n                        linearDodge(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            ", 
      main:"\n                out \x3d vec4\x3cf32\x3e(blendLinearDodge(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n            "}});
    }
  }
  LinearDodgeBlend.extension = {name:"linear-dodge", type:global.ExtensionType.BlendMode};
  exports.LinearDodgeBlend = LinearDodgeBlend;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$LinearDodgeBlend.js.map
