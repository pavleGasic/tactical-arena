{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$maths$shapes$Rectangle.js",
"lineCount":157,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/maths/shapes/Rectangle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$maths$shapes$Rectangle\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Point = require('../point/Point.js');\n\n\"use strict\";\nconst tempPoints = [new Point.Point(), new Point.Point(), new Point.Point(), new Point.Point()];\nclass Rectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rectangle\n   * @param width - The overall width of the rectangle\n   * @param height - The overall height of the rectangle\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'rectangle'\n     */\n    this.type = \"rectangle\";\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n  }\n  /** Returns the left edge of the rectangle. */\n  get left() {\n    return this.x;\n  }\n  /** Returns the right edge of the rectangle. */\n  get right() {\n    return this.x + this.width;\n  }\n  /** Returns the top edge of the rectangle. */\n  get top() {\n    return this.y;\n  }\n  /** Returns the bottom edge of the rectangle. */\n  get bottom() {\n    return this.y + this.height;\n  }\n  /** Determines whether the Rectangle is empty. */\n  isEmpty() {\n    return this.left === this.right || this.top === this.bottom;\n  }\n  /** A constant empty rectangle. This is a new object every time the property is accessed */\n  static get EMPTY() {\n    return new Rectangle(0, 0, 0, 0);\n  }\n  /**\n   * Creates a clone of this Rectangle\n   * @returns a copy of the rectangle\n   */\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n  /**\n   * Converts a Bounds object to a Rectangle object.\n   * @param bounds - The bounds to copy and convert to a rectangle.\n   * @returns Returns itself.\n   */\n  copyFromBounds(bounds) {\n    this.x = bounds.minX;\n    this.y = bounds.minY;\n    this.width = bounds.maxX - bounds.minX;\n    this.height = bounds.maxY - bounds.minY;\n    return this;\n  }\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(rectangle) {\n    rectangle.copyFrom(this);\n    return rectangle;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Rectangle\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param alignment - The alignment of the stroke, 0.5 by default\n   * @returns Whether the x/y coordinates are within this rectangle\n   */\n  strokeContains(x, y, strokeWidth, alignment = 0.5) {\n    const { width, height } = this;\n    if (width <= 0 || height <= 0)\n      return false;\n    const _x = this.x;\n    const _y = this.y;\n    const strokeWidthOuter = strokeWidth * (1 - alignment);\n    const strokeWidthInner = strokeWidth - strokeWidthOuter;\n    const outerLeft = _x - strokeWidthOuter;\n    const outerRight = _x + width + strokeWidthOuter;\n    const outerTop = _y - strokeWidthOuter;\n    const outerBottom = _y + height + strokeWidthOuter;\n    const innerLeft = _x + strokeWidthInner;\n    const innerRight = _x + width - strokeWidthInner;\n    const innerTop = _y + strokeWidthInner;\n    const innerBottom = _y + height - strokeWidthInner;\n    return x >= outerLeft && x <= outerRight && y >= outerTop && y <= outerBottom && !(x > innerLeft && x < innerRight && y > innerTop && y < innerBottom);\n  }\n  /**\n   * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n   * Returns true only if the area of the intersection is >0, this means that Rectangles\n   * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n   * (width or height equal to zero) can't intersect any other rectangle.\n   * @param {Rectangle} other - The Rectangle to intersect with `this`.\n   * @param {Matrix} transform - The transformation matrix of `other`.\n   * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n   */\n  intersects(other, transform) {\n    if (!transform) {\n      const x02 = this.x < other.x ? other.x : this.x;\n      const x12 = this.right > other.right ? other.right : this.right;\n      if (x12 <= x02) {\n        return false;\n      }\n      const y02 = this.y < other.y ? other.y : this.y;\n      const y12 = this.bottom > other.bottom ? other.bottom : this.bottom;\n      return y12 > y02;\n    }\n    const x0 = this.left;\n    const x1 = this.right;\n    const y0 = this.top;\n    const y1 = this.bottom;\n    if (x1 <= x0 || y1 <= y0) {\n      return false;\n    }\n    const lt = tempPoints[0].set(other.left, other.top);\n    const lb = tempPoints[1].set(other.left, other.bottom);\n    const rt = tempPoints[2].set(other.right, other.top);\n    const rb = tempPoints[3].set(other.right, other.bottom);\n    if (rt.x <= lt.x || lb.y <= lt.y) {\n      return false;\n    }\n    const s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n    if (s === 0) {\n      return false;\n    }\n    transform.apply(lt, lt);\n    transform.apply(lb, lb);\n    transform.apply(rt, rt);\n    transform.apply(rb, rb);\n    if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n      return false;\n    }\n    const nx = s * (lb.y - lt.y);\n    const ny = s * (lt.x - lb.x);\n    const n00 = nx * x0 + ny * y0;\n    const n10 = nx * x1 + ny * y0;\n    const n01 = nx * x0 + ny * y1;\n    const n11 = nx * x1 + ny * y1;\n    if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n      return false;\n    }\n    const mx = s * (lt.y - rt.y);\n    const my = s * (rt.x - lt.x);\n    const m00 = mx * x0 + my * y0;\n    const m10 = mx * x1 + my * y0;\n    const m01 = mx * x0 + my * y1;\n    const m11 = mx * x1 + my * y1;\n    if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Pads the rectangle making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   * @returns Returns itself.\n   */\n  pad(paddingX = 0, paddingY = paddingX) {\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n    return this;\n  }\n  /**\n   * Fits this rectangle around the passed one.\n   * @param rectangle - The rectangle to fit.\n   * @returns Returns itself.\n   */\n  fit(rectangle) {\n    const x1 = Math.max(this.x, rectangle.x);\n    const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.max(this.y, rectangle.y);\n    const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n    return this;\n  }\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   * @param resolution - resolution\n   * @param eps - precision\n   * @returns Returns itself.\n   */\n  ceil(resolution = 1, eps = 1e-3) {\n    const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n    return this;\n  }\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   * @param rectangle - The rectangle to include.\n   * @returns Returns itself.\n   */\n  enlarge(rectangle) {\n    const x1 = Math.min(this.x, rectangle.x);\n    const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.min(this.y, rectangle.y);\n    const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n    return this;\n  }\n  /**\n   * Returns the framing rectangle of the rectangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle());\n    out.copyFrom(this);\n    return out;\n  }\n  /**\n   * Checks if this rectangle fully contains another rectangle.\n   *\n   * A rectangle contains another rectangle if all four corners of the other rectangle\n   * lie within the bounds of this rectangle.\n   *\n   * ```ts\n   * const container = new Rectangle(0, 0, 100, 100);\n   * const inside = new Rectangle(25, 25, 50, 50);\n   * const partial = new Rectangle(75, 75, 50, 50);\n   *\n   * container.containsRect(inside); // Returns true\n   * container.containsRect(partial); // Returns false - partial overlap\n   * ```\n   *\n   * Note: If either rectangle has a width or height of 0, this method returns false\n   * since a zero-area rectangle cannot meaningfully contain another rectangle.\n   * @param other - The rectangle to check if it is contained within this one\n   * @returns True if the other rectangle is fully contained within this one\n   */\n  containsRect(other) {\n    if (this.width <= 0 || this.height <= 0)\n      return false;\n    const x1 = other.x;\n    const y1 = other.y;\n    const x2 = other.x + other.width;\n    const y2 = other.y + other.height;\n    return x1 >= this.x && x1 < this.x + this.width && y1 >= this.y && y1 < this.y + this.height && x2 >= this.x && x2 < this.x + this.width && y2 >= this.y && y2 < this.y + this.height;\n  }\n  toString() {\n    return `[pixi.js/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n  }\n}\n\nexports.Rectangle = Rectangle;\n//# sourceMappingURL=Rectangle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Point","tempPoints","Rectangle","constructor","x","y","width","height","type","Number","isEmpty","left","right","top","bottom","clone","copyFromBounds","bounds","minX","minY","maxX","maxY","copyFrom","rectangle","copyTo","contains","strokeContains","strokeWidth","alignment","_x","_y","strokeWidthOuter","strokeWidthInner","intersects","other","transform","x12","x02","y12","y02","x0","x1","y0","y1","lt","set","lb","rt","rb","s","Math","sign","a","d","b","c","apply","max","min","nx","ny","n00","n10","n01","n11","mx","my","m00","m10","m01","m11","pad","paddingX","paddingY","fit","x2","y2","ceil","resolution","eps","floor","enlarge","getBounds","out","containsRect","toString"]
}
