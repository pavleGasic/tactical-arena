shadow$provide.module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$ExclusionBlend = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  require = require("module$node_modules$pixi_DOT_js$lib$filters$blend_modes$BlendModeFilter");
  "use strict";
  class ExclusionBlend extends require.BlendModeFilter {
    constructor() {
      super({gl:{functions:"\n                vec3 exclusion(vec3 base, vec3 blend)\n                {\n                    return base + blend - 2.0 * base * blend;\n                }\n\n                vec3 blendExclusion(vec3 base, vec3 blend, float opacity)\n                {\n                    return (exclusion(base, blend) * opacity + base * (1.0 - opacity));\n                }\n                ", main:"\n                finalColor \x3d vec4(blendExclusion(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n                "}, 
      gpu:{functions:"\n                fn exclusion(base: vec3\x3cf32\x3e, blend: vec3\x3cf32\x3e) -\x3e vec3\x3cf32\x3e\n                {\n                    return base+blend-2.0*base*blend;\n                }\n\n                fn blendExclusion(base: vec3\x3cf32\x3e, blend: vec3\x3cf32\x3e, opacity: f32) -\x3e vec3\x3cf32\x3e\n                {\n                    return (exclusion(base, blend) * opacity + base * (1.0 - opacity));\n                }\n            ", main:"\n                out \x3d vec4\x3cf32\x3e(blendExclusion(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n            "}});
    }
  }
  ExclusionBlend.extension = {name:"exclusion", type:global.ExtensionType.BlendMode};
  exports.ExclusionBlend = ExclusionBlend;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$ExclusionBlend.js.map
