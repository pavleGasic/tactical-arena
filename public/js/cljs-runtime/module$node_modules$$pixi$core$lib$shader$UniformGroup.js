shadow$provide.module$node_modules$$pixi$core$lib$shader$UniformGroup = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index"), Buffer = require("module$node_modules$$pixi$core$lib$geometry$Buffer");
  let UID = 0;
  class UniformGroup {
    constructor(uniforms, isStatic, isUbo) {
      this.group = !0;
      this.syncUniforms = {};
      this.dirtyId = 0;
      this.id = UID++;
      this.static = !!isStatic;
      this.ubo = !!isUbo;
      uniforms instanceof Buffer.Buffer ? (this.buffer = uniforms, this.buffer.type = constants.BUFFER_TYPE.UNIFORM_BUFFER, this.autoManage = !1, this.ubo = !0) : (this.uniforms = uniforms, this.ubo && (this.buffer = new Buffer.Buffer(new Float32Array(1)), this.buffer.type = constants.BUFFER_TYPE.UNIFORM_BUFFER, this.autoManage = !0));
    }
    update() {
      this.dirtyId++;
      !this.autoManage && this.buffer && this.buffer.update();
    }
    add(name, uniforms, _static) {
      if (this.ubo) {
        throw Error("[UniformGroup] uniform groups in ubo mode cannot be modified, or have uniform groups nested in them");
      }
      this.uniforms[name] = new UniformGroup(uniforms, _static);
    }
    static from(uniforms, _static, _ubo) {
      return new UniformGroup(uniforms, _static, _ubo);
    }
    static uboFrom(uniforms, _static) {
      return new UniformGroup(uniforms, _static ?? !0, !0);
    }
  }
  exports.UniformGroup = UniformGroup;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$shader$UniformGroup.js.map
