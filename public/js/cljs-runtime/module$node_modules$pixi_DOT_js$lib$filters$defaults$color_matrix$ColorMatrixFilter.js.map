{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$filters$defaults$color_matrix$ColorMatrixFilter.js",
"lineCount":147,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/filters/defaults/color-matrix/ColorMatrixFilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$filters$defaults$color_matrix$ColorMatrixFilter\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Color = require('../../../color/Color.js');\nvar GlProgram = require('../../../rendering/renderers/gl/shader/GlProgram.js');\nvar GpuProgram = require('../../../rendering/renderers/gpu/shader/GpuProgram.js');\nvar UniformGroup = require('../../../rendering/renderers/shared/shader/UniformGroup.js');\nvar Filter = require('../../Filter.js');\nvar defaultFilter = require('../defaultFilter.vert.js');\nvar colorMatrixFilter$1 = require('./colorMatrixFilter.frag.js');\nvar colorMatrixFilter = require('./colorMatrixFilter.wgsl.js');\n\n\"use strict\";\nclass ColorMatrixFilter extends Filter.Filter {\n  constructor(options = {}) {\n    const colorMatrixUniforms = new UniformGroup.UniformGroup({\n      uColorMatrix: {\n        value: [\n          1,\n          0,\n          0,\n          0,\n          0,\n          0,\n          1,\n          0,\n          0,\n          0,\n          0,\n          0,\n          1,\n          0,\n          0,\n          0,\n          0,\n          0,\n          1,\n          0\n        ],\n        type: \"f32\",\n        size: 20\n      },\n      uAlpha: {\n        value: 1,\n        type: \"f32\"\n      }\n    });\n    const gpuProgram = GpuProgram.GpuProgram.from({\n      vertex: {\n        source: colorMatrixFilter.default,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source: colorMatrixFilter.default,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.GlProgram.from({\n      vertex: defaultFilter.default,\n      fragment: colorMatrixFilter$1.default,\n      name: \"color-matrix-filter\"\n    });\n    super({\n      ...options,\n      gpuProgram,\n      glProgram,\n      resources: {\n        colorMatrixUniforms\n      }\n    });\n    this.alpha = 1;\n  }\n  /**\n   * Transforms current matrix and set the new one\n   * @param {number[]} matrix - 5x4 matrix\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  _loadMatrix(matrix, multiply = false) {\n    let newMatrix = matrix;\n    if (multiply) {\n      this._multiply(newMatrix, this.matrix, matrix);\n      newMatrix = this._colorMatrix(newMatrix);\n    }\n    this.resources.colorMatrixUniforms.uniforms.uColorMatrix = newMatrix;\n    this.resources.colorMatrixUniforms.update();\n  }\n  /**\n   * Multiplies two mat5's\n   * @private\n   * @param out - 5x4 matrix the receiving matrix\n   * @param a - 5x4 matrix the first operand\n   * @param b - 5x4 matrix the second operand\n   * @returns {number[]} 5x4 matrix\n   */\n  _multiply(out, a, b) {\n    out[0] = a[0] * b[0] + a[1] * b[5] + a[2] * b[10] + a[3] * b[15];\n    out[1] = a[0] * b[1] + a[1] * b[6] + a[2] * b[11] + a[3] * b[16];\n    out[2] = a[0] * b[2] + a[1] * b[7] + a[2] * b[12] + a[3] * b[17];\n    out[3] = a[0] * b[3] + a[1] * b[8] + a[2] * b[13] + a[3] * b[18];\n    out[4] = a[0] * b[4] + a[1] * b[9] + a[2] * b[14] + a[3] * b[19] + a[4];\n    out[5] = a[5] * b[0] + a[6] * b[5] + a[7] * b[10] + a[8] * b[15];\n    out[6] = a[5] * b[1] + a[6] * b[6] + a[7] * b[11] + a[8] * b[16];\n    out[7] = a[5] * b[2] + a[6] * b[7] + a[7] * b[12] + a[8] * b[17];\n    out[8] = a[5] * b[3] + a[6] * b[8] + a[7] * b[13] + a[8] * b[18];\n    out[9] = a[5] * b[4] + a[6] * b[9] + a[7] * b[14] + a[8] * b[19] + a[9];\n    out[10] = a[10] * b[0] + a[11] * b[5] + a[12] * b[10] + a[13] * b[15];\n    out[11] = a[10] * b[1] + a[11] * b[6] + a[12] * b[11] + a[13] * b[16];\n    out[12] = a[10] * b[2] + a[11] * b[7] + a[12] * b[12] + a[13] * b[17];\n    out[13] = a[10] * b[3] + a[11] * b[8] + a[12] * b[13] + a[13] * b[18];\n    out[14] = a[10] * b[4] + a[11] * b[9] + a[12] * b[14] + a[13] * b[19] + a[14];\n    out[15] = a[15] * b[0] + a[16] * b[5] + a[17] * b[10] + a[18] * b[15];\n    out[16] = a[15] * b[1] + a[16] * b[6] + a[17] * b[11] + a[18] * b[16];\n    out[17] = a[15] * b[2] + a[16] * b[7] + a[17] * b[12] + a[18] * b[17];\n    out[18] = a[15] * b[3] + a[16] * b[8] + a[17] * b[13] + a[18] * b[18];\n    out[19] = a[15] * b[4] + a[16] * b[9] + a[17] * b[14] + a[18] * b[19] + a[19];\n    return out;\n  }\n  /**\n   * Create a Float32 Array and normalize the offset component to 0-1\n   * @param {number[]} matrix - 5x4 matrix\n   * @returns {number[]} 5x4 matrix with all values between 0-1\n   */\n  _colorMatrix(matrix) {\n    const m = new Float32Array(matrix);\n    m[4] /= 255;\n    m[9] /= 255;\n    m[14] /= 255;\n    m[19] /= 255;\n    return m;\n  }\n  /**\n   * Adjusts brightness\n   * @param b - value of the brightness (0-1, where 0 is black)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  brightness(b, multiply) {\n    const matrix = [\n      b,\n      0,\n      0,\n      0,\n      0,\n      0,\n      b,\n      0,\n      0,\n      0,\n      0,\n      0,\n      b,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Sets each channel on the diagonal of the color matrix.\n   * This can be used to achieve a tinting effect on Containers similar to the tint field of some\n   * display objects like Sprite, Text, Graphics, and Mesh.\n   * @param color - Color of the tint. This is a hex value.\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  tint(color, multiply) {\n    const [r, g, b] = Color.Color.shared.setValue(color).toArray();\n    const matrix = [\n      r,\n      0,\n      0,\n      0,\n      0,\n      0,\n      g,\n      0,\n      0,\n      0,\n      0,\n      0,\n      b,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the matrices in grey scales\n   * @param scale - value of the grey (0-1, where 0 is black)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  greyscale(scale, multiply) {\n    const matrix = [\n      scale,\n      scale,\n      scale,\n      0,\n      0,\n      scale,\n      scale,\n      scale,\n      0,\n      0,\n      scale,\n      scale,\n      scale,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * for our american friends!\n   * @param scale\n   * @param multiply\n   */\n  grayscale(scale, multiply) {\n    this.greyscale(scale, multiply);\n  }\n  /**\n   * Set the black and white matrice.\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  blackAndWhite(multiply) {\n    const matrix = [\n      0.3,\n      0.6,\n      0.1,\n      0,\n      0,\n      0.3,\n      0.6,\n      0.1,\n      0,\n      0,\n      0.3,\n      0.6,\n      0.1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the hue property of the color\n   * @param rotation - in degrees\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  hue(rotation, multiply) {\n    rotation = (rotation || 0) / 180 * Math.PI;\n    const cosR = Math.cos(rotation);\n    const sinR = Math.sin(rotation);\n    const sqrt = Math.sqrt;\n    const w = 1 / 3;\n    const sqrW = sqrt(w);\n    const a00 = cosR + (1 - cosR) * w;\n    const a01 = w * (1 - cosR) - sqrW * sinR;\n    const a02 = w * (1 - cosR) + sqrW * sinR;\n    const a10 = w * (1 - cosR) + sqrW * sinR;\n    const a11 = cosR + w * (1 - cosR);\n    const a12 = w * (1 - cosR) - sqrW * sinR;\n    const a20 = w * (1 - cosR) - sqrW * sinR;\n    const a21 = w * (1 - cosR) + sqrW * sinR;\n    const a22 = cosR + w * (1 - cosR);\n    const matrix = [\n      a00,\n      a01,\n      a02,\n      0,\n      0,\n      a10,\n      a11,\n      a12,\n      0,\n      0,\n      a20,\n      a21,\n      a22,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the contrast matrix, increase the separation between dark and bright\n   * Increase contrast : shadows darker and highlights brighter\n   * Decrease contrast : bring the shadows up and the highlights down\n   * @param amount - value of the contrast (0-1)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  contrast(amount, multiply) {\n    const v = (amount || 0) + 1;\n    const o = -0.5 * (v - 1);\n    const matrix = [\n      v,\n      0,\n      0,\n      0,\n      o,\n      0,\n      v,\n      0,\n      0,\n      o,\n      0,\n      0,\n      v,\n      0,\n      o,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the saturation matrix, increase the separation between colors\n   * Increase saturation : increase contrast, brightness, and sharpness\n   * @param amount - The saturation amount (0-1)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  saturate(amount = 0, multiply) {\n    const x = amount * 2 / 3 + 1;\n    const y = (x - 1) * -0.5;\n    const matrix = [\n      x,\n      y,\n      y,\n      0,\n      0,\n      y,\n      x,\n      y,\n      0,\n      0,\n      y,\n      y,\n      x,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /** Desaturate image (remove color) Call the saturate function */\n  desaturate() {\n    this.saturate(-1);\n  }\n  /**\n   * Negative image (inverse of classic rgb matrix)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  negative(multiply) {\n    const matrix = [\n      -1,\n      0,\n      0,\n      1,\n      0,\n      0,\n      -1,\n      0,\n      1,\n      0,\n      0,\n      0,\n      -1,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Sepia image\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  sepia(multiply) {\n    const matrix = [\n      0.393,\n      0.7689999,\n      0.18899999,\n      0,\n      0,\n      0.349,\n      0.6859999,\n      0.16799999,\n      0,\n      0,\n      0.272,\n      0.5339999,\n      0.13099999,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  technicolor(multiply) {\n    const matrix = [\n      1.9125277891456083,\n      -0.8545344976951645,\n      -0.09155508482755585,\n      0,\n      11.793603434377337,\n      -0.3087833385928097,\n      1.7658908555458428,\n      -0.10601743074722245,\n      0,\n      -70.35205161461398,\n      -0.231103377548616,\n      -0.7501899197440212,\n      1.847597816108189,\n      0,\n      30.950940869491138,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Polaroid filter\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  polaroid(multiply) {\n    const matrix = [\n      1.438,\n      -0.062,\n      -0.062,\n      0,\n      0,\n      -0.122,\n      1.378,\n      -0.122,\n      0,\n      0,\n      -0.016,\n      -0.016,\n      1.483,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Filter who transforms : Red -> Blue and Blue -> Red\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  toBGR(multiply) {\n    const matrix = [\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  kodachrome(multiply) {\n    const matrix = [\n      1.1285582396593525,\n      -0.3967382283601348,\n      -0.03992559172921793,\n      0,\n      63.72958762196502,\n      -0.16404339962244616,\n      1.0835251566291304,\n      -0.05498805115633132,\n      0,\n      24.732407896706203,\n      -0.16786010706155763,\n      -0.5603416277695248,\n      1.6014850761964943,\n      0,\n      35.62982807460946,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Brown delicious browni filter (thanks Dominic Szablewski)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  browni(multiply) {\n    const matrix = [\n      0.5997023498159715,\n      0.34553243048391263,\n      -0.2708298674538042,\n      0,\n      47.43192855600873,\n      -0.037703249837783157,\n      0.8609577587992641,\n      0.15059552388459913,\n      0,\n      -36.96841498319127,\n      0.24113635128153335,\n      -0.07441037908422492,\n      0.44972182064877153,\n      0,\n      -7.562075277591283,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Vintage filter (thanks Dominic Szablewski)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  vintage(multiply) {\n    const matrix = [\n      0.6279345635605994,\n      0.3202183420819367,\n      -0.03965408211312453,\n      0,\n      9.651285835294123,\n      0.02578397704808868,\n      0.6441188644374771,\n      0.03259127616149294,\n      0,\n      7.462829176470591,\n      0.0466055556782719,\n      -0.0851232987247891,\n      0.5241648018700465,\n      0,\n      5.159190588235296,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * We don't know exactly what it does, kind of gradient map, but funny to play with!\n   * @param desaturation - Tone values.\n   * @param toned - Tone values.\n   * @param lightColor - Tone values, example: `0xFFE580`\n   * @param darkColor - Tone values, example: `0xFFE580`\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  colorTone(desaturation, toned, lightColor, darkColor, multiply) {\n    desaturation || (desaturation = 0.2);\n    toned || (toned = 0.15);\n    lightColor || (lightColor = 16770432);\n    darkColor || (darkColor = 3375104);\n    const temp = Color.Color.shared;\n    const [lR, lG, lB] = temp.setValue(lightColor).toArray();\n    const [dR, dG, dB] = temp.setValue(darkColor).toArray();\n    const matrix = [\n      0.3,\n      0.59,\n      0.11,\n      0,\n      0,\n      lR,\n      lG,\n      lB,\n      desaturation,\n      0,\n      dR,\n      dG,\n      dB,\n      toned,\n      0,\n      lR - dR,\n      lG - dG,\n      lB - dB,\n      0,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Night effect\n   * @param intensity - The intensity of the night effect.\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  night(intensity, multiply) {\n    intensity || (intensity = 0.1);\n    const matrix = [\n      intensity * -2,\n      -intensity,\n      0,\n      0,\n      0,\n      -intensity,\n      0,\n      intensity,\n      0,\n      0,\n      0,\n      intensity,\n      intensity * 2,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Predator effect\n   *\n   * Erase the current matrix by setting a new independent one\n   * @param amount - how much the predator feels his future victim\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  predator(amount, multiply) {\n    const matrix = [\n      // row 1\n      11.224130630493164 * amount,\n      -4.794486999511719 * amount,\n      -2.8746118545532227 * amount,\n      0 * amount,\n      0.40342438220977783 * amount,\n      // row 2\n      -3.6330697536468506 * amount,\n      9.193157196044922 * amount,\n      -2.951810836791992 * amount,\n      0 * amount,\n      -1.316135048866272 * amount,\n      // row 3\n      -3.2184197902679443 * amount,\n      -4.2375030517578125 * amount,\n      7.476448059082031 * amount,\n      0 * amount,\n      0.8044459223747253 * amount,\n      // row 4\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * LSD effect\n   *\n   * Multiply the current matrix\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  lsd(multiply) {\n    const matrix = [\n      2,\n      -0.4,\n      0.5,\n      0,\n      0,\n      -0.5,\n      2,\n      -0.4,\n      0,\n      0,\n      -0.4,\n      -0.5,\n      3,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /** Erase the current matrix by setting the default one. */\n  reset() {\n    const matrix = [\n      1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, false);\n  }\n  /**\n   * The matrix of the color matrix filter\n   * @member {number[]}\n   * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n   */\n  get matrix() {\n    return this.resources.colorMatrixUniforms.uniforms.uColorMatrix;\n  }\n  set matrix(value) {\n    this.resources.colorMatrixUniforms.uniforms.uColorMatrix = value;\n  }\n  /**\n   * The opacity value to use when mixing the original and resultant colors.\n   *\n   * When the value is 0, the original color is used without modification.\n   * When the value is 1, the result color is used.\n   * When in the range (0, 1) the color is interpolated between the original and result by this amount.\n   * @default 1\n   */\n  get alpha() {\n    return this.resources.colorMatrixUniforms.uniforms.uAlpha;\n  }\n  set alpha(value) {\n    this.resources.colorMatrixUniforms.uniforms.uAlpha = value;\n  }\n}\n\nexports.ColorMatrixFilter = ColorMatrixFilter;\n//# sourceMappingURL=ColorMatrixFilter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","GlProgram","GpuProgram","UniformGroup","Filter","defaultFilter","colorMatrixFilter$1","colorMatrixFilter","ColorMatrixFilter","constructor","options","colorMatrixUniforms","uColorMatrix","value","type","size","uAlpha","gpuProgram","from","vertex","source","default","entryPoint","fragment","glProgram","name","resources","alpha","_loadMatrix","matrix","multiply","newMatrix","_multiply","_colorMatrix","uniforms","update","out","a","b","m","Float32Array","brightness","tint","color","r","g","shared","setValue","toArray","greyscale","scale","grayscale","blackAndWhite","hue","rotation","Math","PI","cosR","cos","sinR","sin","sqrt","w","sqrW","contrast","amount","v","o","saturate","x","y","desaturate","negative","sepia","technicolor","polaroid","toBGR","kodachrome","browni","vintage","colorTone","desaturation","toned","lightColor","darkColor","temp","lR","lG","lB","dR","dG","dB","night","intensity","predator","lsd","reset"]
}
