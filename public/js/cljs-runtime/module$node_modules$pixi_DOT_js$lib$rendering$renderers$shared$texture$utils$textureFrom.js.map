{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$textureFrom.js",
"lineCount":44,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/utils/textureFrom.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$textureFrom\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Cache = require('../../../../../assets/cache/Cache.js');\nvar Extensions = require('../../../../../extensions/Extensions.js');\nvar TextureSource = require('../sources/TextureSource.js');\nvar Texture = require('../Texture.js');\n\n\"use strict\";\nconst sources = [];\nExtensions.extensions.handleByList(Extensions.ExtensionType.TextureSource, sources);\nfunction autoDetectSource(options = {}) {\n  return textureSourceFrom(options);\n}\nfunction textureSourceFrom(options = {}) {\n  const hasResource = options && options.resource;\n  const res = hasResource ? options.resource : options;\n  const opts = hasResource ? options : { resource: options };\n  for (let i = 0; i < sources.length; i++) {\n    const Source = sources[i];\n    if (Source.test(res)) {\n      return new Source(opts);\n    }\n  }\n  throw new Error(`Could not find a source type for resource: ${opts.resource}`);\n}\nfunction resourceToTexture(options = {}, skipCache = false) {\n  const hasResource = options && options.resource;\n  const resource = hasResource ? options.resource : options;\n  const opts = hasResource ? options : { resource: options };\n  if (!skipCache && Cache.Cache.has(resource)) {\n    return Cache.Cache.get(resource);\n  }\n  const texture = new Texture.Texture({ source: textureSourceFrom(opts) });\n  texture.on(\"destroy\", () => {\n    if (Cache.Cache.has(resource)) {\n      Cache.Cache.remove(resource);\n    }\n  });\n  if (!skipCache) {\n    Cache.Cache.set(resource, texture);\n  }\n  return texture;\n}\nfunction textureFrom(id, skipCache = false) {\n  if (typeof id === \"string\") {\n    return Cache.Cache.get(id);\n  } else if (id instanceof TextureSource.TextureSource) {\n    return new Texture.Texture({ source: id });\n  }\n  return resourceToTexture(id, skipCache);\n}\nTexture.Texture.from = textureFrom;\nTextureSource.TextureSource.from = textureSourceFrom;\n\nexports.autoDetectSource = autoDetectSource;\nexports.resourceToTexture = resourceToTexture;\nexports.textureFrom = textureFrom;\n//# sourceMappingURL=textureFrom.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","textureSourceFrom","options","hasResource","resource","res","opts","i","sources","length","Source","test","Error","resourceToTexture","skipCache","Cache","has","get","texture","Texture","source","on","remove","set","textureFrom","id","TextureSource","Extensions","extensions","handleByList","ExtensionType","from","autoDetectSource"]
}
