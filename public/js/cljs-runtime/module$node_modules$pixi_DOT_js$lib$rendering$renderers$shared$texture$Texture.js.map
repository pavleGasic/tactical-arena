{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$Texture.js",
"lineCount":83,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/Texture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$Texture\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar groupD8 = require('../../../../maths/matrix/groupD8.js');\nvar Rectangle = require('../../../../maths/shapes/Rectangle.js');\nvar uid = require('../../../../utils/data/uid.js');\nvar deprecation = require('../../../../utils/logging/deprecation.js');\nvar NOOP = require('../../../../utils/misc/NOOP.js');\nvar BufferImageSource = require('./sources/BufferImageSource.js');\nvar TextureSource = require('./sources/TextureSource.js');\nvar TextureMatrix = require('./TextureMatrix.js');\n\n\"use strict\";\nclass Texture extends EventEmitter {\n  /**\n   * @param {rendering.TextureOptions} options - Options for the texture\n   */\n  constructor({\n    source,\n    label,\n    frame,\n    orig,\n    trim,\n    defaultAnchor,\n    defaultBorders,\n    rotate,\n    dynamic\n  } = {}) {\n    super();\n    /** unique id for this texture */\n    this.uid = uid.uid(\"texture\");\n    /** A uvs object based on the given frame and the texture source */\n    this.uvs = { x0: 0, y0: 0, x1: 0, y1: 0, x2: 0, y2: 0, x3: 0, y3: 0 };\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    this.frame = new Rectangle.Rectangle();\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     * @example\n     * texture.on('update', () => {});\n     */\n    this.noFrame = false;\n    /**\n     * Set to true if you plan on modifying the uvs of this texture.\n     * When this is the case, sprites and other objects using the texture will\n     * make sure to listen for changes to the uvs and update their vertices accordingly.\n     */\n    this.dynamic = false;\n    /** is it a texture? yes! used for type checking */\n    this.isTexture = true;\n    this.label = label;\n    this.source = source?.source ?? new TextureSource.TextureSource();\n    this.noFrame = !frame;\n    if (frame) {\n      this.frame.copyFrom(frame);\n    } else {\n      const { width, height } = this._source;\n      this.frame.width = width;\n      this.frame.height = height;\n    }\n    this.orig = orig || this.frame;\n    this.trim = trim;\n    this.rotate = rotate ?? 0;\n    this.defaultAnchor = defaultAnchor;\n    this.defaultBorders = defaultBorders;\n    this.destroyed = false;\n    this.dynamic = dynamic || false;\n    this.updateUvs();\n  }\n  set source(value) {\n    if (this._source) {\n      this._source.off(\"resize\", this.update, this);\n    }\n    this._source = value;\n    value.on(\"resize\", this.update, this);\n    this.emit(\"update\", this);\n  }\n  /** the underlying source of the texture (equivalent of baseTexture in v7) */\n  get source() {\n    return this._source;\n  }\n  /** returns a TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n  get textureMatrix() {\n    if (!this._textureMatrix) {\n      this._textureMatrix = new TextureMatrix.TextureMatrix(this);\n    }\n    return this._textureMatrix;\n  }\n  /** The width of the Texture in pixels. */\n  get width() {\n    return this.orig.width;\n  }\n  /** The height of the Texture in pixels. */\n  get height() {\n    return this.orig.height;\n  }\n  /** Call this function when you have modified the frame of this texture. */\n  updateUvs() {\n    const { uvs, frame } = this;\n    const { width, height } = this._source;\n    const nX = frame.x / width;\n    const nY = frame.y / height;\n    const nW = frame.width / width;\n    const nH = frame.height / height;\n    let rotate = this.rotate;\n    if (rotate) {\n      const w2 = nW / 2;\n      const h2 = nH / 2;\n      const cX = nX + w2;\n      const cY = nY + h2;\n      rotate = groupD8.groupD8.add(rotate, groupD8.groupD8.NW);\n      uvs.x0 = cX + w2 * groupD8.groupD8.uX(rotate);\n      uvs.y0 = cY + h2 * groupD8.groupD8.uY(rotate);\n      rotate = groupD8.groupD8.add(rotate, 2);\n      uvs.x1 = cX + w2 * groupD8.groupD8.uX(rotate);\n      uvs.y1 = cY + h2 * groupD8.groupD8.uY(rotate);\n      rotate = groupD8.groupD8.add(rotate, 2);\n      uvs.x2 = cX + w2 * groupD8.groupD8.uX(rotate);\n      uvs.y2 = cY + h2 * groupD8.groupD8.uY(rotate);\n      rotate = groupD8.groupD8.add(rotate, 2);\n      uvs.x3 = cX + w2 * groupD8.groupD8.uX(rotate);\n      uvs.y3 = cY + h2 * groupD8.groupD8.uY(rotate);\n    } else {\n      uvs.x0 = nX;\n      uvs.y0 = nY;\n      uvs.x1 = nX + nW;\n      uvs.y1 = nY;\n      uvs.x2 = nX + nW;\n      uvs.y2 = nY + nH;\n      uvs.x3 = nX;\n      uvs.y3 = nY + nH;\n    }\n  }\n  /**\n   * Destroys this texture\n   * @param destroySource - Destroy the source when the texture is destroyed.\n   */\n  destroy(destroySource = false) {\n    if (this._source) {\n      if (destroySource) {\n        this._source.destroy();\n        this._source = null;\n      }\n    }\n    this._textureMatrix = null;\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n  }\n  /**\n   * Call this if you have modified the `texture outside` of the constructor.\n   *\n   * If you have modified this texture's source, you must separately call `texture.source.update()` to see those changes.\n   */\n  update() {\n    if (this.noFrame) {\n      this.frame.width = this._source.width;\n      this.frame.height = this._source.height;\n    }\n    this.updateUvs();\n    this.emit(\"update\", this);\n  }\n  /** @deprecated since 8.0.0 */\n  get baseTexture() {\n    deprecation.deprecation(deprecation.v8_0_0, \"Texture.baseTexture is now Texture.source\");\n    return this._source;\n  }\n}\nTexture.EMPTY = new Texture({\n  label: \"EMPTY\",\n  source: new TextureSource.TextureSource({\n    label: \"EMPTY\"\n  })\n});\nTexture.EMPTY.destroy = NOOP.NOOP;\nTexture.WHITE = new Texture({\n  source: new BufferImageSource.BufferImageSource({\n    resource: new Uint8Array([255, 255, 255, 255]),\n    width: 1,\n    height: 1,\n    alphaMode: \"premultiply-alpha-on-upload\",\n    label: \"WHITE\"\n  }),\n  label: \"WHITE\"\n});\nTexture.WHITE.destroy = NOOP.NOOP;\n\nexports.Texture = Texture;\n//# sourceMappingURL=Texture.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","groupD8","Rectangle","uid","deprecation","NOOP","BufferImageSource","TextureSource","TextureMatrix","Texture","constructor","source","label","frame","orig","trim","defaultAnchor","defaultBorders","rotate","dynamic","uvs","x0","y0","x1","y1","x2","y2","x3","y3","noFrame","isTexture","copyFrom","width","height","_source","destroyed","updateUvs","value","off","update","on","emit","_textureMatrix","nX","x","nY","y","nW","nH","w2","h2","add","NW","cX","uX","cY","uY","destroy","destroySource","removeAllListeners","v8_0_0","EMPTY","WHITE","resource","Uint8Array","alphaMode"]
}
