{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$filters$FilterSystem.js",
"lineCount":182,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/filters/FilterSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$filters$FilterSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../extensions/Extensions.js');\nvar Matrix = require('../maths/matrix/Matrix.js');\nvar Point = require('../maths/point/Point.js');\nvar BindGroup = require('../rendering/renderers/gpu/shader/BindGroup.js');\nvar Geometry = require('../rendering/renderers/shared/geometry/Geometry.js');\nvar UniformGroup = require('../rendering/renderers/shared/shader/UniformGroup.js');\nvar Texture = require('../rendering/renderers/shared/texture/Texture.js');\nvar TexturePool = require('../rendering/renderers/shared/texture/TexturePool.js');\nvar types = require('../rendering/renderers/types.js');\nvar Bounds = require('../scene/container/bounds/Bounds.js');\nvar getRenderableBounds = require('../scene/container/bounds/getRenderableBounds.js');\nvar warn = require('../utils/logging/warn.js');\n\n\"use strict\";\nconst quadGeometry = new Geometry.Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup.UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup.BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getRenderableBounds.getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? colorTextureSource._resolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = colorTextureSource.antialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn.warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      const viewPort = renderer.renderTarget.rootViewPort;\n      const rootResolution = renderer.renderTarget.renderTarget.resolution;\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad(padding | 0);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.TexturePool.returnTexture(flip);\n      TexturePool.TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture.Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === types.RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds.Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexports.FilterSystem = FilterSystem;\n//# sourceMappingURL=FilterSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Matrix","Point","BindGroup","Geometry","UniformGroup","Texture","TexturePool","types","Bounds","getRenderableBounds","warn","quadGeometry","attributes","aPosition","buffer","Float32Array","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","constructor","renderer","_filterStackIndex","_filterStack","_filterGlobalUniforms","uInputSize","value","type","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","_activeFilterData","backTexture","push","instruction","filters","filterEffect","_getFilterData","filterData","length","skip","bounds","renderables","getGlobalRenderableBounds","filterArea","clear","addRect","applyMatrix","container","worldTransform","getFastGlobalBounds","filterFrameTransform","cacheToLocalTransform","renderGroup","parentRenderGroup","colorTextureSource","renderTarget","colorTexture","source","resolution","Infinity","padding","antialias","blendRequired","enabled","clipToViewport","i","filter","Math","min","_resolution","compatibleRenderers","backBuffer","useBackBuffer","viewPort","rootViewPort","rootResolution","fitBounds","width","height","scale","ceil","pad","isPositive","previousRenderSurface","renderSurface","inputTexture","getOptimalTexture","bind","globalUniforms","pop","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","minX","y","minY","floor","copyToTexture","applyFilter","input","output","shared","rootRenderTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","renderPipes","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","RendererType","WEBGL","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","set","_source","copyTo","prepend","invert","texture","translate","anchor","extension","ExtensionType","WebGLSystem","WebGPUSystem","name"]
}
