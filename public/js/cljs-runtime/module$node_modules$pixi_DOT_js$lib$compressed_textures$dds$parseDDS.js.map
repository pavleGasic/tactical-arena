{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$dds$parseDDS.js",
"lineCount":120,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/dds/parseDDS.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$dds$parseDDS\"] = function(global,require,module,exports) {\n'use strict';\n\nvar _const = require('./const.js');\n\n\"use strict\";\nfunction parseDDS(arrayBuffer, supportedFormats) {\n  const {\n    format,\n    fourCC,\n    width,\n    height,\n    dataOffset,\n    mipmapCount\n  } = parseDDSHeader(arrayBuffer);\n  if (!supportedFormats.includes(format)) {\n    throw new Error(`Unsupported texture format: ${fourCC} ${format}, supported: ${supportedFormats}`);\n  }\n  if (mipmapCount <= 1) {\n    return {\n      format,\n      width,\n      height,\n      resource: [new Uint8Array(arrayBuffer, dataOffset)],\n      alphaMode: \"no-premultiply-alpha\"\n    };\n  }\n  const levelBuffers = getMipmapLevelBuffers(format, width, height, dataOffset, mipmapCount, arrayBuffer);\n  const textureOptions = {\n    format,\n    width,\n    height,\n    resource: levelBuffers,\n    alphaMode: \"no-premultiply-alpha\"\n  };\n  return textureOptions;\n}\nfunction getMipmapLevelBuffers(format, width, height, dataOffset, mipmapCount, arrayBuffer) {\n  const levelBuffers = [];\n  const blockBytes = _const.TEXTURE_FORMAT_BLOCK_SIZE[format];\n  let mipWidth = width;\n  let mipHeight = height;\n  let offset = dataOffset;\n  for (let level = 0; level < mipmapCount; ++level) {\n    const alignedWidth = Math.ceil(Math.max(4, mipWidth) / 4) * 4;\n    const alignedHeight = Math.ceil(Math.max(4, mipHeight) / 4) * 4;\n    const byteLength = blockBytes ? alignedWidth / 4 * alignedHeight / 4 * blockBytes : mipWidth * mipHeight * 4;\n    const levelBuffer = new Uint8Array(arrayBuffer, offset, byteLength);\n    levelBuffers.push(levelBuffer);\n    offset += byteLength;\n    mipWidth = Math.max(mipWidth >> 1, 1);\n    mipHeight = Math.max(mipHeight >> 1, 1);\n  }\n  return levelBuffers;\n}\nfunction parseDDSHeader(buffer) {\n  const header = new Uint32Array(buffer, 0, _const.DDS.HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n  if (header[_const.DDS.HEADER_FIELDS.MAGIC] !== _const.DDS.MAGIC_VALUE) {\n    throw new Error(\"Invalid magic number in DDS header\");\n  }\n  const height = header[_const.DDS.HEADER_FIELDS.HEIGHT];\n  const width = header[_const.DDS.HEADER_FIELDS.WIDTH];\n  const mipmapCount = Math.max(1, header[_const.DDS.HEADER_FIELDS.MIPMAP_COUNT]);\n  const flags = header[_const.DDS.HEADER_FIELDS.PF_FLAGS];\n  const fourCC = header[_const.DDS.HEADER_FIELDS.FOURCC];\n  const format = getTextureFormat(header, flags, fourCC, buffer);\n  const dataOffset = _const.DDS.MAGIC_SIZE + _const.DDS.HEADER_SIZE + (fourCC === _const.DDS.D3DFMT.DX10 ? _const.DDS.HEADER_DX10_SIZE : 0);\n  return {\n    format,\n    fourCC,\n    width,\n    height,\n    dataOffset,\n    mipmapCount\n  };\n}\nfunction getTextureFormat(header, flags, fourCC, buffer) {\n  if (flags & _const.DDS.PIXEL_FORMAT_FLAGS.FOURCC) {\n    if (fourCC === _const.DDS.D3DFMT.DX10) {\n      const dx10Header = new Uint32Array(\n        buffer,\n        _const.DDS.MAGIC_SIZE + _const.DDS.HEADER_SIZE,\n        // there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n        _const.DDS.HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT\n      );\n      const miscFlag = dx10Header[_const.DDS.HEADER_DX10_FIELDS.MISC_FLAG];\n      if (miscFlag === _const.DDS.RESOURCE_MISC_TEXTURECUBE) {\n        throw new Error(\"DDSParser does not support cubemap textures\");\n      }\n      const resourceDimension = dx10Header[_const.DDS.HEADER_DX10_FIELDS.RESOURCE_DIMENSION];\n      if (resourceDimension === _const.DDS.D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D) {\n        throw new Error(\"DDSParser does not supported 3D texture data\");\n      }\n      const dxgiFormat = dx10Header[_const.DDS.HEADER_DX10_FIELDS.DXGI_FORMAT];\n      if (dxgiFormat in _const.DXGI_TO_TEXTURE_FORMAT) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[dxgiFormat];\n      }\n      throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n    }\n    if (fourCC in _const.FOURCC_TO_TEXTURE_FORMAT) {\n      return _const.FOURCC_TO_TEXTURE_FORMAT[fourCC];\n    }\n    throw new Error(`DDSParser cannot parse texture data with fourCC format ${fourCC}`);\n  }\n  if (flags & _const.DDS.PIXEL_FORMAT_FLAGS.RGB || flags & _const.DDS.PIXEL_FORMAT_FLAGS.RGBA) {\n    return getUncompressedTextureFormat(header);\n  }\n  if (flags & _const.DDS.PIXEL_FORMAT_FLAGS.YUV) {\n    throw new Error(\"DDSParser does not supported YUV uncompressed texture data.\");\n  }\n  if (flags & _const.DDS.PIXEL_FORMAT_FLAGS.LUMINANCE || flags & _const.DDS.PIXEL_FORMAT_FLAGS.LUMINANCEA) {\n    throw new Error(\"DDSParser does not support single-channel (lumninance) texture data!\");\n  }\n  if (flags & _const.DDS.PIXEL_FORMAT_FLAGS.ALPHA || flags & _const.DDS.PIXEL_FORMAT_FLAGS.ALPHAPIXELS) {\n    throw new Error(\"DDSParser does not support single-channel (alpha) texture data!\");\n  }\n  throw new Error(\"DDSParser failed to load a texture file due to an unknown reason!\");\n}\nfunction getUncompressedTextureFormat(header) {\n  const bitCount = header[_const.DDS.HEADER_FIELDS.RGB_BITCOUNT];\n  const rBitMask = header[_const.DDS.HEADER_FIELDS.R_BIT_MASK];\n  const gBitMask = header[_const.DDS.HEADER_FIELDS.G_BIT_MASK];\n  const bBitMask = header[_const.DDS.HEADER_FIELDS.B_BIT_MASK];\n  const aBitMask = header[_const.DDS.HEADER_FIELDS.A_BIT_MASK];\n  switch (bitCount) {\n    case 32:\n      if (rBitMask === 255 && gBitMask === 65280 && bBitMask === 16711680 && aBitMask === 4278190080) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_UNORM];\n      }\n      if (rBitMask === 16711680 && gBitMask === 65280 && bBitMask === 255 && aBitMask === 4278190080) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_B8G8R8A8_UNORM];\n      }\n      if (rBitMask === 1072693248 && gBitMask === 1047552 && bBitMask === 1023 && aBitMask === 3221225472) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_R10G10B10A2_UNORM];\n      }\n      if (rBitMask === 65535 && gBitMask === 4294901760 && bBitMask === 0 && aBitMask === 0) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_R16G16_UNORM];\n      }\n      if (rBitMask === 4294967295 && gBitMask === 0 && bBitMask === 0 && aBitMask === 0) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_R32_FLOAT];\n      }\n      break;\n    case 24:\n      if (rBitMask === 16711680 && gBitMask === 65280 && bBitMask === 255 && aBitMask === 32768) {\n      }\n      break;\n    case 16:\n      if (rBitMask === 31744 && gBitMask === 992 && bBitMask === 31 && aBitMask === 32768) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_B5G5R5A1_UNORM];\n      }\n      if (rBitMask === 63488 && gBitMask === 2016 && bBitMask === 31 && aBitMask === 0) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_B5G6R5_UNORM];\n      }\n      if (rBitMask === 3840 && gBitMask === 240 && bBitMask === 15 && aBitMask === 61440) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_B4G4R4A4_UNORM];\n      }\n      if (rBitMask === 255 && gBitMask === 0 && bBitMask === 0 && aBitMask === 65280) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_R8G8_UNORM];\n      }\n      if (rBitMask === 65535 && gBitMask === 0 && bBitMask === 0 && aBitMask === 0) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_R16_UNORM];\n      }\n      break;\n    case 8:\n      if (rBitMask === 255 && gBitMask === 0 && bBitMask === 0 && aBitMask === 0) {\n        return _const.DXGI_TO_TEXTURE_FORMAT[_const.DDS.DXGI_FORMAT.DXGI_FORMAT_R8_UNORM];\n      }\n      break;\n  }\n  throw new Error(`DDSParser does not support uncompressed texture with configuration:\n                bitCount = ${bitCount}, rBitMask = ${rBitMask}, gBitMask = ${gBitMask}, aBitMask = ${aBitMask}`);\n}\n\nexports.parseDDS = parseDDS;\n//# sourceMappingURL=parseDDS.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getUncompressedTextureFormat","header","bitCount","_const","DDS","HEADER_FIELDS","RGB_BITCOUNT","rBitMask","R_BIT_MASK","gBitMask","G_BIT_MASK","bBitMask","B_BIT_MASK","aBitMask","A_BIT_MASK","DXGI_TO_TEXTURE_FORMAT","DXGI_FORMAT","DXGI_FORMAT_R8G8B8A8_UNORM","DXGI_FORMAT_B8G8R8A8_UNORM","DXGI_FORMAT_R10G10B10A2_UNORM","DXGI_FORMAT_R16G16_UNORM","DXGI_FORMAT_R32_FLOAT","DXGI_FORMAT_B5G5R5A1_UNORM","DXGI_FORMAT_B5G6R5_UNORM","DXGI_FORMAT_B4G4R4A4_UNORM","DXGI_FORMAT_R8G8_UNORM","DXGI_FORMAT_R16_UNORM","DXGI_FORMAT_R8_UNORM","Error","parseDDS","arrayBuffer","supportedFormats","Uint32Array","HEADER_SIZE","BYTES_PER_ELEMENT","MAGIC","MAGIC_VALUE","height","HEIGHT","width","WIDTH","mipmapCount","Math","max","MIPMAP_COUNT","fourCC","FOURCC","flags","PF_FLAGS","PIXEL_FORMAT_FLAGS","D3DFMT","DX10","dx10Header","MAGIC_SIZE","HEADER_DX10_SIZE","miscFlag","HEADER_DX10_FIELDS","MISC_FLAG","RESOURCE_MISC_TEXTURECUBE","resourceDimension","RESOURCE_DIMENSION","D3D10_RESOURCE_DIMENSION","DDS_DIMENSION_TEXTURE3D","dxgiFormat","FOURCC_TO_TEXTURE_FORMAT","RGB","RGBA","YUV","LUMINANCE","LUMINANCEA","ALPHA","ALPHAPIXELS","format","dataOffset","includes","resource","Uint8Array","alphaMode","levelBuffers","blockBytes","TEXTURE_FORMAT_BLOCK_SIZE","mipWidth","mipHeight","offset","level","alignedWidth","ceil","alignedHeight","byteLength","levelBuffer","push","textureOptions"]
}
