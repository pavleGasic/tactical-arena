{
"version":3,
"file":"module$node_modules$$pixi$math$lib$shapes$Polygon.js",
"lineCount":37,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,GAAsE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE9G,MAAIC,SAASH,OAAA,CAAQ,0CAAR,CAAb;AACA,OAAMI,QAAN;AAQEC,eAAW,CAAC,GAAGC,MAAJ,CAAY;AACjBC,YAAAA,GAAOC,KAAMC,CAAAA,OAAN,CAAcH,MAAA,CAAO,CAAP,CAAd,CAAA,GAA2BA,MAAA,CAAO,CAAP,CAA3B,GAAuCA,MAA9CC;AACJ,UAAsB,QAAtB,IAAI,MAAOA,OAAA,CAAK,CAAL,CAAX,CAAgC;AAC9B,cAAMG,IAAI,EAAV;AACA,aAAK,IAAIC,IAAI,CAAR,EAAWC,KAAKL,MAAKM,CAAAA,MAA1B,EAAkCF,CAAlC,GAAsCC,EAAtC,EAA0CD,CAAA,EAA1C;AACED,WAAEI,CAAAA,IAAF,CAAOP,MAAA,CAAKI,CAAL,CAAQI,CAAAA,CAAf,EAAkBR,MAAA,CAAKI,CAAL,CAAQK,CAAAA,CAA1B,CAAA;AADF;AAEAT,cAAA,GAAOG,CAAP;AAJ8B;AAMhC,UAAKJ,CAAAA,MAAL,GAAcC,MAAd;AAAoB,UAAKU,CAAAA,IAAL,GAAYd,MAAOe,CAAAA,MAAOC,CAAAA,IAA1B;AAAgC,UAAKC,CAAAA,WAAL,GAAmB,CAAA,CAAnB;AAR/B;AAcvBC,SAAK,EAAG;AAAA,UACAf,SAAS,IAAKA,CAAAA,MAAOgB,CAAAA,KAAZ,EADT;AAC8BC,YAAAA,GAAU,IAAInB,OAAJ,CAAYE,MAAZ,CAAViB;AACpC,aAAOA,MAAQH,CAAAA,WAAR,GAAsB,IAAKA,CAAAA,WAA3B,EAAwCG,MAA/C;AAFM;AAURC,YAAQ,CAACT,CAAD,EAAIC,CAAJ,CAAO;AACb,UAAIS,SAAS,CAAA,CAAb;AACA,YAAMZ,SAAS,IAAKP,CAAAA,MAAOO,CAAAA,MAArBA,GAA8B,CAApC;AACA,WAAK,IAAIF,IAAI,CAAR,EAAWe,IAAIb,MAAJa,GAAa,CAA7B,EAAgCf,CAAhC,GAAoCE,MAApC,EAA4Ca,CAA5C,GAAgDf,CAAA,EAAhD,CAAqD;AAAA,cAC7CgB,KAAK,IAAKrB,CAAAA,MAAL,CAAgB,CAAhB,GAAYK,CAAZ,CADwC,EACpBiB,KAAK,IAAKtB,CAAAA,MAAL,CAAgB,CAAhB,GAAYK,CAAZ,GAAoB,CAApB,CADe,EACSkB,KAAK,IAAKvB,CAAAA,MAAL,CAAgB,CAAhB,GAAYoB,CAAZ,CADd,EACkCI,KAAK,IAAKxB,CAAAA,MAAL,CAAgB,CAAhB,GAAYoB,CAAZ,GAAoB,CAApB,CADvC;AAEnDE,UAAA,GAAKZ,CAAL,IAAUc,EAAV,GAAed,CAAf,IAAoBD,CAApB,IAAsCC,CAAtC,GAA0CY,EAA1C,KAAiDE,EAAjD,GAAsDF,EAAtD,KAAyBC,EAAzB,GAA8BF,EAA9B,IAA6DA,EAA7D,KAAoEF,MAApE,GAA6E,CAACA,MAA9E;AAFmD;AAIrD,aAAOA,MAAP;AAPa;AAhCjB;AA0CArB,SAAQ2B,CAAAA,SAAUC,CAAAA,QAAlB,GAA6BC,QAAQ,EAAG;AACtC,WAAQ,kCAAiC,IAAKb,CAAAA,WAAtC,UAA2D,IAAKd,CAAAA,MAAO4B,CAAAA,MAAZ,CAAmB,CAACC,UAAD,EAAaC,YAAb,CAAA,IAA+B,GAAED,UAAF,KAAiBC,YAAjB,EAAlD,EAAmF,EAAnF,CAA3D,GAAR;AADsC,GAAxC;AAGAlC,SAAQE,CAAAA,OAAR,GAAkBA,OAAlB;AAhD8G,CAA9G;;",
"sources":["node_modules/@pixi/math/lib/shapes/Polygon.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$math$lib$shapes$Polygon\"] = function(global,require,module,exports) {\n\"use strict\";\nvar _const = require(\"../const.js\");\nclass Polygon {\n  /**\n   * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  constructor(...points) {\n    let flat = Array.isArray(points[0]) ? points[0] : points;\n    if (typeof flat[0] != \"number\") {\n      const p = [];\n      for (let i = 0, il = flat.length; i < il; i++)\n        p.push(flat[i].x, flat[i].y);\n      flat = p;\n    }\n    this.points = flat, this.type = _const.SHAPES.POLY, this.closeStroke = !0;\n  }\n  /**\n   * Creates a clone of this polygon.\n   * @returns - A copy of the polygon.\n   */\n  clone() {\n    const points = this.points.slice(), polygon = new Polygon(points);\n    return polygon.closeStroke = this.closeStroke, polygon;\n  }\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this polygon.\n   */\n  contains(x, y) {\n    let inside = !1;\n    const length = this.points.length / 2;\n    for (let i = 0, j = length - 1; i < length; j = i++) {\n      const xi = this.points[i * 2], yi = this.points[i * 2 + 1], xj = this.points[j * 2], yj = this.points[j * 2 + 1];\n      yi > y != yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi && (inside = !inside);\n    }\n    return inside;\n  }\n}\nPolygon.prototype.toString = function() {\n  return `[@pixi/math:PolygoncloseStroke=${this.closeStroke}points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, \"\")}]`;\n};\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","Polygon","constructor","points","flat","Array","isArray","p","i","il","length","push","x","y","type","SHAPES","POLY","closeStroke","clone","slice","polygon","contains","inside","j","xi","yi","xj","yj","prototype","toString","Polygon.prototype.toString","reduce","pointsDesc","currentPoint"]
}
