shadow$provide.module$node_modules$$pixi$ticker$lib$TickerListener = function(global, require, module, exports) {
  class TickerListener {
    constructor(fn, context = null, priority = 0, once = !1) {
      this.previous = this.next = null;
      this._destroyed = !1;
      this.fn = fn;
      this.context = context;
      this.priority = priority;
      this.once = once;
    }
    match(fn, context = null) {
      return this.fn === fn && this.context === context;
    }
    emit(deltaTime) {
      this.fn && (this.context ? this.fn.call(this.context, deltaTime) : this.fn(deltaTime));
      deltaTime = this.next;
      return this.once && this.destroy(!0), this._destroyed && (this.next = null), deltaTime;
    }
    connect(previous) {
      this.previous = previous;
      previous.next && (previous.next.previous = this);
      this.next = previous.next;
      previous.next = this;
    }
    destroy(hard = !1) {
      this._destroyed = !0;
      this.context = this.fn = null;
      this.previous && (this.previous.next = this.next);
      this.next && (this.next.previous = this.previous);
      const redirect = this.next;
      return this.next = hard ? null : redirect, this.previous = null, redirect;
    }
  }
  exports.TickerListener = TickerListener;
};

//# sourceMappingURL=module$node_modules$$pixi$ticker$lib$TickerListener.js.map
