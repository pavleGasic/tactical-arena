shadow$provide.module$node_modules$$pixi$core$lib$mask$StencilSystem = function(global, require, module, exports) {
  global = require("module$node_modules$$pixi$extensions$lib$index");
  var settings = require("module$node_modules$$pixi$settings$lib$index");
  require = require("module$node_modules$$pixi$core$lib$mask$AbstractMaskSystem");
  class StencilSystem extends require.AbstractMaskSystem {
    constructor(renderer) {
      super(renderer);
      this.glConst = settings.settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;
    }
    getStackLength() {
      const maskData = this.maskStack[this.maskStack.length - 1];
      return maskData ? maskData._stencilCounter : 0;
    }
    push(maskData) {
      const maskObject = maskData.maskObject, {gl} = this.renderer, prevMaskCount = maskData._stencilCounter;
      0 === prevMaskCount && (this.renderer.framebuffer.forceStencil(), gl.clearStencil(0), gl.clear(gl.STENCIL_BUFFER_BIT), gl.enable(gl.STENCIL_TEST));
      maskData._stencilCounter++;
      const colorMask = maskData._colorMask;
      0 !== colorMask && (maskData._colorMask = 0, gl.colorMask(!1, !1, !1, !1));
      gl.stencilFunc(gl.EQUAL, prevMaskCount, 4294967295);
      gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
      maskObject.renderable = !0;
      maskObject.render(this.renderer);
      this.renderer.batch.flush();
      maskObject.renderable = !1;
      0 !== colorMask && (maskData._colorMask = colorMask, gl.colorMask(0 !== (colorMask & 1), 0 !== (colorMask & 2), 0 !== (colorMask & 4), 0 !== (colorMask & 8)));
      this._useCurrent();
    }
    pop(maskObject) {
      const gl = this.renderer.gl;
      if (0 === this.getStackLength()) {
        gl.disable(gl.STENCIL_TEST);
      } else {
        const maskData = 0 !== this.maskStack.length ? this.maskStack[this.maskStack.length - 1] : null, colorMask = maskData ? maskData._colorMask : 15;
        0 !== colorMask && (maskData._colorMask = 0, gl.colorMask(!1, !1, !1, !1));
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);
        maskObject.renderable = !0;
        maskObject.render(this.renderer);
        this.renderer.batch.flush();
        maskObject.renderable = !1;
        0 !== colorMask && (maskData._colorMask = colorMask, gl.colorMask(0 !== (colorMask & 1), 0 !== (colorMask & 2), 0 !== (colorMask & 4), 0 !== (colorMask & 8)));
        this._useCurrent();
      }
    }
    _useCurrent() {
      const gl = this.renderer.gl;
      gl.stencilFunc(gl.EQUAL, this.getStackLength(), 4294967295);
      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
    }
  }
  StencilSystem.extension = {type:global.ExtensionType.RendererSystem, name:"stencil"};
  global.extensions.add(StencilSystem);
  exports.StencilSystem = StencilSystem;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$mask$StencilSystem.js.map
