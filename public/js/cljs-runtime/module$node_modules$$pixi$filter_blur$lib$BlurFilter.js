shadow$provide.module$node_modules$$pixi$filter_blur$lib$BlurFilter = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index"), BlurFilterPass = require("module$node_modules$$pixi$filter_blur$lib$BlurFilterPass");
  class BlurFilter extends core.Filter {
    constructor(strength = 8, quality = 4, resolution = core.Filter.defaultResolution, kernelSize = 5) {
      super();
      this._repeatEdgePixels = !1;
      this.blurXFilter = new BlurFilterPass.BlurFilterPass(!0, strength, quality, resolution, kernelSize);
      this.blurYFilter = new BlurFilterPass.BlurFilterPass(!1, strength, quality, resolution, kernelSize);
      this.resolution = resolution;
      this.quality = quality;
      this.blur = strength;
      this.repeatEdgePixels = !1;
    }
    apply(filterManager, input, output, clearMode) {
      var yStrength = Math.abs(this.blurYFilter.strength);
      Math.abs(this.blurXFilter.strength) && yStrength ? (yStrength = filterManager.getFilterTexture(), this.blurXFilter.apply(filterManager, input, yStrength, core.CLEAR_MODES.CLEAR), this.blurYFilter.apply(filterManager, yStrength, output, clearMode), filterManager.returnFilterTexture(yStrength)) : yStrength ? this.blurYFilter.apply(filterManager, input, output, clearMode) : this.blurXFilter.apply(filterManager, input, output, clearMode);
    }
    updatePadding() {
      this._repeatEdgePixels ? this.padding = 0 : this.padding = 2 * Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength));
    }
    get blur() {
      return this.blurXFilter.blur;
    }
    set blur(value) {
      this.blurXFilter.blur = this.blurYFilter.blur = value;
      this.updatePadding();
    }
    get quality() {
      return this.blurXFilter.quality;
    }
    set quality(value) {
      this.blurXFilter.quality = this.blurYFilter.quality = value;
    }
    get blurX() {
      return this.blurXFilter.blur;
    }
    set blurX(value) {
      this.blurXFilter.blur = value;
      this.updatePadding();
    }
    get blurY() {
      return this.blurYFilter.blur;
    }
    set blurY(value) {
      this.blurYFilter.blur = value;
      this.updatePadding();
    }
    get blendMode() {
      return this.blurYFilter.blendMode;
    }
    set blendMode(value) {
      this.blurYFilter.blendMode = value;
    }
    get repeatEdgePixels() {
      return this._repeatEdgePixels;
    }
    set repeatEdgePixels(value) {
      this._repeatEdgePixels = value;
      this.updatePadding();
    }
  }
  exports.BlurFilter = BlurFilter;
};

//# sourceMappingURL=module$node_modules$$pixi$filter_blur$lib$BlurFilter.js.map
