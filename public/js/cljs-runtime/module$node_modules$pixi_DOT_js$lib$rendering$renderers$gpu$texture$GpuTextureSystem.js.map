{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$GpuTextureSystem.js",
"lineCount":128,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/texture/GpuTextureSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$GpuTextureSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../../environment/adapter.js');\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar UniformGroup = require('../../shared/shader/UniformGroup.js');\nvar CanvasPool = require('../../shared/texture/CanvasPool.js');\nvar BindGroup = require('../shader/BindGroup.js');\nvar gpuUploadBufferImageResource = require('./uploaders/gpuUploadBufferImageResource.js');\nvar gpuUploadCompressedTextureResource = require('./uploaders/gpuUploadCompressedTextureResource.js');\nvar gpuUploadImageSource = require('./uploaders/gpuUploadImageSource.js');\nvar gpuUploadVideoSource = require('./uploaders/gpuUploadVideoSource.js');\nvar GpuMipmapGenerator = require('./utils/GpuMipmapGenerator.js');\n\n\"use strict\";\nclass GpuTextureSystem {\n  constructor(renderer) {\n    this.managedTextures = [];\n    this._gpuSources = /* @__PURE__ */ Object.create(null);\n    this._gpuSamplers = /* @__PURE__ */ Object.create(null);\n    this._bindGroupHash = /* @__PURE__ */ Object.create(null);\n    this._textureViewHash = /* @__PURE__ */ Object.create(null);\n    this._uploads = {\n      image: gpuUploadImageSource.gpuUploadImageResource,\n      buffer: gpuUploadBufferImageResource.gpuUploadBufferImageResource,\n      video: gpuUploadVideoSource.gpuUploadVideoResource,\n      compressed: gpuUploadCompressedTextureResource.gpuUploadCompressedTextureResource\n    };\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuSources\");\n    renderer.renderableGC.addManagedHash(this, \"_gpuSamplers\");\n    renderer.renderableGC.addManagedHash(this, \"_bindGroupHash\");\n    renderer.renderableGC.addManagedHash(this, \"_textureViewHash\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  initSource(source) {\n    if (source.autoGenerateMipmaps) {\n      const biggestDimension = Math.max(source.pixelWidth, source.pixelHeight);\n      source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n    }\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (source.uploadMethodId !== \"compressed\") {\n      usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n      usage |= GPUTextureUsage.COPY_SRC;\n    }\n    const blockData = gpuUploadCompressedTextureResource.blockDataMap[source.format] || { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n    const width = Math.ceil(source.pixelWidth / blockData.blockWidth) * blockData.blockWidth;\n    const height = Math.ceil(source.pixelHeight / blockData.blockHeight) * blockData.blockHeight;\n    const textureDescriptor = {\n      label: source.label,\n      size: { width, height },\n      format: source.format,\n      sampleCount: source.sampleCount,\n      mipLevelCount: source.mipLevelCount,\n      dimension: source.dimension,\n      usage\n    };\n    const gpuTexture = this._gpu.device.createTexture(textureDescriptor);\n    this._gpuSources[source.uid] = gpuTexture;\n    if (!this.managedTextures.includes(source)) {\n      source.on(\"update\", this.onSourceUpdate, this);\n      source.on(\"resize\", this.onSourceResize, this);\n      source.on(\"destroy\", this.onSourceDestroy, this);\n      source.on(\"unload\", this.onSourceUnload, this);\n      source.on(\"updateMipmaps\", this.onUpdateMipmaps, this);\n      this.managedTextures.push(source);\n    }\n    this.onSourceUpdate(source);\n    return gpuTexture;\n  }\n  onSourceUpdate(source) {\n    const gpuTexture = this.getGpuSource(source);\n    if (!gpuTexture)\n      return;\n    if (this._uploads[source.uploadMethodId]) {\n      this._uploads[source.uploadMethodId].upload(source, gpuTexture, this._gpu);\n    }\n    if (source.autoGenerateMipmaps && source.mipLevelCount > 1) {\n      this.onUpdateMipmaps(source);\n    }\n  }\n  onSourceUnload(source) {\n    const gpuTexture = this._gpuSources[source.uid];\n    if (gpuTexture) {\n      this._gpuSources[source.uid] = null;\n      gpuTexture.destroy();\n    }\n  }\n  onUpdateMipmaps(source) {\n    if (!this._mipmapGenerator) {\n      this._mipmapGenerator = new GpuMipmapGenerator.GpuMipmapGenerator(this._gpu.device);\n    }\n    const gpuTexture = this.getGpuSource(source);\n    this._mipmapGenerator.generateMipmap(gpuTexture);\n  }\n  onSourceDestroy(source) {\n    source.off(\"update\", this.onSourceUpdate, this);\n    source.off(\"unload\", this.onSourceUnload, this);\n    source.off(\"destroy\", this.onSourceDestroy, this);\n    source.off(\"resize\", this.onSourceResize, this);\n    source.off(\"updateMipmaps\", this.onUpdateMipmaps, this);\n    this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n    this.onSourceUnload(source);\n  }\n  onSourceResize(source) {\n    const gpuTexture = this._gpuSources[source.uid];\n    if (!gpuTexture) {\n      this.initSource(source);\n    } else if (gpuTexture.width !== source.pixelWidth || gpuTexture.height !== source.pixelHeight) {\n      this._textureViewHash[source.uid] = null;\n      this._bindGroupHash[source.uid] = null;\n      this.onSourceUnload(source);\n      this.initSource(source);\n    }\n  }\n  _initSampler(sampler) {\n    this._gpuSamplers[sampler._resourceId] = this._gpu.device.createSampler(sampler);\n    return this._gpuSamplers[sampler._resourceId];\n  }\n  getGpuSampler(sampler) {\n    return this._gpuSamplers[sampler._resourceId] || this._initSampler(sampler);\n  }\n  getGpuSource(source) {\n    return this._gpuSources[source.uid] || this.initSource(source);\n  }\n  /**\n   * this returns s bind group for a specific texture, the bind group contains\n   * - the texture source\n   * - the texture style\n   * - the texture matrix\n   * This is cached so the bind group should only be created once per texture\n   * @param texture - the texture you want the bindgroup for\n   * @returns the bind group for the texture\n   */\n  getTextureBindGroup(texture) {\n    return this._bindGroupHash[texture.uid] ?? this._createTextureBindGroup(texture);\n  }\n  _createTextureBindGroup(texture) {\n    const source = texture.source;\n    this._bindGroupHash[texture.uid] = new BindGroup.BindGroup({\n      0: source,\n      1: source.style,\n      2: new UniformGroup.UniformGroup({\n        uTextureMatrix: { type: \"mat3x3<f32>\", value: texture.textureMatrix.mapCoord }\n      })\n    });\n    return this._bindGroupHash[texture.uid];\n  }\n  getTextureView(texture) {\n    const source = texture.source;\n    return this._textureViewHash[source.uid] ?? this._createTextureView(source);\n  }\n  _createTextureView(texture) {\n    this._textureViewHash[texture.uid] = this.getGpuSource(texture).createView();\n    return this._textureViewHash[texture.uid];\n  }\n  generateCanvas(texture) {\n    const renderer = this._renderer;\n    const commandEncoder = renderer.gpu.device.createCommandEncoder();\n    const canvas = adapter.DOMAdapter.get().createCanvas();\n    canvas.width = texture.source.pixelWidth;\n    canvas.height = texture.source.pixelHeight;\n    const context = canvas.getContext(\"webgpu\");\n    context.configure({\n      device: renderer.gpu.device,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n      format: adapter.DOMAdapter.get().getNavigator().gpu.getPreferredCanvasFormat(),\n      alphaMode: \"premultiplied\"\n    });\n    commandEncoder.copyTextureToTexture({\n      texture: renderer.texture.getGpuSource(texture.source),\n      origin: {\n        x: 0,\n        y: 0\n      }\n    }, {\n      texture: context.getCurrentTexture()\n    }, {\n      width: canvas.width,\n      height: canvas.height\n    });\n    renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n    return canvas;\n  }\n  getPixels(texture) {\n    const webGPUCanvas = this.generateCanvas(texture);\n    const canvasAndContext = CanvasPool.CanvasPool.getOptimalCanvasAndContext(webGPUCanvas.width, webGPUCanvas.height);\n    const context = canvasAndContext.context;\n    context.drawImage(webGPUCanvas, 0, 0);\n    const { width, height } = webGPUCanvas;\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = new Uint8ClampedArray(imageData.data.buffer);\n    CanvasPool.CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return { pixels, width, height };\n  }\n  destroy() {\n    this.managedTextures.slice().forEach((source) => this.onSourceDestroy(source));\n    this.managedTextures = null;\n    for (const k of Object.keys(this._bindGroupHash)) {\n      const key = Number(k);\n      const bindGroup = this._bindGroupHash[key];\n      bindGroup?.destroy();\n      this._bindGroupHash[key] = null;\n    }\n    this._gpu = null;\n    this._mipmapGenerator = null;\n    this._gpuSources = null;\n    this._bindGroupHash = null;\n    this._textureViewHash = null;\n    this._gpuSamplers = null;\n  }\n}\n/** @ignore */\nGpuTextureSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGPUSystem\n  ],\n  name: \"texture\"\n};\n\nexports.GpuTextureSystem = GpuTextureSystem;\n//# sourceMappingURL=GpuTextureSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adapter","Extensions","UniformGroup","CanvasPool","BindGroup","gpuUploadBufferImageResource","gpuUploadCompressedTextureResource","gpuUploadImageSource","gpuUploadVideoSource","GpuMipmapGenerator","GpuTextureSystem","constructor","renderer","managedTextures","_gpuSources","Object","create","_gpuSamplers","_bindGroupHash","_textureViewHash","_uploads","image","gpuUploadImageResource","buffer","video","gpuUploadVideoResource","compressed","_renderer","renderableGC","addManagedHash","contextChange","gpu","_gpu","initSource","source","autoGenerateMipmaps","mipLevelCount","Math","floor","log2","max","biggestDimension","pixelWidth","pixelHeight","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","uploadMethodId","RENDER_ATTACHMENT","COPY_SRC","blockData","blockDataMap","format","blockBytes","blockWidth","blockHeight","gpuTexture","device","createTexture","textureDescriptor","label","size","width","ceil","height","sampleCount","dimension","uid","includes","on","onSourceUpdate","onSourceResize","onSourceDestroy","onSourceUnload","onUpdateMipmaps","push","getGpuSource","upload","destroy","_mipmapGenerator","generateMipmap","off","splice","indexOf","_initSampler","sampler","_resourceId","createSampler","getGpuSampler","getTextureBindGroup","texture","_createTextureBindGroup","style","uTextureMatrix","type","value","textureMatrix","mapCoord","getTextureView","_createTextureView","createView","generateCanvas","commandEncoder","createCommandEncoder","canvas","DOMAdapter","get","createCanvas","context","getContext","configure","getNavigator","getPreferredCanvasFormat","alphaMode","copyTextureToTexture","origin","x","y","getCurrentTexture","queue","submit","finish","getPixels","webGPUCanvas","canvasAndContext","getOptimalCanvasAndContext","drawImage","imageData","getImageData","pixels","Uint8ClampedArray","data","returnCanvasAndContext","slice","forEach","k","keys","key","Number","bindGroup","extension","ExtensionType","WebGPUSystem","name"]
}
