{
"version":3,
"file":"module$node_modules$$pixi$filter_color_matrix$lib$ColorMatrixFilter.js",
"lineCount":118,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,GAAwF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE5HC,OAAOH,OAAA,CAAQ,0CAAR,CAFqH,EAE9FI,cAAcJ,OAAA,CAAQ,oEAAR,CAFgF;AAGhI,OAAMK,kBAAN,QAAgCF,KAAKG,CAAAA,MAArC;AACEC,eAAW,EAAG;AACZ,YAAMC,WAAW,CACfC,EAAG,IAAIC,YAAJ,CAAiB,CAClB,CADkB,EAElB,CAFkB,EAGlB,CAHkB,EAIlB,CAJkB,EAKlB,CALkB,EAMlB,CANkB,EAOlB,CAPkB,EAQlB,CARkB,EASlB,CATkB,EAUlB,CAVkB,EAWlB,CAXkB,EAYlB,CAZkB,EAalB,CAbkB,EAclB,CAdkB,EAelB,CAfkB,EAgBlB,CAhBkB,EAiBlB,CAjBkB,EAkBlB,CAlBkB,EAmBlB,CAnBkB,EAoBlB,CApBkB,CAAjB,CADY,EAuBfC,OAAQ,CAvBO,CAAjB;AAyBA,WAAA,CAAMR,IAAKS,CAAAA,mBAAX,EAAgCR,WAAYS,CAAAA,OAA5C,EAAqDL,QAArD,CAAA;AAAgE,UAAKM,CAAAA,KAAL,GAAa,CAAb;AA1BpD;AAkCdC,eAAW,CAACC,MAAD,EAASC,QAAA,GAAW,CAAA,CAApB,CAAwB;AACjC,UAAIC,YAAYF,MAAhB;AACAC,cAAA,KAAa,IAAKE,CAAAA,SAAL,CAAeD,SAAf,EAA0B,IAAKV,CAAAA,QAASC,CAAAA,CAAxC,EAA2CO,MAA3C,CAAA,EAAoDE,SAApD,GAAgE,IAAKE,CAAAA,YAAL,CAAkBF,SAAlB,CAA7E;AAA4G,UAAKV,CAAAA,QAASC,CAAAA,CAAd,GAAkBS,SAAlB;AAF3E;AAYnCC,aAAS,CAACE,GAAD,EAAMC,CAAN,EAASC,CAAT,CAAY;AACnB,aAAOF,GAAA,CAAI,CAAJ,CAAA,GAASC,CAAA,CAAE,CAAF,CAAT,GAAgBC,CAAA,CAAE,CAAF,CAAhB,GAAuBD,CAAA,CAAE,CAAF,CAAvB,GAA8BC,CAAA,CAAE,CAAF,CAA9B,GAAqCD,CAAA,CAAE,CAAF,CAArC,GAA4CC,CAAA,CAAE,EAAF,CAA5C,GAAoDD,CAAA,CAAE,CAAF,CAApD,GAA2DC,CAAA,CAAE,EAAF,CAA3D,EAAkEF,GAAA,CAAI,CAAJ,CAAlE,GAA2EC,CAAA,CAAE,CAAF,CAA3E,GAAkFC,CAAA,CAAE,CAAF,CAAlF,GAAyFD,CAAA,CAAE,CAAF,CAAzF,GAAgGC,CAAA,CAAE,CAAF,CAAhG,GAAuGD,CAAA,CAAE,CAAF,CAAvG,GAA8GC,CAAA,CAAE,EAAF,CAA9G,GAAsHD,CAAA,CAAE,CAAF,CAAtH,GAA6HC,CAAA,CAAE,EAAF,CAA7H,EAAoIF,GAAA,CAAI,CAAJ,CAApI,GAA6IC,CAAA,CAAE,CAAF,CAA7I,GAAoJC,CAAA,CAAE,CAAF,CAApJ,GAA2JD,CAAA,CAAE,CAAF,CAA3J,GAAkKC,CAAA,CAAE,CAAF,CAAlK,GAAyKD,CAAA,CAAE,CAAF,CAAzK,GAAgLC,CAAA,CAAE,EAAF,CAAhL,GAAwLD,CAAA,CAAE,CAAF,CAAxL,GAA+LC,CAAA,CAAE,EAAF,CAA/L,EAAsMF,GAAA,CAAI,CAAJ,CAAtM,GAA+MC,CAAA,CAAE,CAAF,CAA/M,GAAsNC,CAAA,CAAE,CAAF,CAAtN,GAA6ND,CAAA,CAAE,CAAF,CAA7N,GAAoOC,CAAA,CAAE,CAAF,CAApO,GAA2OD,CAAA,CAAE,CAAF,CAA3O,GAAkPC,CAAA,CAAE,EAAF,CAAlP,GAA0PD,CAAA,CAAE,CAAF,CAA1P,GAAiQC,CAAA,CAAE,EAAF,CAAjQ,EAAwQF,GAAA,CAAI,CAAJ,CAAxQ,GAAiRC,CAAA,CAAE,CAAF,CAAjR,GAAwRC,CAAA,CAAE,CAAF,CAAxR,GAA+RD,CAAA,CAAE,CAAF,CAA/R,GAAsSC,CAAA,CAAE,CAAF,CAAtS,GAA6SD,CAAA,CAAE,CAAF,CAA7S,GAAoTC,CAAA,CAAE,EAAF,CAApT,GAA4TD,CAAA,CAAE,CAAF,CAA5T,GAAmUC,CAAA,CAAE,EAAF,CAAnU,GAA2UD,CAAA,CAAE,CAAF,CAA3U,EAAiVD,GAAA,CAAI,CAAJ,CAAjV,GAA0VC,CAAA,CAAE,CAAF,CAA1V,GAAiWC,CAAA,CAAE,CAAF,CAAjW,GAAwWD,CAAA,CAAE,CAAF,CAAxW,GAA+WC,CAAA,CAAE,CAAF,CAA/W,GAAsXD,CAAA,CAAE,CAAF,CAAtX,GAA6XC,CAAA,CAAE,EAAF,CAA7X,GAAqYD,CAAA,CAAE,CAAF,CAArY,GAA4YC,CAAA,CAAE,EAAF,CAA5Y,EAAmZF,GAAA,CAAI,CAAJ,CAAnZ,GAA4ZC,CAAA,CAAE,CAAF,CAA5Z,GAAmaC,CAAA,CAAE,CAAF,CAAna,GAA0aD,CAAA,CAAE,CAAF,CAA1a,GAAibC,CAAA,CAAE,CAAF,CAAjb,GAAwbD,CAAA,CAAE,CAAF,CAAxb,GAA+bC,CAAA,CAAE,EAAF,CAA/b,GAAucD,CAAA,CAAE,CAAF,CAAvc,GAA8cC,CAAA,CAAE,EAAF,CAA9c,EAAqdF,GAAA,CAAI,CAAJ,CAArd,GAA8dC,CAAA,CAAE,CAAF,CAA9d,GAAqeC,CAAA,CAAE,CAAF,CAAre;AAA4eD,OAAA,CAAE,CAAF,CAA5e,GAAmfC,CAAA,CAAE,CAAF,CAAnf,GAA0fD,CAAA,CAAE,CAAF,CAA1f,GAAigBC,CAAA,CAAE,EAAF,CAAjgB,GAAygBD,CAAA,CAAE,CAAF,CAAzgB,GAAghBC,CAAA,CAAE,EAAF,CAAhhB,EAAuhBF,GAAA,CAAI,CAAJ,CAAvhB,GAAgiBC,CAAA,CAAE,CAAF,CAAhiB,GAAuiBC,CAAA,CAAE,CAAF,CAAviB,GAA8iBD,CAAA,CAAE,CAAF,CAA9iB,GAAqjBC,CAAA,CAAE,CAAF,CAArjB,GAA4jBD,CAAA,CAAE,CAAF,CAA5jB,GAAmkBC,CAAA,CAAE,EAAF,CAAnkB,GAA2kBD,CAAA,CAAE,CAAF,CAA3kB,GAAklBC,CAAA,CAAE,EAAF,CAAllB,EAAylBF,GAAA,CAAI,CAAJ,CAAzlB,GAAkmBC,CAAA,CAAE,CAAF,CAAlmB,GAAymBC,CAAA,CAAE,CAAF,CAAzmB,GAAgnBD,CAAA,CAAE,CAAF,CAAhnB,GAAunBC,CAAA,CAAE,CAAF,CAAvnB,GAA8nBD,CAAA,CAAE,CAAF,CAA9nB,GAAqoBC,CAAA,CAAE,EAAF,CAAroB,GAA6oBD,CAAA,CAAE,CAAF,CAA7oB,GAAopBC,CAAA,CAAE,EAAF,CAAppB,GAA4pBD,CAAA,CAAE,CAAF,CAA5pB,EAAkqBD,GAAA,CAAI,EAAJ,CAAlqB,GAA4qBC,CAAA,CAAE,EAAF,CAA5qB,GAAorBC,CAAA,CAAE,CAAF,CAAprB,GAA2rBD,CAAA,CAAE,EAAF,CAA3rB,GAAmsBC,CAAA,CAAE,CAAF,CAAnsB,GAA0sBD,CAAA,CAAE,EAAF,CAA1sB,GAAktBC,CAAA,CAAE,EAAF,CAAltB,GAA0tBD,CAAA,CAAE,EAAF,CAA1tB,GAAkuBC,CAAA,CAAE,EAAF,CAAluB,EAAyuBF,GAAA,CAAI,EAAJ,CAAzuB,GAAmvBC,CAAA,CAAE,EAAF,CAAnvB,GAA2vBC,CAAA,CAAE,CAAF,CAA3vB,GAAkwBD,CAAA,CAAE,EAAF,CAAlwB,GAA0wBC,CAAA,CAAE,CAAF,CAA1wB,GAAixBD,CAAA,CAAE,EAAF,CAAjxB,GAAyxBC,CAAA,CAAE,EAAF,CAAzxB,GAAiyBD,CAAA,CAAE,EAAF,CAAjyB,GAAyyBC,CAAA,CAAE,EAAF,CAAzyB,EAAgzBF,GAAA,CAAI,EAAJ,CAAhzB,GAA0zBC,CAAA,CAAE,EAAF,CAA1zB,GAAk0BC,CAAA,CAAE,CAAF,CAAl0B,GAAy0BD,CAAA,CAAE,EAAF,CAAz0B,GAAi1BC,CAAA,CAAE,CAAF,CAAj1B,GAAw1BD,CAAA,CAAE,EAAF,CAAx1B,GAAg2BC,CAAA,CAAE,EAAF,CAAh2B,GAAw2BD,CAAA,CAAE,EAAF,CAAx2B,GAAg3BC,CAAA,CAAE,EAAF,CAAh3B,EAAu3BF,GAAA,CAAI,EAAJ,CAAv3B,GAAi4BC,CAAA,CAAE,EAAF,CAAj4B,GAAy4BC,CAAA,CAAE,CAAF,CAAz4B,GAAg5BD,CAAA,CAAE,EAAF,CAAh5B,GAAw5BC,CAAA,CAAE,CAAF,CAAx5B,GAA+5BD,CAAA,CAAE,EAAF,CAA/5B,GAAu6BC,CAAA,CAAE,EAAF,CAAv6B,GAA+6BD,CAAA,CAAE,EAAF,CAA/6B,GAAu7BC,CAAA,CAAE,EAAF,CAAv7B,EAA87BF,GAAA,CAAI,EAAJ,CAA97B,GAAw8BC,CAAA,CAAE,EAAF,CAAx8B,GAAg9BC,CAAA,CAAE,CAAF,CAAh9B,GAAu9BD,CAAA,CAAE,EAAF,CAAv9B;AAA+9BC,OAAA,CAAE,CAAF,CAA/9B,GAAs+BD,CAAA,CAAE,EAAF,CAAt+B,GAA8+BC,CAAA,CAAE,EAAF,CAA9+B,GAAs/BD,CAAA,CAAE,EAAF,CAAt/B,GAA8/BC,CAAA,CAAE,EAAF,CAA9/B,GAAsgCD,CAAA,CAAE,EAAF,CAAtgC,EAA6gCD,GAAA,CAAI,EAAJ,CAA7gC,GAAuhCC,CAAA,CAAE,EAAF,CAAvhC,GAA+hCC,CAAA,CAAE,CAAF,CAA/hC,GAAsiCD,CAAA,CAAE,EAAF,CAAtiC,GAA8iCC,CAAA,CAAE,CAAF,CAA9iC,GAAqjCD,CAAA,CAAE,EAAF,CAArjC,GAA6jCC,CAAA,CAAE,EAAF,CAA7jC,GAAqkCD,CAAA,CAAE,EAAF,CAArkC,GAA6kCC,CAAA,CAAE,EAAF,CAA7kC,EAAolCF,GAAA,CAAI,EAAJ,CAAplC,GAA8lCC,CAAA,CAAE,EAAF,CAA9lC,GAAsmCC,CAAA,CAAE,CAAF,CAAtmC,GAA6mCD,CAAA,CAAE,EAAF,CAA7mC,GAAqnCC,CAAA,CAAE,CAAF,CAArnC,GAA4nCD,CAAA,CAAE,EAAF,CAA5nC,GAAooCC,CAAA,CAAE,EAAF,CAApoC,GAA4oCD,CAAA,CAAE,EAAF,CAA5oC,GAAopCC,CAAA,CAAE,EAAF,CAAppC,EAA2pCF,GAAA,CAAI,EAAJ,CAA3pC,GAAqqCC,CAAA,CAAE,EAAF,CAArqC,GAA6qCC,CAAA,CAAE,CAAF,CAA7qC,GAAorCD,CAAA,CAAE,EAAF,CAAprC,GAA4rCC,CAAA,CAAE,CAAF,CAA5rC,GAAmsCD,CAAA,CAAE,EAAF,CAAnsC,GAA2sCC,CAAA,CAAE,EAAF,CAA3sC,GAAmtCD,CAAA,CAAE,EAAF,CAAntC,GAA2tCC,CAAA,CAAE,EAAF,CAA3tC,EAAkuCF,GAAA,CAAI,EAAJ,CAAluC,GAA4uCC,CAAA,CAAE,EAAF,CAA5uC,GAAovCC,CAAA,CAAE,CAAF,CAApvC,GAA2vCD,CAAA,CAAE,EAAF,CAA3vC,GAAmwCC,CAAA,CAAE,CAAF,CAAnwC,GAA0wCD,CAAA,CAAE,EAAF,CAA1wC,GAAkxCC,CAAA,CAAE,EAAF,CAAlxC,GAA0xCD,CAAA,CAAE,EAAF,CAA1xC,GAAkyCC,CAAA,CAAE,EAAF,CAAlyC,EAAyyCF,GAAA,CAAI,EAAJ,CAAzyC,GAAmzCC,CAAA,CAAE,EAAF,CAAnzC,GAA2zCC,CAAA,CAAE,CAAF,CAA3zC,GAAk0CD,CAAA,CAAE,EAAF,CAAl0C,GAA00CC,CAAA,CAAE,CAAF,CAA10C,GAAi1CD,CAAA,CAAE,EAAF,CAAj1C,GAAy1CC,CAAA,CAAE,EAAF,CAAz1C,GAAi2CD,CAAA,CAAE,EAAF,CAAj2C,GAAy2CC,CAAA,CAAE,EAAF,CAAz2C,GAAi3CD,CAAA,CAAE,EAAF,CAAj3C,EAAw3CD,GAA/3C;AADmB;AAQrBD,gBAAY,CAACJ,MAAD,CAAS;AACbP,YAAAA,GAAI,IAAIC,YAAJ,CAAiBM,MAAjB,CAAJP;AACN,aAAOA,MAAA,CAAE,CAAF,CAAA,IAAQ,GAAR,EAAaA,MAAA,CAAE,CAAF,CAAb,IAAqB,GAArB,EAA0BA,MAAA,CAAE,EAAF,CAA1B,IAAmC,GAAnC,EAAwCA,MAAA,CAAE,EAAF,CAAxC,IAAiD,GAAjD,EAAsDA,MAA7D;AAFmB;AAUrBe,cAAU,CAACD,CAAD,EAAIN,QAAJ,CAAc;AAuBtB,UAAKF,CAAAA,WAAL,CAtBeC,CACbO,CADaP,EAEb,CAFaA,EAGb,CAHaA,EAIb,CAJaA,EAKb,CALaA,EAMb,CANaA,EAObO,CAPaP,EAQb,CARaA,EASb,CATaA,EAUb,CAVaA,EAWb,CAXaA,EAYb,CAZaA,EAabO,CAbaP,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBsB;AAiCxBQ,QAAI,CAACC,KAAD,EAAQT,QAAR,CAAkB;AAAA,YACd,CAACU,CAAD,EAAIC,CAAJ,EAAOL,CAAP,CAAA,GAAYpB,IAAK0B,CAAAA,KAAMC,CAAAA,MAAOC,CAAAA,QAAlB,CAA2BL,KAA3B,CAAkCM,CAAAA,OAAlC,EADE;AAuBpB,UAAKjB,CAAAA,WAAL,CAtBwEC,CACtEW,CADsEX,EAEtE,CAFsEA,EAGtE,CAHsEA,EAItE,CAJsEA,EAKtE,CALsEA,EAMtE,CANsEA,EAOtEY,CAPsEZ,EAQtE,CARsEA,EAStE,CATsEA,EAUtE,CAVsEA,EAWtE,CAXsEA,EAYtE,CAZsEA,EAatEO,CAbsEP,EActE,CAdsEA,EAetE,CAfsEA,EAgBtE,CAhBsEA,EAiBtE,CAjBsEA,EAkBtE,CAlBsEA,EAmBtE,CAnBsEA,EAoBtE,CApBsEA,CAsBxE,EAAyBC,QAAzB,CAAA;AAvBoB;AA+BtBgB,aAAS,CAACC,KAAD,EAAQjB,QAAR,CAAkB;AAuBzB,UAAKF,CAAAA,WAAL,CAtBeC,CACbkB,KADalB,EAEbkB,KAFalB,EAGbkB,KAHalB,EAIb,CAJaA,EAKb,CALaA,EAMbkB,KANalB,EAObkB,KAPalB,EAQbkB,KARalB,EASb,CATaA,EAUb,CAVaA,EAWbkB,KAXalB,EAYbkB,KAZalB,EAabkB,KAbalB,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvByB;AA8B3BkB,iBAAa,CAAClB,QAAD,CAAW;AAuBtB,UAAKF,CAAAA,WAAL,CAtBeC,CACb,GADaA,EAEb,GAFaA,EAGb,GAHaA,EAIb,CAJaA,EAKb,CALaA,EAMb,GANaA,EAOb,GAPaA,EAQb,GARaA,EASb,CATaA,EAUb,CAVaA,EAWb,GAXaA,EAYb,GAZaA,EAab,GAbaA,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBsB;AA+BxBmB,OAAG,CAACC,QAAD,EAAWpB,QAAX,CAAqB;AACtBoB,cAAA,IAAYA,QAAZ,IAAwB,CAAxB,IAA6B,GAA7B,GAAmCC,IAAKC,CAAAA,EAAxC;AADsB,YAEhBC,OAAOF,IAAKG,CAAAA,GAAL,CAASJ,QAAT,CAFS;AAEWK,cAAAA,GAAOJ,IAAKK,CAAAA,GAAL,CAASN,QAAT,CAAPK;AAFX,UAEsCE,OAAON,IAAKM,CAAAA,IAFlD;AAAA,YAEwDC,IAAI,CAAJA,GAAQ,CAFhE;AAEmEC,UAAAA,GAAOF,IAAA,CAAKC,CAAL,CAAPC;AAsBzF,UAAK/B,CAAAA,WAAL,CAtBiaC,CAAlTwB,IAAkTxB,IAA1S,CAA0SA,GAAtSwB,IAAsSxB,IAA9R6B,CAA8R7B,EAArR6B,CAAqR7B,IAAhR,CAAgRA,GAA5QwB,IAA4QxB,IAApQ8B,IAAoQ9B,GAA7P0B,QAA6P1B,EAAjP6B,CAAiP7B,IAA5O,CAA4OA,GAAxOwB,IAAwOxB,IAAhO8B,IAAgO9B,GAAzN0B,QAAyN1B,EAI/Z,CAJ+ZA,EAK/Z,CAL+ZA,EAA7M6B,CAA6M7B,IAAxM,CAAwMA,GAApMwB,IAAoMxB,IAA5L8B,IAA4L9B,GAArL0B,QAAqL1B,EAAzKwB,IAAyKxB,GAAlK6B,CAAkK7B,IAA7J,CAA6JA,GAAzJwB,IAAyJxB,GAA5I6B,CAA4I7B,IAAvI,CAAuIA,GAAnIwB,IAAmIxB,IAA3H8B,IAA2H9B,GAApH0B,QAAoH1B,EAS/Z,CAT+ZA,EAU/Z,CAV+ZA,EAAxG6B,CAAwG7B,IAAnG,CAAmGA,GAA/FwB,IAA+FxB,IAAvF8B,IAAuF9B,GAAhF0B,QAAgF1B,EAApE6B,CAAoE7B,IAA/D,CAA+DA,GAA3DwB,IAA2DxB,IAAnD8B,IAAmD9B,GAA5C0B,QAA4C1B,EAAhCwB,IAAgCxB,GAAzB6B,CAAyB7B,IAApB,CAAoBA,GAAhBwB,IAAgBxB,GAc/Z,CAd+ZA,EAe/Z,CAf+ZA,EAgB/Z,CAhB+ZA,EAiB/Z,CAjB+ZA,EAkB/Z,CAlB+ZA,EAmB/Z,CAnB+ZA,EAoB/Z,CApB+ZA,CAsBja,EAAyBC,QAAzB,CAAA;AAxBsB;AAkCxB8B,YAAQ,CAACC,MAAD,EAAS/B,QAAT,CAAmB;AACnBgC,YAAAA,IAAKD,MAALC,IAAe,CAAfA,IAAoB,CAApBA;AADmB,YACIC,IAAI,CAAC,GAALA,IAAYD,MAAZC,GAAgB,CAAhBA,CADJ;AAuBzB,UAAKnC,CAAAA,WAAL,CAtB0DC,CACxDiC,MADwDjC,EAExD,CAFwDA,EAGxD,CAHwDA,EAIxD,CAJwDA,EAKxDkC,CALwDlC,EAMxD,CANwDA,EAOxDiC,MAPwDjC,EAQxD,CARwDA,EASxD,CATwDA,EAUxDkC,CAVwDlC,EAWxD,CAXwDA,EAYxD,CAZwDA,EAaxDiC,MAbwDjC,EAcxD,CAdwDA,EAexDkC,CAfwDlC,EAgBxD,CAhBwDA,EAiBxD,CAjBwDA,EAkBxD,CAlBwDA,EAmBxD,CAnBwDA,EAoBxD,CApBwDA,CAsB1D,EAAyBC,QAAzB,CAAA;AAvByB;AAgC3BkC,YAAQ,CAACH,MAAA,GAAS,CAAV,EAAa/B,QAAb,CAAuB;AACvBmC,YAAAA,GAAa,CAAbA,GAAIJ,MAAJI,GAAiB,CAAjBA,GAAqB,CAArBA;AADuB,YACCC,IAAc,CAAC,GAAfA,IAAKD,MAALC,GAAS,CAATA,CADD;AAuB7B,UAAKtC,CAAAA,WAAL,CAtB2DC,CACzDoC,MADyDpC,EAEzDqC,CAFyDrC,EAGzDqC,CAHyDrC,EAIzD,CAJyDA,EAKzD,CALyDA,EAMzDqC,CANyDrC,EAOzDoC,MAPyDpC,EAQzDqC,CARyDrC,EASzD,CATyDA,EAUzD,CAVyDA,EAWzDqC,CAXyDrC,EAYzDqC,CAZyDrC,EAazDoC,MAbyDpC,EAczD,CAdyDA,EAezD,CAfyDA,EAgBzD,CAhByDA,EAiBzD,CAjByDA,EAkBzD,CAlByDA,EAmBzD,CAnByDA,EAoBzD,CApByDA,CAsB3D,EAAyBC,QAAzB,CAAA;AAvB6B;AA0B/BqC,cAAU,EAAG;AACX,UAAKH,CAAAA,QAAL,CAAc,CAAC,CAAf,CAAA;AADW;AAQbI,YAAQ,CAACtC,QAAD,CAAW;AAuBjB,UAAKF,CAAAA,WAAL,CAtBeC,CACb,CAAC,CADYA,EAEb,CAFaA,EAGb,CAHaA,EAIb,CAJaA,EAKb,CALaA,EAMb,CANaA,EAOb,CAAC,CAPYA,EAQb,CARaA,EASb,CATaA,EAUb,CAVaA,EAWb,CAXaA,EAYb,CAZaA,EAab,CAAC,CAbYA,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBiB;AA8BnBuC,SAAK,CAACvC,QAAD,CAAW;AAuBd,UAAKF,CAAAA,WAAL,CAtBeC,CACb,KADaA,EAEb,SAFaA,EAGb,UAHaA,EAIb,CAJaA,EAKb,CALaA,EAMb,KANaA,EAOb,SAPaA,EAQb,UARaA,EASb,CATaA,EAUb,CAVaA,EAWb,KAXaA,EAYb,SAZaA,EAab,UAbaA,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBc;AA8BhBwC,eAAW,CAACxC,QAAD,CAAW;AAuBpB,UAAKF,CAAAA,WAAL,CAtBeC,CACb,kBADaA,EAEb,CAAC,kBAFYA,EAGb,CAAC,mBAHYA,EAIb,CAJaA,EAKb,kBALaA,EAMb,CAAC,kBANYA,EAOb,kBAPaA,EAQb,CAAC,mBARYA,EASb,CATaA,EAUb,CAAC,iBAVYA,EAWb,CAAC,iBAXYA,EAYb,CAAC,kBAZYA,EAab,iBAbaA,EAcb,CAdaA,EAeb,kBAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBoB;AA8BtByC,YAAQ,CAACzC,QAAD,CAAW;AAuBjB,UAAKF,CAAAA,WAAL,CAtBeC,CACb,KADaA,EAEb,CAAC,KAFYA,EAGb,CAAC,KAHYA,EAIb,CAJaA,EAKb,CALaA,EAMb,CAAC,KANYA,EAOb,KAPaA,EAQb,CAAC,KARYA,EASb,CATaA,EAUb,CAVaA,EAWb,CAAC,KAXYA,EAYb,CAAC,KAZYA,EAab,KAbaA,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBiB;AA8BnB0C,SAAK,CAAC1C,QAAD,CAAW;AAuBd,UAAKF,CAAAA,WAAL,CAtBeC,CACb,CADaA,EAEb,CAFaA,EAGb,CAHaA,EAIb,CAJaA,EAKb,CALaA,EAMb,CANaA,EAOb,CAPaA,EAQb,CARaA,EASb,CATaA,EAUb,CAVaA,EAWb,CAXaA,EAYb,CAZaA,EAab,CAbaA,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBc;AA8BhB2C,cAAU,CAAC3C,QAAD,CAAW;AAuBnB,UAAKF,CAAAA,WAAL,CAtBeC,CACb,kBADaA,EAEb,CAAC,kBAFYA,EAGb,CAAC,mBAHYA,EAIb,CAJaA,EAKb,iBALaA,EAMb,CAAC,mBANYA,EAOb,kBAPaA,EAQb,CAAC,mBARYA,EASb,CATaA,EAUb,kBAVaA,EAWb,CAAC,mBAXYA,EAYb,CAAC,kBAZYA,EAab,kBAbaA,EAcb,CAdaA,EAeb,iBAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBmB;AA8BrB4C,UAAM,CAAC5C,QAAD,CAAW;AAuBf,UAAKF,CAAAA,WAAL,CAtBeC,CACb,kBADaA,EAEb,mBAFaA,EAGb,CAAC,kBAHYA,EAIb,CAJaA,EAKb,iBALaA,EAMb,CAAC,oBANYA,EAOb,kBAPaA,EAQb,mBARaA,EASb,CATaA,EAUb,CAAC,iBAVYA,EAWb,mBAXaA,EAYb,CAAC,mBAZYA,EAab,mBAbaA,EAcb,CAdaA,EAeb,CAAC,iBAfYA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBe;AA8BjB6C,WAAO,CAAC7C,QAAD,CAAW;AAuBhB,UAAKF,CAAAA,WAAL,CAtBeC,CACb,kBADaA,EAEb,kBAFaA,EAGb,CAAC,mBAHYA,EAIb,CAJaA,EAKb,iBALaA,EAMb,mBANaA,EAOb,kBAPaA,EAQb,mBARaA,EASb,CATaA,EAUb,iBAVaA,EAWb,kBAXaA,EAYb,CAAC,kBAZYA,EAab,kBAbaA,EAcb,CAdaA,EAeb,iBAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBgB;AAkClB8C,aAAS,CAACC,YAAD,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6ClD,QAA7C,CAAuD;AAC9D+C,kBAAA,GAAeA,YAAf,IAA+B,GAA/B;AAAoCC,WAAA,GAAQA,KAAR,IAAiB,IAAjB;AAA4DE,eAAA,GAAYA,SAAZ,IAAyB,OAAzB;AADlC,YAExDC,OAAOjE,IAAK0B,CAAAA,KAAMC,CAAAA,MAFsC,EAE9B,CAACuC,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAA,GAAeH,IAAKrC,CAAAA,QAAL,CADyBmC,UACzB,IADuC,QACvC,CAA0BlC,CAAAA,OAA1B,EAFe,EAEsB,CAACwC,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAA,GAAeN,IAAKrC,CAAAA,QAAL,CAAcoC,SAAd,CAAyBnC,CAAAA,OAAzB,EAFrC;AAwB9D,UAAKjB,CAAAA,WAAL,CAtBgJC,CAC9I,GAD8IA,EAE9I,IAF8IA,EAG9I,IAH8IA,EAI9I,CAJ8IA,EAK9I,CAL8IA,EAM9IqD,EAN8IrD,EAO9IsD,EAP8ItD,EAQ9IuD,EAR8IvD,EAS9IgD,YAT8IhD,EAU9I,CAV8IA,EAW9IwD,EAX8IxD,EAY9IyD,EAZ8IzD,EAa9I0D,EAb8I1D,EAc9IiD,KAd8IjD,EAe9I,CAf8IA,EAgB9IqD,EAhB8IrD,GAgBzIwD,EAhByIxD,EAiB9IsD,EAjB8ItD,GAiBzIyD,EAjByIzD,EAkB9IuD,EAlB8IvD,GAkBzI0D,EAlByI1D,EAmB9I,CAnB8IA,EAoB9I,CApB8IA,CAsBhJ,EAAyBC,QAAzB,CAAA;AAxB8D;AAgChE0D,SAAK,CAACC,SAAD,EAAY3D,QAAZ,CAAsB;AACzB2D,eAAA,GAAYA,SAAZ,IAAyB,GAAzB;AAuBA,UAAK7D,CAAAA,WAAL,CAtBeC,CACD,CAAC,CADAA,GACb4D,SADa5D,EAEb,CAAC4D,SAFY5D,EAGb,CAHaA,EAIb,CAJaA,EAKb,CALaA,EAMb,CAAC4D,SANY5D,EAOb,CAPaA,EAQb4D,SARa5D,EASb,CATaA,EAUb,CAVaA,EAWb,CAXaA,EAYb4D,SAZa5D,EAaD,CAbCA,GAab4D,SAba5D,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAxByB;AAkC3B4D,YAAQ,CAAC7B,MAAD,EAAS/B,QAAT,CAAmB;AA2BzB,UAAKF,CAAAA,WAAL,CA1BeC,CAEb,kBAFaA,GAEQgC,MAFRhC,EAGb,CAAC,iBAHYA,GAGQgC,MAHRhC,EAIb,CAAC,kBAJYA,GAISgC,MAJThC,EAKb,CALaA,GAKTgC,MALShC,EAMb,mBANaA,GAMSgC,MANThC,EAQb,CAAC,kBARYA,GAQSgC,MARThC,EASb,iBATaA,GASOgC,MATPhC,EAUb,CAAC,iBAVYA,GAUQgC,MAVRhC,EAWb,CAXaA,GAWTgC,MAXShC,EAYb,CAAC,iBAZYA,GAYQgC,MAZRhC,EAcb,CAAC,kBAdYA,GAcSgC,MAdThC,EAeb,CAAC,kBAfYA,GAeSgC,MAfThC,EAgBb,iBAhBaA,GAgBOgC,MAhBPhC,EAiBb,CAjBaA,GAiBTgC,MAjBShC,EAkBb,kBAlBaA,GAkBQgC,MAlBRhC,EAoBb,CApBaA,EAqBb,CArBaA,EAsBb,CAtBaA,EAuBb,CAvBaA,EAwBb,CAxBaA,CA0Bf,EAAyBC,QAAzB,CAAA;AA3ByB;AAoC3B6D,OAAG,CAAC7D,QAAD,CAAW;AAuBZ,UAAKF,CAAAA,WAAL,CAtBeC,CACb,CADaA,EAEb,CAAC,GAFYA,EAGb,GAHaA,EAIb,CAJaA,EAKb,CALaA,EAMb,CAAC,GANYA,EAOb,CAPaA,EAQb,CAAC,GARYA,EASb,CATaA,EAUb,CAVaA,EAWb,CAAC,GAXYA,EAYb,CAAC,GAZYA,EAab,CAbaA,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyBC,QAAzB,CAAA;AAvBY;AA0Bd8D,SAAK,EAAG;AAuBN,UAAKhE,CAAAA,WAAL,CAtBeC,CACb,CADaA,EAEb,CAFaA,EAGb,CAHaA,EAIb,CAJaA,EAKb,CALaA,EAMb,CANaA,EAOb,CAPaA,EAQb,CARaA,EASb,CATaA,EAUb,CAVaA,EAWb,CAXaA,EAYb,CAZaA,EAab,CAbaA,EAcb,CAdaA,EAeb,CAfaA,EAgBb,CAhBaA,EAiBb,CAjBaA,EAkBb,CAlBaA,EAmBb,CAnBaA,EAoBb,CApBaA,CAsBf,EAAyB,CAAA,CAAzB,CAAA;AAvBM;AA8BJ,cAAS,EAAA;AACX,aAAO,IAAKR,CAAAA,QAASC,CAAAA,CAArB;AADW;AAGT,cAAM,CAACuE,KAAD,CAAQ;AAChB,UAAKxE,CAAAA,QAASC,CAAAA,CAAd,GAAkBuE,KAAlB;AADgB;AAWd,aAAQ,EAAA;AACV,aAAO,IAAKxE,CAAAA,QAASG,CAAAA,MAArB;AADU;AAGR,aAAK,CAACqE,KAAD,CAAQ;AACf,UAAKxE,CAAAA,QAASG,CAAAA,MAAd,GAAuBqE,KAAvB;AADe;AArsBnB;AAysBA3E,mBAAkB4E,CAAAA,SAAUC,CAAAA,SAA5B,GAAwC7E,iBAAkB4E,CAAAA,SAAUhD,CAAAA,SAApE;AACA/B,SAAQG,CAAAA,iBAAR,GAA4BA,iBAA5B;AA7sBgI,CAAhI;;",
"sources":["node_modules/@pixi/filter-color-matrix/lib/ColorMatrixFilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$filter_color_matrix$lib$ColorMatrixFilter\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), colorMatrix = require(\"./colorMatrix.frag.js\");\nclass ColorMatrixFilter extends core.Filter {\n  constructor() {\n    const uniforms = {\n      m: new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0\n      ]),\n      uAlpha: 1\n    };\n    super(core.defaultFilterVertex, colorMatrix.default, uniforms), this.alpha = 1;\n  }\n  /**\n   * Transforms current matrix and set the new one\n   * @param {number[]} matrix - 5x4 matrix\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  _loadMatrix(matrix, multiply = !1) {\n    let newMatrix = matrix;\n    multiply && (this._multiply(newMatrix, this.uniforms.m, matrix), newMatrix = this._colorMatrix(newMatrix)), this.uniforms.m = newMatrix;\n  }\n  /**\n   * Multiplies two mat5's\n   * @private\n   * @param out - 5x4 matrix the receiving matrix\n   * @param a - 5x4 matrix the first operand\n   * @param b - 5x4 matrix the second operand\n   * @returns {number[]} 5x4 matrix\n   */\n  _multiply(out, a, b) {\n    return out[0] = a[0] * b[0] + a[1] * b[5] + a[2] * b[10] + a[3] * b[15], out[1] = a[0] * b[1] + a[1] * b[6] + a[2] * b[11] + a[3] * b[16], out[2] = a[0] * b[2] + a[1] * b[7] + a[2] * b[12] + a[3] * b[17], out[3] = a[0] * b[3] + a[1] * b[8] + a[2] * b[13] + a[3] * b[18], out[4] = a[0] * b[4] + a[1] * b[9] + a[2] * b[14] + a[3] * b[19] + a[4], out[5] = a[5] * b[0] + a[6] * b[5] + a[7] * b[10] + a[8] * b[15], out[6] = a[5] * b[1] + a[6] * b[6] + a[7] * b[11] + a[8] * b[16], out[7] = a[5] * b[2] + a[6] * b[7] + a[7] * b[12] + a[8] * b[17], out[8] = a[5] * b[3] + a[6] * b[8] + a[7] * b[13] + a[8] * b[18], out[9] = a[5] * b[4] + a[6] * b[9] + a[7] * b[14] + a[8] * b[19] + a[9], out[10] = a[10] * b[0] + a[11] * b[5] + a[12] * b[10] + a[13] * b[15], out[11] = a[10] * b[1] + a[11] * b[6] + a[12] * b[11] + a[13] * b[16], out[12] = a[10] * b[2] + a[11] * b[7] + a[12] * b[12] + a[13] * b[17], out[13] = a[10] * b[3] + a[11] * b[8] + a[12] * b[13] + a[13] * b[18], out[14] = a[10] * b[4] + a[11] * b[9] + a[12] * b[14] + a[13] * b[19] + a[14], out[15] = a[15] * b[0] + a[16] * b[5] + a[17] * b[10] + a[18] * b[15], out[16] = a[15] * b[1] + a[16] * b[6] + a[17] * b[11] + a[18] * b[16], out[17] = a[15] * b[2] + a[16] * b[7] + a[17] * b[12] + a[18] * b[17], out[18] = a[15] * b[3] + a[16] * b[8] + a[17] * b[13] + a[18] * b[18], out[19] = a[15] * b[4] + a[16] * b[9] + a[17] * b[14] + a[18] * b[19] + a[19], out;\n  }\n  /**\n   * Create a Float32 Array and normalize the offset component to 0-1\n   * @param {number[]} matrix - 5x4 matrix\n   * @returns {number[]} 5x4 matrix with all values between 0-1\n   */\n  _colorMatrix(matrix) {\n    const m = new Float32Array(matrix);\n    return m[4] /= 255, m[9] /= 255, m[14] /= 255, m[19] /= 255, m;\n  }\n  /**\n   * Adjusts brightness\n   * @param b - value of the brigthness (0-1, where 0 is black)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  brightness(b, multiply) {\n    const matrix = [\n      b,\n      0,\n      0,\n      0,\n      0,\n      0,\n      b,\n      0,\n      0,\n      0,\n      0,\n      0,\n      b,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Sets each channel on the diagonal of the color matrix.\n   * This can be used to achieve a tinting effect on Containers similar to the tint field of some\n   * display objects like Sprite, Text, Graphics, and Mesh.\n   * @param color - Color of the tint. This is a hex value.\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  tint(color, multiply) {\n    const [r, g, b] = core.Color.shared.setValue(color).toArray(), matrix = [\n      r,\n      0,\n      0,\n      0,\n      0,\n      0,\n      g,\n      0,\n      0,\n      0,\n      0,\n      0,\n      b,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the matrices in grey scales\n   * @param scale - value of the grey (0-1, where 0 is black)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  greyscale(scale, multiply) {\n    const matrix = [\n      scale,\n      scale,\n      scale,\n      0,\n      0,\n      scale,\n      scale,\n      scale,\n      0,\n      0,\n      scale,\n      scale,\n      scale,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the black and white matrice.\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  blackAndWhite(multiply) {\n    const matrix = [\n      0.3,\n      0.6,\n      0.1,\n      0,\n      0,\n      0.3,\n      0.6,\n      0.1,\n      0,\n      0,\n      0.3,\n      0.6,\n      0.1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the hue property of the color\n   * @param rotation - in degrees\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  hue(rotation, multiply) {\n    rotation = (rotation || 0) / 180 * Math.PI;\n    const cosR = Math.cos(rotation), sinR = Math.sin(rotation), sqrt = Math.sqrt, w = 1 / 3, sqrW = sqrt(w), a00 = cosR + (1 - cosR) * w, a01 = w * (1 - cosR) - sqrW * sinR, a02 = w * (1 - cosR) + sqrW * sinR, a10 = w * (1 - cosR) + sqrW * sinR, a11 = cosR + w * (1 - cosR), a12 = w * (1 - cosR) - sqrW * sinR, a20 = w * (1 - cosR) - sqrW * sinR, a21 = w * (1 - cosR) + sqrW * sinR, a22 = cosR + w * (1 - cosR), matrix = [\n      a00,\n      a01,\n      a02,\n      0,\n      0,\n      a10,\n      a11,\n      a12,\n      0,\n      0,\n      a20,\n      a21,\n      a22,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the contrast matrix, increase the separation between dark and bright\n   * Increase contrast : shadows darker and highlights brighter\n   * Decrease contrast : bring the shadows up and the highlights down\n   * @param amount - value of the contrast (0-1)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  contrast(amount, multiply) {\n    const v = (amount || 0) + 1, o = -0.5 * (v - 1), matrix = [\n      v,\n      0,\n      0,\n      0,\n      o,\n      0,\n      v,\n      0,\n      0,\n      o,\n      0,\n      0,\n      v,\n      0,\n      o,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Set the saturation matrix, increase the separation between colors\n   * Increase saturation : increase contrast, brightness, and sharpness\n   * @param amount - The saturation amount (0-1)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  saturate(amount = 0, multiply) {\n    const x = amount * 2 / 3 + 1, y = (x - 1) * -0.5, matrix = [\n      x,\n      y,\n      y,\n      0,\n      0,\n      y,\n      x,\n      y,\n      0,\n      0,\n      y,\n      y,\n      x,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /** Desaturate image (remove color) Call the saturate function */\n  desaturate() {\n    this.saturate(-1);\n  }\n  /**\n   * Negative image (inverse of classic rgb matrix)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  negative(multiply) {\n    const matrix = [\n      -1,\n      0,\n      0,\n      1,\n      0,\n      0,\n      -1,\n      0,\n      1,\n      0,\n      0,\n      0,\n      -1,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Sepia image\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  sepia(multiply) {\n    const matrix = [\n      0.393,\n      0.7689999,\n      0.18899999,\n      0,\n      0,\n      0.349,\n      0.6859999,\n      0.16799999,\n      0,\n      0,\n      0.272,\n      0.5339999,\n      0.13099999,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  technicolor(multiply) {\n    const matrix = [\n      1.9125277891456083,\n      -0.8545344976951645,\n      -0.09155508482755585,\n      0,\n      11.793603434377337,\n      -0.3087833385928097,\n      1.7658908555458428,\n      -0.10601743074722245,\n      0,\n      -70.35205161461398,\n      -0.231103377548616,\n      -0.7501899197440212,\n      1.847597816108189,\n      0,\n      30.950940869491138,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Polaroid filter\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  polaroid(multiply) {\n    const matrix = [\n      1.438,\n      -0.062,\n      -0.062,\n      0,\n      0,\n      -0.122,\n      1.378,\n      -0.122,\n      0,\n      0,\n      -0.016,\n      -0.016,\n      1.483,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Filter who transforms : Red -> Blue and Blue -> Red\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  toBGR(multiply) {\n    const matrix = [\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  kodachrome(multiply) {\n    const matrix = [\n      1.1285582396593525,\n      -0.3967382283601348,\n      -0.03992559172921793,\n      0,\n      63.72958762196502,\n      -0.16404339962244616,\n      1.0835251566291304,\n      -0.05498805115633132,\n      0,\n      24.732407896706203,\n      -0.16786010706155763,\n      -0.5603416277695248,\n      1.6014850761964943,\n      0,\n      35.62982807460946,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Brown delicious browni filter (thanks Dominic Szablewski)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  browni(multiply) {\n    const matrix = [\n      0.5997023498159715,\n      0.34553243048391263,\n      -0.2708298674538042,\n      0,\n      47.43192855600873,\n      -0.037703249837783157,\n      0.8609577587992641,\n      0.15059552388459913,\n      0,\n      -36.96841498319127,\n      0.24113635128153335,\n      -0.07441037908422492,\n      0.44972182064877153,\n      0,\n      -7.562075277591283,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Vintage filter (thanks Dominic Szablewski)\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  vintage(multiply) {\n    const matrix = [\n      0.6279345635605994,\n      0.3202183420819367,\n      -0.03965408211312453,\n      0,\n      9.651285835294123,\n      0.02578397704808868,\n      0.6441188644374771,\n      0.03259127616149294,\n      0,\n      7.462829176470591,\n      0.0466055556782719,\n      -0.0851232987247891,\n      0.5241648018700465,\n      0,\n      5.159190588235296,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * We don't know exactly what it does, kind of gradient map, but funny to play with!\n   * @param desaturation - Tone values.\n   * @param toned - Tone values.\n   * @param lightColor - Tone values, example: `0xFFE580`\n   * @param darkColor - Tone values, example: `0xFFE580`\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  colorTone(desaturation, toned, lightColor, darkColor, multiply) {\n    desaturation = desaturation || 0.2, toned = toned || 0.15, lightColor = lightColor || 16770432, darkColor = darkColor || 3375104;\n    const temp = core.Color.shared, [lR, lG, lB] = temp.setValue(lightColor).toArray(), [dR, dG, dB] = temp.setValue(darkColor).toArray(), matrix = [\n      0.3,\n      0.59,\n      0.11,\n      0,\n      0,\n      lR,\n      lG,\n      lB,\n      desaturation,\n      0,\n      dR,\n      dG,\n      dB,\n      toned,\n      0,\n      lR - dR,\n      lG - dG,\n      lB - dB,\n      0,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Night effect\n   * @param intensity - The intensity of the night effect.\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  night(intensity, multiply) {\n    intensity = intensity || 0.1;\n    const matrix = [\n      intensity * -2,\n      -intensity,\n      0,\n      0,\n      0,\n      -intensity,\n      0,\n      intensity,\n      0,\n      0,\n      0,\n      intensity,\n      intensity * 2,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * Predator effect\n   *\n   * Erase the current matrix by setting a new indepent one\n   * @param amount - how much the predator feels his future victim\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  predator(amount, multiply) {\n    const matrix = [\n      // row 1\n      11.224130630493164 * amount,\n      -4.794486999511719 * amount,\n      -2.8746118545532227 * amount,\n      0 * amount,\n      0.40342438220977783 * amount,\n      // row 2\n      -3.6330697536468506 * amount,\n      9.193157196044922 * amount,\n      -2.951810836791992 * amount,\n      0 * amount,\n      -1.316135048866272 * amount,\n      // row 3\n      -3.2184197902679443 * amount,\n      -4.2375030517578125 * amount,\n      7.476448059082031 * amount,\n      0 * amount,\n      0.8044459223747253 * amount,\n      // row 4\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /**\n   * LSD effect\n   *\n   * Multiply the current matrix\n   * @param multiply - if true, current matrix and matrix are multiplied. If false,\n   *  just set the current matrix with @param matrix\n   */\n  lsd(multiply) {\n    const matrix = [\n      2,\n      -0.4,\n      0.5,\n      0,\n      0,\n      -0.5,\n      2,\n      -0.4,\n      0,\n      0,\n      -0.4,\n      -0.5,\n      3,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, multiply);\n  }\n  /** Erase the current matrix by setting the default one. */\n  reset() {\n    const matrix = [\n      1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0\n    ];\n    this._loadMatrix(matrix, !1);\n  }\n  /**\n   * The matrix of the color matrix filter\n   * @member {number[]}\n   * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n   */\n  get matrix() {\n    return this.uniforms.m;\n  }\n  set matrix(value) {\n    this.uniforms.m = value;\n  }\n  /**\n   * The opacity value to use when mixing the original and resultant colors.\n   *\n   * When the value is 0, the original color is used without modification.\n   * When the value is 1, the result color is used.\n   * When in the range (0, 1) the color is interpolated between the original and result by this amount.\n   * @default 1\n   */\n  get alpha() {\n    return this.uniforms.uAlpha;\n  }\n  set alpha(value) {\n    this.uniforms.uAlpha = value;\n  }\n}\nColorMatrixFilter.prototype.grayscale = ColorMatrixFilter.prototype.greyscale;\nexports.ColorMatrixFilter = ColorMatrixFilter;\n//# sourceMappingURL=ColorMatrixFilter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","colorMatrix","ColorMatrixFilter","Filter","constructor","uniforms","m","Float32Array","uAlpha","defaultFilterVertex","default","alpha","_loadMatrix","matrix","multiply","newMatrix","_multiply","_colorMatrix","out","a","b","brightness","tint","color","r","g","Color","shared","setValue","toArray","greyscale","scale","blackAndWhite","hue","rotation","Math","PI","cosR","cos","sinR","sin","sqrt","w","sqrW","contrast","amount","v","o","saturate","x","y","desaturate","negative","sepia","technicolor","polaroid","toBGR","kodachrome","browni","vintage","colorTone","desaturation","toned","lightColor","darkColor","temp","lR","lG","lB","dR","dG","dB","night","intensity","predator","lsd","reset","value","prototype","grayscale"]
}
