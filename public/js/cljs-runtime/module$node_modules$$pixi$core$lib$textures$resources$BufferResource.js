shadow$provide.module$node_modules$$pixi$core$lib$textures$resources$BufferResource = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index");
  global = require("module$node_modules$$pixi$core$lib$textures$resources$Resource");
  class BufferResource extends global.Resource {
    constructor(source, options) {
      const {width, height} = options || {};
      if (!width || !height) {
        throw Error("BufferResource width or height invalid");
      }
      super(width, height);
      this.data = source;
      this.unpackAlignment = options.unpackAlignment ?? 4;
    }
    upload(renderer, baseTexture, glTexture) {
      renderer = renderer.gl;
      renderer.pixelStorei(renderer.UNPACK_ALIGNMENT, this.unpackAlignment);
      renderer.pixelStorei(renderer.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === constants.ALPHA_MODES.UNPACK);
      const width = baseTexture.realWidth, height = baseTexture.realHeight;
      return glTexture.width === width && glTexture.height === height ? renderer.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data) : (glTexture.width = width, glTexture.height = height, renderer.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data)), !0;
    }
    dispose() {
      this.data = null;
    }
    static test(source) {
      return null === source || source instanceof Int8Array || source instanceof Uint8Array || source instanceof Uint8ClampedArray || source instanceof Int16Array || source instanceof Uint16Array || source instanceof Int32Array || source instanceof Uint32Array || source instanceof Float32Array;
    }
  }
  exports.BufferResource = BufferResource;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$textures$resources$BufferResource.js.map
