{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$loaders$resolveCompressedTextureUrl.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,qFAAA,GAA0G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAElJ,MAAIC,OAAOH,OAAA,CAAQ,0CAAR,CAAX;AAFkJ,QAG5II,eAAe,6CAAA,CAAA,KAAA,CAAA,GAAA,CAH6H;AAGvDC,QAAAA,GAA8B,CACvHC,UAAWH,IAAKI,CAAAA,aAAcC,CAAAA,aADyF,EAEvHC,KAAOC,KAADD,IAAW;AACTH,SAAAA,GAAYH,IAAKQ,CAAAA,KAAMC,CAAAA,IAAKC,CAAAA,OAAhB,CAAwBH,KAAxB,CAA+BI,CAAAA,KAA/B,CAAqC,CAArC,CAAZR;AACN,WAAO,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAAwBS,CAAAA,QAAxB,CAAiCT,KAAjC,CAAP;AAFe,GAFsG,EAMvHU,MAAQN,KAADM,IAAW;AAAA,QACVC,QAAQP,KAAMQ,CAAAA,KAAN,CAAY,GAAZ,CADE;AAChB,UAAgCZ,YAAYW,KAAME,CAAAA,GAAN,EAA5C;AACA,WAAI,CAAC,KAAD,EAAQ,KAAR,CAAeJ,CAAAA,QAAf,CAAwBT,SAAxB,CAAJ,KACQc,KACF,GADkBH,KAAME,CAAAA,GAAN,EAClB,EAAAf,YAAaW,CAAAA,QAAb,CAAsBK,KAAtB,CAFN,IAGW,CACLC,WAAYC,UAAA,CAAWnB,IAAKoB,CAAAA,QAASC,CAAAA,aAAcC,CAAAA,IAA5B,CAAiCf,KAAjC,CAAA,GAA0C,CAA1C,CAAX,IAA2D,GAA3D,CADP,EAELgB,OAAQN,KAFH,EAGLO,IAAKjB,KAHA,CAHX,GASO,CACLW,WAAYC,UAAA,CAAWnB,IAAKoB,CAAAA,QAASC,CAAAA,aAAcC,CAAAA,IAA5B,CAAiCf,KAAjC,CAAA,GAA0C,CAA1C,CAAX,IAA2D,GAA3D,CADP,EAELgB,OAAQpB,SAFH,EAGLqB,IAAKjB,KAHA,CATP;AAFgB,GANqG,CAA9BL;AAwB3FF,MAAKyB,CAAAA,UAAWC,CAAAA,GAAhB,CAAoBxB,MAApB,CAAA;AACAH,SAAQG,CAAAA,2BAAR,GAAsCA,MAAtC;AA5BkJ,CAAlJ;;",
"sources":["node_modules/@pixi/compressed-textures/lib/loaders/resolveCompressedTextureUrl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$loaders$resolveCompressedTextureUrl\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nconst knownFormats = [\"s3tc\", \"s3tc_sRGB\", \"etc\", \"etc1\", \"pvrtc\", \"atc\", \"astc\", \"bptc\"], resolveCompressedTextureUrl = {\n  extension: core.ExtensionType.ResolveParser,\n  test: (value) => {\n    const extension = core.utils.path.extname(value).slice(1);\n    return [\"basis\", \"ktx\", \"dds\"].includes(extension);\n  },\n  parse: (value) => {\n    const parts = value.split(\".\"), extension = parts.pop();\n    if ([\"ktx\", \"dds\"].includes(extension)) {\n      const textureFormat = parts.pop();\n      if (knownFormats.includes(textureFormat))\n        return {\n          resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n          format: textureFormat,\n          src: value\n        };\n    }\n    return {\n      resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n      format: extension,\n      src: value\n    };\n  }\n};\ncore.extensions.add(resolveCompressedTextureUrl);\nexports.resolveCompressedTextureUrl = resolveCompressedTextureUrl;\n//# sourceMappingURL=resolveCompressedTextureUrl.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","knownFormats","resolveCompressedTextureUrl","extension","ExtensionType","ResolveParser","test","value","utils","path","extname","slice","includes","parse","parts","split","pop","textureFormat","resolution","parseFloat","settings","RETINA_PREFIX","exec","format","src","extensions","add"]
}
