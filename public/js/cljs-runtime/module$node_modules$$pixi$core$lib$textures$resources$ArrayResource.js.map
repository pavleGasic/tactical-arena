{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$ArrayResource.js",
"lineCount":37,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,GAAwF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE5HC,YAAYH,OAAA,CAAQ,+CAAR,CAFgH;AAEpFI,QAAAA,GAAwBJ,OAAA,CAAQ,6EAAR,CAAxBI;AAC5C,OAAMC,cAAN,QAA4BD,OAAsBA,CAAAA,qBAAlD;AAQEE,eAAW,CAACC,MAAD,EAASC,OAAT,CAAkB;AAC3B,YAAM,CAAEC,KAAF,EAASC,MAAT,CAAA,GAAoBF,OAApB,IAA+B,EAArC;AAD2B,UAEvBG,IAFuB,EAEjBC,MAFiB;AAG3BC,WAAMC,CAAAA,OAAN,CAAcP,MAAd,CAAA,IAAyBI,IAAA,GAAOJ,MAAP,EAAeK,MAAf,GAAwBL,MAAOK,CAAAA,MAAxD,IAAkEA,MAAlE,GAA2EL,MAA3E;AAAmF,WAAA,CAAMK,MAAN,EAAc,CAAEH,KAAF,EAASC,MAAT,CAAd,CAAA;AAAkCC,UAAA,IAAQ,IAAKI,CAAAA,aAAL,CAAmBJ,IAAnB,EAAyBH,OAAzB,CAAR;AAH1F;AAY7BQ,oBAAgB,CAACC,WAAD,EAAcC,KAAd,CAAqB;AACnC,UAAID,WAAYE,CAAAA,QAAhB;AACE,YAAKC,CAAAA,aAAL,CAAmBH,WAAYE,CAAAA,QAA/B,EAAyCD,KAAzC,CAAA;AADF;AAGE,cAAUG,KAAJ,CAAU,8CAAV,CAAN;AAHF;AAIA,aAAO,IAAP;AALmC;AAWrCC,QAAI,CAACL,WAAD,CAAc;AAChB,WAAMK,CAAAA,IAAN,CAAWL,WAAX,CAAA;AAAyBA,iBAAYM,CAAAA,MAAZ,GAAqBpB,SAAUqB,CAAAA,OAAQC,CAAAA,gBAAvC;AADT;AAUlBC,UAAM,CAACC,QAAD,EAAWC,OAAX,EAAoBC,SAApB,CAA+B;AAAA,YAC7B,CAAEjB,MAAF,EAAUkB,YAAV,EAAwBC,KAAxB,CAAA,GAAkC,IADL;AACnC,OAA8C,CAAE,GAAAC,QAAF,CAA9C,GAAuDL,QAAvD;AACoB,OAApB,GAAAE,SAAUI,CAAAA,OAAV,IAAyBD,QAAGE,CAAAA,UAAH,CACvBF,QAAGP,CAAAA,gBADoB,EAEvB,CAFuB,EAGvBI,SAAUM,CAAAA,cAHa,EAIvB,IAAKC,CAAAA,MAJkB,EAKvB,IAAKC,CAAAA,OALkB,EAMvBzB,MANuB,EAOvB,CAPuB,EAQvBgB,OAAQU,CAAAA,MARe,EASvBT,SAAUU,CAAAA,IATa,EAUvB,IAVuB,CAAzB;AAYA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoB5B,MAApB,EAA4B4B,CAAA,EAA5B,CAAiC;AAC/B,cAAMC,OAAOV,KAAA,CAAMS,CAAN,CAAb;AACAV,oBAAA,CAAaU,CAAb,CAAA,GAAkBC,IAAKR,CAAAA,OAAvB,KAAmCH,YAAA,CAAaU,CAAb,CAAA,GAAkBC,IAAKR,CAAAA,OAAvB,EAAgCQ,IAAKC,CAAAA,KAArC,IAA8CV,QAAGW,CAAAA,aAAH,CAC/EX,QAAGP,CAAAA,gBAD4E,EAE/E,CAF+E,EAG/E,CAH+E,EAK/E,CAL+E,EAO/Ee,CAP+E,EAS/EC,IAAKtB,CAAAA,QAASV,CAAAA,KATiE,EAU/EgC,IAAKtB,CAAAA,QAAST,CAAAA,MAViE,EAW/E,CAX+E,EAY/EkB,OAAQU,CAAAA,MAZuE,EAa/ET,SAAUU,CAAAA,IAbqE,EAc/EE,IAAKtB,CAAAA,QAASZ,CAAAA,MAdiE,CAAjF;AAF+B;AAmBjC,aAAO,CAAA,CAAP;AAjCmC;AAzCvC;AA6EAL,SAAQG,CAAAA,aAAR,GAAwBA,aAAxB;AAhFgI,CAAhI;;",
"sources":["node_modules/@pixi/core/lib/textures/resources/ArrayResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$ArrayResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), AbstractMultiResource = require(\"./AbstractMultiResource.js\");\nclass ArrayResource extends AbstractMultiResource.AbstractMultiResource {\n  /**\n   * @param source - Number of items in array or the collection\n   *        of image URLs to use. Can also be resources, image elements, canvas, etc.\n   * @param options - Options to apply to {@link PIXI.autoDetectResource}\n   * @param {number} [options.width] - Width of the resource\n   * @param {number} [options.height] - Height of the resource\n   */\n  constructor(source, options) {\n    const { width, height } = options || {};\n    let urls, length;\n    Array.isArray(source) ? (urls = source, length = source.length) : length = source, super(length, { width, height }), urls && this.initFromArray(urls, options);\n  }\n  /**\n   * Set a baseTexture by ID,\n   * ArrayResource just takes resource from it, nothing more\n   * @param baseTexture\n   * @param index - Zero-based index of resource to set\n   * @returns - Instance for chaining\n   */\n  addBaseTextureAt(baseTexture, index) {\n    if (baseTexture.resource)\n      this.addResourceAt(baseTexture.resource, index);\n    else\n      throw new Error(\"ArrayResource does not support RenderTexture\");\n    return this;\n  }\n  /**\n   * Add binding\n   * @param baseTexture\n   */\n  bind(baseTexture) {\n    super.bind(baseTexture), baseTexture.target = constants.TARGETS.TEXTURE_2D_ARRAY;\n  }\n  /**\n   * Upload the resources to the GPU.\n   * @param renderer\n   * @param texture\n   * @param glTexture\n   * @returns - whether texture was uploaded\n   */\n  upload(renderer, texture, glTexture) {\n    const { length, itemDirtyIds, items } = this, { gl } = renderer;\n    glTexture.dirtyId < 0 && gl.texImage3D(\n      gl.TEXTURE_2D_ARRAY,\n      0,\n      glTexture.internalFormat,\n      this._width,\n      this._height,\n      length,\n      0,\n      texture.format,\n      glTexture.type,\n      null\n    );\n    for (let i = 0; i < length; i++) {\n      const item = items[i];\n      itemDirtyIds[i] < item.dirtyId && (itemDirtyIds[i] = item.dirtyId, item.valid && gl.texSubImage3D(\n        gl.TEXTURE_2D_ARRAY,\n        0,\n        0,\n        // xoffset\n        0,\n        // yoffset\n        i,\n        // zoffset\n        item.resource.width,\n        item.resource.height,\n        1,\n        texture.format,\n        glTexture.type,\n        item.resource.source\n      ));\n    }\n    return !0;\n  }\n}\nexports.ArrayResource = ArrayResource;\n//# sourceMappingURL=ArrayResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","AbstractMultiResource","ArrayResource","constructor","source","options","width","height","urls","length","Array","isArray","initFromArray","addBaseTextureAt","baseTexture","index","resource","addResourceAt","Error","bind","target","TARGETS","TEXTURE_2D_ARRAY","upload","renderer","texture","glTexture","itemDirtyIds","items","gl","dirtyId","texImage3D","internalFormat","_width","_height","format","type","i","item","valid","texSubImage3D"]
}
