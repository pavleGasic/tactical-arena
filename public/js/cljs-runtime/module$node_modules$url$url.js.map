{
"version":3,
"file":"module$node_modules$url$url.js",
"lineCount":246,
"mappings":"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",
"sources":["node_modules/url/url.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$url$url\"] = function(global,require,module,exports) {\n/*\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\nvar punycode = require('punycode/');\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n/*\n * define these here so at least they only have to be\n * compiled once on the first module load.\n */\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n  portPattern = /:[0-9]*$/,\n\n  // Special case for a simple path URL\n  simplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/,\n\n  /*\n   * RFC 2396: characters reserved for delimiting URLs.\n   * We actually just auto-escape these.\n   */\n  delims = [\n    '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'\n  ],\n\n  // RFC 2396: characters not allowed for various reasons.\n  unwise = [\n    '{', '}', '|', '\\\\', '^', '`'\n  ].concat(delims),\n\n  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n  autoEscape = ['\\''].concat(unwise),\n  /*\n   * Characters that are never ever allowed in a hostname.\n   * Note that any invalid chars are also handled, but these\n   * are the ones that are *expected* to be seen, so we fast-path\n   * them.\n   */\n  nonHostChars = [\n    '%', '/', '?', ';', '#'\n  ].concat(autoEscape),\n  hostEndingChars = [\n    '/', '?', '#'\n  ],\n  hostnameMaxLen = 255,\n  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n  // protocols that can allow \"unsafe\" and \"unwise\" chars.\n  unsafeProtocol = {\n    javascript: true,\n    'javascript:': true\n  },\n  // protocols that never have a hostname.\n  hostlessProtocol = {\n    javascript: true,\n    'javascript:': true\n  },\n  // protocols that always contain a // bit.\n  slashedProtocol = {\n    http: true,\n    https: true,\n    ftp: true,\n    gopher: true,\n    file: true,\n    'http:': true,\n    'https:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'file:': true\n  },\n  querystring = require('qs');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && typeof url === 'object' && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (typeof url !== 'string') {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  /*\n   * Copy chrome, IE, opera backslash-handling behavior.\n   * Back slashes before the query string get converted to forward slashes\n   * See: https://code.google.com/p/chromium/issues/detail?id=25916\n   */\n  var queryIndex = url.indexOf('?'),\n    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n    uSplit = url.split(splitter),\n    slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  /*\n   * trim before proceeding.\n   * This is to support parse stuff like \"  http://foo.com  \\n\"\n   */\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  /*\n   * figure out if it's got a host\n   * user@server is *always* interpreted as a hostname, and url\n   * resolution will treat //foo/bar as host=foo,path=bar because that's\n   * how the browser resolves relative URLs.\n   */\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@/]+@[^@/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {\n\n    /*\n     * there's a hostname.\n     * the first instance of /, ?, ;, or # ends the host.\n     *\n     * If there is an @ in the hostname, then non-host chars *are* allowed\n     * to the left of the last @ sign, unless some host-ending character\n     * comes *before* the @-sign.\n     * URLs are obnoxious.\n     *\n     * ex:\n     * http://a@b@c/ => user:a@b host:c\n     * http://a@b?@c => user:a host:c path:/?@c\n     */\n\n    /*\n     * v0.12 TODO(isaacs): This is not quite how Chrome does things.\n     * Review our test case against browsers more comprehensively.\n     */\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }\n    }\n\n    /*\n     * at this point, either we have an explicit point where the\n     * auth portion cannot go past, or the last @ char is the decider.\n     */\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      /*\n       * atSign must be in auth portion.\n       * http://a@b/c@d => host:b auth:a path:/c@d\n       */\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    /*\n     * Now we have a portion which is definitely the auth.\n     * Pull that off.\n     */\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) { hostEnd = rest.length; }\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    /*\n     * we've indicated that there is a hostname,\n     * so even if it's empty, it has to be present.\n     */\n    this.hostname = this.hostname || '';\n\n    /*\n     * if hostname begins with [ and ends with ]\n     * assume that it's an IPv6 address.\n     */\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              /*\n               * we replace non-ASCII char with a temporary placeholder\n               * we need this to make sure size of hostname is not\n               * broken by replacing non-ASCII by nothing\n               */\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      /*\n       * IDNA Support: Returns a punycoded representation of \"domain\".\n       * It only converts parts of the domain name that\n       * have non-ASCII characters, i.e. it doesn't matter if\n       * you call it with a domain that already is ASCII-only.\n       */\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    /*\n     * strip [ and ] from the hostname\n     * the host field still retains them, though\n     */\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  /*\n   * now rest is set to the post-host stuff.\n   * chop off any delim chars.\n   */\n  if (!unsafeProtocol[lowerProto]) {\n\n    /*\n     * First, make 100% sure that any \"autoEscape\" chars get\n     * escaped, even if encodeURIComponent doesn't think they\n     * need to be.\n     */\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) { continue; }\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  // to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  /*\n   * ensure it's an object, and not a string url.\n   * If it's an obj, this is a no-op.\n   * this way, you can call url_format() on strings\n   * to clean up potentially wonky urls.\n   */\n  if (typeof obj === 'string') { obj = urlParse(obj); }\n  if (!(obj instanceof Url)) { return Url.prototype.format.call(obj); }\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n    pathname = this.pathname || '',\n    hash = this.hash || '',\n    host = false,\n    query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query, {\n      arrayFormat: 'repeat',\n      addQueryPrefix: false\n    });\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') { protocol += ':'; }\n\n  /*\n   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n   * unless they had them to begin with.\n   */\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') { pathname = '/' + pathname; }\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') { hash = '#' + hash; }\n  if (search && search.charAt(0) !== '?') { search = '?' + search; }\n\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) { return relative; }\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (typeof relative === 'string') {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  /*\n   * hash is always overridden, no matter what.\n   * even href=\"\" will remove it.\n   */\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol') { result[rkey] = relative[rkey]; }\n    }\n\n    // urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.pathname = '/';\n      result.path = result.pathname;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    /*\n     * if it's a known url protocol, then changing\n     * the protocol does weird things\n     * first, if it's not file:, then we MUST have a host,\n     * and if there was a path\n     * to begin with, then we MUST have a path.\n     * if it is file:, then the host is dropped,\n     * because that's known to be hostless.\n     * anything else is assumed to be absolute.\n     */\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift())) { }\n      if (!relative.host) { relative.host = ''; }\n      if (!relative.hostname) { relative.hostname = ''; }\n      if (relPath[0] !== '') { relPath.unshift(''); }\n      if (relPath.length < 2) { relPath.unshift(''); }\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n    mustEndAbs = isRelAbs || isSourceAbs || (result.host && relative.pathname),\n    removeAllDots = mustEndAbs,\n    srcPath = result.pathname && result.pathname.split('/') || [],\n    relPath = relative.pathname && relative.pathname.split('/') || [],\n    psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  /*\n   * if the url is a non-slashed url, then relative\n   * links like ../.. should be able\n   * to crawl up to the hostname, as well.  This is strange.\n   * result.protocol has already been set by now.\n   * Later on, put the first path part into the host field.\n   */\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') { srcPath[0] = result.host; } else { srcPath.unshift(result.host); }\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') { relPath[0] = relative.host; } else { relPath.unshift(relative.host); }\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    /*\n     * it's relative\n     * throw away the existing file, and take the new path instead.\n     */\n    if (!srcPath) { srcPath = []; }\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (relative.search != null) {\n    /*\n     * just pull out the search.\n     * like href='?foo'.\n     * Put this after the other two cases because it simplifies the booleans\n     */\n    if (psychotic) {\n      result.host = srcPath.shift();\n      result.hostname = result.host;\n      /*\n       * occationaly the auth can get stuck only in host\n       * this especially happens in cases like\n       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n       */\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.hostname = authInHost.shift();\n        result.host = result.hostname;\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    // to support http.request\n    if (result.pathname !== null || result.search !== null) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    /*\n     * no path at all.  easy.\n     * we've already handled the other stuff above.\n     */\n    result.pathname = null;\n    // to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  /*\n   * if a url ENDs in . or .., then it must get a trailing slash.\n   * however, if it ends in anything else non-slashy,\n   * then it must NOT get a trailing slash.\n   */\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\n\n  /*\n   * strip single dots, resolve double dots to parent dir\n   * if the path tries to go above the root, `up` ends up > 0\n   */\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n    result.host = result.hostname;\n    /*\n     * occationaly the auth can get stuck only in host\n     * this especially happens in cases like\n     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n     */\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.hostname = authInHost.shift();\n      result.host = result.hostname;\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (srcPath.length > 0) {\n    result.pathname = srcPath.join('/');\n  } else {\n    result.pathname = null;\n    result.path = null;\n  }\n\n  // to support request.http\n  if (result.pathname !== null || result.search !== null) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Url","href","path","pathname","query","search","hash","hostname","port","host","auth","slashes","protocol","urlParse","url","parseQueryString","slashesDenoteHost","u","parse","punycode","protocolPattern","portPattern","simplePathPattern","unwise","concat","delims","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","unsafeProtocol","javascript","hostlessProtocol","slashedProtocol","http","https","ftp","gopher","file","querystring","prototype","Url.prototype.parse","TypeError","queryIndex","indexOf","splitter","uSplit","split","replace","slashRegex","join","rest","trim","length","simplePath","exec","substr","proto","lowerProto","toLowerCase","match","hostEnd","i","hec","atSign","lastIndexOf","slice","decodeURIComponent","parseHost","ipv6Hostname","hostparts","l","part","newpart","j","k","charCodeAt","validParts","notHost","bit","push","unshift","hostnameMaxLen","toASCII","p","ae","esc","encodeURIComponent","escape","qm","format","Url.prototype.format","Object","keys","stringify","arrayFormat","addQueryPrefix","charAt","resolve","Url.prototype.resolve","relative","resolveObject","Url.prototype.resolveObject","rel","result","tkeys","tk","tkey","rkeys","rk","rkey","v","relPath","shift","isSourceAbs","isRelAbs","removeAllDots","mustEndAbs","srcPath","psychotic","pop","authInHost","last","hasTrailingSlash","up","splice","isAbsolute","Url.prototype.parseHost","urlResolve","source","urlResolveObject","urlFormat","obj","call"]
}
