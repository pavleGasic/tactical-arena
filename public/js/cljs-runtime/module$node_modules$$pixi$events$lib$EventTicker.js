shadow$provide.module$node_modules$$pixi$events$lib$EventTicker = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index");
  class EventsTickerClass {
    constructor() {
      this.interactionFrequency = 10;
      this._deltaTime = 0;
      this.tickerAdded = this._didMove = !1;
      this._pauseUpdate = !0;
    }
    init(events) {
      this.removeTickerListener();
      this.events = events;
      this.interactionFrequency = 10;
      this._deltaTime = 0;
      this.tickerAdded = this._didMove = !1;
      this._pauseUpdate = !0;
    }
    get pauseUpdate() {
      return this._pauseUpdate;
    }
    set pauseUpdate(paused) {
      this._pauseUpdate = paused;
    }
    addTickerListener() {
      this.tickerAdded || !this.domElement || (core.Ticker.system.add(this.tickerUpdate, this, core.UPDATE_PRIORITY.INTERACTION), this.tickerAdded = !0);
    }
    removeTickerListener() {
      this.tickerAdded && (core.Ticker.system.remove(this.tickerUpdate, this), this.tickerAdded = !1);
    }
    pointerMoved() {
      this._didMove = !0;
    }
    update() {
      if (this.domElement && !this._pauseUpdate) {
        if (this._didMove) {
          this._didMove = !1;
        } else {
          var rootPointerEvent = this.events.rootPointerEvent;
          this.events.supportsTouchEvents && "touch" === rootPointerEvent.pointerType || globalThis.document.dispatchEvent(new PointerEvent("pointermove", {clientX:rootPointerEvent.clientX, clientY:rootPointerEvent.clientY}));
        }
      }
    }
    tickerUpdate(deltaTime) {
      this._deltaTime += deltaTime;
      this._deltaTime < this.interactionFrequency || (this._deltaTime = 0, this.update());
    }
  }
  global = new EventsTickerClass();
  exports.EventsTicker = global;
};

//# sourceMappingURL=module$node_modules$$pixi$events$lib$EventTicker.js.map
