{
"version":3,
"file":"module$node_modules$$pixi$core$lib$batch$BatchRenderer.js",
"lineCount":203,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,GAA2E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE/GC,QAAQH,OAAA,CAAQ,2CAAR,CAFuG,EAE/EI,YAAYJ,OAAA,CAAQ,+CAAR,CAFmE;AAEvCK,QAAAA,GAAaL,OAAA,CAAQ,gDAAR,CAAbK;AAFuC,MAEGC,WAAWN,OAAA,CAAQ,8CAAR,CAFd,EAEyCO,QAAQP,OAAA,CAAQ,2CAAR,CAFjD,EAEyEQ,iBAAiBR,OAAA,CAAQ,4DAAR,CAF1F,EAEoIS,+BAA+BT,OAAA,CAAQ,8EAAR,CAFnK,EAE+NU,QAAQV,OAAA,CAAQ,gDAAR,CAFvO,EAEqQW,cAAcX,OAAA,CAAQ,yDAAR,CAFnR,EAE0TY;AAAgBZ,SAAA,CAAQ,wDAAR,CAF1U,EAEyWa,gBAAgBb,OAAA,CAAQ,wDAAR,CAFzX,EAEwZc,uBAAuBd,OAAA,CAAQ,+DAAR,CAF/a,EAEqde,oBAAoBf,OAAA,CAAQ,4DAAR,CAFze,EAE4gBgB,sBAAsBhB,OAAA,CAAQ,8DAAR,CAFliB,EAEukBiB,yBAAyBjB,OAAA,CAAQ,iEAAR,CAFhmB;AAEwoBkB,QAAAA,GAAiBlB,OAAA,CAAQ,yDAAR,CAAjBkB;AAFxoB,MAEyrBC,YAAYnB,OAAA,CAAQ,uDAAR,CAFrsB,EAEmuBoB,UAAUpB,OAAA,CAAQ,uDAAR,CAF7uB;AAG5F,QAAA,iEAAA,aAA8BkB,OAAeA,CAAAA,cAA7C;AAMrBG,eAAW,CAACC,QAAD,CAAW;AACpB,WAAA,CAAMA,QAAN,CAAA;AAAiB,UAAKC,CAAAA,kBAAL,EAAA;AAA2B,UAAKC,CAAAA,aAAL,GAAqBX,aAAcA,CAAAA,aAAnC;AAAkD,UAAKY,CAAAA,UAAL,GAAkB,CAAlB;AAAqB,UAAKC,CAAAA,KAAL,GAAahB,KAAMA,CAAAA,KAAMiB,CAAAA,KAAZ,EAAb;AAAkC,UAAKC,CAAAA,IAAL,GAA+C,CAA/C,GAAYC,8DAAgBC,CAAAA,gBAA5B;AAAyE,UAAKC,CAAAA,WAAL,GAAvB,IAAKC,CAAAA,YAAkB,GAAH,CAAG;AAAsB,UAAKC,CAAAA,iBAAL,GAAyB,EAAzB;AAA6B,UAAKC,CAAAA,iBAAL,GAAyB,EAAzB;AAA6B,UAAKC,CAAAA,WAAL,GAAmB,CAAnB;AAAsB,UAAKC,CAAAA,OAAL,GAAe,IAAf;AAAqB,UAAKC,CAAAA,iBAAL,GAAyB,EAAzB;AAA6B,UAAKC,CAAAA,uBAAL,GAA+B,CAA/B;AAAkC,UAAKC,CAAAA,QAAL,GAAgB,CAAhB;AAAmB,UAAKC,CAAAA,SAAL,GAAiB,EAAjB;AAAqB,UAAKC,CAAAA,SAAL,GAAiB,EAAjB;AAAqB,UAAKC,CAAAA,WAAL,GAAmB,CAAnB;AAAsB,UAAKpB,CAAAA,QAASqB,CAAAA,EAAd,CAAiB,WAAjB,EAA8B,IAAKC,CAAAA,WAAnC,EAAgD,IAAhD,CAAA;AAAuDtB,cAASuB,CAAAA,OAAQC,CAAAA,aAAcC,CAAAA,GAA/B,CAAmC,IAAnC,CAAA;AAA+E,UAAKC,CAAAA,OAAL,GAAlB,IAAKC,CAAAA,OAAa,GAArC,IAAKC,CAAAA,QAAgC,GAArB,CAAqB;AAAgD,UAAKC,CAAAA,YAAL,GAA9B,IAAKC,CAAAA,gBAAyB,GAAN,IAAM;AAA0B,UAAKC,CAAAA,kBAAL,GAA0B,EAA1B;AADvqB;AAQX,iCAAqB,EAAA;AAC9B,aAAO,IAAKC,CAAAA,mBAAL,GAA2B,IAAKA,CAAAA,mBAAhC,IAAuDrC,sBAAuBA,CAAAA,sBAAvB,CAA8C,EAA9C,CAAvD,EAA0G,IAAKqC,CAAAA,mBAAtH;AAD8B;AAGrB,iCAAkB,CAACC,KAAD,CAAQ;AACnC,UAAKD,CAAAA,mBAAL,GAA2BC,KAA3B;AADmC;AAO1B,kCAAsB,EAAA;AAC/B,aAAO,IAAKC,CAAAA,oBAAL,GAA4B,IAAKA,CAAAA,oBAAjC,IAAyDxC,mBAAoBA,CAAAA,mBAApB,EAAzD,EAAoG,IAAKwC,CAAAA,oBAAhH;AAD+B;AAGtB,kCAAmB,CAACD,KAAD,CAAQ;AACpC,UAAKC,CAAAA,oBAAL,GAA4BD,KAA5B;AADoC;AAQlC,oBAAe,EAAA;AACjB,aAAOhD,KAAMkD,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,iEAA3B,CAAA,EAA+F,IAAKf,CAAAA,WAA3G;AADiB;AAOR,+BAAmB,EAAA;AAC5B,aAAOtB,OAAQsC,CAAAA,OAAf;AAD4B;AAOnB,sCAA0B,EAAA;AACnC,aAAOvC,SAAUuC,CAAAA,OAAjB;AADmC;AASrCnC,sBAAkB,CAAC,CACjBoC,MAAA,GAAS9B,8DAAgB+B,CAAAA,gBADR,EAEjBC,QAAA,GAAWhC,8DAAgBiC,CAAAA,uBAFV,CAAA,GAGf,EAHc,CAGV;AACN,UAAKC,CAAAA,eAAL,GAAuB,IAAIjD,oBAAqBA,CAAAA,oBAAzB,CAA8C6C,MAA9C,EAAsDE,QAAtD,CAAvB;AADM;AAQRf,iBAAa,EAAG;AACd,UAAMkB,KAAK,IAAK1C,CAAAA,QAAS0C,CAAAA,EAAzB;AACA1D,cAASA,CAAAA,QAAS2D,CAAAA,UAAlB,KAAiC7D,SAAU8D,CAAAA,GAAIC,CAAAA,YAA/C,GAA8D,IAAKzB,CAAAA,WAAnE,GAAiF,CAAjF,IAAsF,IAAKA,CAAAA,WAAL,GAAmB0B,IAAKC,CAAAA,GAAL,CACvGL,EAAGM,CAAAA,YAAH,CAAgBN,EAAGO,CAAAA,uBAAnB,CADuG,EAEvG1C,8DAAgB2C,CAAAA,kBAFuF,CAAnB,EAGnF,IAAK9B,CAAAA,WAH8E,GAGhEjC,4BAA6BA,CAAAA,4BAA7B,CACpB,IAAKiC,CAAAA,WADe,EAEpBsB,EAFoB,CAHtB,CAAA;AAMI,UAAK5B,CAAAA,OAAL,GAAe,IAAK2B,CAAAA,eAAgBU,CAAAA,cAArB,CAAoC,IAAK/B,CAAAA,WAAzC,CAAf;AACJ,WAASgC,EAAT,GAAa,CAAb,EAAgBA,EAAhB,GAAoB,IAAKpC,CAAAA,uBAAzB,EAAkDoC,EAAA,EAAlD;AACE,YAAKrC,CAAAA,iBAAL,CAAuBqC,EAAvB,CAAA,GAA4B,IAAI,IAAKlD,CAAAA,aAAT,EAA5B;AADF;AAEA,UAAKmD,CAAAA,gBAAL,EAAA;AAXc;AAchBA,oBAAgB,EAAG;AAAA,YACX,CACJC,aADI,EAEJC,iBAFI,CAAA,GAGFhD,8DAJa;AAAA,UAIIiD,cAAc,IAAKlD,CAAAA,IAAnBkD,GAA0B,CAJ9B;AACjB,YAGkDC,SAASX,IAAKY,CAAAA,KAAL,CAAWF,WAAX,GAAyB,IAAKpC,CAAAA,WAA9B,CAATqC,GAAsD,CAHxG;AAIA,WAAA,EAAOH,aAAcK,CAAAA,MAArB,GAA8BH,WAA9B,CAAA;AACEF,qBAAcM,CAAAA,IAAd,CAAmB,IAAItE,aAAcA,CAAAA,aAAlB,EAAnB,CAAA;AADF;AAEA,WAAA,EAAOiE,iBAAkBI,CAAAA,MAAzB,GAAkCF,MAAlC,CAAA;AACEF,yBAAkBK,CAAAA,IAAlB,CAAuB,IAAInE,iBAAkBA,CAAAA,iBAAtB,EAAvB,CAAA;AADF;AAEA,WAAS2D,WAAT,GAAa,CAAb,EAAgBA,WAAhB,GAAoB,IAAKhC,CAAAA,WAAzB,EAAsCgC,WAAA,EAAtC;AACE,YAAKrB,CAAAA,kBAAL,CAAwBqB,WAAxB,CAAA,GAA6B,IAA7B;AADF;AATiB;AAanB9B,eAAW,EAAG;AACZ,UAAKL,CAAAA,QAAL,GAAgB,CAAhB;AADY;AAQd4C,UAAM,CAACC,OAAD,CAAU;AACdA,aAAQC,CAAAA,QAASC,CAAAA,KAAjB,KAA2B,IAAKtD,CAAAA,YAAL,GAAoBoD,OAAQG,CAAAA,UAAWN,CAAAA,MAAvC,GAAgD,CAAhD,GAAoD,IAAKrD,CAAAA,IAAzD,IAAiE,IAAK4D,CAAAA,KAAL,EAAjE,EAA+E,IAAKxD,CAAAA,YAApF,IAAoGoD,OAAQG,CAAAA,UAAWN,CAAAA,MAAvH,GAAgI,CAAhI,EAAmI,IAAKlD,CAAAA,WAAxI,IAAuJqD,OAAQK,CAAAA,OAAQR,CAAAA,MAAvK,EAA+K,IAAK/C,CAAAA,iBAAL,CAAuB,IAAKC,CAAAA,WAA5B,CAA/K,GAA0NiD,OAAQC,CAAAA,QAASK,CAAAA,WAA3O,EAAwP,IAAKzD,CAAAA,iBAAL,CAAuB,IAAKE,CAAAA,WAAL,EAAvB,CAAxP,GAAqSiD,OAAhU;AADc;AAGhBO,6BAAyB,EAAG;AAAA,YACpB,CACJ,kBAAmBC,QADf,EAEJlD,WAFI,CAAA,GAGF,IAJsB;AAAA,UAIhBmD,gBAAgBhE,8DAAgBgD,CAAAA,iBAJhB;AAAA,YAImCiB,QAAQ,IAAKxE,CAAAA,QAASwE,CAAAA,KAJzD,EAIgEC,gBAAgB,IAAK1C,CAAAA,kBAJrF,EAIyG2C,QAAQ,IAAK1E,CAAAA,QAAS2E,CAAAA,SAAUC,CAAAA,KAJzI;AAAA,UAKtBC,OAAO,EAAExF,WAAYA,CAAAA,WAAYyF,CAAAA,YALX,EAKyBC,iBAAiB,CAL1C,EAK6CC,WAAWT,aAAA,CAAc,CAAd,CALxD,EAK0EU,QAAQ,CALlF;AAM1BT,WAAMU,CAAAA,iBAAN,CAAwBT,aAAxB,EAAuCrD,WAAvC,CAAA;AACA,WAAK,IAAIgC,IAAI,CAAb,EAAgBA,CAAhB,GAAoB,IAAKvC,CAAAA,WAAzB,EAAsC,EAAEuC,CAAxC,CAA2C;AACzC,cAAM+B,MAAMb,QAAA,CAASlB,CAAT,CAAZ;AACAkB,gBAAA,CAASlB,CAAT,CAAA,GAAc,IAAd;AAAoB+B,WAAIC,CAAAA,aAAJ,KAAsBP,IAAtB,KAA+BG,QAASJ,CAAAA,KAAT,IAAkBxD,WAAlB,KAAkCoD,KAAMa,CAAAA,UAAN,CAAiBL,QAAjB,EAA2BP,aAA3B,EAA0CI,IAA1C,EAAgDzD,WAAhD,CAAA,EAA8D,IAAKkE,CAAAA,cAAL,CAAoBN,QAApB,EAA8BC,KAA9B,EAAqC7B,CAArC,CAA9D,EAAuG6B,KAAvG,GAA+G7B,CAA/G,EAAkH4B,QAAlH,GAA6HT,aAAA,CAAc,EAAEQ,cAAhB,CAA7H,EAA8J,EAAEF,IAAlM,GAAyMM,GAAIC,CAAAA,aAA7M,GAA6NP,IAA7N,EAAmOM,GAAII,CAAAA,OAAvO,GAAiPb,KAAjP,EAAwPM,QAASQ,CAAAA,QAAT,CAAkBR,QAASJ,CAAAA,KAAT,EAAlB,CAAxP,GAA8RO,GAA7T;AAFqB;AAI1B,OAAjB,GAAAH,QAASJ,CAAAA,KAAT,KAAuBJ,KAAMa,CAAAA,UAAN,CAAiBL,QAAjB,EAA2BP,aAA3B,EAA0CI,IAA1C,EAAgDzD,WAAhD,CAAA,EAA8D,IAAKkE,CAAAA,cAAL,CAAoBN,QAApB,EAA8BC,KAA9B,EAAqC,IAAKpE,CAAAA,WAA1C,CAA9D,EAAsH,EAAEkE,cAAxH,EAAwI,EAAEF,IAAjK;AACA,WAASzB,aAAT,GAAa,CAAb,EAAgBA,aAAhB,GAAoBqB,aAAcd,CAAAA,MAAlC,EAA0CP,aAAA,EAA1C;AACEqB,qBAAA,CAAcrB,aAAd,CAAA,GAAmB,IAAnB;AADF;AAEA/D,iBAAYA,CAAAA,WAAYyF,CAAAA,YAAxB,GAAuCD,IAAvC;AAd0B;AAsB5BS,kBAAc,CAACN,QAAD,EAAWC,KAAX,EAAkBQ,MAAlB,CAA0B;AAAA,YAChC,CACJ,kBAAmBD,QADf,EAEJ1D,gBAFI,EAGJD,YAHI,EAIJ1B,UAJI,CAAA,GAKF,IANkC,EAM5BuF,YAAYnF,8DAAgB+C,CAAAA,aANA;AAAA,UAOlCqC,UAAU,IAAK/D,CAAAA,QAPmB,EAOTgE,SAAS,IAAKjE,CAAAA,OAPL,EAOckE,SAAS,IAAKnE,CAAAA,OAP5B,EAOqCoE,WAAWJ,SAAA,CAAUC,OAAV,CAPhD;AAQtCG,cAASb,CAAAA,KAAT,GAAiB,IAAKvD,CAAAA,OAAtB;AAA+BoE,cAASd,CAAAA,QAAT,GAAoBA,QAApB;AAC/B,WAAK,IAAI5B,IAAI6B,KAAb,EAAoB7B,CAApB,GAAwBqC,MAAxB,EAAgC,EAAErC,CAAlC,CAAqC;AAAA,cAC7B2C,SAASP,QAAA,CAASpC,CAAT,CADoB,EAC4B4C,kBAAkB/G,KAAMgH,CAAAA,oBAAN,CAA/CF,MAAOhC,CAAAA,QAASK,CAAAA,WAA8D8B,CAAAA,SAAJ,GAAgB,CAAhB,GAAoB,CAA/C,CAAA,CAAkDH,MAAOI,CAAAA,SAAzD,CAD9C;AAEnCX,gBAAA,CAASpC,CAAT,CAAA,GAAc,IAAd;AAAoB6B,aAAA,GAAQ7B,CAAR,IAAa0C,QAASM,CAAAA,KAAtB,KAAgCJ,eAAhC,KAAoDF,QAASxF,CAAAA,IAAT,GAAgBuF,MAAhB,GAAyBC,QAASb,CAAAA,KAAlC,EAAyCA,KAAzC,GAAiD7B,CAAjD,EAAoD0C,QAApD,GAA+DJ,SAAA,CAAU,EAAEC,OAAZ,CAA/D,EAAqFG,QAASd,CAAAA,QAA9F,GAAyGA,QAAzG,EAAmHc,QAASb,CAAAA,KAA5H,GAAoIY,MAAxL;AAAiM,YAAKQ,CAAAA,uBAAL,CAA6BN,MAA7B,EAAqCjE,gBAArC,EAAuDD,YAAvD,EAAqE+D,MAArE,EAA6EC,MAA7E,CAAA;AAAsFD,cAAA,IAAUG,MAAO9B,CAAAA,UAAWN,CAAAA,MAA5B,GAAqC,CAArC,GAAyCxD,UAAzC;AAAqD0F,cAAA,IAAUE,MAAO5B,CAAAA,OAAQR,CAAAA,MAAzB;AAAiCmC,gBAASM,CAAAA,KAAT,GAAiBJ,eAAjB;AAF9V;AAIrCf,WAAA,GAAQQ,MAAR,KAAmBK,QAASxF,CAAAA,IAAT,GAAgBuF,MAAhB,GAAyBC,QAASb,CAAAA,KAAlC,EAAyC,EAAEU,OAA9D;AAAwE,UAAK/D,CAAAA,QAAL,GAAgB+D,OAAhB;AAAyB,UAAKhE,CAAAA,OAAL,GAAeiE,MAAf;AAAuB,UAAKlE,CAAAA,OAAL,GAAemE,MAAf;AAblF;AAmBxCS,wBAAoB,CAACtB,QAAD,CAAW;AAC7B,YAAMuB,gBAAgB,IAAKvG,CAAAA,QAASF,CAAAA,OAApC;AACA,WAAK,IAAI0G,IAAI,CAAb,EAAgBA,CAAhB,GAAoBxB,QAASJ,CAAAA,KAA7B,EAAoC4B,CAAA,EAApC;AACED,qBAAcE,CAAAA,IAAd,CAAmBzB,QAASQ,CAAAA,QAAT,CAAkBgB,CAAlB,CAAnB,EAAyCxB,QAAS0B,CAAAA,GAAT,CAAaF,CAAb,CAAzC,CAA2D,EAAAxB,QAASQ,CAAAA,QAAT,CAAkBgB,CAAlB,CAAA,GAAuB,IAAvB;AAD7D;AAEAxB,cAASJ,CAAAA,KAAT,GAAiB,CAAjB;AAJ6B;AAM/B+B,kBAAc,EAAG;AACf,YAAM,CACJ,kBAAmBC,gBADf,EAEJ,iBAAkBC,eAFd,EAGJ,aAAcC,WAHV,CAAA,GAIF,IAJJ;AAKAvG,oEAAgBb,CAAAA,mBAAhB,IAAuCkH,gBAAA,CAAiB,IAAK3F,CAAAA,QAAtB,CAAgC8F,CAAAA,OAAQC,CAAAA,MAAxC,CAA+CH,eAAgBI,CAAAA,aAA/D,CAAA,EAA+EL,gBAAA,CAAiB,IAAK3F,CAAAA,QAAtB,CAAgCY,CAAAA,YAAamF,CAAAA,MAA7C,CAAoDF,WAApD,CAA/E,EAAiJ,IAAK9G,CAAAA,QAASkH,CAAAA,QAASC,CAAAA,aAAvB,EAAxL,KAAmO,IAAKnG,CAAAA,uBAAL,IAAgC,IAAKC,CAAAA,QAArC,KAAkD,IAAKD,CAAAA,uBAAL,EAAA,EAAgC4F,gBAAA,CAAiB,IAAK3F,CAAAA,QAAtB,CAAhC,GAAkE,IAAI,IAAKf,CAAAA,aAAT,EAApH,GAA+I0G,gBAAA,CAAiB,IAAK3F,CAAAA,QAAtB,CAAgC8F,CAAAA,OAAQC,CAAAA,MAAxC,CAA+CH,eAAgBI,CAAAA,aAA/D,CAA/I;AAA8NL,sBAAA,CAAiB,IAAK3F,CAAAA,QAAtB,CAAgCY,CAAAA,YAAamF,CAAAA,MAA7C,CAAoDF,WAApD,CAA9N,EAAgS,IAAK9G,CAAAA,QAASkH,CAAAA,QAAST,CAAAA,IAAvB,CAA4BG,gBAAA,CAAiB,IAAK3F,CAAAA,QAAtB,CAA5B,CAAhS,EAA8V,IAAKjB,CAAAA,QAASkH,CAAAA,QAASC,CAAAA,aAAvB,EAA9V,EAAsY,IAAKlG,CAAAA,QAAL,EAAzmB,CAAA;AANe;AAQjBmG,eAAW,EAAG;AAAA,YACNC,UAAU,IAAKzF,CAAAA,QADT,EACmB,CAAEc,EAAF,EAAM,MAAO4E,WAAb,CAAA,GAA6B,IAAKtH,CAAAA,QADrD,EAC+D0F,YAAYnF,8DAAgB+C,CAAAA,aAD3F;AAEZ,UAAIiE,cAAc,IAAlB;AACA,WAAK,IAAInE,IAAI,CAAb,EAAgBA,CAAhB,GAAoBiE,OAApB,EAA6BjE,CAAA,EAA7B,CAAkC;AAChC,cAAM,CAAE4B,QAAF,EAAYwC,IAAZ,EAAkBlH,IAAlB,EAAwB2E,KAAxB,EAA+BmB,KAA/B,CAAA,GAAyCV,SAAA,CAAUtC,CAAV,CAA/C;AACAmE,mBAAA,KAAgBvC,QAAhB,KAA6BuC,WAAA,GAAcvC,QAAd,EAAwB,IAAKsB,CAAAA,oBAAL,CAA0BtB,QAA1B,CAArD;AAA2F,YAAK5E,CAAAA,KAAM+F,CAAAA,SAAX,GAAuBC,KAAvB;AAA8BkB,mBAAYG,CAAAA,GAAZ,CAAgB,IAAKrH,CAAAA,KAArB,CAAA;AAA6BsC,UAAGgF,CAAAA,YAAH,CAAgBF,IAAhB,EAAsBlH,IAAtB,EAA4BoC,EAAGiF,CAAAA,cAA/B,EAAuD,CAAvD,GAA+C1C,KAA/C,CAAA;AAFtH;AAHtB;AASdf,SAAK,EAAG;AACgB,OAAtB,KAAA,IAAKxD,CAAAA,YAAL,KAA4B,IAAKoB,CAAAA,gBAAL,GAAwB,IAAK8F,CAAAA,kBAAL,CAAwB,IAAKlH,CAAAA,YAA7B,CAAxB,EAAoE,IAAKmB,CAAAA,YAAzE,GAAwF,IAAKgG,CAAAA,cAAL,CAAoB,IAAKpH,CAAAA,WAAzB,CAAxF,EAA+H,IAAKkB,CAAAA,OAApI,GAA8I,CAA9I,EAAiJ,IAAKD,CAAAA,OAAtJ,GAAgK,CAAhK,EAAmK,IAAKE,CAAAA,QAAxK,GAAmL,CAAnL,EAAsL,IAAKyC,CAAAA,yBAAL,EAAtL,EAAwN,IAAKsC,CAAAA,cAAL,EAAxN,EAA+O,IAAKS,CAAAA,WAAL,EAA/O,EAAmQ,IAAKvG,CAAAA,WAAxQ,GAAsR,CAAtR,EAAyR,IAAKH,CAAAA,YAA9R,GAA6S,CAA7S,EAAgT,IAAKD,CAAAA,WAArT,GAAmU,CAA/V;AADM;AAIRwE,SAAK,EAAG;AACN,UAAKjF,CAAAA,QAASI,CAAAA,KAAMqH,CAAAA,GAApB,CAAwB,IAAKrH,CAAAA,KAA7B,CAAA;AAAqC,UAAKJ,CAAAA,QAASF,CAAAA,OAAQgI,CAAAA,iBAAtB,CAAwC,IAAK1G,CAAAA,WAA7C,CAAA;AAA2D,UAAKpB,CAAAA,QAAS+H,CAAAA,MAAOtB,CAAAA,IAArB,CAA0B,IAAK3F,CAAAA,OAA/B,CAAA;AAAyCP,oEAAgBb,CAAAA,mBAAhB,IAAuC,IAAKM,CAAAA,QAASkH,CAAAA,QAAST,CAAAA,IAAvB,CAA4B,IAAK1F,CAAAA,iBAAL,CAAuB,IAAKE,CAAAA,QAA5B,CAA5B,CAAvC;AADnI;AAIR+G,QAAI,EAAG;AACL,UAAK9D,CAAAA,KAAL,EAAA;AADK;AAIP+D,WAAO,EAAG;AACR,WAAK,IAAI7E,IAAI,CAAb,EAAgBA,CAAhB,GAAoB,IAAKpC,CAAAA,uBAAzB,EAAkDoC,CAAA,EAAlD;AACE,YAAKrC,CAAAA,iBAAL,CAAuBqC,CAAvB,CAAA,IAA6B,IAAKrC,CAAAA,iBAAL,CAAuBqC,CAAvB,CAA0B6E,CAAAA,OAA1B,EAA7B;AADF;AAEA,UAAKjI,CAAAA,QAASkI,CAAAA,GAAd,CAAkB,WAAlB,EAA+B,IAAK5G,CAAAA,WAApC,EAAiD,IAAjD,CAAA;AAAmK,UAAKO,CAAAA,YAAL,GAA9B,IAAKC,CAAAA,gBAAyB,GAA7D,IAAKf,CAAAA,iBAAwD,GAApF,IAAKI,CAAAA,SAA+E,GAA3G,IAAKD,CAAAA,SAAsG,GAA1F,IAA0F;AAA0B,UAAKJ,CAAAA,OAAL,KAAiB,IAAKA,CAAAA,OAAQmH,CAAAA,OAAb,EAAA,EAAwB,IAAKnH,CAAAA,OAA7B,GAAuC,IAAxD;AAA+D,WAAMmH,CAAAA,OAAN,EAAA;AAHpP;AAUVL,sBAAkB,CAACtH,IAAD,CAAO;AAAA,UACjB6H,YAAYlJ,KAAMmJ,CAAAA,QAAN,CAAetF,IAAKuF,CAAAA,IAAL,CAAU/H,IAAV,GAAiB,CAAjB,CAAf,CADK;AACgCgI,UAAAA,GAAmBrJ,KAAMsJ,CAAAA,IAAN,CAAWJ,SAAX,CAAnBG;AAAwDH,eAAdK,IAA0B,CAA1BA;AACjG,UAAKtH,CAAAA,SAAUyC,CAAAA,MAAf,IAAyB2E,IAAzB,KAA8C,IAAKnH,CAAAA,SAAUwC,CAAAA,MAA7D,GAAsE2E,IAAtE,GAAyF,CAAzF;AACIG,UAAAA,GAAS,IAAKvH,CAAAA,SAAL,CAAesH,SAAf,CAATC;AACJ,aAAOA,IAAA,KAAW,IAAKvH,CAAAA,SAAL,CAAesH,SAAf,CAAX,GAAyCC,IAAzC,GAAkD,IAAIvJ,cAAeA,CAAAA,cAAnB,CAAkCsJ,SAAlC,GAAgD,IAAKrI,CAAAA,UAArD,GAAkE,CAAlE,CAAlD,GAAyHsI,IAAhI;AAJuB;AAYzBZ,kBAAc,CAACvH,IAAD,CAAO;AACb6H,UAAAA,GAAYlJ,KAAMmJ,CAAAA,QAAN,CAAetF,IAAKuF,CAAAA,IAAL,CAAU/H,IAAV,GAAiB,EAAjB,CAAf,CAAZ6H;AADa,YACqCG,mBAAmBrJ,KAAMsJ,CAAAA,IAAN,CAAWJ,IAAX,CADxD;AAEnB,UAAKhH,CAAAA,SAAUwC,CAAAA,MAAf,IAAyB2E,gBAAzB,KAA8C,IAAKnH,CAAAA,SAAUwC,CAAAA,MAA7D,GAAsE2E,gBAAtE,GAAyF,CAAzF;AACA,UAAIG,SAAS,IAAKtH,CAAAA,SAAL,CAAemH,gBAAf,CAAb;AACA,aAAOG,MAAA,KAAW,IAAKtH,CAAAA,SAAL,CAAemH,gBAAf,CAAX,GAA8CG,MAA9C,GAAuD,IAAIC,WAAJ,CAH8D,EAG9D,GAHkDP,IAGlD,CAAvD,GAAsFM,MAA7F;AAJmB;AAmBrBpC,2BAAuB,CAACvC,OAAD,EAAU+C,eAAV,EAA2BC,WAA3B,EAAwClB,MAAxC,EAAgDC,MAAhD,CAAwD;AAAA,YACvE,CACJ8C,UADI,EAEJC,WAFI,CAAA,GAGF/B,eAJyE;AAIxDgC,qBAAAA,GAAiBjD,MAAjBiD,GAA0B,IAAK1I,CAAAA,UAA/B0I;AAJwD,YAIbC,MAAMhF,OAAQgF,CAAAA,GAJD,EAIMC,WAAWjF,OAAQK,CAAAA,OAJzB,EAIkCF,aAAaH,OAAQG,CAAAA,UAJvD,EAImE+E,YAAYlF,OAAQC,CAAAA,QAASK,CAAAA,WAAY6E,CAAAA,cAJ5G;AAAA,UAI4HC,QAAQpG,IAAKC,CAAAA,GAAL,CAASe,OAAQqF,CAAAA,UAAjB,EAA6B,CAA7B,CAJpI;AAIqKC,aAAAA,GAAOvK,KAAMwK,CAAAA,KAAMC,CAAAA,MAAOC,CAAAA,QAAnB,CAA4BzF,OAAQ0F,CAAAA,QAApC,CAA8CC,CAAAA,eAA9C,CAA8DP,KAA9D,EAA8G,CAA9G,GAAqEpF,OAAQC,CAAAA,QAASK,CAAAA,WAAY8B,CAAAA,SAAlG,CAAPkD;AAClP,WAAShG,KAAT,GAAa,CAAb,EAAgBA,KAAhB,GAAoBa,UAAWN,CAAAA,MAA/B,EAAuCP,KAAvC,IAA4C,CAA5C;AACEwF,mBAAA,CAAYhD,MAAA,EAAZ,CAAmL,GAA3J3B,UAAA,CAAWb,KAAX,CAA2J,EAA5IwF,WAAA,CAAYhD,MAAA,EAAZ,CAA4I,GAApH3B,UAAA,CAAWb,KAAX,GAAe,CAAf,CAAoH,EAAjGwF,WAAA,CAAYhD,MAAA,EAAZ,CAAiG,GAAzEkD,GAAA,CAAI1F,KAAJ,CAAyE,EAAjEwF,WAAA,CAAYhD,MAAA,EAAZ,CAAiE,GAAzCkD,GAAA,CAAI1F,KAAJ,GAAQ,CAAR,CAAyC,EAA7BuF,UAAA,CAAW/C,MAAA,EAAX,CAA6B,GAANwD,OAAM,EAAAR,WAAA,CAAYhD,MAAA,EAAZ,CAAA,GAAwBoD,SAAxB;AADrL;AAEA,WAAS5F,MAAT,GAAa,CAAb,EAAgBA,MAAhB,GAAoB2F,QAASpF,CAAAA,MAA7B,EAAqCP,MAAA,EAArC;AACE0D,mBAAA,CAAYjB,MAAA,EAAZ,CAAA,GAAwBgD,eAAxB,GAAyCE,QAAA,CAAS3F,MAAT,CAAzC;AADF;AAP6E;AAhO1D,GAAA;AAAjBsG,SAAAA,GAAiB,8DAAjBA;AA2ONA,SAAelJ,CAAAA,gBAAf,GAAkC,IAAlC;AACAkJ,SAAeC,CAAAA,SAAf,GAA2B,CACzBC,KAAM,OADmB,EAEzBpC,KAAMzI,MAAW8K,CAAAA,aAAcC,CAAAA,cAFN,CAA3B;AAWAJ,SAAepG,CAAAA,aAAf,GAA+B,EAA/B;AAQAoG,SAAenG,CAAAA,iBAAf,GAAmC,EAAnC;AAEAxE,QAAWA,CAAAA,UAAW0C,CAAAA,GAAtB,CADoBiI,OACpB,CAAA;AACA9K,SAAQmL,CAAAA,aAAR,GAFoBL,OAEpB;AArQmH,CAAnH;;",
"sources":["node_modules/@pixi/core/lib/batch/BatchRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$batch$BatchRenderer\"] = function(global,require,module,exports) {\n\"use strict\";\nvar color = require(\"@pixi/color\"), constants = require(\"@pixi/constants\"), extensions = require(\"@pixi/extensions\"), settings = require(\"@pixi/settings\"), utils = require(\"@pixi/utils\"), ViewableBuffer = require(\"../geometry/ViewableBuffer.js\"), checkMaxIfStatementsInShader = require(\"../shader/utils/checkMaxIfStatementsInShader.js\"), State = require(\"../state/State.js\"), BaseTexture = require(\"../textures/BaseTexture.js\"), BatchDrawCall = require(\"./BatchDrawCall.js\"), BatchGeometry = require(\"./BatchGeometry.js\"), BatchShaderGenerator = require(\"./BatchShaderGenerator.js\"), BatchTextureArray = require(\"./BatchTextureArray.js\"), canUploadSameBuffer = require(\"./canUploadSameBuffer.js\"), maxRecommendedTextures = require(\"./maxRecommendedTextures.js\"), ObjectRenderer = require(\"./ObjectRenderer.js\"), texture$1 = require(\"./texture.frag.js\"), texture = require(\"./texture.vert.js\");\nconst _BatchRenderer = class _BatchRenderer2 extends ObjectRenderer.ObjectRenderer {\n  /**\n   * This will hook onto the renderer's `contextChange`\n   * and `prerender` signals.\n   * @param {PIXI.Renderer} renderer - The renderer this works for.\n   */\n  constructor(renderer) {\n    super(renderer), this.setShaderGenerator(), this.geometryClass = BatchGeometry.BatchGeometry, this.vertexSize = 6, this.state = State.State.for2d(), this.size = _BatchRenderer2.defaultBatchSize * 4, this._vertexCount = 0, this._indexCount = 0, this._bufferedElements = [], this._bufferedTextures = [], this._bufferSize = 0, this._shader = null, this._packedGeometries = [], this._packedGeometryPoolSize = 2, this._flushId = 0, this._aBuffers = {}, this._iBuffers = {}, this.maxTextures = 1, this.renderer.on(\"prerender\", this.onPrerender, this), renderer.runners.contextChange.add(this), this._dcIndex = 0, this._aIndex = 0, this._iIndex = 0, this._attributeBuffer = null, this._indexBuffer = null, this._tempBoundTextures = [];\n  }\n  /**\n   * The maximum textures that this device supports.\n   * @static\n   * @default 32\n   */\n  static get defaultMaxTextures() {\n    return this._defaultMaxTextures = this._defaultMaxTextures ?? maxRecommendedTextures.maxRecommendedTextures(32), this._defaultMaxTextures;\n  }\n  static set defaultMaxTextures(value) {\n    this._defaultMaxTextures = value;\n  }\n  /**\n   * Can we upload the same buffer in a single frame?\n   * @static\n   */\n  static get canUploadSameBuffer() {\n    return this._canUploadSameBuffer = this._canUploadSameBuffer ?? canUploadSameBuffer.canUploadSameBuffer(), this._canUploadSameBuffer;\n  }\n  static set canUploadSameBuffer(value) {\n    this._canUploadSameBuffer = value;\n  }\n  /**\n   * @see PIXI.BatchRenderer#maxTextures\n   * @deprecated since 7.1.0\n   * @readonly\n   */\n  get MAX_TEXTURES() {\n    return utils.deprecation(\"7.1.0\", \"BatchRenderer#MAX_TEXTURES renamed to BatchRenderer#maxTextures\"), this.maxTextures;\n  }\n  /**\n   * The default vertex shader source\n   * @readonly\n   */\n  static get defaultVertexSrc() {\n    return texture.default;\n  }\n  /**\n   * The default fragment shader source\n   * @readonly\n   */\n  static get defaultFragmentTemplate() {\n    return texture$1.default;\n  }\n  /**\n   * Set the shader generator.\n   * @param {object} [options]\n   * @param {string} [options.vertex=PIXI.BatchRenderer.defaultVertexSrc] - Vertex shader source\n   * @param {string} [options.fragment=PIXI.BatchRenderer.defaultFragmentTemplate] - Fragment shader template\n   */\n  setShaderGenerator({\n    vertex = _BatchRenderer2.defaultVertexSrc,\n    fragment = _BatchRenderer2.defaultFragmentTemplate\n  } = {}) {\n    this.shaderGenerator = new BatchShaderGenerator.BatchShaderGenerator(vertex, fragment);\n  }\n  /**\n   * Handles the `contextChange` signal.\n   *\n   * It calculates `this.maxTextures` and allocating the packed-geometry object pool.\n   */\n  contextChange() {\n    const gl = this.renderer.gl;\n    settings.settings.PREFER_ENV === constants.ENV.WEBGL_LEGACY ? this.maxTextures = 1 : (this.maxTextures = Math.min(\n      gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n      _BatchRenderer2.defaultMaxTextures\n    ), this.maxTextures = checkMaxIfStatementsInShader.checkMaxIfStatementsInShader(\n      this.maxTextures,\n      gl\n    )), this._shader = this.shaderGenerator.generateShader(this.maxTextures);\n    for (let i = 0; i < this._packedGeometryPoolSize; i++)\n      this._packedGeometries[i] = new this.geometryClass();\n    this.initFlushBuffers();\n  }\n  /** Makes sure that static and dynamic flush pooled objects have correct dimensions. */\n  initFlushBuffers() {\n    const {\n      _drawCallPool,\n      _textureArrayPool\n    } = _BatchRenderer2, MAX_SPRITES = this.size / 4, MAX_TA = Math.floor(MAX_SPRITES / this.maxTextures) + 1;\n    for (; _drawCallPool.length < MAX_SPRITES; )\n      _drawCallPool.push(new BatchDrawCall.BatchDrawCall());\n    for (; _textureArrayPool.length < MAX_TA; )\n      _textureArrayPool.push(new BatchTextureArray.BatchTextureArray());\n    for (let i = 0; i < this.maxTextures; i++)\n      this._tempBoundTextures[i] = null;\n  }\n  /** Handles the `prerender` signal. It ensures that flushes start from the first geometry object again. */\n  onPrerender() {\n    this._flushId = 0;\n  }\n  /**\n   * Buffers the \"batchable\" object. It need not be rendered immediately.\n   * @param {PIXI.DisplayObject} element - the element to render when\n   *    using this renderer\n   */\n  render(element) {\n    element._texture.valid && (this._vertexCount + element.vertexData.length / 2 > this.size && this.flush(), this._vertexCount += element.vertexData.length / 2, this._indexCount += element.indices.length, this._bufferedTextures[this._bufferSize] = element._texture.baseTexture, this._bufferedElements[this._bufferSize++] = element);\n  }\n  buildTexturesAndDrawCalls() {\n    const {\n      _bufferedTextures: textures,\n      maxTextures\n    } = this, textureArrays = _BatchRenderer2._textureArrayPool, batch = this.renderer.batch, boundTextures = this._tempBoundTextures, touch = this.renderer.textureGC.count;\n    let TICK = ++BaseTexture.BaseTexture._globalBatch, countTexArrays = 0, texArray = textureArrays[0], start = 0;\n    batch.copyBoundTextures(boundTextures, maxTextures);\n    for (let i = 0; i < this._bufferSize; ++i) {\n      const tex = textures[i];\n      textures[i] = null, tex._batchEnabled !== TICK && (texArray.count >= maxTextures && (batch.boundArray(texArray, boundTextures, TICK, maxTextures), this.buildDrawCalls(texArray, start, i), start = i, texArray = textureArrays[++countTexArrays], ++TICK), tex._batchEnabled = TICK, tex.touched = touch, texArray.elements[texArray.count++] = tex);\n    }\n    texArray.count > 0 && (batch.boundArray(texArray, boundTextures, TICK, maxTextures), this.buildDrawCalls(texArray, start, this._bufferSize), ++countTexArrays, ++TICK);\n    for (let i = 0; i < boundTextures.length; i++)\n      boundTextures[i] = null;\n    BaseTexture.BaseTexture._globalBatch = TICK;\n  }\n  /**\n   * Populating drawcalls for rendering\n   * @param texArray\n   * @param start\n   * @param finish\n   */\n  buildDrawCalls(texArray, start, finish) {\n    const {\n      _bufferedElements: elements,\n      _attributeBuffer,\n      _indexBuffer,\n      vertexSize\n    } = this, drawCalls = _BatchRenderer2._drawCallPool;\n    let dcIndex = this._dcIndex, aIndex = this._aIndex, iIndex = this._iIndex, drawCall = drawCalls[dcIndex];\n    drawCall.start = this._iIndex, drawCall.texArray = texArray;\n    for (let i = start; i < finish; ++i) {\n      const sprite = elements[i], tex = sprite._texture.baseTexture, spriteBlendMode = utils.premultiplyBlendMode[tex.alphaMode ? 1 : 0][sprite.blendMode];\n      elements[i] = null, start < i && drawCall.blend !== spriteBlendMode && (drawCall.size = iIndex - drawCall.start, start = i, drawCall = drawCalls[++dcIndex], drawCall.texArray = texArray, drawCall.start = iIndex), this.packInterleavedGeometry(sprite, _attributeBuffer, _indexBuffer, aIndex, iIndex), aIndex += sprite.vertexData.length / 2 * vertexSize, iIndex += sprite.indices.length, drawCall.blend = spriteBlendMode;\n    }\n    start < finish && (drawCall.size = iIndex - drawCall.start, ++dcIndex), this._dcIndex = dcIndex, this._aIndex = aIndex, this._iIndex = iIndex;\n  }\n  /**\n   * Bind textures for current rendering\n   * @param texArray\n   */\n  bindAndClearTexArray(texArray) {\n    const textureSystem = this.renderer.texture;\n    for (let j = 0; j < texArray.count; j++)\n      textureSystem.bind(texArray.elements[j], texArray.ids[j]), texArray.elements[j] = null;\n    texArray.count = 0;\n  }\n  updateGeometry() {\n    const {\n      _packedGeometries: packedGeometries,\n      _attributeBuffer: attributeBuffer,\n      _indexBuffer: indexBuffer\n    } = this;\n    _BatchRenderer2.canUploadSameBuffer ? (packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData), packedGeometries[this._flushId]._indexBuffer.update(indexBuffer), this.renderer.geometry.updateBuffers()) : (this._packedGeometryPoolSize <= this._flushId && (this._packedGeometryPoolSize++, packedGeometries[this._flushId] = new this.geometryClass()), packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData), packedGeometries[this._flushId]._indexBuffer.update(indexBuffer), this.renderer.geometry.bind(packedGeometries[this._flushId]), this.renderer.geometry.updateBuffers(), this._flushId++);\n  }\n  drawBatches() {\n    const dcCount = this._dcIndex, { gl, state: stateSystem } = this.renderer, drawCalls = _BatchRenderer2._drawCallPool;\n    let curTexArray = null;\n    for (let i = 0; i < dcCount; i++) {\n      const { texArray, type, size, start, blend } = drawCalls[i];\n      curTexArray !== texArray && (curTexArray = texArray, this.bindAndClearTexArray(texArray)), this.state.blendMode = blend, stateSystem.set(this.state), gl.drawElements(type, size, gl.UNSIGNED_SHORT, start * 2);\n    }\n  }\n  /** Renders the content _now_ and empties the current batch. */\n  flush() {\n    this._vertexCount !== 0 && (this._attributeBuffer = this.getAttributeBuffer(this._vertexCount), this._indexBuffer = this.getIndexBuffer(this._indexCount), this._aIndex = 0, this._iIndex = 0, this._dcIndex = 0, this.buildTexturesAndDrawCalls(), this.updateGeometry(), this.drawBatches(), this._bufferSize = 0, this._vertexCount = 0, this._indexCount = 0);\n  }\n  /** Starts a new sprite batch. */\n  start() {\n    this.renderer.state.set(this.state), this.renderer.texture.ensureSamplerType(this.maxTextures), this.renderer.shader.bind(this._shader), _BatchRenderer2.canUploadSameBuffer && this.renderer.geometry.bind(this._packedGeometries[this._flushId]);\n  }\n  /** Stops and flushes the current batch. */\n  stop() {\n    this.flush();\n  }\n  /** Destroys this `BatchRenderer`. It cannot be used again. */\n  destroy() {\n    for (let i = 0; i < this._packedGeometryPoolSize; i++)\n      this._packedGeometries[i] && this._packedGeometries[i].destroy();\n    this.renderer.off(\"prerender\", this.onPrerender, this), this._aBuffers = null, this._iBuffers = null, this._packedGeometries = null, this._attributeBuffer = null, this._indexBuffer = null, this._shader && (this._shader.destroy(), this._shader = null), super.destroy();\n  }\n  /**\n   * Fetches an attribute buffer from `this._aBuffers` that can hold atleast `size` floats.\n   * @param size - minimum capacity required\n   * @returns - buffer than can hold atleast `size` floats\n   */\n  getAttributeBuffer(size) {\n    const roundedP2 = utils.nextPow2(Math.ceil(size / 8)), roundedSizeIndex = utils.log2(roundedP2), roundedSize = roundedP2 * 8;\n    this._aBuffers.length <= roundedSizeIndex && (this._iBuffers.length = roundedSizeIndex + 1);\n    let buffer = this._aBuffers[roundedSize];\n    return buffer || (this._aBuffers[roundedSize] = buffer = new ViewableBuffer.ViewableBuffer(roundedSize * this.vertexSize * 4)), buffer;\n  }\n  /**\n   * Fetches an index buffer from `this._iBuffers` that can\n   * have at least `size` capacity.\n   * @param size - minimum required capacity\n   * @returns - buffer that can fit `size` indices.\n   */\n  getIndexBuffer(size) {\n    const roundedP2 = utils.nextPow2(Math.ceil(size / 12)), roundedSizeIndex = utils.log2(roundedP2), roundedSize = roundedP2 * 12;\n    this._iBuffers.length <= roundedSizeIndex && (this._iBuffers.length = roundedSizeIndex + 1);\n    let buffer = this._iBuffers[roundedSizeIndex];\n    return buffer || (this._iBuffers[roundedSizeIndex] = buffer = new Uint16Array(roundedSize)), buffer;\n  }\n  /**\n   * Takes the four batching parameters of `element`, interleaves\n   * and pushes them into the batching attribute/index buffers given.\n   *\n   * It uses these properties: `vertexData` `uvs`, `textureId` and\n   * `indicies`. It also uses the \"tint\" of the base-texture, if\n   * present.\n   * @param {PIXI.DisplayObject} element - element being rendered\n   * @param attributeBuffer - attribute buffer.\n   * @param indexBuffer - index buffer\n   * @param aIndex - number of floats already in the attribute buffer\n   * @param iIndex - number of indices already in `indexBuffer`\n   */\n  packInterleavedGeometry(element, attributeBuffer, indexBuffer, aIndex, iIndex) {\n    const {\n      uint32View,\n      float32View\n    } = attributeBuffer, packedVertices = aIndex / this.vertexSize, uvs = element.uvs, indicies = element.indices, vertexData = element.vertexData, textureId = element._texture.baseTexture._batchLocation, alpha = Math.min(element.worldAlpha, 1), argb = color.Color.shared.setValue(element._tintRGB).toPremultiplied(alpha, element._texture.baseTexture.alphaMode > 0);\n    for (let i = 0; i < vertexData.length; i += 2)\n      float32View[aIndex++] = vertexData[i], float32View[aIndex++] = vertexData[i + 1], float32View[aIndex++] = uvs[i], float32View[aIndex++] = uvs[i + 1], uint32View[aIndex++] = argb, float32View[aIndex++] = textureId;\n    for (let i = 0; i < indicies.length; i++)\n      indexBuffer[iIndex++] = packedVertices + indicies[i];\n  }\n};\n_BatchRenderer.defaultBatchSize = 4096, /** @ignore */\n_BatchRenderer.extension = {\n  name: \"batch\",\n  type: extensions.ExtensionType.RendererPlugin\n}, /**\n* Pool of `BatchDrawCall` objects that `flush` used\n* to create \"batches\" of the objects being rendered.\n*\n* These are never re-allocated again.\n* Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n* @member {PIXI.BatchDrawCall[]}\n*/\n_BatchRenderer._drawCallPool = [], /**\n* Pool of `BatchDrawCall` objects that `flush` used\n* to create \"batches\" of the objects being rendered.\n*\n* These are never re-allocated again.\n* Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n* @member {PIXI.BatchTextureArray[]}\n*/\n_BatchRenderer._textureArrayPool = [];\nlet BatchRenderer = _BatchRenderer;\nextensions.extensions.add(BatchRenderer);\nexports.BatchRenderer = BatchRenderer;\n//# sourceMappingURL=BatchRenderer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","color","constants","extensions","settings","utils","ViewableBuffer","checkMaxIfStatementsInShader","State","BaseTexture","BatchDrawCall","BatchGeometry","BatchShaderGenerator","BatchTextureArray","canUploadSameBuffer","maxRecommendedTextures","ObjectRenderer","texture$1","texture","constructor","renderer","setShaderGenerator","geometryClass","vertexSize","state","for2d","size","_BatchRenderer2","defaultBatchSize","_indexCount","_vertexCount","_bufferedElements","_bufferedTextures","_bufferSize","_shader","_packedGeometries","_packedGeometryPoolSize","_flushId","_aBuffers","_iBuffers","maxTextures","on","onPrerender","runners","contextChange","add","_iIndex","_aIndex","_dcIndex","_indexBuffer","_attributeBuffer","_tempBoundTextures","_defaultMaxTextures","value","_canUploadSameBuffer","deprecation","default","vertex","defaultVertexSrc","fragment","defaultFragmentTemplate","shaderGenerator","gl","PREFER_ENV","ENV","WEBGL_LEGACY","Math","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","defaultMaxTextures","generateShader","i","initFlushBuffers","_drawCallPool","_textureArrayPool","MAX_SPRITES","MAX_TA","floor","length","push","render","element","_texture","valid","vertexData","flush","indices","baseTexture","buildTexturesAndDrawCalls","textures","textureArrays","batch","boundTextures","touch","textureGC","count","TICK","_globalBatch","countTexArrays","texArray","start","copyBoundTextures","tex","_batchEnabled","boundArray","buildDrawCalls","touched","elements","finish","drawCalls","dcIndex","aIndex","iIndex","drawCall","sprite","spriteBlendMode","premultiplyBlendMode","alphaMode","blendMode","blend","packInterleavedGeometry","bindAndClearTexArray","textureSystem","j","bind","ids","updateGeometry","packedGeometries","attributeBuffer","indexBuffer","_buffer","update","rawBinaryData","geometry","updateBuffers","drawBatches","dcCount","stateSystem","curTexArray","type","set","drawElements","UNSIGNED_SHORT","getAttributeBuffer","getIndexBuffer","ensureSamplerType","shader","stop","destroy","off","roundedP2","nextPow2","ceil","roundedSizeIndex","log2","roundedSize","buffer","Uint16Array","uint32View","float32View","packedVertices","uvs","indicies","textureId","_batchLocation","alpha","worldAlpha","argb","Color","shared","setValue","_tintRGB","toPremultiplied","_BatchRenderer","extension","name","ExtensionType","RendererPlugin","BatchRenderer"]
}
