{
"version":3,
"file":"module$node_modules$$pixi$core$lib$batch$BatchSystem.js",
"lineCount":54,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/batch/BatchSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$batch$BatchSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar extensions = require(\"@pixi/extensions\"), ObjectRenderer = require(\"./ObjectRenderer.js\");\nclass BatchSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.emptyRenderer = new ObjectRenderer.ObjectRenderer(renderer), this.currentRenderer = this.emptyRenderer;\n  }\n  /**\n   * Changes the current renderer to the one given in parameter\n   * @param objectRenderer - The object renderer to use.\n   */\n  setObjectRenderer(objectRenderer) {\n    this.currentRenderer !== objectRenderer && (this.currentRenderer.stop(), this.currentRenderer = objectRenderer, this.currentRenderer.start());\n  }\n  /**\n   * This should be called if you wish to do some custom rendering\n   * It will basically render anything that may be batched up such as sprites\n   */\n  flush() {\n    this.setObjectRenderer(this.emptyRenderer);\n  }\n  /** Reset the system to an empty renderer */\n  reset() {\n    this.setObjectRenderer(this.emptyRenderer);\n  }\n  /**\n   * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\n   * sets actual _batchLocation for them\n   * @param arr - arr copy destination\n   * @param maxTextures - number of copied elements\n   */\n  copyBoundTextures(arr, maxTextures) {\n    const { boundTextures } = this.renderer.texture;\n    for (let i = maxTextures - 1; i >= 0; --i)\n      arr[i] = boundTextures[i] || null, arr[i] && (arr[i]._batchLocation = i);\n  }\n  /**\n   * Assigns batch locations to textures in array based on boundTextures state.\n   * All textures in texArray should have `_batchEnabled = _batchId`,\n   * and their count should be less than `maxTextures`.\n   * @param texArray - textures to bound\n   * @param boundTextures - current state of bound textures\n   * @param batchId - marker for _batchEnabled param of textures in texArray\n   * @param maxTextures - number of texture locations to manipulate\n   */\n  boundArray(texArray, boundTextures, batchId, maxTextures) {\n    const { elements, ids, count } = texArray;\n    let j = 0;\n    for (let i = 0; i < count; i++) {\n      const tex = elements[i], loc = tex._batchLocation;\n      if (loc >= 0 && loc < maxTextures && boundTextures[loc] === tex) {\n        ids[i] = loc;\n        continue;\n      }\n      for (; j < maxTextures; ) {\n        const bound = boundTextures[j];\n        if (bound && bound._batchEnabled === batchId && bound._batchLocation === j) {\n          j++;\n          continue;\n        }\n        ids[i] = j, tex._batchLocation = j, boundTextures[j] = tex;\n        break;\n      }\n    }\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this.renderer = null;\n  }\n}\nBatchSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"batch\"\n};\nextensions.extensions.add(BatchSystem);\nexports.BatchSystem = BatchSystem;\n//# sourceMappingURL=BatchSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extensions","ObjectRenderer","BatchSystem","constructor","renderer","currentRenderer","emptyRenderer","setObjectRenderer","objectRenderer","stop","start","flush","reset","copyBoundTextures","arr","maxTextures","boundTextures","texture","i","_batchLocation","boundArray","texArray","batchId","elements","ids","count","j","tex","loc","bound","_batchEnabled","destroy","extension","type","ExtensionType","RendererSystem","name","add"]
}
