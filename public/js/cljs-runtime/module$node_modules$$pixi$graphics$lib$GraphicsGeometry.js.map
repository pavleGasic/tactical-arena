{
"version":3,
"file":"module$node_modules$$pixi$graphics$lib$GraphicsGeometry.js",
"lineCount":305,
"mappings":"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",
"sources":["node_modules/@pixi/graphics/lib/GraphicsGeometry.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$graphics$lib$GraphicsGeometry\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), display = require(\"@pixi/display\"), GraphicsData = require(\"./GraphicsData.js\"), index = require(\"./utils/index.js\"), BatchPart = require(\"./utils/BatchPart.js\"), buildPoly = require(\"./utils/buildPoly.js\"), buildLine = require(\"./utils/buildLine.js\");\nconst tmpPoint = new core.Point(), _GraphicsGeometry = class _GraphicsGeometry2 extends core.BatchGeometry {\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor() {\n    super(), this.closePointEps = 1e-4, this.boundsPadding = 0, this.uvsFloat32 = null, this.indicesUint16 = null, this.batchable = !1, this.points = [], this.colors = [], this.uvs = [], this.indices = [], this.textureIds = [], this.graphicsData = [], this.drawCalls = [], this.batchDirty = -1, this.batches = [], this.dirty = 0, this.cacheDirty = -1, this.clearDirty = 0, this.shapeIndex = 0, this._bounds = new display.Bounds(), this.boundsDirty = -1;\n  }\n  /**\n   * Get the current bounds of the graphic geometry.\n   *\n   * Since 6.5.0, bounds of the graphics geometry are calculated based on the vertices of generated geometry.\n   * Since shapes or strokes with full transparency (`alpha: 0`) will not generate geometry, they are not considered\n   * when calculating bounds for the graphics geometry. See PR [#8343]{@link https://github.com/pixijs/pixijs/pull/8343}\n   * and issue [#8623]{@link https://github.com/pixijs/pixijs/pull/8623}.\n   * @readonly\n   */\n  get bounds() {\n    return this.updateBatches(), this.boundsDirty !== this.dirty && (this.boundsDirty = this.dirty, this.calculateBounds()), this._bounds;\n  }\n  /** Call if you changed graphicsData manually. Empties all batch buffers. */\n  invalidate() {\n    this.boundsDirty = -1, this.dirty++, this.batchDirty++, this.shapeIndex = 0, this.points.length = 0, this.colors.length = 0, this.uvs.length = 0, this.indices.length = 0, this.textureIds.length = 0;\n    for (let i = 0; i < this.drawCalls.length; i++)\n      this.drawCalls[i].texArray.clear(), index.DRAW_CALL_POOL.push(this.drawCalls[i]);\n    this.drawCalls.length = 0;\n    for (let i = 0; i < this.batches.length; i++) {\n      const batchPart = this.batches[i];\n      batchPart.reset(), index.BATCH_POOL.push(batchPart);\n    }\n    this.batches.length = 0;\n  }\n  /**\n   * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n   * @returns - This GraphicsGeometry object. Good for chaining method calls\n   */\n  clear() {\n    return this.graphicsData.length > 0 && (this.invalidate(), this.clearDirty++, this.graphicsData.length = 0), this;\n  }\n  /**\n   * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n   * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n   * @param fillStyle - Defines style of the fill.\n   * @param lineStyle - Defines style of the lines.\n   * @param matrix - Transform applied to the points of the shape.\n   * @returns - Returns geometry for chaining.\n   */\n  drawShape(shape, fillStyle = null, lineStyle = null, matrix = null) {\n    const data = new GraphicsData.GraphicsData(shape, fillStyle, lineStyle, matrix);\n    return this.graphicsData.push(data), this.dirty++, this;\n  }\n  /**\n   * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n   * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n   * @param matrix - Transform applied to the points of the shape.\n   * @returns - Returns geometry for chaining.\n   */\n  drawHole(shape, matrix = null) {\n    if (!this.graphicsData.length)\n      return null;\n    const data = new GraphicsData.GraphicsData(shape, null, null, matrix), lastShape = this.graphicsData[this.graphicsData.length - 1];\n    return data.lineStyle = lastShape.lineStyle, lastShape.holes.push(data), this.dirty++, this;\n  }\n  /** Destroys the GraphicsGeometry object. */\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.graphicsData.length; ++i)\n      this.graphicsData[i].destroy();\n    this.points.length = 0, this.points = null, this.colors.length = 0, this.colors = null, this.uvs.length = 0, this.uvs = null, this.indices.length = 0, this.indices = null, this.indexBuffer.destroy(), this.indexBuffer = null, this.graphicsData.length = 0, this.graphicsData = null, this.drawCalls.length = 0, this.drawCalls = null, this.batches.length = 0, this.batches = null, this._bounds = null;\n  }\n  /**\n   * Check to see if a point is contained within this geometry.\n   * @param point - Point to check if it's contained.\n   * @returns {boolean} `true` if the point is contained within geometry.\n   */\n  containsPoint(point) {\n    const graphicsData = this.graphicsData;\n    for (let i = 0; i < graphicsData.length; ++i) {\n      const data = graphicsData[i];\n      if (data.fillStyle.visible && data.shape && (data.matrix ? data.matrix.applyInverse(point, tmpPoint) : tmpPoint.copyFrom(point), data.shape.contains(tmpPoint.x, tmpPoint.y))) {\n        let hitHole = !1;\n        if (data.holes) {\n          for (let i2 = 0; i2 < data.holes.length; i2++)\n            if (data.holes[i2].shape.contains(tmpPoint.x, tmpPoint.y)) {\n              hitHole = !0;\n              break;\n            }\n        }\n        if (!hitHole)\n          return !0;\n      }\n    }\n    return !1;\n  }\n  /**\n   * Generates intermediate batch data. Either gets converted to drawCalls\n   * or used to convert to batch objects directly by the Graphics object.\n   */\n  updateBatches() {\n    if (!this.graphicsData.length) {\n      this.batchable = !0;\n      return;\n    }\n    if (!this.validateBatching())\n      return;\n    this.cacheDirty = this.dirty;\n    const uvs = this.uvs, graphicsData = this.graphicsData;\n    let batchPart = null, currentStyle = null;\n    this.batches.length > 0 && (batchPart = this.batches[this.batches.length - 1], currentStyle = batchPart.style);\n    for (let i = this.shapeIndex; i < graphicsData.length; i++) {\n      this.shapeIndex++;\n      const data = graphicsData[i], fillStyle = data.fillStyle, lineStyle = data.lineStyle;\n      index.FILL_COMMANDS[data.type].build(data), data.matrix && this.transformPoints(data.points, data.matrix), (fillStyle.visible || lineStyle.visible) && this.processHoles(data.holes);\n      for (let j = 0; j < 2; j++) {\n        const style = j === 0 ? fillStyle : lineStyle;\n        if (!style.visible)\n          continue;\n        const nextTexture = style.texture.baseTexture, index2 = this.indices.length, attribIndex = this.points.length / 2;\n        nextTexture.wrapMode = core.WRAP_MODES.REPEAT, j === 0 ? this.processFill(data) : this.processLine(data);\n        const size = this.points.length / 2 - attribIndex;\n        size !== 0 && (batchPart && !this._compareStyles(currentStyle, style) && (batchPart.end(index2, attribIndex), batchPart = null), batchPart || (batchPart = index.BATCH_POOL.pop() || new BatchPart.BatchPart(), batchPart.begin(style, index2, attribIndex), this.batches.push(batchPart), currentStyle = style), this.addUvs(this.points, uvs, style.texture, attribIndex, size, style.matrix));\n      }\n    }\n    const index$1 = this.indices.length, attrib = this.points.length / 2;\n    if (batchPart && batchPart.end(index$1, attrib), this.batches.length === 0) {\n      this.batchable = !0;\n      return;\n    }\n    const need32 = attrib > 65535;\n    this.indicesUint16 && this.indices.length === this.indicesUint16.length && need32 === this.indicesUint16.BYTES_PER_ELEMENT > 2 ? this.indicesUint16.set(this.indices) : this.indicesUint16 = need32 ? new Uint32Array(this.indices) : new Uint16Array(this.indices), this.batchable = this.isBatchable(), this.batchable ? this.packBatches() : this.buildDrawCalls();\n  }\n  /**\n   * Affinity check\n   * @param styleA\n   * @param styleB\n   */\n  _compareStyles(styleA, styleB) {\n    return !(!styleA || !styleB || styleA.texture.baseTexture !== styleB.texture.baseTexture || styleA.color + styleA.alpha !== styleB.color + styleB.alpha || !!styleA.native != !!styleB.native);\n  }\n  /** Test geometry for batching process. */\n  validateBatching() {\n    if (this.dirty === this.cacheDirty || !this.graphicsData.length)\n      return !1;\n    for (let i = 0, l = this.graphicsData.length; i < l; i++) {\n      const data = this.graphicsData[i], fill = data.fillStyle, line = data.lineStyle;\n      if (fill && !fill.texture.baseTexture.valid || line && !line.texture.baseTexture.valid)\n        return !1;\n    }\n    return !0;\n  }\n  /** Offset the indices so that it works with the batcher. */\n  packBatches() {\n    this.batchDirty++, this.uvsFloat32 = new Float32Array(this.uvs);\n    const batches = this.batches;\n    for (let i = 0, l = batches.length; i < l; i++) {\n      const batch = batches[i];\n      for (let j = 0; j < batch.size; j++) {\n        const index2 = batch.start + j;\n        this.indicesUint16[index2] = this.indicesUint16[index2] - batch.attribStart;\n      }\n    }\n  }\n  /**\n   * Checks to see if this graphics geometry can be batched.\n   * Currently it needs to be small enough and not contain any native lines.\n   */\n  isBatchable() {\n    if (this.points.length > 65535 * 2)\n      return !1;\n    const batches = this.batches;\n    for (let i = 0; i < batches.length; i++)\n      if (batches[i].style.native)\n        return !1;\n    return this.points.length < _GraphicsGeometry2.BATCHABLE_SIZE * 2;\n  }\n  /** Converts intermediate batches data to drawCalls. */\n  buildDrawCalls() {\n    let TICK = ++core.BaseTexture._globalBatch;\n    for (let i = 0; i < this.drawCalls.length; i++)\n      this.drawCalls[i].texArray.clear(), index.DRAW_CALL_POOL.push(this.drawCalls[i]);\n    this.drawCalls.length = 0;\n    const colors = this.colors, textureIds = this.textureIds;\n    let currentGroup = index.DRAW_CALL_POOL.pop();\n    currentGroup || (currentGroup = new core.BatchDrawCall(), currentGroup.texArray = new core.BatchTextureArray()), currentGroup.texArray.count = 0, currentGroup.start = 0, currentGroup.size = 0, currentGroup.type = core.DRAW_MODES.TRIANGLES;\n    let textureCount = 0, currentTexture = null, textureId = 0, native = !1, drawMode = core.DRAW_MODES.TRIANGLES, index$1 = 0;\n    this.drawCalls.push(currentGroup);\n    for (let i = 0; i < this.batches.length; i++) {\n      const data = this.batches[i], maxTextures = 8, style = data.style, nextTexture = style.texture.baseTexture;\n      native !== !!style.native && (native = !!style.native, drawMode = native ? core.DRAW_MODES.LINES : core.DRAW_MODES.TRIANGLES, currentTexture = null, textureCount = maxTextures, TICK++), currentTexture !== nextTexture && (currentTexture = nextTexture, nextTexture._batchEnabled !== TICK && (textureCount === maxTextures && (TICK++, textureCount = 0, currentGroup.size > 0 && (currentGroup = index.DRAW_CALL_POOL.pop(), currentGroup || (currentGroup = new core.BatchDrawCall(), currentGroup.texArray = new core.BatchTextureArray()), this.drawCalls.push(currentGroup)), currentGroup.start = index$1, currentGroup.size = 0, currentGroup.texArray.count = 0, currentGroup.type = drawMode), nextTexture.touched = 1, nextTexture._batchEnabled = TICK, nextTexture._batchLocation = textureCount, nextTexture.wrapMode = core.WRAP_MODES.REPEAT, currentGroup.texArray.elements[currentGroup.texArray.count++] = nextTexture, textureCount++)), currentGroup.size += data.size, index$1 += data.size, textureId = nextTexture._batchLocation, this.addColors(colors, style.color, style.alpha, data.attribSize, data.attribStart), this.addTextureIds(textureIds, textureId, data.attribSize, data.attribStart);\n    }\n    core.BaseTexture._globalBatch = TICK, this.packAttributes();\n  }\n  /** Packs attributes to single buffer. */\n  packAttributes() {\n    const verts = this.points, uvs = this.uvs, colors = this.colors, textureIds = this.textureIds, glPoints = new ArrayBuffer(verts.length * 3 * 4), f32 = new Float32Array(glPoints), u32 = new Uint32Array(glPoints);\n    let p = 0;\n    for (let i = 0; i < verts.length / 2; i++)\n      f32[p++] = verts[i * 2], f32[p++] = verts[i * 2 + 1], f32[p++] = uvs[i * 2], f32[p++] = uvs[i * 2 + 1], u32[p++] = colors[i], f32[p++] = textureIds[i];\n    this._buffer.update(glPoints), this._indexBuffer.update(this.indicesUint16);\n  }\n  /**\n   * Process fill part of Graphics.\n   * @param data\n   */\n  processFill(data) {\n    data.holes.length ? buildPoly.buildPoly.triangulate(data, this) : index.FILL_COMMANDS[data.type].triangulate(data, this);\n  }\n  /**\n   * Process line part of Graphics.\n   * @param data\n   */\n  processLine(data) {\n    buildLine.buildLine(data, this);\n    for (let i = 0; i < data.holes.length; i++)\n      buildLine.buildLine(data.holes[i], this);\n  }\n  /**\n   * Process the holes data.\n   * @param holes\n   */\n  processHoles(holes) {\n    for (let i = 0; i < holes.length; i++) {\n      const hole = holes[i];\n      index.FILL_COMMANDS[hole.type].build(hole), hole.matrix && this.transformPoints(hole.points, hole.matrix);\n    }\n  }\n  /** Update the local bounds of the object. Expensive to use performance-wise. */\n  calculateBounds() {\n    const bounds = this._bounds;\n    bounds.clear(), bounds.addVertexData(this.points, 0, this.points.length), bounds.pad(this.boundsPadding, this.boundsPadding);\n  }\n  /**\n   * Transform points using matrix.\n   * @param points - Points to transform\n   * @param matrix - Transform matrix\n   */\n  transformPoints(points, matrix) {\n    for (let i = 0; i < points.length / 2; i++) {\n      const x = points[i * 2], y = points[i * 2 + 1];\n      points[i * 2] = matrix.a * x + matrix.c * y + matrix.tx, points[i * 2 + 1] = matrix.b * x + matrix.d * y + matrix.ty;\n    }\n  }\n  /**\n   * Add colors.\n   * @param colors - List of colors to add to\n   * @param color - Color to add\n   * @param alpha - Alpha to use\n   * @param size - Number of colors to add\n   * @param offset\n   */\n  addColors(colors, color, alpha, size, offset = 0) {\n    const bgr = core.Color.shared.setValue(color).toLittleEndianNumber(), result = core.Color.shared.setValue(bgr).toPremultiplied(alpha);\n    colors.length = Math.max(colors.length, offset + size);\n    for (let i = 0; i < size; i++)\n      colors[offset + i] = result;\n  }\n  /**\n   * Add texture id that the shader/fragment wants to use.\n   * @param textureIds\n   * @param id\n   * @param size\n   * @param offset\n   */\n  addTextureIds(textureIds, id, size, offset = 0) {\n    textureIds.length = Math.max(textureIds.length, offset + size);\n    for (let i = 0; i < size; i++)\n      textureIds[offset + i] = id;\n  }\n  /**\n   * Generates the UVs for a shape.\n   * @param verts - Vertices\n   * @param uvs - UVs\n   * @param texture - Reference to Texture\n   * @param start - Index buffer start index.\n   * @param size - The size/length for index buffer.\n   * @param matrix - Optional transform for all points.\n   */\n  addUvs(verts, uvs, texture, start, size, matrix = null) {\n    let index2 = 0;\n    const uvsStart = uvs.length, frame = texture.frame;\n    for (; index2 < size; ) {\n      let x = verts[(start + index2) * 2], y = verts[(start + index2) * 2 + 1];\n      if (matrix) {\n        const nx = matrix.a * x + matrix.c * y + matrix.tx;\n        y = matrix.b * x + matrix.d * y + matrix.ty, x = nx;\n      }\n      index2++, uvs.push(x / frame.width, y / frame.height);\n    }\n    const baseTexture = texture.baseTexture;\n    (frame.width < baseTexture.width || frame.height < baseTexture.height) && this.adjustUvs(uvs, texture, uvsStart, size);\n  }\n  /**\n   * Modify uvs array according to position of texture region\n   * Does not work with rotated or trimmed textures\n   * @param uvs - array\n   * @param texture - region\n   * @param start - starting index for uvs\n   * @param size - how many points to adjust\n   */\n  adjustUvs(uvs, texture, start, size) {\n    const baseTexture = texture.baseTexture, eps = 1e-6, finish = start + size * 2, frame = texture.frame, scaleX = frame.width / baseTexture.width, scaleY = frame.height / baseTexture.height;\n    let offsetX = frame.x / frame.width, offsetY = frame.y / frame.height, minX = Math.floor(uvs[start] + eps), minY = Math.floor(uvs[start + 1] + eps);\n    for (let i = start + 2; i < finish; i += 2)\n      minX = Math.min(minX, Math.floor(uvs[i] + eps)), minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));\n    offsetX -= minX, offsetY -= minY;\n    for (let i = start; i < finish; i += 2)\n      uvs[i] = (uvs[i] + offsetX) * scaleX, uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;\n  }\n};\n_GraphicsGeometry.BATCHABLE_SIZE = 100;\nlet GraphicsGeometry = _GraphicsGeometry;\nexports.GraphicsGeometry = GraphicsGeometry;\n//# sourceMappingURL=GraphicsGeometry.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","display","GraphicsData","index","BatchPart","buildPoly","buildLine","tmpPoint","Point","_GraphicsGeometry","BatchGeometry","constructor","closePointEps","boundsPadding","indicesUint16","uvsFloat32","batchable","points","colors","uvs","indices","textureIds","graphicsData","drawCalls","batchDirty","batches","dirty","cacheDirty","shapeIndex","clearDirty","_bounds","Bounds","boundsDirty","updateBatches","calculateBounds","invalidate","length","i","texArray","clear","DRAW_CALL_POOL","push","batchPart","reset","BATCH_POOL","drawShape","shape","fillStyle","lineStyle","matrix","data","drawHole","lastShape","holes","destroy","indexBuffer","containsPoint","point","visible","applyInverse","copyFrom","contains","x","y","hitHole","i2","validateBatching","currentStyle","style","FILL_COMMANDS","type","build","transformPoints","processHoles","j","index2","attribIndex","texture","baseTexture","wrapMode","WRAP_MODES","REPEAT","processFill","processLine","size","_compareStyles","end","pop","begin","addUvs","index$1","attrib","need32","BYTES_PER_ELEMENT","set","Uint32Array","Uint16Array","isBatchable","packBatches","buildDrawCalls","styleA","styleB","color","alpha","native","l","fill","line","valid","Float32Array","batch","start","attribStart","_GraphicsGeometry2","BATCHABLE_SIZE","TICK","BaseTexture","_globalBatch","currentGroup","BatchDrawCall","BatchTextureArray","count","DRAW_MODES","TRIANGLES","textureCount","currentTexture","drawMode","nextTexture","LINES","maxTextures","_batchEnabled","touched","_batchLocation","elements","textureId","addColors","attribSize","addTextureIds","packAttributes","verts","glPoints","ArrayBuffer","f32","u32","p","_buffer","update","_indexBuffer","triangulate","hole","bounds","addVertexData","pad","a","c","tx","b","d","ty","offset","bgr","Color","shared","setValue","toLittleEndianNumber","result","toPremultiplied","Math","max","id","uvsStart","frame","nx","width","height","adjustUvs","finish","scaleX","scaleY","offsetX","offsetY","minX","floor","eps","minY","min","GraphicsGeometry"]
}
