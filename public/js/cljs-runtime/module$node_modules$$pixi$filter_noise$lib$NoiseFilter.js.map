{
"version":3,
"file":"module$node_modules$$pixi$filter_noise$lib$NoiseFilter.js",
"lineCount":24,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,GAA2E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE/GC,OAAOH,OAAA,CAAQ,0CAAR,CAFwG,EAEjFI,QAAQJ,OAAA,CAAQ,uDAAR,CAFyE;AAGnH,OAAMK,YAAN,QAA0BF,KAAKG,CAAAA,MAA/B;AAKEC,eAAW,CAACC,OAAA,GAAU,GAAX,EAAgBC,IAAA,GAAOC,IAAKC,CAAAA,MAAL,EAAvB,CAAsC;AAC/C,WAAA,CAAMR,IAAKS,CAAAA,mBAAX,EAAgCR,KAAMS,CAAAA,OAAtC,EAA+C,CAC7CC,OAAQ,CADqC,EAE7CC,MAAO,CAFsC,CAA/C,CAAA;AAGI,UAAKX,CAAAA,KAAL,GAAaI,OAAb;AAAsB,UAAKC,CAAAA,IAAL,GAAYA,IAAZ;AAJqB;AAU7C,aAAQ,EAAA;AACV,aAAO,IAAKO,CAAAA,QAASF,CAAAA,MAArB;AADU;AAGR,aAAK,CAACG,KAAD,CAAQ;AACf,UAAKD,CAAAA,QAASF,CAAAA,MAAd,GAAuBG,KAAvB;AADe;AAIb,YAAO,EAAA;AACT,aAAO,IAAKD,CAAAA,QAASD,CAAAA,KAArB;AADS;AAGP,YAAI,CAACE,KAAD,CAAQ;AACd,UAAKD,CAAAA,QAASD,CAAAA,KAAd,GAAsBE,KAAtB;AADc;AAzBlB;AA6BAf,SAAQG,CAAAA,WAAR,GAAsBA,WAAtB;AAhCmH,CAAnH;;",
"sources":["node_modules/@pixi/filter-noise/lib/NoiseFilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$filter_noise$lib$NoiseFilter\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), noise = require(\"./noise.frag.js\");\nclass NoiseFilter extends core.Filter {\n  /**\n   * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n   * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n   */\n  constructor(noise$1 = 0.5, seed = Math.random()) {\n    super(core.defaultFilterVertex, noise.default, {\n      uNoise: 0,\n      uSeed: 0\n    }), this.noise = noise$1, this.seed = seed;\n  }\n  /**\n   * The amount of noise to apply, this value should be in the range (0, 1].\n   * @default 0.5\n   */\n  get noise() {\n    return this.uniforms.uNoise;\n  }\n  set noise(value) {\n    this.uniforms.uNoise = value;\n  }\n  /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n  get seed() {\n    return this.uniforms.uSeed;\n  }\n  set seed(value) {\n    this.uniforms.uSeed = value;\n  }\n}\nexports.NoiseFilter = NoiseFilter;\n//# sourceMappingURL=NoiseFilter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","noise","NoiseFilter","Filter","constructor","noise$1","seed","Math","random","defaultFilterVertex","default","uNoise","uSeed","uniforms","value"]
}
