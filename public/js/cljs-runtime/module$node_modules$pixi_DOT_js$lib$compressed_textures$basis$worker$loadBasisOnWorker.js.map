{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$basis$worker$loadBasisOnWorker.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,CAAA,sFAAA,GAA2G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AASnJC,UAASA,eAAc,CAACC,iBAAD,CAAoB;AACpCC,eAAL,KACEA,WAQA,GARyCC,CAA3B,IAAIC,YAAaC,CAAAA,OAAjB,EAA2BF,EAAAA,MAQzC,EAPAD,WAAYI,CAAAA,SAOZ,GAPyBC,YAADC,IAAkB;AACxC,YAAM,CAAEC,OAAF,EAAWC,GAAX,EAAgBC,cAAhB,CAAA,GAAmCJ,YAAaK,CAAAA,IAAtD;AACKH,aAAL,IACEI,OAAQC,CAAAA,IAAR,CAAa,8BAAb,EAA6CJ,GAA7C,CADF;AAGAK,aAAA,CAAQL,GAAR,CAAA,CAAaC,cAAb,CAAA;AALwC,KAO1C,EAAAT,WAAYc,CAAAA,WAAZ,CAAwB,CACtBC,KAAM,MADgB,EAEtBC,MAAOC,sBAAuBC,CAAAA,mBAAoBF,CAAAA,KAF5B,EAGtBG,QAASF,sBAAuBC,CAAAA,mBAAoBC,CAAAA,OAH9B,EAItBpB,iBAJsB,CAAxB,CATF;AAgBA,WAAOC,WAAP;AAjByC;AAN3C,MAAIE,eAAeP,OAAA,CAAQ,2DAAR,CAAnB,EACIsB,yBAAyBtB,OAAA,CAAQ,4FAAR,CAD7B;AAGA,cAAA;AACA,MAAIK,WAAJ;AACA,QAAMa,UAAU,EAAhB;AA4BAhB,SAAQuB,CAAAA,iBAAR,GARAA,QAA0B,CAACZ,GAAD,EAAMT,iBAAN,CAAyB;AACjD,UAAMsB,YAAYvB,cAAA,CAAeC,iBAAf,CAAlB;AACA,WAAO,IAAIuB,OAAJ,CAAaC,OAAD,IAAa;AAC9BV,aAAA,CAAQL,GAAR,CAAA,GAAee,OAAf;AACAF,eAAUP,CAAAA,WAAV,CAAsB,CAAEC,KAAM,MAAR,EAAgBP,GAAhB,CAAtB,CAAA;AAF8B,KAAzB,CAAP;AAFiD,GAQnD;AApCmJ,CAAnJ;;",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/basis/worker/loadBasisOnWorker.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$basis$worker$loadBasisOnWorker\"] = function(global,require,module,exports) {\n'use strict';\n\nvar basis_worker = require('../../../_virtual/basis.worker.js');\nvar setBasisTranscoderPath = require('../utils/setBasisTranscoderPath.js');\n\n\"use strict\";\nlet basisWorker;\nconst urlHash = {};\nfunction getBasisWorker(supportedTextures) {\n  if (!basisWorker) {\n    basisWorker = new basis_worker.default().worker;\n    basisWorker.onmessage = (messageEvent) => {\n      const { success, url, textureOptions } = messageEvent.data;\n      if (!success) {\n        console.warn(\"Failed to load Basis texture\", url);\n      }\n      urlHash[url](textureOptions);\n    };\n    basisWorker.postMessage({\n      type: \"init\",\n      jsUrl: setBasisTranscoderPath.basisTranscoderUrls.jsUrl,\n      wasmUrl: setBasisTranscoderPath.basisTranscoderUrls.wasmUrl,\n      supportedTextures\n    });\n  }\n  return basisWorker;\n}\nfunction loadBasisOnWorker(url, supportedTextures) {\n  const ktxWorker = getBasisWorker(supportedTextures);\n  return new Promise((resolve) => {\n    urlHash[url] = resolve;\n    ktxWorker.postMessage({ type: \"load\", url });\n  });\n}\n\nexports.loadBasisOnWorker = loadBasisOnWorker;\n//# sourceMappingURL=loadBasisOnWorker.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getBasisWorker","supportedTextures","basisWorker","worker","basis_worker","default","onmessage","messageEvent","basisWorker.onmessage","success","url","textureOptions","data","console","warn","urlHash","postMessage","type","jsUrl","setBasisTranscoderPath","basisTranscoderUrls","wasmUrl","loadBasisOnWorker","ktxWorker","Promise","resolve"]
}
