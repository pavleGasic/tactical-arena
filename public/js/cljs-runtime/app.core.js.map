{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["js/app","js/app.core","js/app.core.app-state","app.core/app-state","reagent.core.atom","app.core/cell","x","y","units","cljs.core.concat","cljs.core/deref","cljs.core.get_in","unit","p1__38221#","cljs.core/some","cljs.core._EQ_","cljs.core/name","app.core/board","size","iter__5480__auto__","s__38223","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","xs__6383__auto__","cljs.core/first","iterys__5476__auto__","s__38225","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__38227","cljs.core/chunk-buffer","i__38226","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38224","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","iter__38222","cljs.core.range","app.core/root","app.core/start","reagent.dom.render","js/document","app.core/init","cljs.core/chunk-first"],"sourcesContent":["(ns app.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]))\n\n(defonce app-state (r/atom {:grid-size 5\n                            :units {:player [{:id :p1 :pos [0 0] :hp 10}]\n                                    :bot    [{:id :b1 :pos [4 4] :hp 10}]}\n                            :selected nil}))\n\n(defn cell [x y]\n  (let [units (concat (get-in @app-state [:units :player])\n                      (get-in @app-state [:units :bot]))\n        unit (some #(when (= (:pos %) [x y]) %) units)]\n    [:div.cell {:style {:border \"1px solid #ccc\"\n                        :width \"60px\"\n                        :height \"60px\"\n                        :display \"flex\"\n                        :align-items \"center\"\n                        :justify-content \"center\"\n                        :background (when unit \"#eef\")}}\n     (when unit (name (:id unit)))]))\n\n(defn board []\n  (let [size (:grid-size @app-state)]\n    [:div.board {:style {:display \"grid\"\n                         :grid-template-columns (str \"repeat(\" size \", 60px)\")\n                         :gap \"4px\"}}\n     (for [y (range size)\n           x (range size)]\n       ^{:key [x y]} [cell x y])]))\n\n(defn root []\n  [:div\n   [:h1 \"Tactical Arena\"]\n   [board]])\n\n(defn ^:dev/after-load start []\n  (rdom/render [root]\n               (.getElementById js/document \"app\")))\n\n(defn init []\n  (start))"]}