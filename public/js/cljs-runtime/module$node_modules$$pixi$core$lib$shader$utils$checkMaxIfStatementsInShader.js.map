{
"version":3,
"file":"module$node_modules$$pixi$core$lib$shader$utils$checkMaxIfStatementsInShader.js",
"lineCount":23,
"mappings":"AAAAA,cAAA,CAAA,4EAAA,GAAiG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AA+BzIA,SAAQC,CAAAA,4BAAR,GAbAA,QAAqC,CAACC,MAAD,EAASC,EAAT,CAAa;AAChD,QAAe,CAAf,KAAID,MAAJ;AACE,YAAUE,KAAJ,CAAU,+DAAV,CAAN;AADF;AAEA,UAAMC,SAASF,EAAGG,CAAAA,YAAH,CAAgBH,EAAGI,CAAAA,eAAnB,CAAf;AACA,SAAA,CAAA,CAAA,CAAW;AACwBC,UAAAA,wBAfnCC,8GAemCD,CAAAA,OAAAA;AAXnC,UAAIE,MAAM,EAAV;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAU4ET,MAV5E,EAA4B,EAAES,CAA9B;AACM,SACC,GADLA,CACK,KADKD,GACL,IADa,SACb,GAAAC,CAAA,GAQqET,MARrE,GAAa,CAAb,KAAmBQ,GAAnB,IAA2B,cAAaC,CAAb,OAA3B,CAAA;AAFP;AAUQC,2BAAAA,GAA2BJ,qBAAb,CAAA,IAAA,CAftBC,8GAesB,EAAqB,aAArB,EAPfC,GAOe,CAAdE;AACN,UAAIT,EAAGU,CAAAA,YAAH,CAAgBR,MAAhB,EAAwBO,qBAAxB,CAAA,EAAsCT,EAAGW,CAAAA,aAAH,CAAiBT,MAAjB,CAAtC,EAAiEF,EAAGY,CAAAA,kBAAH,CAAsBV,MAAtB,EAA8BF,EAAGa,CAAAA,cAAjC,CAArE;AAGE;AAHF;AACEd,cAAA,GAASA,MAAT,GAAkB,CAAlB,GAAsB,CAAtB;AADF;AAFS;AAOX,WAAOA,MAAP;AAXgD,GAalD;AA/ByI,CAAzI;;",
"sources":["node_modules/@pixi/core/lib/shader/utils/checkMaxIfStatementsInShader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$shader$utils$checkMaxIfStatementsInShader\"] = function(global,require,module,exports) {\n\"use strict\";\nconst fragTemplate = [\n  \"precision mediump float;\",\n  \"void main(void){\",\n  \"float test = 0.1;\",\n  \"%forloop%\",\n  \"gl_FragColor = vec4(0.0);\",\n  \"}\"\n].join(`\n`);\nfunction generateIfTestSrc(maxIfs) {\n  let src = \"\";\n  for (let i = 0; i < maxIfs; ++i)\n    i > 0 && (src += `\nelse `), i < maxIfs - 1 && (src += `if(test == ${i}.0){}`);\n  return src;\n}\nfunction checkMaxIfStatementsInShader(maxIfs, gl) {\n  if (maxIfs === 0)\n    throw new Error(\"Invalid value of `0` passed to `checkMaxIfStatementsInShader`\");\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  for (; ; ) {\n    const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n    if (gl.shaderSource(shader, fragmentSrc), gl.compileShader(shader), !gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n      maxIfs = maxIfs / 2 | 0;\n    else\n      break;\n  }\n  return maxIfs;\n}\nexports.checkMaxIfStatementsInShader = checkMaxIfStatementsInShader;\n//# sourceMappingURL=checkMaxIfStatementsInShader.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","checkMaxIfStatementsInShader","maxIfs","gl","Error","shader","createShader","FRAGMENT_SHADER","replace","fragTemplate","src","i","fragmentSrc","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS"]
}
