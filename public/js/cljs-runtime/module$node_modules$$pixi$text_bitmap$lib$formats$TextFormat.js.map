{
"version":3,
"file":"module$node_modules$$pixi$text_bitmap$lib$formats$TextFormat.js",
"lineCount":29,
"mappings":"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",
"sources":["node_modules/@pixi/text-bitmap/lib/formats/TextFormat.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text_bitmap$lib$formats$TextFormat\"] = function(global,require,module,exports) {\n\"use strict\";\nvar BitmapFontData = require(\"../BitmapFontData.js\");\nclass TextFormat {\n  /**\n   * Check if resource refers to txt font data.\n   * @param data\n   * @returns - True if resource could be treated as font data, false otherwise.\n   */\n  static test(data) {\n    return typeof data == \"string\" && data.startsWith(\"info face=\");\n  }\n  /**\n   * Convert text font data to a javascript object.\n   * @param txt - Raw string data to be converted\n   * @returns - Parsed font data\n   */\n  static parse(txt) {\n    const items = txt.match(/^[a-z]+\\s+.+$/gm), rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n    for (const i in items) {\n      const name = items[i].match(/^[a-z]+/gm)[0], attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm), itemData = {};\n      for (const i2 in attributeList) {\n        const split = attributeList[i2].split(\"=\"), key = split[0], strValue = split[1].replace(/\"/gm, \"\"), floatValue = parseFloat(strValue), value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      rawData[name].push(itemData);\n    }\n    const font = new BitmapFontData.BitmapFontData();\n    return rawData.info.forEach((info) => font.info.push({\n      face: info.face,\n      size: parseInt(info.size, 10)\n    })), rawData.common.forEach((common) => font.common.push({\n      lineHeight: parseInt(common.lineHeight, 10)\n    })), rawData.page.forEach((page) => font.page.push({\n      id: parseInt(page.id, 10),\n      file: page.file\n    })), rawData.char.forEach((char) => font.char.push({\n      id: parseInt(char.id, 10),\n      page: parseInt(char.page, 10),\n      x: parseInt(char.x, 10),\n      y: parseInt(char.y, 10),\n      width: parseInt(char.width, 10),\n      height: parseInt(char.height, 10),\n      xoffset: parseInt(char.xoffset, 10),\n      yoffset: parseInt(char.yoffset, 10),\n      xadvance: parseInt(char.xadvance, 10)\n    })), rawData.kerning.forEach((kerning) => font.kerning.push({\n      first: parseInt(kerning.first, 10),\n      second: parseInt(kerning.second, 10),\n      amount: parseInt(kerning.amount, 10)\n    })), rawData.distanceField.forEach((df) => font.distanceField.push({\n      distanceRange: parseInt(df.distanceRange, 10),\n      fieldType: df.fieldType\n    })), font;\n  }\n}\nexports.TextFormat = TextFormat;\n//# sourceMappingURL=TextFormat.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","BitmapFontData","TextFormat","test","data","startsWith","parse","txt","items","match","rawData","info","common","page","char","chars","kerning","kernings","distanceField","i","name","attributeList","itemData","i2","split","key","strValue","replace","floatValue","parseFloat","value","isNaN","push","font","forEach","face","size","parseInt","lineHeight","id","file","x","y","width","height","xoffset","yoffset","xadvance","first","second","amount","df","distanceRange","fieldType"]
}
