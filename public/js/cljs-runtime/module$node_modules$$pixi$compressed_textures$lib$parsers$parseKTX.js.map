{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$lib$parsers$parseKTX.js",
"lineCount":114,
"mappings":"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",
"sources":["node_modules/@pixi/compressed-textures/lib/parsers/parseKTX.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$lib$parsers$parseKTX\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), _const = require(\"../const.js\");\nrequire(\"../resources/index.js\");\nvar CompressedTextureResource = require(\"../resources/CompressedTextureResource.js\");\nconst FILE_IDENTIFIER = [171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10], ENDIANNESS = 67305985, KTX_FIELDS = {\n  FILE_IDENTIFIER: 0,\n  ENDIANNESS: 12,\n  GL_TYPE: 16,\n  GL_TYPE_SIZE: 20,\n  GL_FORMAT: 24,\n  GL_INTERNAL_FORMAT: 28,\n  GL_BASE_INTERNAL_FORMAT: 32,\n  PIXEL_WIDTH: 36,\n  PIXEL_HEIGHT: 40,\n  PIXEL_DEPTH: 44,\n  NUMBER_OF_ARRAY_ELEMENTS: 48,\n  NUMBER_OF_FACES: 52,\n  NUMBER_OF_MIPMAP_LEVELS: 56,\n  BYTES_OF_KEY_VALUE_DATA: 60\n}, FILE_HEADER_SIZE = 64, TYPES_TO_BYTES_PER_COMPONENT = {\n  [core.TYPES.UNSIGNED_BYTE]: 1,\n  [core.TYPES.UNSIGNED_SHORT]: 2,\n  [core.TYPES.INT]: 4,\n  [core.TYPES.UNSIGNED_INT]: 4,\n  [core.TYPES.FLOAT]: 4,\n  [core.TYPES.HALF_FLOAT]: 8\n}, FORMATS_TO_COMPONENTS = {\n  [core.FORMATS.RGBA]: 4,\n  [core.FORMATS.RGB]: 3,\n  [core.FORMATS.RG]: 2,\n  [core.FORMATS.RED]: 1,\n  [core.FORMATS.LUMINANCE]: 1,\n  [core.FORMATS.LUMINANCE_ALPHA]: 2,\n  [core.FORMATS.ALPHA]: 1\n}, TYPES_TO_BYTES_PER_PIXEL = {\n  [core.TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n  [core.TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n  [core.TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\nfunction parseKTX(url, arrayBuffer, loadKeyValueData = !1) {\n  const dataView = new DataView(arrayBuffer);\n  if (!validate(url, dataView))\n    return null;\n  const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, !0) === ENDIANNESS, glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian), glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian), glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian), pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian), pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1, pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1, numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1, numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian), numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian), bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n  if (pixelHeight === 0 || pixelDepth !== 1)\n    throw new Error(\"Only 2D textures are supported\");\n  if (numberOfFaces !== 1)\n    throw new Error(\"CubeTextures are not supported by KTXLoader yet!\");\n  if (numberOfArrayElements !== 1)\n    throw new Error(\"WebGL does not support array textures\");\n  const blockWidth = 4, blockHeight = 4, alignedWidth = pixelWidth + 3 & -4, alignedHeight = pixelHeight + 3 & -4, imageBuffers = new Array(numberOfArrayElements);\n  let imagePixels = pixelWidth * pixelHeight;\n  glType === 0 && (imagePixels = alignedWidth * alignedHeight);\n  let imagePixelByteSize;\n  if (glType !== 0 ? TYPES_TO_BYTES_PER_COMPONENT[glType] ? imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat] : imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType] : imagePixelByteSize = _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat], imagePixelByteSize === void 0)\n    throw new Error(\"Unable to resolve the pixel format stored in the *.ktx file!\");\n  const kvData = loadKeyValueData ? parseKvData(dataView, bytesOfKeyValueData, littleEndian) : null;\n  let mipByteSize = imagePixels * imagePixelByteSize, mipWidth = pixelWidth, mipHeight = pixelHeight, alignedMipWidth = alignedWidth, alignedMipHeight = alignedHeight, imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n  for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n    const imageSize = dataView.getUint32(imageOffset, littleEndian);\n    let elementOffset = imageOffset + 4;\n    for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++) {\n      let mips = imageBuffers[arrayElement];\n      mips || (mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels)), mips[mipmapLevel] = {\n        levelID: mipmapLevel,\n        // don't align mipWidth when texture not compressed! (glType not zero)\n        levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n        levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n        levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n      }, elementOffset += mipByteSize;\n    }\n    imageOffset += imageSize + 4, imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - imageOffset % 4 : imageOffset, mipWidth = mipWidth >> 1 || 1, mipHeight = mipHeight >> 1 || 1, alignedMipWidth = mipWidth + blockWidth - 1 & ~(blockWidth - 1), alignedMipHeight = mipHeight + blockHeight - 1 & ~(blockHeight - 1), mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n  }\n  return glType !== 0 ? {\n    uncompressed: imageBuffers.map((levelBuffers) => {\n      let buffer = levelBuffers[0].levelBuffer, convertToInt = !1;\n      return glType === core.TYPES.FLOAT ? buffer = new Float32Array(\n        levelBuffers[0].levelBuffer.buffer,\n        levelBuffers[0].levelBuffer.byteOffset,\n        levelBuffers[0].levelBuffer.byteLength / 4\n      ) : glType === core.TYPES.UNSIGNED_INT ? (convertToInt = !0, buffer = new Uint32Array(\n        levelBuffers[0].levelBuffer.buffer,\n        levelBuffers[0].levelBuffer.byteOffset,\n        levelBuffers[0].levelBuffer.byteLength / 4\n      )) : glType === core.TYPES.INT && (convertToInt = !0, buffer = new Int32Array(\n        levelBuffers[0].levelBuffer.buffer,\n        levelBuffers[0].levelBuffer.byteOffset,\n        levelBuffers[0].levelBuffer.byteLength / 4\n      )), {\n        resource: new core.BufferResource(\n          buffer,\n          {\n            width: levelBuffers[0].levelWidth,\n            height: levelBuffers[0].levelHeight\n          }\n        ),\n        type: glType,\n        format: convertToInt ? convertFormatToInteger(glFormat) : glFormat\n      };\n    }),\n    kvData\n  } : {\n    compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource.CompressedTextureResource(null, {\n      format: glInternalFormat,\n      width: pixelWidth,\n      height: pixelHeight,\n      levels: numberOfMipmapLevels,\n      levelBuffers\n    })),\n    kvData\n  };\n}\nfunction validate(url, dataView) {\n  for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n    if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n      return console.error(`${url} is not a valid *.ktx file!`), !1;\n  return !0;\n}\nfunction convertFormatToInteger(format) {\n  switch (format) {\n    case core.FORMATS.RGBA:\n      return core.FORMATS.RGBA_INTEGER;\n    case core.FORMATS.RGB:\n      return core.FORMATS.RGB_INTEGER;\n    case core.FORMATS.RG:\n      return core.FORMATS.RG_INTEGER;\n    case core.FORMATS.RED:\n      return core.FORMATS.RED_INTEGER;\n    default:\n      return format;\n  }\n}\nfunction parseKvData(dataView, bytesOfKeyValueData, littleEndian) {\n  const kvData = /* @__PURE__ */ new Map();\n  let bytesIntoKeyValueData = 0;\n  for (; bytesIntoKeyValueData < bytesOfKeyValueData; ) {\n    const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian), keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4, valuePadding = 3 - (keyAndValueByteSize + 3) % 4;\n    if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData) {\n      console.error(\"KTXLoader: keyAndValueByteSize out of bounds\");\n      break;\n    }\n    let keyNulByte = 0;\n    for (; keyNulByte < keyAndValueByteSize && dataView.getUint8(keyAndValueByteOffset + keyNulByte) !== 0; keyNulByte++)\n      ;\n    if (keyNulByte === -1) {\n      console.error(\"KTXLoader: Failed to find null byte terminating kvData key\");\n      break;\n    }\n    const key = new TextDecoder().decode(\n      new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte)\n    ), value = new DataView(\n      dataView.buffer,\n      keyAndValueByteOffset + keyNulByte + 1,\n      keyAndValueByteSize - keyNulByte - 1\n    );\n    kvData.set(key, value), bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n  }\n  return kvData;\n}\nexports.FORMATS_TO_COMPONENTS = FORMATS_TO_COMPONENTS;\nexports.TYPES_TO_BYTES_PER_COMPONENT = TYPES_TO_BYTES_PER_COMPONENT;\nexports.TYPES_TO_BYTES_PER_PIXEL = TYPES_TO_BYTES_PER_PIXEL;\nexports.parseKTX = parseKTX;\n//# sourceMappingURL=parseKTX.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","validate","url","dataView","i","FILE_IDENTIFIER","length","getUint8","console","error","convertFormatToInteger","format","core","FORMATS","RGBA","RGBA_INTEGER","RGB","RGB_INTEGER","RG","RG_INTEGER","RED","RED_INTEGER","parseKvData","bytesOfKeyValueData","littleEndian","kvData","Map","bytesIntoKeyValueData","keyAndValueByteSize","getUint32","FILE_HEADER_SIZE","keyAndValueByteOffset","valuePadding","keyNulByte","key","decode","TextDecoder","Uint8Array","buffer","value","DataView","set","_const","CompressedTextureResource","TYPES_TO_BYTES_PER_COMPONENT","TYPES","UNSIGNED_BYTE","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT","FORMATS_TO_COMPONENTS","LUMINANCE","LUMINANCE_ALPHA","ALPHA","TYPES_TO_BYTES_PER_PIXEL","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","parseKTX","arrayBuffer","loadKeyValueData","ENDIANNESS","glType","GL_TYPE","glFormat","GL_FORMAT","glInternalFormat","GL_INTERNAL_FORMAT","pixelWidth","PIXEL_WIDTH","pixelHeight","PIXEL_HEIGHT","pixelDepth","PIXEL_DEPTH","numberOfArrayElements","NUMBER_OF_ARRAY_ELEMENTS","numberOfFaces","NUMBER_OF_FACES","numberOfMipmapLevels","NUMBER_OF_MIPMAP_LEVELS","BYTES_OF_KEY_VALUE_DATA","Error","alignedWidth","alignedHeight","imageBuffers","Array","imagePixels","imagePixelByteSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL","mipByteSize","mipWidth","mipHeight","imageOffset","mipmapLevel","imageSize","elementOffset","arrayElement","mips","levelID","levelWidth","alignedMipWidth","levelHeight","alignedMipHeight","levelBuffer","blockWidth","blockHeight","uncompressed","map","levelBuffers","convertToInt","Float32Array","byteOffset","byteLength","Uint32Array","Int32Array","resource","BufferResource","width","height","type","compressed","levels"]
}
