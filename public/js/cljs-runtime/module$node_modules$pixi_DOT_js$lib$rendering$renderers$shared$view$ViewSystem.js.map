{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$view$ViewSystem.js",
"lineCount":44,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/view/ViewSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$view$ViewSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../../environment/adapter.js');\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar Rectangle = require('../../../../maths/shapes/Rectangle.js');\nvar deprecation = require('../../../../utils/logging/deprecation.js');\nvar RenderTarget = require('../renderTarget/RenderTarget.js');\nvar getCanvasTexture = require('../texture/utils/getCanvasTexture.js');\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /**\n   * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n   * This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n   * @member {boolean}\n   */\n  get autoDensity() {\n    return this.texture.source.autoDensity;\n  }\n  set autoDensity(value) {\n    this.texture.source.autoDensity = value;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation.deprecation(deprecation.v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle.Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || adapter.DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture.getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget.RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem,\n    Extensions.ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexports.ViewSystem = ViewSystem;\n//# sourceMappingURL=ViewSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adapter","Extensions","Rectangle","deprecation","RenderTarget","getCanvasTexture","texture","source","autoDensity","value","_resolution","resize","width","height","init","options","_ViewSystem","defaultOptions","view","v8_0_0","canvas","screen","DOMAdapter","get","createCanvas","antialias","renderTarget","colorTextures","depth","isRoot","transparent","backgroundAlpha","resolution","desiredScreenWidth","desiredScreenHeight","frame","destroy","removeView","parentNode","removeChild","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name","priority","ViewSystem"]
}
