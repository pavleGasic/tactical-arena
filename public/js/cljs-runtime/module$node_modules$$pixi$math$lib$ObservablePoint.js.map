{
"version":3,
"file":"module$node_modules$$pixi$math$lib$ObservablePoint.js",
"lineCount":42,
"mappings":"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",
"sources":["node_modules/@pixi/math/lib/ObservablePoint.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$math$lib$ObservablePoint\"] = function(global,require,module,exports) {\n\"use strict\";\nclass ObservablePoint {\n  /**\n   * Creates a new `ObservablePoint`\n   * @param cb - callback function triggered when `x` and/or `y` are changed\n   * @param scope - owner of callback\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  constructor(cb, scope, x = 0, y = 0) {\n    this._x = x, this._y = y, this.cb = cb, this.scope = scope;\n  }\n  /**\n   * Creates a clone of this point.\n   * The callback and scope params can be overridden otherwise they will default\n   * to the clone object's values.\n   * @override\n   * @param cb - The callback function triggered when `x` and/or `y` are changed\n   * @param scope - The owner of the callback\n   * @returns a copy of this observable point\n   */\n  clone(cb = this.cb, scope = this.scope) {\n    return new ObservablePoint(cb, scope, this._x, this._y);\n  }\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns The observable point instance itself\n   */\n  set(x = 0, y = x) {\n    return (this._x !== x || this._y !== y) && (this._x = x, this._y = y, this.cb.call(this.scope)), this;\n  }\n  /**\n   * Copies x and y from the given point (`p`)\n   * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n   * @returns The observable point instance itself\n   */\n  copyFrom(p) {\n    return (this._x !== p.x || this._y !== p.y) && (this._x = p.x, this._y = p.y, this.cb.call(this.scope)), this;\n  }\n  /**\n   * Copies this point's x and y into that of the given point (`p`)\n   * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n   * @returns The point (`p`) with values updated\n   */\n  copyTo(p) {\n    return p.set(this._x, this._y), p;\n  }\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  equals(p) {\n    return p.x === this._x && p.y === this._y;\n  }\n  /** Position of the observable point on the x axis. */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    this._x !== value && (this._x = value, this.cb.call(this.scope));\n  }\n  /** Position of the observable point on the y axis. */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    this._y !== value && (this._y = value, this.cb.call(this.scope));\n  }\n}\nObservablePoint.prototype.toString = function() {\n  return `[@pixi/math:ObservablePoint x=${this.x} y=${this.y} scope=${this.scope}]`;\n};\nexports.ObservablePoint = ObservablePoint;\n//# sourceMappingURL=ObservablePoint.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ObservablePoint","constructor","cb","scope","x","y","_x","_y","clone","set","call","copyFrom","p","copyTo","equals","value","prototype","toString","ObservablePoint.prototype.toString"]
}
