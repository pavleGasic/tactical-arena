shadow$provide.module$node_modules$$pixi$filter_fxaa$lib$fxaa_vert = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = "\nattribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nvarying vec2 vFragCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position \x3d aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvoid texcoords(vec2 fragCoord, vec2 inverseVP,\n               out vec2 v_rgbNW, out vec2 v_rgbNE,\n               out vec2 v_rgbSW, out vec2 v_rgbSE,\n               out vec2 v_rgbM) {\n    v_rgbNW \x3d (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n    v_rgbNE \x3d (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n    v_rgbSW \x3d (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n    v_rgbSE \x3d (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n    v_rgbM \x3d vec2(fragCoord * inverseVP);\n}\n\nvoid main(void) {\n\n   gl_Position \x3d filterVertexPosition();\n\n   vFragCoord \x3d aVertexPosition * outputFrame.zw;\n\n   texcoords(vFragCoord, inputSize.zw, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n";
};

//# sourceMappingURL=module$node_modules$$pixi$filter_fxaa$lib$fxaa_vert.js.map
