{
"version":3,
"file":"module$node_modules$$pixi$core$lib$renderTexture$RenderTexture.js",
"lineCount":40,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,GAAmF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEvHC,QAAAA,GAAUH,OAAA,CAAQ,qDAAR,CAAVG;AAAJ,MAAiDC,oBAAoBJ,OAAA,CAAQ,oEAAR,CAArE;AACA,OAAMK,cAAN,QAA4BF,OAAQA,CAAAA,OAApC;AAKEG,eAAW,CAACC,iBAAD,EAAoBC,KAApB,CAA2B;AACpC,WAAA,CAAMD,iBAAN,EAAyBC,KAAzB,CAAA;AAAiC,UAAKC,CAAAA,KAAL,GAAa,CAAA,CAAb;AAA0C,UAAKC,CAAAA,aAAL,GAAzB,IAAKC,CAAAA,WAAoB,GAAN,IAAM;AAA2B,UAAKC,CAAAA,SAAL,EAAA;AADlE;AAOlC,mBAAc,EAAA;AAChB,aAAO,IAAKC,CAAAA,WAAYC,CAAAA,WAAxB;AADgB;AAOd,mBAAc,EAAA;AAChB,aAAO,IAAKA,CAAAA,WAAYC,CAAAA,WAAxB;AADgB;AAGd,mBAAW,CAACC,KAAD,CAAQ;AACrB,UAAKF,CAAAA,WAAYC,CAAAA,WAAjB,GAA+BC,KAA/B;AADqB;AASvBC,UAAM,CAACC,YAAD,EAAeC,aAAf,EAA8BC,iBAAA,GAAoB,CAAA,CAAlD,CAAsD;AAAA,YACpDC,aAAa,IAAKR,CAAAA,WAAYQ,CAAAA,UADsB;AACVC,kBAAAA,GAAQC,IAAKC,CAAAA,KAAL,CAAWN,YAAX,GAA0BG,UAA1B,CAARC,GAAgDD,UAAhDC;AAA4DG,mBAAAA,GAASF,IAAKC,CAAAA,KAAL,CAAWL,aAAX,GAA2BE,UAA3B,CAATI,GAAkDJ,UAAlDI;AAC5G,UAAKhB,CAAAA,KAAL,GAAqB,CAArB,GAAaa,YAAb,IAAmC,CAAnC,GAA0BG,aAA1B;AAAsC,UAAKC,CAAAA,MAAOJ,CAAAA,KAAZ,GAAoB,IAAKK,CAAAA,IAAKL,CAAAA,KAA9B,GAAsCA,YAAtC;AAA6C,UAAKI,CAAAA,MAAOD,CAAAA,MAAZ,GAAqB,IAAKE,CAAAA,IAAKF,CAAAA,MAA/B,GAAwCA,aAAxC;AAAgDL,uBAAA,IAAqB,IAAKP,CAAAA,WAAYI,CAAAA,MAAjB,CAAwBK,YAAxB,EAA+BG,aAA/B,CAArB;AAA6D,UAAKb,CAAAA,SAAL,EAAA;AAFtI;AAQ5DgB,iBAAa,CAACP,UAAD,CAAa;AACxB,YAAM,CAAER,WAAF,CAAA,GAAkB,IAAxB;AACAA,iBAAYQ,CAAAA,UAAZ,KAA2BA,UAA3B,KAA0CR,WAAYe,CAAAA,aAAZ,CAA0BP,UAA1B,CAAA,EAAuC,IAAKJ,CAAAA,MAAL,CAAYJ,WAAYS,CAAAA,KAAxB,EAA+BT,WAAYY,CAAAA,MAA3C,EAAmD,CAAA,CAAnD,CAAjF;AAFwB;AAgBnBI,iBAAM,CAACC,OAAD,CAAU;AACrB,aAAO,IAAIzB,aAAJ,CAAkB,IAAID,iBAAkBA,CAAAA,iBAAtB,CAAwC0B,OAAxC,CAAlB,CAAP;AADqB;AAvDzB;AA2DA5B,SAAQG,CAAAA,aAAR,GAAwBA,aAAxB;AA9D2H,CAA3H;;",
"sources":["node_modules/@pixi/core/lib/renderTexture/RenderTexture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$renderTexture$RenderTexture\"] = function(global,require,module,exports) {\n\"use strict\";\nvar Texture = require(\"../textures/Texture.js\"), BaseRenderTexture = require(\"./BaseRenderTexture.js\");\nclass RenderTexture extends Texture.Texture {\n  /**\n   * @param baseRenderTexture - The base texture object that this texture uses.\n   * @param frame - The rectangle frame of the texture to show.\n   */\n  constructor(baseRenderTexture, frame) {\n    super(baseRenderTexture, frame), this.valid = !0, this.filterFrame = null, this.filterPoolKey = null, this.updateUvs();\n  }\n  /**\n   * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.\n   * @readonly\n   */\n  get framebuffer() {\n    return this.baseTexture.framebuffer;\n  }\n  /**\n   * Shortcut to `this.framebuffer.multisample`.\n   * @default PIXI.MSAA_QUALITY.NONE\n   */\n  get multisample() {\n    return this.framebuffer.multisample;\n  }\n  set multisample(value) {\n    this.framebuffer.multisample = value;\n  }\n  /**\n   * Resizes the RenderTexture.\n   * @param desiredWidth - The desired width to resize to.\n   * @param desiredHeight - The desired height to resize to.\n   * @param resizeBaseTexture - Should the baseTexture.width and height values be resized as well?\n   */\n  resize(desiredWidth, desiredHeight, resizeBaseTexture = !0) {\n    const resolution = this.baseTexture.resolution, width = Math.round(desiredWidth * resolution) / resolution, height = Math.round(desiredHeight * resolution) / resolution;\n    this.valid = width > 0 && height > 0, this._frame.width = this.orig.width = width, this._frame.height = this.orig.height = height, resizeBaseTexture && this.baseTexture.resize(width, height), this.updateUvs();\n  }\n  /**\n   * Changes the resolution of baseTexture, but does not change framebuffer size.\n   * @param resolution - The new resolution to apply to RenderTexture\n   */\n  setResolution(resolution) {\n    const { baseTexture } = this;\n    baseTexture.resolution !== resolution && (baseTexture.setResolution(resolution), this.resize(baseTexture.width, baseTexture.height, !1));\n  }\n  /**\n   * A short hand way of creating a render texture.\n   * @param options - Options\n   * @param {number} [options.width=100] - The width of the render texture\n   * @param {number} [options.height=100] - The height of the render texture\n   * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.BaseTexture.defaultOptions.scaleMode] - See {@link PIXI.SCALE_MODES}\n   *    for possible values\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the texture\n   *    being generated\n   * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer\n   * @returns The new render texture\n   */\n  static create(options) {\n    return new RenderTexture(new BaseRenderTexture.BaseRenderTexture(options));\n  }\n}\nexports.RenderTexture = RenderTexture;\n//# sourceMappingURL=RenderTexture.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Texture","BaseRenderTexture","RenderTexture","constructor","baseRenderTexture","frame","valid","filterPoolKey","filterFrame","updateUvs","baseTexture","framebuffer","multisample","value","resize","desiredWidth","desiredHeight","resizeBaseTexture","resolution","width","Math","round","height","_frame","orig","setResolution","create","options"]
}
