{
"version":3,
"file":"module$node_modules$$pixi$sprite_tiling$lib$TilingSprite.js",
"lineCount":78,
"mappings":"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",
"sources":["node_modules/@pixi/sprite-tiling/lib/TilingSprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$sprite_tiling$lib$TilingSprite\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), sprite = require(\"@pixi/sprite\");\nconst tempPoint = new core.Point();\nclass TilingSprite extends sprite.Sprite {\n  /**\n   * Note: The wrap mode of the texture is forced to REPEAT on render if the size of the texture\n   * is a power of two, the texture's wrap mode is CLAMP, and the texture hasn't been bound yet.\n   * @param texture - The texture of the tiling sprite.\n   * @param width - The width of the tiling sprite.\n   * @param height - The height of the tiling sprite.\n   */\n  constructor(texture, width = 100, height = 100) {\n    super(texture), this.tileTransform = new core.Transform(), this._width = width, this._height = height, this.uvMatrix = this.texture.uvMatrix || new core.TextureMatrix(texture), this.pluginName = \"tilingSprite\", this.uvRespectAnchor = !1;\n  }\n  /**\n   * Changes frame clamping in corresponding textureTransform, shortcut\n   * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n   * @default 0.5\n   * @member {number}\n   */\n  get clampMargin() {\n    return this.uvMatrix.clampMargin;\n  }\n  set clampMargin(value) {\n    this.uvMatrix.clampMargin = value, this.uvMatrix.update(!0);\n  }\n  /** The scaling of the image that is being tiled. */\n  get tileScale() {\n    return this.tileTransform.scale;\n  }\n  set tileScale(value) {\n    this.tileTransform.scale.copyFrom(value);\n  }\n  /** The offset of the image that is being tiled. */\n  get tilePosition() {\n    return this.tileTransform.position;\n  }\n  set tilePosition(value) {\n    this.tileTransform.position.copyFrom(value);\n  }\n  /**\n   * @protected\n   */\n  _onTextureUpdate() {\n    this.uvMatrix && (this.uvMatrix.texture = this._texture), this._cachedTint = 16777215;\n  }\n  /**\n   * Renders the object using the WebGL renderer\n   * @param renderer - The renderer\n   */\n  _render(renderer) {\n    const texture = this._texture;\n    !texture || !texture.valid || (this.tileTransform.updateLocalTransform(), this.uvMatrix.update(), renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]), renderer.plugins[this.pluginName].render(this));\n  }\n  /** Updates the bounds of the tiling sprite. */\n  _calculateBounds() {\n    const minX = this._width * -this._anchor._x, minY = this._height * -this._anchor._y, maxX = this._width * (1 - this._anchor._x), maxY = this._height * (1 - this._anchor._y);\n    this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n  }\n  /**\n   * Gets the local bounds of the sprite object.\n   * @param rect - Optional output rectangle.\n   * @returns The bounds.\n   */\n  getLocalBounds(rect) {\n    return this.children.length === 0 ? (this._bounds.minX = this._width * -this._anchor._x, this._bounds.minY = this._height * -this._anchor._y, this._bounds.maxX = this._width * (1 - this._anchor._x), this._bounds.maxY = this._height * (1 - this._anchor._y), rect || (this._localBoundsRect || (this._localBoundsRect = new core.Rectangle()), rect = this._localBoundsRect), this._bounds.getRectangle(rect)) : super.getLocalBounds.call(this, rect);\n  }\n  /**\n   * Checks if a point is inside this tiling sprite.\n   * @param point - The point to check.\n   * @returns Whether or not the sprite contains the point.\n   */\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    const width = this._width, height = this._height, x1 = -width * this.anchor._x;\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      const y1 = -height * this.anchor._y;\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n        return !0;\n    }\n    return !1;\n  }\n  /**\n   * Destroys this sprite and optionally its texture and children\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n  destroy(options) {\n    super.destroy(options), this.tileTransform = null, this.uvMatrix = null;\n  }\n  /**\n   * Helper function that creates a new tiling sprite based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   * @static\n   * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n   * @param {object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n   * @param {number} options.width - required width of the tiling sprite\n   * @param {number} options.height - required height of the tiling sprite\n   * @returns {PIXI.TilingSprite} The newly created texture\n   */\n  static from(source, options) {\n    const texture = source instanceof core.Texture ? source : core.Texture.from(source, options);\n    return new TilingSprite(\n      texture,\n      options.width,\n      options.height\n    );\n  }\n  /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    this._width = value;\n  }\n  /** The height of the TilingSprite, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    this._height = value;\n  }\n}\nexports.TilingSprite = TilingSprite;\n//# sourceMappingURL=TilingSprite.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","sprite","tempPoint","Point","TilingSprite","Sprite","constructor","texture","width","height","tileTransform","Transform","_width","_height","uvMatrix","TextureMatrix","pluginName","uvRespectAnchor","clampMargin","value","update","scale","copyFrom","position","_onTextureUpdate","_texture","_cachedTint","_render","renderer","valid","updateLocalTransform","batch","setObjectRenderer","plugins","render","_calculateBounds","_bounds","addFrame","transform","_anchor","_x","_y","getLocalBounds","rect","children","length","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","call","containsPoint","point","worldTransform","applyInverse","x1","anchor","x","y1","y","destroy","options","from","source","Texture"]
}
