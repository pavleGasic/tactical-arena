{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$loadWebFont.js",
"lineCount":53,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/assets/loader/parsers/loadWebFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$loadWebFont\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../environment/adapter.js');\nvar Extensions = require('../../../extensions/Extensions.js');\nvar warn = require('../../../utils/logging/warn.js');\nvar path = require('../../../utils/path.js');\nvar Cache = require('../../cache/Cache.js');\nvar checkDataUrl = require('../../utils/checkDataUrl.js');\nvar checkExtension = require('../../utils/checkExtension.js');\nvar LoaderParser = require('./LoaderParser.js');\n\n\"use strict\";\nconst validWeights = [\n  \"normal\",\n  \"bold\",\n  \"100\",\n  \"200\",\n  \"300\",\n  \"400\",\n  \"500\",\n  \"600\",\n  \"700\",\n  \"800\",\n  \"900\"\n];\nconst validFontExtensions = [\".ttf\", \".otf\", \".woff\", \".woff2\"];\nconst validFontMIMEs = [\n  \"font/ttf\",\n  \"font/otf\",\n  \"font/woff\",\n  \"font/woff2\"\n];\nconst CSS_IDENT_TOKEN_REGEX = /^(--|-?[A-Z_])[0-9A-Z_-]*$/i;\nfunction getFontFamilyName(url) {\n  const ext = path.path.extname(url);\n  const name = path.path.basename(url, ext);\n  const nameWithSpaces = name.replace(/(-|_)/g, \" \");\n  const nameTokens = nameWithSpaces.toLowerCase().split(\" \").map((word) => word.charAt(0).toUpperCase() + word.slice(1));\n  let valid = nameTokens.length > 0;\n  for (const token of nameTokens) {\n    if (!token.match(CSS_IDENT_TOKEN_REGEX)) {\n      valid = false;\n      break;\n    }\n  }\n  let fontFamilyName = nameTokens.join(\" \");\n  if (!valid) {\n    fontFamilyName = `\"${fontFamilyName.replace(/[\\\\\"]/g, \"\\\\$&\")}\"`;\n  }\n  return fontFamilyName;\n}\nconst validURICharactersRegex = /^[0-9A-Za-z%:/?#\\[\\]@!\\$&'()\\*\\+,;=\\-._~]*$/;\nfunction encodeURIWhenNeeded(uri) {\n  if (validURICharactersRegex.test(uri)) {\n    return uri;\n  }\n  return encodeURI(uri);\n}\nconst loadWebFont = {\n  extension: {\n    type: Extensions.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.Low\n  },\n  name: \"loadWebFont\",\n  test(url) {\n    return checkDataUrl.checkDataUrl(url, validFontMIMEs) || checkExtension.checkExtension(url, validFontExtensions);\n  },\n  async load(url, options) {\n    const fonts = adapter.DOMAdapter.get().getFontFaceSet();\n    if (fonts) {\n      const fontFaces = [];\n      const name = options.data?.family ?? getFontFamilyName(url);\n      const weights = options.data?.weights?.filter((weight) => validWeights.includes(weight)) ?? [\"normal\"];\n      const data = options.data ?? {};\n      for (let i = 0; i < weights.length; i++) {\n        const weight = weights[i];\n        const font = new FontFace(name, `url(${encodeURIWhenNeeded(url)})`, {\n          ...data,\n          weight\n        });\n        await font.load();\n        fonts.add(font);\n        fontFaces.push(font);\n      }\n      Cache.Cache.set(`${name}-and-url`, {\n        url,\n        fontFaces\n      });\n      return fontFaces.length === 1 ? fontFaces[0] : fontFaces;\n    }\n    warn.warn(\"[loadWebFont] FontFace API is not supported. Skipping loading font\");\n    return null;\n  },\n  unload(font) {\n    (Array.isArray(font) ? font : [font]).forEach((t) => {\n      Cache.Cache.remove(`${t.family}-and-url`);\n      adapter.DOMAdapter.get().getFontFaceSet().delete(t);\n    });\n  }\n};\n\nexports.getFontFamilyName = getFontFamilyName;\nexports.loadWebFont = loadWebFont;\n//# sourceMappingURL=loadWebFont.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getFontFamilyName","url","ext","path","extname","nameTokens","basename","name","replace","nameWithSpaces","toLowerCase","split","map","word","charAt","toUpperCase","slice","valid","length","token","match","CSS_IDENT_TOKEN_REGEX","fontFamilyName","join","encodeURIWhenNeeded","uri","validURICharactersRegex","test","encodeURI","adapter","Extensions","warn","Cache","checkDataUrl","checkExtension","LoaderParser","validWeights","validFontExtensions","validFontMIMEs","loadWebFont","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","Low","load","options","fonts","DOMAdapter","get","getFontFaceSet","fontFaces","data","family","weights","filter","weight","includes","i","font","FontFace","add","push","set","unload","forEach","Array","isArray","t","remove","delete"]
}
