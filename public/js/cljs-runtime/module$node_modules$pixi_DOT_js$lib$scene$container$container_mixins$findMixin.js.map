{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$findMixin.js",
"lineCount":42,
"mappings":"AAAAA,cAAA,CAAA,8EAAA,GAAmG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG3I,MAAIC,cAAcH,OAAA,CAAQ,+DAAR,CAAlB;AAEA,cAAA;AAuFAE,SAAQE,CAAAA,SAAR,GAtFkBA,CAMhBC,MAAO,IANSD,EAcZE,QAAO,EAAA;AACTH,eAAYA,CAAAA,WAAZ,CAAwBA,WAAYI,CAAAA,MAApC,EAA4C,uEAA5C,CAAA;AACA,WAAO,IAAKF,CAAAA,KAAZ;AAFS,GAdKD,EAkBZE,QAAI,CAACE,KAAD,CAAQ;AACdL,eAAYA,CAAAA,WAAZ,CAAwBA,WAAYI,CAAAA,MAApC,EAA4C,uEAA5C,CAAA;AACA,QAAKF,CAAAA,KAAL,GAAaG,KAAb;AAFc,GAlBAJ,EA+BhBK,cAAc,CAACH,IAAD,EAAOI,IAAA,GAAO,CAAA,CAAd,CAAqB;AACjC,WAAO,IAAKC,CAAAA,eAAL,CAAqBL,IAArB,EAA2BI,IAA3B,CAAP;AADiC,GA/BnBN,EA2ChBO,eAAe,CAACN,KAAD,EAAQK,IAAA,GAAO,CAAA,CAAf,CAAsB;AACnC,UAAME,WAAW,IAAKA,CAAAA,QAAtB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,QAASE,CAAAA,MAA7B,EAAqCD,CAAA,EAArC,CAA0C;AACxC,YAAME,QAAQH,QAAA,CAASC,CAAT,CAAd;AACA,UAAIE,KAAMV,CAAAA,KAAV,KAAoBA,KAApB,IAA6BA,KAA7B,YAA8CW,MAA9C,IAAwDX,KAAMY,CAAAA,IAAN,CAAWF,KAAMV,CAAAA,KAAjB,CAAxD;AACE,eAAOU,KAAP;AADF;AAFwC;AAK1C,QAAIL,IAAJ;AACE,WAASG,IAAT,GAAa,CAAb,EAAgBA,IAAhB,GAAoBD,QAASE,CAAAA,MAA7B,EAAqCD,IAAA,EAArC;AAGE,YADMK,CACN,GAFcN,QAAAG,CAASF,IAATE,CACMJ,CAAAA,eAAN,CAAsBN,KAAtB,EAA6B,CAAA,CAA7B,CACd;AACE,iBAAOa,CAAP;AADF;AAHF;AADF;AASA,WAAO,IAAP;AAhBmC,GA3CrBd,EAqEhBe,kBAAkB,CAACd,KAAD,EAAQK,IAAA,GAAO,CAAA,CAAf,EAAsBU,GAAA,GAAM,EAA5B,CAAgC;AAChD,UAAMR,WAAW,IAAKA,CAAAA,QAAtB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,QAASE,CAAAA,MAA7B,EAAqCD,CAAA,EAArC,CAA0C;AACxC,YAAME,QAAQH,QAAA,CAASC,CAAT,CAAd;AACA,OAAIE,KAAMV,CAAAA,KAAV,KAAoBA,KAApB,IAA6BA,KAA7B,YAA8CW,MAA9C,IAAwDX,KAAMY,CAAAA,IAAN,CAAWF,KAAMV,CAAAA,KAAjB,CAAxD,KACEe,GAAIC,CAAAA,IAAJ,CAASN,KAAT,CADF;AAFwC;AAM1C,QAAIL,IAAJ;AACE,WAASG,IAAT,GAAa,CAAb,EAAgBA,IAAhB,GAAoBD,QAASE,CAAAA,MAA7B,EAAqCD,IAAA,EAArC;AACED,gBAAA,CAASC,IAAT,CAAYM,CAAAA,kBAAZ,CAA+Bd,KAA/B,EAAsC,CAAA,CAAtC,EAA4Ce,GAA5C,CAAA;AADF;AADF;AAKA,WAAOA,GAAP;AAbgD,GArElChB,CAsFlB;AA5F2I,CAA3I;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/container-mixins/findMixin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$findMixin\"] = function(global,require,module,exports) {\n'use strict';\n\nvar deprecation = require('../../../utils/logging/deprecation.js');\n\n\"use strict\";\nconst findMixin = {\n  /**\n   * The instance label of the object.\n   * @memberof scene.Container#\n   * @member {string} label\n   */\n  label: null,\n  /**\n   * The instance name of the object.\n   * @deprecated since 8.0.0\n   * @see scene.Container#label\n   * @member {string} name\n   * @memberof scene.Container#\n   */\n  get name() {\n    deprecation.deprecation(deprecation.v8_0_0, \"Container.name property has been removed, use Container.label instead\");\n    return this.label;\n  },\n  set name(value) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Container.name property has been removed, use Container.label instead\");\n    this.label = value;\n  },\n  /**\n   * @method getChildByName\n   * @deprecated since 8.0.0\n   * @param {string} name - Instance name.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @returns {Container} The child with the specified name.\n   * @see scene.Container#getChildByLabel\n   * @memberof scene.Container#\n   */\n  getChildByName(name, deep = false) {\n    return this.getChildByLabel(name, deep);\n  },\n  /**\n   * Returns the first child in the container with the specified label.\n   *\n   * Recursive searches are done in a pre-order traversal.\n   * @memberof scene.Container#\n   * @param {string|RegExp} label - Instance label.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @returns {Container} The child with the specified label.\n   */\n  getChildByLabel(label, deep = false) {\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.label === label || label instanceof RegExp && label.test(child.label))\n        return child;\n    }\n    if (deep) {\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        const found = child.getChildByLabel(label, true);\n        if (found) {\n          return found;\n        }\n      }\n    }\n    return null;\n  },\n  /**\n   * Returns all children in the container with the specified label.\n   * @memberof scene.Container#\n   * @param {string|RegExp} label - Instance label.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @param {Container[]} [out=[]] - The array to store matching children in.\n   * @returns {Container[]} An array of children with the specified label.\n   */\n  getChildrenByLabel(label, deep = false, out = []) {\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.label === label || label instanceof RegExp && label.test(child.label)) {\n        out.push(child);\n      }\n    }\n    if (deep) {\n      for (let i = 0; i < children.length; i++) {\n        children[i].getChildrenByLabel(label, true, out);\n      }\n    }\n    return out;\n  }\n};\n\nexports.findMixin = findMixin;\n//# sourceMappingURL=findMixin.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","deprecation","findMixin","label","name","v8_0_0","value","getChildByName","deep","getChildByLabel","children","i","length","child","RegExp","test","found","getChildrenByLabel","out","push"]
}
