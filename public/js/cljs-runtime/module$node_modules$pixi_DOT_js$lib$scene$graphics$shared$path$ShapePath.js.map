{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$path$ShapePath.js",
"lineCount":224,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/path/ShapePath.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$path$ShapePath\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Circle = require('../../../../maths/shapes/Circle.js');\nvar Ellipse = require('../../../../maths/shapes/Ellipse.js');\nvar Polygon = require('../../../../maths/shapes/Polygon.js');\nvar Rectangle = require('../../../../maths/shapes/Rectangle.js');\nvar RoundedRectangle = require('../../../../maths/shapes/RoundedRectangle.js');\nvar Bounds = require('../../../container/bounds/Bounds.js');\nvar buildAdaptiveBezier = require('../buildCommands/buildAdaptiveBezier.js');\nvar buildAdaptiveQuadratic = require('../buildCommands/buildAdaptiveQuadratic.js');\nvar buildArc = require('../buildCommands/buildArc.js');\nvar buildArcTo = require('../buildCommands/buildArcTo.js');\nvar buildArcToSvg = require('../buildCommands/buildArcToSvg.js');\nvar roundShape = require('./roundShape.js');\n\n\"use strict\";\nconst tempRectangle = new Rectangle.Rectangle();\nclass ShapePath {\n  constructor(graphicsPath2D) {\n    /** The list of shape primitives that make up the path. */\n    this.shapePrimitives = [];\n    this._currentPoly = null;\n    this._bounds = new Bounds.Bounds();\n    this._graphicsPath2D = graphicsPath2D;\n    this.signed = graphicsPath2D.checkForHoles;\n  }\n  /**\n   * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n   * @param x - The x-coordinate for the starting point.\n   * @param y - The y-coordinate for the starting point.\n   * @returns The instance of the current object for chaining.\n   */\n  moveTo(x, y) {\n    this.startPoly(x, y);\n    return this;\n  }\n  /**\n   * Connects the current point to a new point with a straight line. This method updates the current path.\n   * @param x - The x-coordinate of the new point to connect to.\n   * @param y - The y-coordinate of the new point to connect to.\n   * @returns The instance of the current object for chaining.\n   */\n  lineTo(x, y) {\n    this._ensurePoly();\n    const points = this._currentPoly.points;\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    if (fromX !== x || fromY !== y) {\n      points.push(x, y);\n    }\n    return this;\n  }\n  /**\n   * Adds an arc to the path. The arc is centered at (x, y)\n   *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n   * @param x - The x-coordinate of the arc's center.\n   * @param y - The y-coordinate of the arc's center.\n   * @param radius - The radius of the arc.\n   * @param startAngle - The starting angle of the arc, in radians.\n   * @param endAngle - The ending angle of the arc, in radians.\n   * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n   * @returns The instance of the current object for chaining.\n   */\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    this._ensurePoly(false);\n    const points = this._currentPoly.points;\n    buildArc.buildArc(points, x, y, radius, startAngle, endAngle, counterclockwise);\n    return this;\n  }\n  /**\n   * Adds an arc to the path with the arc tangent to the line joining two specified points.\n   * The arc radius is specified by `radius`.\n   * @param x1 - The x-coordinate of the first point.\n   * @param y1 - The y-coordinate of the first point.\n   * @param x2 - The x-coordinate of the second point.\n   * @param y2 - The y-coordinate of the second point.\n   * @param radius - The radius of the arc.\n   * @returns The instance of the current object for chaining.\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    this._ensurePoly();\n    const points = this._currentPoly.points;\n    buildArcTo.buildArcTo(points, x1, y1, x2, y2, radius);\n    return this;\n  }\n  /**\n   * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n   * @param rx - The x-radius of the ellipse.\n   * @param ry - The y-radius of the ellipse.\n   * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n   * to the x-axis of the coordinate system, in degrees.\n   * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n   * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n   * @param x - The x-coordinate of the arc's end point.\n   * @param y - The y-coordinate of the arc's end point.\n   * @returns The instance of the current object for chaining.\n   */\n  arcToSvg(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {\n    const points = this._currentPoly.points;\n    buildArcToSvg.buildArcToSvg(\n      points,\n      this._currentPoly.lastX,\n      this._currentPoly.lastY,\n      x,\n      y,\n      rx,\n      ry,\n      xAxisRotation,\n      largeArcFlag,\n      sweepFlag\n    );\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires three points: the first two are control points and the third one is the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the first control point.\n   * @param cp1y - The y-coordinate of the first control point.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, smoothness) {\n    this._ensurePoly();\n    const currentPoly = this._currentPoly;\n    buildAdaptiveBezier.buildAdaptiveBezier(\n      this._currentPoly.points,\n      currentPoly.lastX,\n      currentPoly.lastY,\n      cp1x,\n      cp1y,\n      cp2x,\n      cp2y,\n      x,\n      y,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the control point.\n   * @param cp1y - The y-coordinate of the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothing - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveTo(cp1x, cp1y, x, y, smoothing) {\n    this._ensurePoly();\n    const currentPoly = this._currentPoly;\n    buildAdaptiveQuadratic.buildAdaptiveQuadratic(\n      this._currentPoly.points,\n      currentPoly.lastX,\n      currentPoly.lastY,\n      cp1x,\n      cp1y,\n      x,\n      y,\n      smoothing\n    );\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this.endPoly(true);\n    return this;\n  }\n  /**\n   * Adds another path to the current path. This method allows for the combination of multiple paths into one.\n   * @param path - The `GraphicsPath` object representing the path to add.\n   * @param transform - An optional `Matrix` object to apply a transformation to the path before adding it.\n   * @returns The instance of the current object for chaining.\n   */\n  addPath(path, transform) {\n    this.endPoly();\n    if (transform && !transform.isIdentity()) {\n      path = path.clone(true);\n      path.transform(transform);\n    }\n    const shapePrimitives = this.shapePrimitives;\n    const start = shapePrimitives.length;\n    for (let i = 0; i < path.instructions.length; i++) {\n      const instruction = path.instructions[i];\n      this[instruction.action](...instruction.data);\n    }\n    if (path.checkForHoles && shapePrimitives.length - start > 1) {\n      let mainShape = null;\n      for (let i = start; i < shapePrimitives.length; i++) {\n        const shapePrimitive = shapePrimitives[i];\n        if (shapePrimitive.shape.type === \"polygon\") {\n          const polygon = shapePrimitive.shape;\n          const mainPolygon = mainShape?.shape;\n          if (mainPolygon && mainPolygon.containsPolygon(polygon)) {\n            mainShape.holes || (mainShape.holes = []);\n            mainShape.holes.push(shapePrimitive);\n            shapePrimitives.copyWithin(i, i + 1);\n            shapePrimitives.length--;\n            i--;\n          } else {\n            mainShape = shapePrimitive;\n          }\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * Finalizes the drawing of the current path. Optionally, it can close the path.\n   * @param closePath - A boolean indicating whether to close the path after finishing. False by default.\n   */\n  finish(closePath = false) {\n    this.endPoly(closePath);\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h, transform) {\n    this.drawShape(new Rectangle.Rectangle(x, y, w, h), transform);\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius, transform) {\n    this.drawShape(new Circle.Circle(x, y, radius), transform);\n    return this;\n  }\n  /**\n   * Draws a polygon shape. This method allows for the creation of complex polygons by specifying a sequence of points.\n   * @param points - An array of numbers, or or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n   * representing the x and y coordinates of the polygon's vertices, in sequence.\n   * @param close - A boolean indicating whether to close the polygon path. True by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  poly(points, close, transform) {\n    const polygon = new Polygon.Polygon(points);\n    polygon.closePath = close;\n    this.drawShape(polygon, transform);\n    return this;\n  }\n  /**\n   * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  regularPoly(x, y, radius, sides, rotation = 0, transform) {\n    sides = Math.max(sides | 0, 3);\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const delta = Math.PI * 2 / sides;\n    const polygon = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = startAngle - i * delta;\n      polygon.push(\n        x + radius * Math.cos(angle),\n        y + radius * Math.sin(angle)\n      );\n    }\n    this.poly(polygon, true, transform);\n    return this;\n  }\n  /**\n   * Draws a polygon with rounded corners.\n   * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param corner - The radius of the rounding of the corners.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param smoothness - Optional parameter to adjust the smoothness of the rounding.\n   * @returns The instance of the current object for chaining.\n   */\n  roundPoly(x, y, radius, sides, corner, rotation = 0, smoothness) {\n    sides = Math.max(sides | 0, 3);\n    if (corner <= 0) {\n      return this.regularPoly(x, y, radius, sides, rotation);\n    }\n    const sideLength = radius * Math.sin(Math.PI / sides) - 1e-3;\n    corner = Math.min(corner, sideLength);\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const delta = Math.PI * 2 / sides;\n    const internalAngle = (sides - 2) * Math.PI / sides / 2;\n    for (let i = 0; i < sides; i++) {\n      const angle = i * delta + startAngle;\n      const x0 = x + radius * Math.cos(angle);\n      const y0 = y + radius * Math.sin(angle);\n      const a1 = angle + Math.PI + internalAngle;\n      const a2 = angle - Math.PI - internalAngle;\n      const x1 = x0 + corner * Math.cos(a1);\n      const y1 = y0 + corner * Math.sin(a1);\n      const x3 = x0 + corner * Math.cos(a2);\n      const y3 = y0 + corner * Math.sin(a2);\n      if (i === 0) {\n        this.moveTo(x1, y1);\n      } else {\n        this.lineTo(x1, y1);\n      }\n      this.quadraticCurveTo(x0, y0, x3, y3, smoothness);\n    }\n    return this.closePath();\n  }\n  /**\n   * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n   * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n   * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n   * A minimum of 3 points is required.\n   * @param radius - The default radius for the corners.\n   * This radius is applied to all corners unless overridden in `points`.\n   * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n   *  method instead of an arc method. Defaults to false.\n   * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n   * Higher values make the curve smoother.\n   * @returns The instance of the current object for chaining.\n   */\n  roundShape(points, radius, useQuadratic = false, smoothness) {\n    if (points.length < 3) {\n      return this;\n    }\n    if (useQuadratic) {\n      roundShape.roundedShapeQuadraticCurve(this, points, radius, smoothness);\n    } else {\n      roundShape.roundedShapeArc(this, points, radius);\n    }\n    return this.closePath();\n  }\n  /**\n   * Draw Rectangle with fillet corners. This is much like rounded rectangle\n   * however it support negative numbers as well for the corner radius.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param fillet - accept negative or positive values\n   */\n  filletRect(x, y, width, height, fillet) {\n    if (fillet === 0) {\n      return this.rect(x, y, width, height);\n    }\n    const maxFillet = Math.min(width, height) / 2;\n    const inset = Math.min(maxFillet, Math.max(-maxFillet, fillet));\n    const right = x + width;\n    const bottom = y + height;\n    const dir = inset < 0 ? -inset : 0;\n    const size = Math.abs(inset);\n    return this.moveTo(x, y + size).arcTo(x + dir, y + dir, x + size, y, size).lineTo(right - size, y).arcTo(right - dir, y + dir, right, y + size, size).lineTo(right, bottom - size).arcTo(right - dir, bottom - dir, x + width - size, bottom, size).lineTo(x + size, bottom).arcTo(x + dir, bottom - dir, x, bottom - size, size).closePath();\n  }\n  /**\n   * Draw Rectangle with chamfer corners. These are angled corners.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param chamfer - non-zero real number, size of corner cutout\n   * @param transform\n   */\n  chamferRect(x, y, width, height, chamfer, transform) {\n    if (chamfer <= 0) {\n      return this.rect(x, y, width, height);\n    }\n    const inset = Math.min(chamfer, Math.min(width, height) / 2);\n    const right = x + width;\n    const bottom = y + height;\n    const points = [\n      x + inset,\n      y,\n      right - inset,\n      y,\n      right,\n      y + inset,\n      right,\n      bottom - inset,\n      right - inset,\n      bottom,\n      x + inset,\n      bottom,\n      x,\n      bottom - inset,\n      x,\n      y + inset\n    ];\n    for (let i = points.length - 1; i >= 2; i -= 2) {\n      if (points[i] === points[i - 2] && points[i - 1] === points[i - 3]) {\n        points.splice(i - 1, 2);\n      }\n    }\n    return this.poly(points, true, transform);\n  }\n  /**\n   * Draws an ellipse at the specified location and with the given x and y radii.\n   * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n   * @param x - The x-coordinate of the center of the ellipse.\n   * @param y - The y-coordinate of the center of the ellipse.\n   * @param radiusX - The horizontal radius of the ellipse.\n   * @param radiusY - The vertical radius of the ellipse.\n   * @param transform - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n   * @returns The instance of the current object for chaining.\n   */\n  ellipse(x, y, radiusX, radiusY, transform) {\n    this.drawShape(new Ellipse.Ellipse(x, y, radiusX, radiusY), transform);\n    return this;\n  }\n  /**\n   * Draws a rectangle with rounded corners.\n   * The corner radius can be specified to determine how rounded the corners should be.\n   * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  roundRect(x, y, w, h, radius, transform) {\n    this.drawShape(new RoundedRectangle.RoundedRectangle(x, y, w, h, radius), transform);\n    return this;\n  }\n  /**\n   * Draws a given shape on the canvas.\n   * This is a generic method that can draw any type of shape specified by the `ShapePrimitive` parameter.\n   * An optional transformation matrix can be applied to the shape, allowing for complex transformations.\n   * @param shape - The shape to draw, defined as a `ShapePrimitive` object.\n   * @param matrix - An optional `Matrix` for transforming the shape. This can include rotations,\n   * scaling, and translations.\n   * @returns The instance of the current object for chaining.\n   */\n  drawShape(shape, matrix) {\n    this.endPoly();\n    this.shapePrimitives.push({ shape, transform: matrix });\n    return this;\n  }\n  /**\n   * Starts a new polygon path from the specified starting point.\n   * This method initializes a new polygon or ends the current one if it exists.\n   * @param x - The x-coordinate of the starting point of the new polygon.\n   * @param y - The y-coordinate of the starting point of the new polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  startPoly(x, y) {\n    let currentPoly = this._currentPoly;\n    if (currentPoly) {\n      this.endPoly();\n    }\n    currentPoly = new Polygon.Polygon();\n    currentPoly.points.push(x, y);\n    this._currentPoly = currentPoly;\n    return this;\n  }\n  /**\n   * Ends the current polygon path. If `closePath` is set to true,\n   * the path is closed by connecting the last point to the first one.\n   * This method finalizes the current polygon and prepares it for drawing or adding to the shape primitives.\n   * @param closePath - A boolean indicating whether to close the polygon by connecting the last point\n   *  back to the starting point. False by default.\n   * @returns The instance of the current object for chaining.\n   */\n  endPoly(closePath = false) {\n    const shape = this._currentPoly;\n    if (shape && shape.points.length > 2) {\n      shape.closePath = closePath;\n      this.shapePrimitives.push({ shape });\n    }\n    this._currentPoly = null;\n    return this;\n  }\n  _ensurePoly(start = true) {\n    if (this._currentPoly)\n      return;\n    this._currentPoly = new Polygon.Polygon();\n    if (start) {\n      const lastShape = this.shapePrimitives[this.shapePrimitives.length - 1];\n      if (lastShape) {\n        let lx = lastShape.shape.x;\n        let ly = lastShape.shape.y;\n        if (lastShape.transform && !lastShape.transform.isIdentity()) {\n          const t = lastShape.transform;\n          const tempX = lx;\n          lx = t.a * lx + t.c * ly + t.tx;\n          ly = t.b * tempX + t.d * ly + t.ty;\n        }\n        this._currentPoly.points.push(lx, ly);\n      } else {\n        this._currentPoly.points.push(0, 0);\n      }\n    }\n  }\n  /** Builds the path. */\n  buildPath() {\n    const path = this._graphicsPath2D;\n    this.shapePrimitives.length = 0;\n    this._currentPoly = null;\n    for (let i = 0; i < path.instructions.length; i++) {\n      const instruction = path.instructions[i];\n      this[instruction.action](...instruction.data);\n    }\n    this.finish();\n  }\n  /** Gets the bounds of the path. */\n  get bounds() {\n    const bounds = this._bounds;\n    bounds.clear();\n    const shapePrimitives = this.shapePrimitives;\n    for (let i = 0; i < shapePrimitives.length; i++) {\n      const shapePrimitive = shapePrimitives[i];\n      const boundsRect = shapePrimitive.shape.getBounds(tempRectangle);\n      if (shapePrimitive.transform) {\n        bounds.addRect(boundsRect, shapePrimitive.transform);\n      } else {\n        bounds.addRect(boundsRect);\n      }\n    }\n    return bounds;\n  }\n}\n\nexports.ShapePath = ShapePath;\n//# sourceMappingURL=ShapePath.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Circle","Ellipse","Polygon","Rectangle","RoundedRectangle","Bounds","buildAdaptiveBezier","buildAdaptiveQuadratic","buildArc","buildArcTo","buildArcToSvg","roundShape","tempRectangle","ShapePath","constructor","graphicsPath2D","shapePrimitives","_currentPoly","_bounds","_graphicsPath2D","signed","checkForHoles","moveTo","x","y","startPoly","lineTo","_ensurePoly","points","fromY","length","fromX","push","arc","radius","startAngle","endAngle","counterclockwise","arcTo","x1","y1","x2","y2","arcToSvg","rx","ry","xAxisRotation","largeArcFlag","sweepFlag","lastX","lastY","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","smoothness","currentPoly","quadraticCurveTo","smoothing","closePath","endPoly","addPath","path","transform","isIdentity","clone","start","i","instructions","instruction","action","data","mainShape","shapePrimitive","shape","type","polygon","mainPolygon","containsPolygon","holes","copyWithin","finish","rect","w","h","drawShape","circle","poly","close","regularPoly","sides","rotation","Math","max","PI","delta","angle","cos","sin","roundPoly","corner","min","internalAngle","x0","y0","a1","a2","x3","y3","useQuadratic","roundedShapeQuadraticCurve","roundedShapeArc","filletRect","width","height","fillet","maxFillet","inset","right","bottom","dir","size","abs","chamferRect","chamfer","splice","ellipse","radiusX","radiusY","roundRect","matrix","lastShape","lx","ly","t","tempX","a","c","tx","b","d","ty","buildPath","bounds","clear","boundsRect","getBounds","addRect"]
}
