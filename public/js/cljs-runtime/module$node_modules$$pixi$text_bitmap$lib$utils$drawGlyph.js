shadow$provide.module$node_modules$$pixi$text_bitmap$lib$utils$drawGlyph = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index"), generateFillStyle = require("module$node_modules$$pixi$text_bitmap$lib$utils$generateFillStyle");
  exports.drawGlyph = function(canvas, context, metrics, x, y, resolution, style) {
    const char = metrics.text, fontProperties = metrics.fontProperties;
    context.translate(x, y);
    context.scale(resolution, resolution);
    x = style.strokeThickness / 2;
    y = -(style.strokeThickness / 2);
    (context.font = style.toFontString(), context.lineWidth = style.strokeThickness, context.textBaseline = style.textBaseline, context.lineJoin = style.lineJoin, context.miterLimit = style.miterLimit, context.fillStyle = generateFillStyle.generateFillStyle(canvas, context, style, resolution, [char], metrics), context.strokeStyle = style.stroke, style.dropShadow) ? (canvas = style.dropShadowBlur * resolution, resolution *= style.dropShadowDistance, context.shadowColor = core.Color.shared.setValue(style.dropShadowColor).setAlpha(style.dropShadowAlpha).toRgbaString(), 
    context.shadowBlur = canvas, context.shadowOffsetX = Math.cos(style.dropShadowAngle) * resolution, context.shadowOffsetY = Math.sin(style.dropShadowAngle) * resolution) : (context.shadowColor = "black", context.shadowBlur = 0, context.shadowOffsetX = 0, context.shadowOffsetY = 0);
    style.stroke && style.strokeThickness && context.strokeText(char, x, y + metrics.lineHeight - fontProperties.descent);
    style.fill && context.fillText(char, x, y + metrics.lineHeight - fontProperties.descent);
    context.setTransform(1, 0, 0, 1, 0, 0);
    context.fillStyle = "rgba(0, 0, 0, 0)";
  };
};

//# sourceMappingURL=module$node_modules$$pixi$text_bitmap$lib$utils$drawGlyph.js.map
