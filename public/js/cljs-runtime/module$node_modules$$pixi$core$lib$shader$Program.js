shadow$provide.module$node_modules$$pixi$core$lib$shader$Program = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index"), utils = require("module$node_modules$$pixi$utils$lib$index"), defaultProgram$1 = require("module$node_modules$$pixi$core$lib$shader$defaultProgram_frag"), defaultProgram = require("module$node_modules$$pixi$core$lib$shader$defaultProgram_vert");
  require("module$node_modules$$pixi$core$lib$shader$utils$index");
  var setPrecision = require("module$node_modules$$pixi$core$lib$shader$utils$setPrecision"), getMaxFragmentPrecision = require("module$node_modules$$pixi$core$lib$shader$utils$getMaxFragmentPrecision");
  let UID = 0;
  const nameCache = {};
  global = (() => {
    const node_modules$$pixi$core$lib$shader$Program$classdecl$var2 = class {
      constructor(vertexSrc, fragmentSrc, name = "pixi-shader", extra = {}) {
        this.extra = {};
        this.id = UID++;
        this.vertexSrc = vertexSrc || node_modules$$pixi$core$lib$shader$Program$classdecl$var2.defaultVertexSrc;
        this.fragmentSrc = fragmentSrc || node_modules$$pixi$core$lib$shader$Program$classdecl$var2.defaultFragmentSrc;
        this.vertexSrc = this.vertexSrc.trim();
        this.fragmentSrc = this.fragmentSrc.trim();
        this.extra = extra;
        "#version" !== this.vertexSrc.substring(0, 8) && (name = name.replace(/\s+/g, "-"), nameCache[name] ? (nameCache[name]++, name += `-${nameCache[name]}`) : nameCache[name] = 1, this.vertexSrc = `#define SHADER_NAME ${name}
${this.vertexSrc}`, this.fragmentSrc = `#define SHADER_NAME ${name}
${this.fragmentSrc}`, this.vertexSrc = setPrecision.setPrecision(this.vertexSrc, node_modules$$pixi$core$lib$shader$Program$classdecl$var2.defaultVertexPrecision, constants.PRECISION.HIGH), this.fragmentSrc = setPrecision.setPrecision(this.fragmentSrc, node_modules$$pixi$core$lib$shader$Program$classdecl$var2.defaultFragmentPrecision, getMaxFragmentPrecision.getMaxFragmentPrecision()));
        this.glPrograms = {};
        this.syncUniforms = null;
      }
      static get defaultVertexSrc() {
        return defaultProgram.default;
      }
      static get defaultFragmentSrc() {
        return defaultProgram$1.default;
      }
      static from(vertexSrc, fragmentSrc, name) {
        const key = vertexSrc + fragmentSrc;
        let program = utils.ProgramCache[key];
        return program || (utils.ProgramCache[key] = program = new node_modules$$pixi$core$lib$shader$Program$classdecl$var2(vertexSrc, fragmentSrc, name)), program;
      }
    };
    return node_modules$$pixi$core$lib$shader$Program$classdecl$var2;
  })();
  global.defaultVertexPrecision = constants.PRECISION.HIGH;
  global.defaultFragmentPrecision = utils.isMobile.apple.device ? constants.PRECISION.HIGH : constants.PRECISION.MEDIUM;
  exports.Program = global;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$shader$Program.js.map
