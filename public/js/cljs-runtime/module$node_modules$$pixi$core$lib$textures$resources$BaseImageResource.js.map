{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$BaseImageResource.js",
"lineCount":39,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/resources/BaseImageResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$BaseImageResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), utils = require(\"@pixi/utils\"), Resource = require(\"./Resource.js\");\nclass BaseImageResource extends Resource.Resource {\n  /**\n   * @param {PIXI.ImageSourcee} source\n   */\n  constructor(source) {\n    const sourceAny = source, width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.displayWidth || sourceAny.width, height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.displayHeight || sourceAny.height;\n    super(width, height), this.source = source, this.noSubImage = !1;\n  }\n  /**\n   * Set cross origin based detecting the url and the crossorigin\n   * @param element - Element to apply crossOrigin\n   * @param url - URL to check\n   * @param crossorigin - Cross origin value to use\n   */\n  static crossOrigin(element, url, crossorigin) {\n    crossorigin === void 0 && !url.startsWith(\"data:\") ? element.crossOrigin = utils.determineCrossOrigin(url) : crossorigin !== !1 && (element.crossOrigin = typeof crossorigin == \"string\" ? crossorigin : \"anonymous\");\n  }\n  /**\n   * Upload the texture to the GPU.\n   * @param renderer - Upload to the renderer\n   * @param baseTexture - Reference to parent texture\n   * @param glTexture\n   * @param {PIXI.ImageSourcee} [source] - (optional)\n   * @returns - true is success\n   */\n  upload(renderer, baseTexture, glTexture, source) {\n    const gl = renderer.gl, width = baseTexture.realWidth, height = baseTexture.realHeight;\n    if (source = source || this.source, typeof HTMLImageElement < \"u\" && source instanceof HTMLImageElement) {\n      if (!source.complete || source.naturalWidth === 0)\n        return !1;\n    } else if (typeof HTMLVideoElement < \"u\" && source instanceof HTMLVideoElement && source.readyState <= 1)\n      return !1;\n    return gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === constants.ALPHA_MODES.UNPACK), !this.noSubImage && baseTexture.target === gl.TEXTURE_2D && glTexture.width === width && glTexture.height === height ? gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source) : (glTexture.width = width, glTexture.height = height, gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source)), !0;\n  }\n  /**\n   * Checks if source width/height was changed, resize can cause extra baseTexture update.\n   * Triggers one update in any case.\n   */\n  update() {\n    if (this.destroyed)\n      return;\n    const source = this.source, width = source.naturalWidth || source.videoWidth || source.width, height = source.naturalHeight || source.videoHeight || source.height;\n    this.resize(width, height), super.update();\n  }\n  /** Destroy this {@link PIXI.BaseImageResource} */\n  dispose() {\n    this.source = null;\n  }\n}\nexports.BaseImageResource = BaseImageResource;\n//# sourceMappingURL=BaseImageResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","utils","Resource","BaseImageResource","constructor","source","naturalWidth","videoWidth","displayWidth","width","naturalHeight","videoHeight","displayHeight","height","noSubImage","crossOrigin","element","url","crossorigin","startsWith","determineCrossOrigin","upload","renderer","baseTexture","glTexture","gl","realWidth","realHeight","HTMLImageElement","complete","HTMLVideoElement","readyState","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","alphaMode","ALPHA_MODES","UNPACK","target","TEXTURE_2D","texImage2D","internalFormat","format","type","texSubImage2D","update","destroyed","resize","dispose"]
}
