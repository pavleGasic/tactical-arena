{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$batcher$gl$GlBatchAdaptor.js",
"lineCount":38,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,GAA4F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGhIC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACJ,MAAIC,QAAQJ,OAAA,CAAQ,4EAAR,CAAZ;AAEA,cAAA;AACA,OAAMK,eAAN;AACEC,eAAW,EAAG;AACZ,UAAKC,CAAAA,UAAL,GAAkBH,KAAMA,CAAAA,KAAMI,CAAAA,KAAZ,EAAlB;AAOA,UAAKC,CAAAA,cAAL,GAAsB,EAAtB;AARY;AAUdC,QAAI,CAACC,WAAD,CAAc;AAChBA,iBAAYC,CAAAA,QAASC,CAAAA,OAAQC,CAAAA,aAAcC,CAAAA,GAA3C,CAA+C,IAA/C,CAAA;AADgB;AAGlBD,iBAAa,EAAG;AACd,UAAKL,CAAAA,cAAL,GAAsB,EAAtB;AADc;AAGhBO,SAAK,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,MAAtB,CAA8B;AAC3BP,eAAAA,GAAWK,SAAUL,CAAAA,QAArBA;AACN,YAAMQ,YAAY,IAAKX,CAAAA,cAAL,CAAoBU,MAAOE,CAAAA,GAA3B,CAAlB;AACAT,eAASO,CAAAA,MAAOG,CAAAA,IAAhB,CAAqBH,MAArB,EAA6BC,SAA7B,CAAA;AACKA,eAAL,KACE,IAAKX,CAAAA,cAAL,CAAoBU,MAAOE,CAAAA,GAA3B,CADF,GACoC,CAAA,CADpC;AAGAT,eAASO,CAAAA,MAAOI,CAAAA,kBAAhB,CAAmCX,SAASY,CAAAA,cAAeC,CAAAA,YAA3D,CAAA;AACAb,eAASM,CAAAA,QAASI,CAAAA,IAAlB,CAAuBJ,QAAvB,EAAiCC,MAAOO,CAAAA,SAAxC,CAAA;AARiC;AAUnCC,WAAO,CAACV,SAAD,EAAYW,KAAZ,CAAmB;AAClBhB,eAAAA,GAAWK,SAAUL,CAAAA,QAArBA;AACN,UAAKL,CAAAA,UAAWsB,CAAAA,SAAhB,GAA4BD,KAAMC,CAAAA,SAAlC;AACAjB,eAASkB,CAAAA,KAAMC,CAAAA,GAAf,CAAmB,IAAKxB,CAAAA,UAAxB,CAAA;AACA,YAAMyB,WAAWJ,KAAMI,CAAAA,QAASA,CAAAA,QAAhC;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBL,KAAMI,CAAAA,QAASE,CAAAA,KAAnC,EAA0CD,CAAA,EAA1C;AACErB,iBAASuB,CAAAA,OAAQb,CAAAA,IAAjB,CAAsBU,QAAA,CAASC,CAAT,CAAtB,EAAmCA,CAAnC,CAAA;AADF;AAGArB,eAASM,CAAAA,QAASkB,CAAAA,IAAlB,CAAuBR,KAAMS,CAAAA,QAA7B,EAAuCT,KAAMU,CAAAA,IAA7C,EAAmDV,KAAMZ,CAAAA,KAAzD,CAAA;AARwB;AA3B5B;AAuCAX,gBAAekC,CAAAA,SAAf,GAA2B,CACzBC,KAAM,CACJrC,MAAWsC,CAAAA,aAAcC,CAAAA,iBADrB,CADmB,EAIzBC,KAAM,OAJmB,CAA3B;AAOAzC,SAAQG,CAAAA,cAAR,GAAyBA,cAAzB;AArDoI,CAApI;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/batcher/gl/GlBatchAdaptor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$batcher$gl$GlBatchAdaptor\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar State = require('../../renderers/shared/state/State.js');\n\n\"use strict\";\nclass GlBatchAdaptor {\n  constructor() {\n    this._tempState = State.State.for2d();\n    /**\n     * We only want to sync the a batched shaders uniforms once on first use\n     * this is a hash of shader uids to a boolean value.  When the shader is first bound\n     * we set the value to true.  When the shader is bound again we check the value and\n     * if it is true we know that the uniforms have already been synced and we skip it.\n     */\n    this._didUploadHash = {};\n  }\n  init(batcherPipe) {\n    batcherPipe.renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._didUploadHash = {};\n  }\n  start(batchPipe, geometry, shader) {\n    const renderer = batchPipe.renderer;\n    const didUpload = this._didUploadHash[shader.uid];\n    renderer.shader.bind(shader, didUpload);\n    if (!didUpload) {\n      this._didUploadHash[shader.uid] = true;\n    }\n    renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n    renderer.geometry.bind(geometry, shader.glProgram);\n  }\n  execute(batchPipe, batch) {\n    const renderer = batchPipe.renderer;\n    this._tempState.blendMode = batch.blendMode;\n    renderer.state.set(this._tempState);\n    const textures = batch.textures.textures;\n    for (let i = 0; i < batch.textures.count; i++) {\n      renderer.texture.bind(textures[i], i);\n    }\n    renderer.geometry.draw(batch.topology, batch.size, batch.start);\n  }\n}\n/** @ignore */\nGlBatchAdaptor.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipesAdaptor\n  ],\n  name: \"batch\"\n};\n\nexports.GlBatchAdaptor = GlBatchAdaptor;\n//# sourceMappingURL=GlBatchAdaptor.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","State","GlBatchAdaptor","constructor","_tempState","for2d","_didUploadHash","init","batcherPipe","renderer","runners","contextChange","add","start","batchPipe","geometry","shader","didUpload","uid","bind","updateUniformGroup","globalUniforms","uniformGroup","glProgram","execute","batch","blendMode","state","set","textures","i","count","texture","draw","topology","size","extension","type","ExtensionType","WebGLPipesAdaptor","name"]
}
