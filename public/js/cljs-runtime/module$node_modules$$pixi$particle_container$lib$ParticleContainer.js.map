{
"version":3,
"file":"module$node_modules$$pixi$particle_container$lib$ParticleContainer.js",
"lineCount":63,
"mappings":"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",
"sources":["node_modules/@pixi/particle-container/lib/ParticleContainer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$particle_container$lib$ParticleContainer\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), display = require(\"@pixi/display\");\nclass ParticleContainer extends display.Container {\n  /**\n   * @param maxSize - The maximum number of particles that can be rendered by the container.\n   *  Affects size of allocated buffers.\n   * @param properties - The properties of children that should be uploaded to the gpu and applied.\n   * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n   *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n   * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n   * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n   * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n   * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n   * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n   * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n   *  there are more than `maxSize` particles.\n   */\n  constructor(maxSize = 1500, properties, batchSize = 16384, autoResize = !1) {\n    super();\n    const maxBatchSize = 16384;\n    batchSize > maxBatchSize && (batchSize = maxBatchSize), this._properties = [!1, !0, !1, !1, !1], this._maxSize = maxSize, this._batchSize = batchSize, this._buffers = null, this._bufferUpdateIDs = [], this._updateID = 0, this.interactiveChildren = !1, this.blendMode = core.BLEND_MODES.NORMAL, this.autoResize = autoResize, this.roundPixels = !0, this.baseTexture = null, this.setProperties(properties), this._tintColor = new core.Color(0), this.tintRgb = new Float32Array(3), this.tint = 16777215;\n  }\n  /**\n   * Sets the private properties array to dynamic / static based on the passed properties object\n   * @param properties - The properties to be uploaded\n   */\n  setProperties(properties) {\n    properties && (this._properties[0] = \"vertices\" in properties || \"scale\" in properties ? !!properties.vertices || !!properties.scale : this._properties[0], this._properties[1] = \"position\" in properties ? !!properties.position : this._properties[1], this._properties[2] = \"rotation\" in properties ? !!properties.rotation : this._properties[2], this._properties[3] = \"uvs\" in properties ? !!properties.uvs : this._properties[3], this._properties[4] = \"tint\" in properties || \"alpha\" in properties ? !!properties.tint || !!properties.alpha : this._properties[4]);\n  }\n  updateTransform() {\n    this.displayObjectUpdateTransform();\n  }\n  /**\n   * The tint applied to the container. This is a hex value.\n   * A value of 0xFFFFFF will remove any tint effect.\n   * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    return this._tintColor.value;\n  }\n  set tint(value) {\n    this._tintColor.setValue(value), this._tintColor.toRgbArray(this.tintRgb);\n  }\n  /**\n   * Renders the container using the WebGL renderer.\n   * @param renderer - The WebGL renderer.\n   */\n  render(renderer) {\n    !this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable || (this.baseTexture || (this.baseTexture = this.children[0]._texture.baseTexture, this.baseTexture.valid || this.baseTexture.once(\"update\", () => this.onChildrenChange(0))), renderer.batch.setObjectRenderer(renderer.plugins.particle), renderer.plugins.particle.render(this));\n  }\n  /**\n   * Set the flag that static data should be updated to true\n   * @param smallestChildIndex - The smallest child index.\n   */\n  onChildrenChange(smallestChildIndex) {\n    const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n    for (; this._bufferUpdateIDs.length < bufferIndex; )\n      this._bufferUpdateIDs.push(0);\n    this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n  }\n  dispose() {\n    if (this._buffers) {\n      for (let i = 0; i < this._buffers.length; ++i)\n        this._buffers[i].destroy();\n      this._buffers = null;\n    }\n  }\n  /**\n   * Destroys the container\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n  destroy(options) {\n    super.destroy(options), this.dispose(), this._properties = null, this._buffers = null, this._bufferUpdateIDs = null;\n  }\n}\nexports.ParticleContainer = ParticleContainer;\n//# sourceMappingURL=ParticleContainer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","display","ParticleContainer","Container","constructor","maxSize","properties","batchSize","autoResize","maxBatchSize","_properties","_maxSize","_batchSize","_buffers","_bufferUpdateIDs","_updateID","interactiveChildren","blendMode","BLEND_MODES","NORMAL","roundPixels","baseTexture","setProperties","_tintColor","Color","tintRgb","Float32Array","tint","vertices","scale","position","rotation","uvs","alpha","updateTransform","displayObjectUpdateTransform","value","setValue","toRgbArray","render","renderer","visible","worldAlpha","children","length","renderable","_texture","valid","once","onChildrenChange","batch","setObjectRenderer","plugins","particle","smallestChildIndex","bufferIndex","Math","floor","push","dispose","i","destroy","options"]
}
