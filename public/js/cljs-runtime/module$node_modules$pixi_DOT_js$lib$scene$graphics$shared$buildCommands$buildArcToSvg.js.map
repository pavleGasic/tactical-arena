{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildArcToSvg.js",
"lineCount":73,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/buildCommands/buildArcToSvg.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildArcToSvg\"] = function(global,require,module,exports) {\n'use strict';\n\nvar buildAdaptiveBezier = require('./buildAdaptiveBezier.js');\n\n\"use strict\";\nconst TAU = Math.PI * 2;\nconst out = {\n  centerX: 0,\n  centerY: 0,\n  ang1: 0,\n  ang2: 0\n};\nconst mapToEllipse = ({ x, y }, rx, ry, cosPhi, sinPhi, centerX, centerY, out2) => {\n  x *= rx;\n  y *= ry;\n  const xp = cosPhi * x - sinPhi * y;\n  const yp = sinPhi * x + cosPhi * y;\n  out2.x = xp + centerX;\n  out2.y = yp + centerY;\n  return out2;\n};\nfunction approxUnitArc(ang1, ang2) {\n  const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n  const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n  const x1 = Math.cos(ang1);\n  const y1 = Math.sin(ang1);\n  const x2 = Math.cos(ang1 + ang2);\n  const y2 = Math.sin(ang1 + ang2);\n  return [\n    {\n      x: x1 - y1 * a,\n      y: y1 + x1 * a\n    },\n    {\n      x: x2 + y2 * a,\n      y: y2 - x2 * a\n    },\n    {\n      x: x2,\n      y: y2\n    }\n  ];\n}\nconst vectorAngle = (ux, uy, vx, vy) => {\n  const sign = ux * vy - uy * vx < 0 ? -1 : 1;\n  let dot = ux * vx + uy * vy;\n  if (dot > 1) {\n    dot = 1;\n  }\n  if (dot < -1) {\n    dot = -1;\n  }\n  return sign * Math.acos(dot);\n};\nconst getArcCenter = (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinPhi, cosPhi, pxp, pyp, out2) => {\n  const rxSq = Math.pow(rx, 2);\n  const rySq = Math.pow(ry, 2);\n  const pxpSq = Math.pow(pxp, 2);\n  const pypSq = Math.pow(pyp, 2);\n  let radicant = rxSq * rySq - rxSq * pypSq - rySq * pxpSq;\n  if (radicant < 0) {\n    radicant = 0;\n  }\n  radicant /= rxSq * pypSq + rySq * pxpSq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n  const centerXp = radicant * rx / ry * pyp;\n  const centerYp = radicant * -ry / rx * pxp;\n  const centerX = cosPhi * centerXp - sinPhi * centerYp + (px + cx) / 2;\n  const centerY = sinPhi * centerXp + cosPhi * centerYp + (py + cy) / 2;\n  const vx1 = (pxp - centerXp) / rx;\n  const vy1 = (pyp - centerYp) / ry;\n  const vx2 = (-pxp - centerXp) / rx;\n  const vy2 = (-pyp - centerYp) / ry;\n  const ang1 = vectorAngle(1, 0, vx1, vy1);\n  let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n  out2.centerX = centerX;\n  out2.centerY = centerY;\n  out2.ang1 = ang1;\n  out2.ang2 = ang2;\n};\nfunction buildArcToSvg(points, px, py, cx, cy, rx, ry, xAxisRotation = 0, largeArcFlag = 0, sweepFlag = 0) {\n  if (rx === 0 || ry === 0) {\n    return;\n  }\n  const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n  const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n  const pxp = cosPhi * (px - cx) / 2 + sinPhi * (py - cy) / 2;\n  const pyp = -sinPhi * (px - cx) / 2 + cosPhi * (py - cy) / 2;\n  if (pxp === 0 && pyp === 0) {\n    return;\n  }\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  const lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n  getArcCenter(\n    px,\n    py,\n    cx,\n    cy,\n    rx,\n    ry,\n    largeArcFlag,\n    sweepFlag,\n    sinPhi,\n    cosPhi,\n    pxp,\n    pyp,\n    out\n  );\n  let { ang1, ang2 } = out;\n  const { centerX, centerY } = out;\n  let ratio = Math.abs(ang2) / (TAU / 4);\n  if (Math.abs(1 - ratio) < 1e-7) {\n    ratio = 1;\n  }\n  const segments = Math.max(Math.ceil(ratio), 1);\n  ang2 /= segments;\n  let lastX = points[points.length - 2];\n  let lastY = points[points.length - 1];\n  const outCurvePoint = { x: 0, y: 0 };\n  for (let i = 0; i < segments; i++) {\n    const curve = approxUnitArc(ang1, ang2);\n    const { x: x1, y: y1 } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const { x: x2, y: y2 } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const { x, y } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    buildAdaptiveBezier.buildAdaptiveBezier(\n      points,\n      lastX,\n      lastY,\n      x1,\n      y1,\n      x2,\n      y2,\n      x,\n      y\n    );\n    lastX = x;\n    lastY = y;\n    ang1 += ang2;\n  }\n}\n\nexports.buildArcToSvg = buildArcToSvg;\n//# sourceMappingURL=buildArcToSvg.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","buildAdaptiveBezier","TAU","Math","PI","out","centerX","centerY","ang1","ang2","mapToEllipse","x","y","rx","ry","cosPhi","sinPhi","out2","vectorAngle","ux","uy","vx","vy","dot","sign","acos","buildArcToSvg","points","px","py","cx","cy","xAxisRotation","largeArcFlag","sweepFlag","sin","cos","pxp","pyp","abs","lambda","pow","sqrt","rxSq","rySq","pxpSq","pypSq","radicant","centerXp","centerYp","vx1","vy1","vx2","vy2","ratio","segments","max","ceil","lastX","length","lastY","outCurvePoint","i","a1","tan","a","x1","y1","x2","y2","curve"]
}
