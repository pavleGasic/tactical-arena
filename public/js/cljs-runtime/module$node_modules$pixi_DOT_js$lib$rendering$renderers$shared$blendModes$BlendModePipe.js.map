{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$blendModes$BlendModePipe.js",
"lineCount":69,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/blendModes/BlendModePipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$blendModes$BlendModePipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar FilterEffect = require('../../../../filters/FilterEffect.js');\nvar warn = require('../../../../utils/logging/warn.js');\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nExtensions.extensions.handle(Extensions.ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.runners.prerender.add(this);\n  }\n  prerender() {\n    this._activeBlendMode = \"normal\";\n    this._isAdvanced = false;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn.warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect.FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      renderables: [],\n      filterEffect,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexports.BlendModePipe = BlendModePipe;\n//# sourceMappingURL=BlendModePipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","FilterEffect","warn","BLEND_MODE_FILTERS","extensions","handle","ExtensionType","BlendMode","value","name","Error","ref","BlendModePipe","constructor","renderer","_isAdvanced","_filterHash","Object","create","_renderer","runners","prerender","add","_activeBlendMode","setBlendMode","renderable","blendMode","instructionSet","_renderableList","push","_endAdvancedBlendMode","_beginAdvancedBlendMode","renderPipes","batch","break","filterEffect","filters","instruction","renderPipeId","action","renderables","canBundle","buildStart","buildEnd","destroy","i","extension","type","WebGLPipes","WebGPUPipes","CanvasPipes"]
}
