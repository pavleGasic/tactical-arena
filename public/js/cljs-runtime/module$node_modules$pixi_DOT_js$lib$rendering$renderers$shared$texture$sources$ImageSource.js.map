{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$ImageSource.js",
"lineCount":26,
"mappings":"AAAAA,cAAA,CAAA,0FAAA,GAA+G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGvJ,MAAIC,UAAUH,OAAA,CAAQ,yDAAR,CAAd;AACII,QAAAA,GAAaJ,OAAA,CAAQ,2DAAR,CAAbI;AACJ,MAAIC,OAAOL,OAAA,CAAQ,wDAAR,CAAX;AACIM,SAAAA,GAAgBN,OAAA,CAAQ,8FAAR,CAAhBM;AAEJ,cAAA;AACA,OAAMC,YAAN,QAA0BD,QAAcA,CAAAA,aAAxC;AACEE,eAAW,CAACC,OAAD,CAAU;AACnB,UAAIA,OAAQC,CAAAA,QAAZ,IAAyBC,UAAWC,CAAAA,gBAApC,IAAwDH,OAAQC,CAAAA,QAAhE,YAAoFE,gBAApF,CAAuG;AACrG,cAAMC,SAASV,OAAQW,CAAAA,UAAWC,CAAAA,GAAnB,EAAyBC,CAAAA,YAAzB,CAAsCP,OAAQC,CAAAA,QAASO,CAAAA,KAAvD,EAA8DR,OAAQC,CAAAA,QAASQ,CAAAA,MAA/E,CAAf;AACgBL,cAAOM,CAAAA,UAAPC,CAAkB,IAAlBA,CACRC,CAAAA,SAAR,CAAkBZ,OAAQC,CAAAA,QAA1B,EAAoC,CAApC,EAAuC,CAAvC,EAA0CD,OAAQC,CAAAA,QAASO,CAAAA,KAA3D,EAAkER,OAAQC,CAAAA,QAASQ,CAAAA,MAAnF,CAAA;AACAT,eAAQC,CAAAA,QAAR,GAAmBG,MAAnB;AACAR,YAAKA,CAAAA,IAAL,CAAU,oFAAV,CAAA;AALqG;AAOvG,WAAA,CAAMI,OAAN,CAAA;AACA,UAAKa,CAAAA,cAAL,GAAsB,OAAtB;AACA,UAAKC,CAAAA,kBAAL,GAA0B,CAAA,CAA1B;AAVmB;AAYdC,eAAI,CAACd,QAAD,CAAW;AACpB,aAAOC,UAAWC,CAAAA,gBAAlB,IAAsCF,QAAtC,YAA0DE,gBAA1D,IAAqG,WAArG,KAA8E,MAAOa,YAArF,IAAoHf,QAApH,YAAwIe,WAAxI,IAAuJd,UAAWe,CAAAA,UAAlK,IAAgLhB,QAAhL,YAAoMgB,UAApM;AADoB;AAbxB;AAiBAnB,aAAYoB,CAAAA,SAAZ,GAAwBvB,MAAWwB,CAAAA,aAActB,CAAAA,aAAjD;AAEAJ,SAAQK,CAAAA,WAAR,GAAsBA,WAAtB;AA5BuJ,CAAvJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/sources/ImageSource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$ImageSource\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../../../environment/adapter.js');\nvar Extensions = require('../../../../../extensions/Extensions.js');\nvar warn = require('../../../../../utils/logging/warn.js');\nvar TextureSource = require('./TextureSource.js');\n\n\"use strict\";\nclass ImageSource extends TextureSource.TextureSource {\n  constructor(options) {\n    if (options.resource && (globalThis.HTMLImageElement && options.resource instanceof HTMLImageElement)) {\n      const canvas = adapter.DOMAdapter.get().createCanvas(options.resource.width, options.resource.height);\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(options.resource, 0, 0, options.resource.width, options.resource.height);\n      options.resource = canvas;\n      warn.warn(\"ImageSource: Image element passed, converting to canvas. Use CanvasSource instead.\");\n    }\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoGarbageCollect = true;\n  }\n  static test(resource) {\n    return globalThis.HTMLImageElement && resource instanceof HTMLImageElement || typeof ImageBitmap !== \"undefined\" && resource instanceof ImageBitmap || globalThis.VideoFrame && resource instanceof VideoFrame;\n  }\n}\nImageSource.extension = Extensions.ExtensionType.TextureSource;\n\nexports.ImageSource = ImageSource;\n//# sourceMappingURL=ImageSource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adapter","Extensions","warn","TextureSource","ImageSource","constructor","options","resource","globalThis","HTMLImageElement","canvas","DOMAdapter","get","createCanvas","width","height","getContext","context","drawImage","uploadMethodId","autoGarbageCollect","test","ImageBitmap","VideoFrame","extension","ExtensionType"]
}
