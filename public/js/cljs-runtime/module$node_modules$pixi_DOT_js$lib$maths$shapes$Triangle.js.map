{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$maths$shapes$Triangle.js",
"lineCount":56,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/maths/shapes/Triangle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$maths$shapes$Triangle\"] = function(global,require,module,exports) {\n'use strict';\n\nvar squaredDistanceToLineSegment = require('../misc/squaredDistanceToLineSegment.js');\nvar Rectangle = require('./Rectangle.js');\n\n\"use strict\";\nclass Triangle {\n  /**\n   * @param x - The X coord of the first point.\n   * @param y - The Y coord of the first point.\n   * @param x2 - The X coord of the second point.\n   * @param y2 - The Y coord of the second point.\n   * @param x3 - The X coord of the third point.\n   * @param y3 - The Y coord of the third point.\n   */\n  constructor(x = 0, y = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'triangle'\n     */\n    this.type = \"triangle\";\n    this.x = x;\n    this.y = y;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.x3 = x3;\n    this.y3 = y3;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this triangle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Triangle\n   */\n  contains(x, y) {\n    const s = (this.x - this.x3) * (y - this.y3) - (this.y - this.y3) * (x - this.x3);\n    const t = (this.x2 - this.x) * (y - this.y) - (this.y2 - this.y) * (x - this.x);\n    if (s < 0 !== t < 0 && s !== 0 && t !== 0) {\n      return false;\n    }\n    const d = (this.x3 - this.x2) * (y - this.y2) - (this.y3 - this.y2) * (x - this.x2);\n    return d === 0 || d < 0 === s + t <= 0;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this triangle including the stroke.\n   * @param pointX - The X coordinate of the point to test\n   * @param pointY - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param _alignment - The alignment of the stroke\n   * @returns Whether the x/y coordinates are within this triangle\n   */\n  strokeContains(pointX, pointY, strokeWidth, _alignment = 0.5) {\n    const halfStrokeWidth = strokeWidth / 2;\n    const halfStrokeWidthSquared = halfStrokeWidth * halfStrokeWidth;\n    const { x, x2, x3, y, y2, y3 } = this;\n    if (squaredDistanceToLineSegment.squaredDistanceToLineSegment(pointX, pointY, x, y, x2, y3) <= halfStrokeWidthSquared || squaredDistanceToLineSegment.squaredDistanceToLineSegment(pointX, pointY, x2, y2, x3, y3) <= halfStrokeWidthSquared || squaredDistanceToLineSegment.squaredDistanceToLineSegment(pointX, pointY, x3, y3, x, y) <= halfStrokeWidthSquared) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Creates a clone of this Triangle\n   * @returns a copy of the triangle\n   */\n  clone() {\n    const triangle = new Triangle(\n      this.x,\n      this.y,\n      this.x2,\n      this.y2,\n      this.x3,\n      this.y3\n    );\n    return triangle;\n  }\n  /**\n   * Copies another triangle to this one.\n   * @param triangle - The triangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(triangle) {\n    this.x = triangle.x;\n    this.y = triangle.y;\n    this.x2 = triangle.x2;\n    this.y2 = triangle.y2;\n    this.x3 = triangle.x3;\n    this.y3 = triangle.y3;\n    return this;\n  }\n  /**\n   * Copies this triangle to another one.\n   * @param triangle - The triangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(triangle) {\n    triangle.copyFrom(this);\n    return triangle;\n  }\n  /**\n   * Returns the framing rectangle of the triangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle.Rectangle());\n    const minX = Math.min(this.x, this.x2, this.x3);\n    const maxX = Math.max(this.x, this.x2, this.x3);\n    const minY = Math.min(this.y, this.y2, this.y3);\n    const maxY = Math.max(this.y, this.y2, this.y3);\n    out.x = minX;\n    out.y = minY;\n    out.width = maxX - minX;\n    out.height = maxY - minY;\n    return out;\n  }\n}\n\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","squaredDistanceToLineSegment","Rectangle","Triangle","constructor","x","y","x2","y2","x3","y3","type","contains","s","t","d","strokeContains","pointX","pointY","strokeWidth","_alignment","halfStrokeWidth","halfStrokeWidthSquared","clone","triangle","copyFrom","copyTo","getBounds","out","minX","Math","min","maxX","max","minY","maxY","width","height"]
}
