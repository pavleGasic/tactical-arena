{
"version":3,
"file":"module$node_modules$$pixi$color$lib$Color.js",
"lineCount":171,
"mappings":"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",
"sources":["node_modules/@pixi/color/lib/Color.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$color$lib$Color\"] = function(global,require,module,exports) {\n\"use strict\";\nvar colord = require(\"@pixi/colord\"), namesPlugin = require(\"@pixi/colord/plugins/names\");\ncolord.extend([namesPlugin]);\nconst _Color = class _Color2 {\n  /**\n   * @param {PIXI.ColorSource} value - Optional value to use, if not provided, white is used.\n   */\n  constructor(value = 16777215) {\n    this._value = null, this._components = new Float32Array(4), this._components.fill(1), this._int = 16777215, this.value = value;\n  }\n  /** Get red component (0 - 1) */\n  get red() {\n    return this._components[0];\n  }\n  /** Get green component (0 - 1) */\n  get green() {\n    return this._components[1];\n  }\n  /** Get blue component (0 - 1) */\n  get blue() {\n    return this._components[2];\n  }\n  /** Get alpha component (0 - 1) */\n  get alpha() {\n    return this._components[3];\n  }\n  /**\n   * Set the value, suitable for chaining\n   * @param value\n   * @see PIXI.Color.value\n   */\n  setValue(value) {\n    return this.value = value, this;\n  }\n  /**\n   * The current color source.\n   *\n   * When setting:\n   * - Setting to an instance of `Color` will copy its color source and components.\n   * - Otherwise, `Color` will try to normalize the color source and set the components.\n   *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n   *\n   * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n   * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n   *\n   * When getting:\n   * - A return value of `null` means the previous value was overridden (e.g., {@link PIXI.Color.multiply multiply},\n   *   {@link PIXI.Color.premultiply premultiply} or {@link PIXI.Color.round round}).\n   * - Otherwise, the color source used when setting is returned.\n   * @type {PIXI.ColorSource}\n   */\n  set value(value) {\n    if (value instanceof _Color2)\n      this._value = this.cloneSource(value._value), this._int = value._int, this._components.set(value._components);\n    else {\n      if (value === null)\n        throw new Error(\"Cannot set PIXI.Color#value to null\");\n      (this._value === null || !this.isSourceEqual(this._value, value)) && (this.normalize(value), this._value = this.cloneSource(value));\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  /**\n   * Copy a color source internally.\n   * @param value - Color source\n   */\n  cloneSource(value) {\n    return typeof value == \"string\" || typeof value == \"number\" || value instanceof Number || value === null ? value : Array.isArray(value) || ArrayBuffer.isView(value) ? value.slice(0) : typeof value == \"object\" && value !== null ? { ...value } : value;\n  }\n  /**\n   * Equality check for color sources.\n   * @param value1 - First color source\n   * @param value2 - Second color source\n   * @returns `true` if the color sources are equal, `false` otherwise.\n   */\n  isSourceEqual(value1, value2) {\n    const type1 = typeof value1;\n    if (type1 !== typeof value2)\n      return !1;\n    if (type1 === \"number\" || type1 === \"string\" || value1 instanceof Number)\n      return value1 === value2;\n    if (Array.isArray(value1) && Array.isArray(value2) || ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2))\n      return value1.length !== value2.length ? !1 : value1.every((v, i) => v === value2[i]);\n    if (value1 !== null && value2 !== null) {\n      const keys1 = Object.keys(value1), keys2 = Object.keys(value2);\n      return keys1.length !== keys2.length ? !1 : keys1.every((key) => value1[key] === value2[key]);\n    }\n    return value1 === value2;\n  }\n  /**\n   * Convert to a RGBA color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n   */\n  toRgba() {\n    const [r, g, b, a] = this._components;\n    return { r, g, b, a };\n  }\n  /**\n   * Convert to a RGB color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n   */\n  toRgb() {\n    const [r, g, b] = this._components;\n    return { r, g, b };\n  }\n  /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n  toRgbaString() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return `rgba(${r},${g},${b},${this.alpha})`;\n  }\n  toUint8RgbArray(out) {\n    const [r, g, b] = this._components;\n    return out = out ?? [], out[0] = Math.round(r * 255), out[1] = Math.round(g * 255), out[2] = Math.round(b * 255), out;\n  }\n  toRgbArray(out) {\n    out = out ?? [];\n    const [r, g, b] = this._components;\n    return out[0] = r, out[1] = g, out[2] = b, out;\n  }\n  /**\n   * Convert to a hexadecimal number.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toNumber(); // returns 16777215\n   */\n  toNumber() {\n    return this._int;\n  }\n  /**\n   * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n   * @returns {number} - The color as a number in little endian format.\n   */\n  toLittleEndianNumber() {\n    const value = this._int;\n    return (value >> 16) + (value & 65280) + ((value & 255) << 16);\n  }\n  /**\n   * Multiply with another color. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param {PIXI.ColorSource} value - The color to multiply by.\n   */\n  multiply(value) {\n    const [r, g, b, a] = _Color2.temp.setValue(value)._components;\n    return this._components[0] *= r, this._components[1] *= g, this._components[2] *= b, this._components[3] *= a, this.refreshInt(), this._value = null, this;\n  }\n  /**\n   * Converts color to a premultiplied alpha format. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {PIXI.Color} - Itself.\n   */\n  premultiply(alpha, applyToRGB = !0) {\n    return applyToRGB && (this._components[0] *= alpha, this._components[1] *= alpha, this._components[2] *= alpha), this._components[3] = alpha, this.refreshInt(), this._value = null, this;\n  }\n  /**\n   * Premultiplies alpha with current color.\n   * @param {number} alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {number} tint multiplied by alpha\n   */\n  toPremultiplied(alpha, applyToRGB = !0) {\n    if (alpha === 1)\n      return (255 << 24) + this._int;\n    if (alpha === 0)\n      return applyToRGB ? 0 : this._int;\n    let r = this._int >> 16 & 255, g = this._int >> 8 & 255, b = this._int & 255;\n    return applyToRGB && (r = r * alpha + 0.5 | 0, g = g * alpha + 0.5 | 0, b = b * alpha + 0.5 | 0), (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n  }\n  /**\n   * Convert to a hexidecimal string.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHex(); // returns \"#ffffff\"\n   */\n  toHex() {\n    const hexString = this._int.toString(16);\n    return `#${\"000000\".substring(0, 6 - hexString.length) + hexString}`;\n  }\n  /**\n   * Convert to a hexidecimal string with alpha.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHexa(); // returns \"#ffffffff\"\n   */\n  toHexa() {\n    const alphaString = Math.round(this._components[3] * 255).toString(16);\n    return this.toHex() + \"00\".substring(0, 2 - alphaString.length) + alphaString;\n  }\n  /**\n   * Set alpha, suitable for chaining.\n   * @param alpha\n   */\n  setAlpha(alpha) {\n    return this._components[3] = this._clamp(alpha), this;\n  }\n  /**\n   * Rounds the specified color according to the step. This action is destructive, and will\n   * override the previous `value` property to be `null`. The alpha component is not rounded.\n   * @param steps - Number of steps which will be used as a cap when rounding colors\n   * @deprecated since 7.3.0\n   */\n  round(steps) {\n    const [r, g, b] = this._components;\n    return this._components[0] = Math.round(r * steps) / steps, this._components[1] = Math.round(g * steps) / steps, this._components[2] = Math.round(b * steps) / steps, this.refreshInt(), this._value = null, this;\n  }\n  toArray(out) {\n    out = out ?? [];\n    const [r, g, b, a] = this._components;\n    return out[0] = r, out[1] = g, out[2] = b, out[3] = a, out;\n  }\n  /**\n   * Normalize the input value into rgba\n   * @param value - Input value\n   */\n  normalize(value) {\n    let r, g, b, a;\n    if ((typeof value == \"number\" || value instanceof Number) && value >= 0 && value <= 16777215) {\n      const int = value;\n      r = (int >> 16 & 255) / 255, g = (int >> 8 & 255) / 255, b = (int & 255) / 255, a = 1;\n    } else if ((Array.isArray(value) || value instanceof Float32Array) && value.length >= 3 && value.length <= 4)\n      value = this._clamp(value), [r, g, b, a = 1] = value;\n    else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray) && value.length >= 3 && value.length <= 4)\n      value = this._clamp(value, 0, 255), [r, g, b, a = 255] = value, r /= 255, g /= 255, b /= 255, a /= 255;\n    else if (typeof value == \"string\" || typeof value == \"object\") {\n      if (typeof value == \"string\") {\n        const match = _Color2.HEX_PATTERN.exec(value);\n        match && (value = `#${match[2]}`);\n      }\n      const color = colord.colord(value);\n      color.isValid() && ({ r, g, b, a } = color.rgba, r /= 255, g /= 255, b /= 255);\n    }\n    if (r !== void 0)\n      this._components[0] = r, this._components[1] = g, this._components[2] = b, this._components[3] = a, this.refreshInt();\n    else\n      throw new Error(`Unable to convert color ${value}`);\n  }\n  /** Refresh the internal color rgb number */\n  refreshInt() {\n    this._clamp(this._components);\n    const [r, g, b] = this._components;\n    this._int = (r * 255 << 16) + (g * 255 << 8) + (b * 255 | 0);\n  }\n  /**\n   * Clamps values to a range. Will override original values\n   * @param value - Value(s) to clamp\n   * @param min - Minimum value\n   * @param max - Maximum value\n   */\n  _clamp(value, min = 0, max = 1) {\n    return typeof value == \"number\" ? Math.min(Math.max(value, min), max) : (value.forEach((v, i) => {\n      value[i] = Math.min(Math.max(v, min), max);\n    }), value);\n  }\n};\n_Color.shared = new _Color(), /**\n* Temporary Color object for static uses internally.\n* As to not conflict with Color.shared.\n* @ignore\n*/\n_Color.temp = new _Color(), /** Pattern for hex strings */\n_Color.HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\nlet Color = _Color;\nexports.Color = Color;\n//# sourceMappingURL=Color.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","colord","namesPlugin","extend","constructor","value","_value","_components","Float32Array","fill","_int","setValue","_Color2","cloneSource","set","Error","isSourceEqual","normalize","Number","Array","isArray","ArrayBuffer","isView","slice","value1","value2","type1","length","every","v","i","keys1","Object","keys","keys2","key","toRgba","r","g","b","a","toRgb","toRgbaString","toUint8RgbArray","alpha","out","Math","round","toRgbArray","toNumber","toLittleEndianNumber","multiply","temp","refreshInt","premultiply","applyToRGB","toPremultiplied","toHex","hexString","toString","substring","toHexa","alphaString","setAlpha","_clamp","steps","toArray","int","Uint8Array","Uint8ClampedArray","match","HEX_PATTERN","exec","color","isValid","rgba","min","max","forEach","_Color","shared","Color"]
}
