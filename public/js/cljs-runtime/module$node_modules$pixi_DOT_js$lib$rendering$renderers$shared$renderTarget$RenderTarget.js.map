{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$renderTarget$RenderTarget.js",
"lineCount":78,
"mappings":"AAAAA,cAAA,CAAA,wFAAA,GAA6G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGrJ,MAAIC,MAAMH,OAAA,CAAQ,oDAAR,CAAV,EACII,gBAAgBJ,OAAA,CAAQ,8FAAR,CADpB,EAEIK,UAAUL,OAAA,CAAQ,gFAAR,CAFd;AAIA,cAAA;AACsB,QAAA,oGAAA,KAAA;AAIpBM,eAAW,CAACC,UAAA,GAAa,EAAd,CAAkB;AAE3B,UAAKJ,CAAAA,GAAL,GAAWA,GAAIA,CAAAA,GAAJ,CAAQ,cAAR,CAAX;AAKA,UAAKK,CAAAA,aAAL,GAAqB,EAArB;AACA,UAAKC,CAAAA,OAAL,GAAe,CAAf;AACA,UAAKC,CAAAA,MAAL,GAAc,CAAA,CAAd;AACA,UAAKC,CAAAA,KAAL,GAAa,IAAIC,YAAJ,CAAiB,CAAjB,CAAb;AAEA,UAAKC,CAAAA,qBAAL,GAA6B,CAAA,CAA7B;AACAN,gBAAA,GAAa,CAAE,GAAGO,iGAAcC,CAAAA,cAAnB,EAAmC,GAAGR,UAAtC,CAAb;AACA,UAAKS,CAAAA,OAAL,GAAeT,UAAWS,CAAAA,OAA1B;AACA,UAAKC,CAAAA,KAAL,GAAaV,UAAWU,CAAAA,KAAxB;AACA,UAAKP,CAAAA,MAAL,GAAcH,UAAWG,CAAAA,MAAzB;AACA,UAAwC,QAAxC,KAAI,MAAOH,WAAWC,CAAAA,aAAtB,CAAkD;AAChD,YAAKK,CAAAA,qBAAL,GAA6B,CAAA,CAA7B;AACA,aAAK,IAAIK,IAAI,CAAb,EAAgBA,CAAhB,GAAoBX,UAAWC,CAAAA,aAA/B,EAA8CU,CAAA,EAA9C;AACE,cAAKV,CAAAA,aAAcW,CAAAA,IAAnB,CACE,IAAIf,aAAcA,CAAAA,aAAlB,CAAgC,CAC9BgB,MAAOb,UAAWa,CAAAA,KADY,EAE9BC,OAAQd,UAAWc,CAAAA,MAFW,EAG9BC,WAAYf,UAAWe,CAAAA,UAHO,EAI9BC,UAAWhB,UAAWgB,CAAAA,SAJQ,CAAhC,CADF,CAAA;AADF;AAFgD,OAAlD;AAaE,YAAKf,CAAAA,aAEL,GAFqB,CAAC,GAAGD,UAAWC,CAAAA,aAAcgB,CAAAA,GAAzB,CAA8BC,OAAD,IAAaA,OAAQC,CAAAA,MAAlD,CAAJ,CAErB,EADMC,CACN,GADoB,IAAKC,CAAAA,YAAaF,CAAAA,MACtC,EAAA,IAAKG,CAAAA,MAAL,CAAYF,CAAYP,CAAAA,KAAxB,EAA+BO,CAAYN,CAAAA,MAA3C,EAAmDM,CAAYG,CAAAA,WAA/D,CAAA;AAfF;AAiBA,UAAKF,CAAAA,YAAaF,CAAAA,MAAOK,CAAAA,EAAzB,CAA4B,QAA5B,EAAsC,IAAKC,CAAAA,cAA3C,EAA2D,IAA3D,CAAA;AACA,UAAIzB,UAAW0B,CAAAA,mBAAf,IAAsC,IAAKjB,CAAAA,OAA3C;AACMT,kBAAW0B,CAAAA,mBAAf,YAA8C5B,OAAQA,CAAAA,OAAtD,IAAiEE,UAAW0B,CAAAA,mBAA5E,YAA2G7B,aAAcA,CAAAA,aAAzH,GACE,IAAK6B,CAAAA,mBADP,GAC6B1B,UAAW0B,CAAAA,mBAAoBP,CAAAA,MAD5D,GAGE,IAAKQ,CAAAA,yBAAL,EAHF;AADF;AAnC2B;AA2CzB,YAAO,EAAA;AACT,YAAMvB,QAAQ,IAAKA,CAAAA,KAAnB;AACAA,WAAA,CAAM,CAAN,CAAA,GAAW,IAAKwB,CAAAA,UAAhB;AACAxB,WAAA,CAAM,CAAN,CAAA,GAAW,IAAKyB,CAAAA,WAAhB;AACA,aAAOzB,KAAP;AAJS;AAMP,aAAQ,EAAA;AACV,aAAO,IAAKiB,CAAAA,YAAaF,CAAAA,MAAON,CAAAA,KAAhC;AADU;AAGR,cAAS,EAAA;AACX,aAAO,IAAKQ,CAAAA,YAAaF,CAAAA,MAAOL,CAAAA,MAAhC;AADW;AAGT,kBAAa,EAAA;AACf,aAAO,IAAKO,CAAAA,YAAaF,CAAAA,MAAOS,CAAAA,UAAhC;AADe;AAGb,mBAAc,EAAA;AAChB,aAAO,IAAKP,CAAAA,YAAaF,CAAAA,MAAOU,CAAAA,WAAhC;AADgB;AAGd,kBAAa,EAAA;AACf,aAAO,IAAKR,CAAAA,YAAaF,CAAAA,MAAOI,CAAAA,WAAhC;AADe;AAGb,oBAAe,EAAA;AACjB,aAAO,IAAKtB,CAAAA,aAAL,CAAmB,CAAnB,CAAP;AADiB;AAGnBwB,kBAAc,CAACN,MAAD,CAAS;AACrB,UAAKG,CAAAA,MAAL,CAAYH,MAAON,CAAAA,KAAnB,EAA0BM,MAAOL,CAAAA,MAAjC,EAAyCK,MAAOI,CAAAA,WAAhD,EAA6D,CAAA,CAA7D,CAAA;AADqB;AASvBI,6BAAyB,EAAG;AACrB,UAAKD,CAAAA,mBAAV,KACE,IAAKA,CAAAA,mBADP,GAC6B,IAAI7B,aAAcA,CAAAA,aAAlB,CAAgC,CACzDgB,MAAO,IAAKA,CAAAA,KAD6C,EAEzDC,OAAQ,IAAKA,CAAAA,MAF4C,EAGzDC,WAAY,IAAKA,CAAAA,UAHwC,EAIzDe,OAAQ,sBAJiD,EAKzDC,oBAAqB,CAAA,CALoC,EAMzDf,UAAW,CAAA,CAN8C,EAOzDgB,cAAe,CAP0C,CAAhC,CAD7B;AAD0B;AAc5BV,UAAM,CAACT,KAAD,EAAQC,MAAR,EAAgBC,UAAA,GAAa,IAAKA,CAAAA,UAAlC,EAA8CkB,gBAAA,GAAmB,CAAA,CAAjE,CAAwE;AAC5E,UAAK/B,CAAAA,OAAL,EAAA;AACA,UAAKD,CAAAA,aAAciC,CAAAA,OAAnB,CAA2B,CAACb,YAAD,EAAeV,CAAf,CAAA,IAAqB;AAC1CsB,wBAAJ,IAA8B,CAA9B,KAAwBtB,CAAxB,IAEAU,YAAaF,CAAAA,MAAOG,CAAAA,MAApB,CAA2BT,KAA3B,EAAkCC,MAAlC,EAA0CC,UAA1C,CAFA;AAD8C,OAAhD,CAAA;AAKI,UAAKW,CAAAA,mBAAT,IACE,IAAKA,CAAAA,mBAAoBP,CAAAA,MAAOG,CAAAA,MAAhC,CAAuCT,KAAvC,EAA8CC,MAA9C,EAAsDC,UAAtD,CADF;AAP4E;AAW9EoB,WAAO,EAAG;AACR,UAAKd,CAAAA,YAAaF,CAAAA,MAAOiB,CAAAA,GAAzB,CAA6B,QAA7B,EAAuC,IAAKX,CAAAA,cAA5C,EAA4D,IAA5D,CAAA;AACI,UAAKnB,CAAAA,qBAAT,IACE,IAAKL,CAAAA,aAAciC,CAAAA,OAAnB,CAA4BhB,OAAD,IAAa;AACtCA,eAAQiB,CAAAA,OAAR,EAAA;AADsC,OAAxC,CADF;AAKI,UAAKT,CAAAA,mBAAT,KACE,IAAKA,CAAAA,mBAAoBS,CAAAA,OAAzB,EACA,EAAA,OAAO,IAAKT,CAAAA,mBAFd;AAPQ;AAzGU,GAAA;AAAhBnB,QAAAA,GAAgB,iGAAhBA;AAuHNA,QAAcC,CAAAA,cAAd,GAA+B,CAE7BK,MAAO,CAFsB,EAI7BC,OAAQ,CAJqB,EAM7BC,WAAY,CANiB,EAQ7Bd,cAAe,CARc,EAU7BQ,QAAS,CAAA,CAVoB,EAY7BC,MAAO,CAAA,CAZsB,EAc7BM,UAAW,CAAA,CAdkB,EAiB7Bb,OAAQ,CAAA,CAjBqB,CAA/B;AAqBAR,SAAQ0C,CAAAA,YAAR,GAFmB9B,MAEnB;AApJqJ,CAArJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/renderTarget/RenderTarget.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$renderTarget$RenderTarget\"] = function(global,require,module,exports) {\n'use strict';\n\nvar uid = require('../../../../utils/data/uid.js');\nvar TextureSource = require('../texture/sources/TextureSource.js');\nvar Texture = require('../texture/Texture.js');\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid.uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource.TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture.Texture || descriptor.depthStencilTexture instanceof TextureSource.TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource.TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexports.RenderTarget = RenderTarget;\n//# sourceMappingURL=RenderTarget.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","uid","TextureSource","Texture","constructor","descriptor","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","_RenderTarget","defaultOptions","stencil","depth","i","push","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","on","onSourceResize","depthStencilTexture","ensureDepthStencilTexture","pixelWidth","pixelHeight","format","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","destroy","off","RenderTarget"]
}
