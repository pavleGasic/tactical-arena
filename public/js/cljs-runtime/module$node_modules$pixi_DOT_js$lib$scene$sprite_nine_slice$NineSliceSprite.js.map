{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSprite.js",
"lineCount":134,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/sprite-nine-slice/NineSliceSprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSprite\"] = function(global,require,module,exports) {\n'use strict';\n\nvar ObservablePoint = require('../../maths/point/ObservablePoint.js');\nvar Texture = require('../../rendering/renderers/shared/texture/Texture.js');\nvar deprecation = require('../../utils/logging/deprecation.js');\nvar ViewContainer = require('../view/ViewContainer.js');\nvar NineSliceGeometry = require('./NineSliceGeometry.js');\n\n\"use strict\";\nconst _NineSliceSprite = class _NineSliceSprite extends ViewContainer.ViewContainer {\n  /**\n   * @param {scene.NineSliceSpriteOptions|Texture} options - Options to use\n   * @param options.texture - The texture to use on the NineSliceSprite.\n   * @param options.leftWidth - Width of the left vertical bar (A)\n   * @param options.topHeight - Height of the top horizontal bar (C)\n   * @param options.rightWidth - Width of the right vertical bar (B)\n   * @param options.bottomHeight - Height of the bottom horizontal bar (D)\n   * @param options.width - Width of the NineSliceSprite,\n   * setting this will actually modify the vertices and not the UV's of this plane.\n   * @param options.height - Height of the NineSliceSprite,\n   * setting this will actually modify the vertices and not UV's of this plane.\n   */\n  constructor(options) {\n    if (options instanceof Texture.Texture) {\n      options = { texture: options };\n    }\n    const {\n      width,\n      height,\n      anchor,\n      leftWidth,\n      rightWidth,\n      topHeight,\n      bottomHeight,\n      texture,\n      roundPixels,\n      ...rest\n    } = options;\n    super({\n      label: \"NineSliceSprite\",\n      ...rest\n    });\n    this.renderPipeId = \"nineSliceSprite\";\n    this.batched = true;\n    this._leftWidth = leftWidth ?? texture?.defaultBorders?.left ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.leftWidth;\n    this._topHeight = topHeight ?? texture?.defaultBorders?.top ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.topHeight;\n    this._rightWidth = rightWidth ?? texture?.defaultBorders?.right ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.rightWidth;\n    this._bottomHeight = bottomHeight ?? texture?.defaultBorders?.bottom ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.bottomHeight;\n    this._width = width ?? texture.width ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.width;\n    this._height = height ?? texture.height ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.height;\n    this.allowChildren = false;\n    this.texture = texture ?? _NineSliceSprite.defaultOptions.texture;\n    this.roundPixels = roundPixels ?? false;\n    this._anchor = new ObservablePoint.ObservablePoint(\n      {\n        _onUpdate: () => {\n          this.onViewUpdate();\n        }\n      }\n    );\n    if (anchor) {\n      this.anchor = anchor;\n    } else if (this.texture.defaultAnchor) {\n      this.anchor = this.texture.defaultAnchor;\n    }\n  }\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value === \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** The width of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    this._width = value;\n    this.onViewUpdate();\n  }\n  /** The height of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    this._height = value;\n    this.onViewUpdate();\n  }\n  /**\n   * Sets the size of the NiceSliceSprite to the specified width and height.\n   * setting this will actually modify the vertices and UV's of this plane\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    }\n    this._width = value;\n    this._height = height ?? value;\n    this.onViewUpdate();\n  }\n  /**\n   * Retrieves the size of the NineSliceSprite as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the NineSliceSprite.\n   */\n  getSize(out) {\n    out || (out = {});\n    out.width = this._width;\n    out.height = this._height;\n    return out;\n  }\n  /** The width of the left column (a) of the NineSliceSprite. */\n  get leftWidth() {\n    return this._leftWidth;\n  }\n  set leftWidth(value) {\n    this._leftWidth = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get topHeight() {\n    return this._topHeight;\n  }\n  set topHeight(value) {\n    this._topHeight = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get rightWidth() {\n    return this._rightWidth;\n  }\n  set rightWidth(value) {\n    this._rightWidth = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get bottomHeight() {\n    return this._bottomHeight;\n  }\n  set bottomHeight(value) {\n    this._bottomHeight = value;\n    this.onViewUpdate();\n  }\n  /** The texture that the NineSliceSprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    value || (value = Texture.Texture.EMPTY);\n    const currentTexture = this._texture;\n    if (currentTexture === value)\n      return;\n    if (currentTexture && currentTexture.dynamic)\n      currentTexture.off(\"update\", this.onViewUpdate, this);\n    if (value.dynamic)\n      value.on(\"update\", this.onViewUpdate, this);\n    this._texture = value;\n    this.onViewUpdate();\n  }\n  /** The original width of the texture */\n  get originalWidth() {\n    return this._texture.width;\n  }\n  /** The original height of the texture */\n  get originalHeight() {\n    return this._texture.height;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options) {\n    super.destroy(options);\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      this._texture.destroy(destroyTextureSource);\n    }\n    this._texture = null;\n  }\n  /**\n   * @private\n   */\n  updateBounds() {\n    const bounds = this._bounds;\n    const anchor = this._anchor;\n    const width = this._width;\n    const height = this._height;\n    bounds.minX = -anchor._x * width;\n    bounds.maxX = bounds.minX + width;\n    bounds.minY = -anchor._y * height;\n    bounds.maxY = bounds.minY + height;\n  }\n};\n/** The default options, used to override the initial values of any options passed in the constructor. */\n_NineSliceSprite.defaultOptions = {\n  /** @default Texture.EMPTY */\n  texture: Texture.Texture.EMPTY\n};\nlet NineSliceSprite = _NineSliceSprite;\nclass NineSlicePlane extends NineSliceSprite {\n  constructor(...args) {\n    let options = args[0];\n    if (options instanceof Texture.Texture) {\n      deprecation.deprecation(deprecation.v8_0_0, \"NineSlicePlane now uses the options object {texture, leftWidth, rightWidth, topHeight, bottomHeight}\");\n      options = {\n        texture: options,\n        leftWidth: args[1],\n        topHeight: args[2],\n        rightWidth: args[3],\n        bottomHeight: args[4]\n      };\n    }\n    deprecation.deprecation(deprecation.v8_0_0, \"NineSlicePlane is deprecated. Use NineSliceSprite instead.\");\n    super(options);\n  }\n}\n\nexports.NineSlicePlane = NineSlicePlane;\nexports.NineSliceSprite = NineSliceSprite;\n//# sourceMappingURL=NineSliceSprite.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ObservablePoint","Texture","deprecation","ViewContainer","NineSliceGeometry","constructor","options","texture","width","height","anchor","leftWidth","rightWidth","topHeight","bottomHeight","roundPixels","rest","label","renderPipeId","batched","_leftWidth","defaultBorders","left","defaultOptions","_topHeight","top","_rightWidth","right","_bottomHeight","bottom","_width","_height","allowChildren","_NineSliceSprite","_anchor","_onUpdate","onViewUpdate","defaultAnchor","value","set","copyFrom","setSize","getSize","out","_texture","EMPTY","currentTexture","dynamic","off","on","destroy","destroyTexture","destroyTextureSource","textureSource","updateBounds","bounds","_bounds","minX","_x","maxX","minY","_y","maxY","NineSlicePlane","args","v8_0_0","NineSliceSprite"]
}
