{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$UboBatch.js",
"lineCount":36,
"mappings":"AAAAA,cAAA,CAAA,2EAAA,GAAgG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAIxI,OAAMC,SAAN;AACEC,eAAW,CAAC,CAAEC,yBAAF,CAAD,CAAgC;AAEzC,UAAKC,CAAAA,SAAL,GAAiB,CAAjB;AACA,UAAKC,CAAAA,0BAAL,GAAkCF,yBAAlC;AACA,UAAKG,CAAAA,IAAL,GAAY,IAAIC,YAAJ,CAAiB,KAAjB,CAAZ;AAJyC;AAM3CC,SAAK,EAAG;AACN,UAAKJ,CAAAA,SAAL,GAAiB,CAAjB;AADM;AAGRK,iBAAa,CAACC,IAAD,CAAO;AAClB,UAAIA,IAAJ,GAAW,IAAKL,CAAAA,0BAAhB,GAA6C,CAA7C;AACE,cAAUM,KAAJ,CAAW,2CAAiD,CAAjD,GAA0CD,IAA1C,EAAX,CAAN;AADF;AAGA,YAAME,QAAQ,IAAKR,CAAAA,SAAnB;AAEAS,UAAA,GAAUC,IAAKC,CAAAA,IAAL,EADIH,KACJ,GADmB,CACnB,GADYF,IACZ,IAAoB,IAAKL,CAAAA,0BAAzB,CAAV,GAAiE,IAAKA,CAAAA,0BAAtE;AACA,UAAIQ,IAAJ,GAAiC,CAAjC,GAAc,IAAKP,CAAAA,IAAKU,CAAAA,MAAxB;AACE,cAAUL,KAAJ,CAAU,2CAAV,CAAN;AADF;AAGA,UAAKP,CAAAA,SAAL,GAAiBS,IAAjB;AACA,aAAOD,KAAP;AAXkB;AAapBK,YAAQ,CAACC,KAAD,CAAQ;AACd,YAAMC,SAAS,IAAKV,CAAAA,aAAL,CAAmBS,KAAMF,CAAAA,MAAzB,CAAf;AACA,WAAK,IAAII,IAAI,CAAb,EAAgBA,CAAhB,GAAoBF,KAAMF,CAAAA,MAA1B,EAAkCI,CAAA,EAAlC;AACE,YAAKd,CAAAA,IAAL,CAAUa,MAAV,GAAmB,CAAnB,GAAuBC,CAAvB,CAAA,GAA4BF,KAAA,CAAME,CAAN,CAA5B;AADF;AAGA,aAAOD,MAAP;AALc;AAOhBE,WAAO,EAAG;AACR,UAAKf,CAAAA,IAAL,GAAY,IAAZ;AADQ;AA9BZ;AAmCAN,SAAQC,CAAAA,QAAR,GAAmBA,QAAnB;AAvCwI,CAAxI;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/buffer/UboBatch.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$UboBatch\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nclass UboBatch {\n  constructor({ minUniformOffsetAlignment }) {\n    this._minUniformOffsetAlignment = 256;\n    this.byteIndex = 0;\n    this._minUniformOffsetAlignment = minUniformOffsetAlignment;\n    this.data = new Float32Array(65535);\n  }\n  clear() {\n    this.byteIndex = 0;\n  }\n  addEmptyGroup(size) {\n    if (size > this._minUniformOffsetAlignment / 4) {\n      throw new Error(`UniformBufferBatch: array is too large: ${size * 4}`);\n    }\n    const start = this.byteIndex;\n    let newSize = start + size * 4;\n    newSize = Math.ceil(newSize / this._minUniformOffsetAlignment) * this._minUniformOffsetAlignment;\n    if (newSize > this.data.length * 4) {\n      throw new Error(\"UniformBufferBatch: ubo batch got too big\");\n    }\n    this.byteIndex = newSize;\n    return start;\n  }\n  addGroup(array) {\n    const offset = this.addEmptyGroup(array.length);\n    for (let i = 0; i < array.length; i++) {\n      this.data[offset / 4 + i] = array[i];\n    }\n    return offset;\n  }\n  destroy() {\n    this.data = null;\n  }\n}\n\nexports.UboBatch = UboBatch;\n//# sourceMappingURL=UboBatch.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","UboBatch","constructor","minUniformOffsetAlignment","byteIndex","_minUniformOffsetAlignment","data","Float32Array","clear","addEmptyGroup","size","Error","start","newSize","Math","ceil","length","addGroup","array","offset","i","destroy"]
}
