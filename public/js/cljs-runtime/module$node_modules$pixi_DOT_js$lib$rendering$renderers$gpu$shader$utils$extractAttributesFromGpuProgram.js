shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$extractAttributesFromGpuProgram = function(global, require, module, exports) {
  var getAttributeInfoFromFormat = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$utils$getAttributeInfoFromFormat");
  "use strict";
  const WGSL_TO_VERTEX_TYPES = {f32:"float32", "vec2\x3cf32\x3e":"float32x2", "vec3\x3cf32\x3e":"float32x3", "vec4\x3cf32\x3e":"float32x4", vec2f:"float32x2", vec3f:"float32x3", vec4f:"float32x4", i32:"sint32", "vec2\x3ci32\x3e":"sint32x2", "vec3\x3ci32\x3e":"sint32x3", "vec4\x3ci32\x3e":"sint32x4", u32:"uint32", "vec2\x3cu32\x3e":"uint32x2", "vec3\x3cu32\x3e":"uint32x3", "vec4\x3cu32\x3e":"uint32x4", bool:"uint32", "vec2\x3cbool\x3e":"uint32x2", "vec3\x3cbool\x3e":"uint32x3", "vec4\x3cbool\x3e":"uint32x4"};
  exports.extractAttributesFromGpuProgram = function({source, entryPoint}) {
    const results = {};
    entryPoint = source.indexOf(`fn ${entryPoint}`);
    if (-1 !== entryPoint) {
      var arrowFunctionStart = source.indexOf("-\x3e", entryPoint);
      if (-1 !== arrowFunctionStart) {
        for (source = source.substring(entryPoint, arrowFunctionStart), entryPoint = /@location\((\d+)\)\s+([a-zA-Z0-9_]+)\s*:\s*([a-zA-Z0-9_<>]+)(?:,|\s|$)/g; null !== (arrowFunctionStart = entryPoint.exec(source));) {
          const format = WGSL_TO_VERTEX_TYPES[arrowFunctionStart[3]] ?? "float32";
          results[arrowFunctionStart[2]] = {location:parseInt(arrowFunctionStart[1], 10), format, stride:getAttributeInfoFromFormat.getAttributeInfoFromFormat(format).stride, offset:0, instance:!1, start:0};
        }
      }
    }
    return results;
  };
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$extractAttributesFromGpuProgram.js.map
