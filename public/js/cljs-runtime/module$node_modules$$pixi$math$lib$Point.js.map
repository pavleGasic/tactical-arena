{
"version":3,
"file":"module$node_modules$$pixi$math$lib$Point.js",
"lineCount":29,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,GAA6D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAErG,OAAMC,MAAN;AAMEC,eAAW,CAACC,CAAA,GAAI,CAAL,EAAQC,CAAA,GAAI,CAAZ,CAAe;AACZ,UAAKA,CAAAA,CAAL,GAAZ,IAAKD,CAAAA,CAAO,GAAH,CAAG;AAAY,UAAKA,CAAAA,CAAL,GAASA,CAAT;AAAY,UAAKC,CAAAA,CAAL,GAASA,CAAT;AADZ;AAO1BC,SAAK,EAAG;AACN,aAAO,IAAIJ,KAAJ,CAAU,IAAKE,CAAAA,CAAf,EAAkB,IAAKC,CAAAA,CAAvB,CAAP;AADM;AAQRE,YAAQ,CAACC,CAAD,CAAI;AACV,aAAO,IAAKC,CAAAA,GAAL,CAASD,CAAEJ,CAAAA,CAAX,EAAcI,CAAEH,CAAAA,CAAhB,CAAA,EAAoB,IAA3B;AADU;AAQZK,UAAM,CAACF,CAAD,CAAI;AACR,aAAOA,CAAEC,CAAAA,GAAF,CAAM,IAAKL,CAAAA,CAAX,EAAc,IAAKC,CAAAA,CAAnB,CAAA,EAAuBG,CAA9B;AADQ;AAQVG,UAAM,CAACH,CAAD,CAAI;AACR,aAAOA,CAAEJ,CAAAA,CAAT,KAAe,IAAKA,CAAAA,CAApB,IAAyBI,CAAEH,CAAAA,CAA3B,KAAiC,IAAKA,CAAAA,CAAtC;AADQ;AAUVI,OAAG,CAACL,CAAA,GAAI,CAAL,EAAQC,CAAA,GAAID,CAAZ,CAAe;AAChB,aAAO,IAAKA,CAAAA,CAAL,GAASA,CAAT,EAAY,IAAKC,CAAAA,CAAjB,GAAqBA,CAArB,EAAwB,IAA/B;AADgB;AA/CpB;AAmDAH,OAAMU,CAAAA,SAAUC,CAAAA,QAAhB,GAA2BC,QAAQ,EAAG;AACpC,WAAQ,uBAAsB,IAAKV,CAAAA,CAA3B,MAAkC,IAAKC,CAAAA,CAAvC,GAAR;AADoC,GAAtC;AAGAJ,SAAQC,CAAAA,KAAR,GAAgBA,KAAhB;AAxDqG,CAArG;;",
"sources":["node_modules/@pixi/math/lib/Point.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$math$lib$Point\"] = function(global,require,module,exports) {\n\"use strict\";\nclass Point {\n  /**\n   * Creates a new `Point`\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  constructor(x = 0, y = 0) {\n    this.x = 0, this.y = 0, this.x = x, this.y = y;\n  }\n  /**\n   * Creates a clone of this point\n   * @returns A clone of this point\n   */\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  /**\n   * Copies `x` and `y` from the given point into this point\n   * @param p - The point to copy from\n   * @returns The point instance itself\n   */\n  copyFrom(p) {\n    return this.set(p.x, p.y), this;\n  }\n  /**\n   * Copies this point's x and y into the given point (`p`).\n   * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n   * @returns The point (`p`) with values updated\n   */\n  copyTo(p) {\n    return p.set(this.x, this.y), p;\n  }\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  equals(p) {\n    return p.x === this.x && p.y === this.y;\n  }\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the `x` axis\n   * @param {number} [y=x] - position of the point on the `y` axis\n   * @returns The point instance itself\n   */\n  set(x = 0, y = x) {\n    return this.x = x, this.y = y, this;\n  }\n}\nPoint.prototype.toString = function() {\n  return `[@pixi/math:Point x=${this.x} y=${this.y}]`;\n};\nexports.Point = Point;\n//# sourceMappingURL=Point.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Point","constructor","x","y","clone","copyFrom","p","set","copyTo","equals","prototype","toString","Point.prototype.toString"]
}
