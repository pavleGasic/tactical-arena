{
"version":3,
"file":"module$node_modules$parse_svg_path$index.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,GAA6D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAErGD,QAAOC,CAAAA,OAAP,GAyBAC,QAAc,CAACC,IAAD,CAAO;AACpB,QAAIC,OAAO,EAAX;AACAD,QAAKE,CAAAA,OAAL,CAAaC,OAAb,EAAsB,QAAQ,CAACC,CAAD,EAAIC,OAAJ,EAAaC,IAAb,CAAkB;AAC3CC,OAAAA,GAAOF,OAAQG,CAAAA,WAAR,EAAPD;AA0BL,UAAA,GAAO,CADHE,IACG,GAzBaH,IAwBDI,CAAAA,KAAL,CAAWC,MAAX,CACP,IAAUF,IAAQG,CAAAA,GAAR,CAAYC,MAAZ,CAAV,GAAgC,EAAvC;AAtBa,SAAZ,IAAIN,CAAJ,IAAiC,CAAjC,GAAmBD,IAAKQ,CAAAA,MAAxB,KACCb,IAAKc,CAAAA,IAAL,CAAU,CAACV,OAAD,CAAUW,CAAAA,MAAV,CAAiBV,IAAKW,CAAAA,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAjB,CAAV,CAEA,EADAV,CACA,GADO,GACP,EAAAF,OAAA,GAAqB,GAAX,IAAAA,OAAA,GAAiB,GAAjB,GAAuB,GAHlC;AAMA,WAAA,CAAA,CAAA,CAAa;AACZ,YAAIC,IAAKQ,CAAAA,MAAT,IAAmBA,MAAA,CAAOP,CAAP,CAAnB;AAEC,iBADAD,IAAKY,CAAAA,OAAL,CAAab,OAAb,CACO,EAAAJ,IAAKc,CAAAA,IAAL,CAAUT,IAAV,CAAP;AAFD;AAIA,YAAIA,IAAKQ,CAAAA,MAAT,GAAkBA,MAAA,CAAOP,CAAP,CAAlB;AAAgC,gBAAUY,KAAJ,CAAU,qBAAV,CAAN;AAAhC;AACAlB,YAAKc,CAAAA,IAAL,CAAU,CAACV,OAAD,CAAUW,CAAAA,MAAV,CAAiBV,IAAKW,CAAAA,MAAL,CAAY,CAAZ,EAAeH,MAAA,CAAOP,CAAP,CAAf,CAAjB,CAAV,CAAA;AANY;AAXkC,KAAhD,CAAA;AAoBA,WAAON,IAAP;AAtBoB,GAzBrB;AAOA,MAAIa,SAAS,CAACM,EAAG,CAAJ,EAAOC,EAAG,CAAV,EAAaC,EAAG,CAAhB,EAAmBC,EAAG,CAAtB,EAAyBC,EAAG,CAA5B,EAA+BC,EAAG,CAAlC,EAAqCC,EAAG,CAAxC,EAA2CC,EAAG,CAA9C,EAAiDC,EAAG,CAApD,EAAuDC,EAAG,CAA1D,CAAb,EAOI1B,UAAU,kCAPd,EA2CIQ,SAAS,mCA3Cb;AATqG,CAArG;;",
"sources":["node_modules/parse-svg-path/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$parse_svg_path$index\"] = function(global,require,module,exports) {\n\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parse","path","data","replace","segment","_","command","args","type","toLowerCase","numbers","match","number","map","Number","length","push","concat","splice","unshift","Error","a","c","h","l","m","q","s","t","v","z"]
}
