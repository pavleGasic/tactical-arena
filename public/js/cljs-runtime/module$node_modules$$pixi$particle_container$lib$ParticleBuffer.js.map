{
"version":3,
"file":"module$node_modules$$pixi$particle_container$lib$ParticleBuffer.js",
"lineCount":74,
"mappings":"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",
"sources":["node_modules/@pixi/particle-container/lib/ParticleBuffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$particle_container$lib$ParticleBuffer\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\");\nclass ParticleBuffer {\n  /**\n   * @param {object} properties - The properties to upload.\n   * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n   * @param {number} size - The size of the batch.\n   */\n  constructor(properties, dynamicPropertyFlags, size) {\n    this.geometry = new core.Geometry(), this.indexBuffer = null, this.size = size, this.dynamicProperties = [], this.staticProperties = [];\n    for (let i = 0; i < properties.length; ++i) {\n      let property = properties[i];\n      property = {\n        attributeName: property.attributeName,\n        size: property.size,\n        uploadFunction: property.uploadFunction,\n        type: property.type || core.TYPES.FLOAT,\n        offset: property.offset\n      }, dynamicPropertyFlags[i] ? this.dynamicProperties.push(property) : this.staticProperties.push(property);\n    }\n    this.staticStride = 0, this.staticBuffer = null, this.staticData = null, this.staticDataUint32 = null, this.dynamicStride = 0, this.dynamicBuffer = null, this.dynamicData = null, this.dynamicDataUint32 = null, this._updateID = 0, this.initBuffers();\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  initBuffers() {\n    const geometry = this.geometry;\n    let dynamicOffset = 0;\n    this.indexBuffer = new core.Buffer(core.utils.createIndicesForQuads(this.size), !0, !0), geometry.addIndex(this.indexBuffer), this.dynamicStride = 0;\n    for (let i = 0; i < this.dynamicProperties.length; ++i) {\n      const property = this.dynamicProperties[i];\n      property.offset = dynamicOffset, dynamicOffset += property.size, this.dynamicStride += property.size;\n    }\n    const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n    this.dynamicData = new Float32Array(dynBuffer), this.dynamicDataUint32 = new Uint32Array(dynBuffer), this.dynamicBuffer = new core.Buffer(this.dynamicData, !1, !1);\n    let staticOffset = 0;\n    this.staticStride = 0;\n    for (let i = 0; i < this.staticProperties.length; ++i) {\n      const property = this.staticProperties[i];\n      property.offset = staticOffset, staticOffset += property.size, this.staticStride += property.size;\n    }\n    const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n    this.staticData = new Float32Array(statBuffer), this.staticDataUint32 = new Uint32Array(statBuffer), this.staticBuffer = new core.Buffer(this.staticData, !0, !1);\n    for (let i = 0; i < this.dynamicProperties.length; ++i) {\n      const property = this.dynamicProperties[i];\n      geometry.addAttribute(\n        property.attributeName,\n        this.dynamicBuffer,\n        0,\n        property.type === core.TYPES.UNSIGNED_BYTE,\n        property.type,\n        this.dynamicStride * 4,\n        property.offset * 4\n      );\n    }\n    for (let i = 0; i < this.staticProperties.length; ++i) {\n      const property = this.staticProperties[i];\n      geometry.addAttribute(\n        property.attributeName,\n        this.staticBuffer,\n        0,\n        property.type === core.TYPES.UNSIGNED_BYTE,\n        property.type,\n        this.staticStride * 4,\n        property.offset * 4\n      );\n    }\n  }\n  /**\n   * Uploads the dynamic properties.\n   * @param children - The children to upload.\n   * @param startIndex - The index to start at.\n   * @param amount - The number to upload.\n   */\n  uploadDynamic(children, startIndex, amount) {\n    for (let i = 0; i < this.dynamicProperties.length; i++) {\n      const property = this.dynamicProperties[i];\n      property.uploadFunction(\n        children,\n        startIndex,\n        amount,\n        property.type === core.TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData,\n        this.dynamicStride,\n        property.offset\n      );\n    }\n    this.dynamicBuffer._updateID++;\n  }\n  /**\n   * Uploads the static properties.\n   * @param children - The children to upload.\n   * @param startIndex - The index to start at.\n   * @param amount - The number to upload.\n   */\n  uploadStatic(children, startIndex, amount) {\n    for (let i = 0; i < this.staticProperties.length; i++) {\n      const property = this.staticProperties[i];\n      property.uploadFunction(\n        children,\n        startIndex,\n        amount,\n        property.type === core.TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData,\n        this.staticStride,\n        property.offset\n      );\n    }\n    this.staticBuffer._updateID++;\n  }\n  /** Destroys the ParticleBuffer. */\n  destroy() {\n    this.indexBuffer = null, this.dynamicProperties = null, this.dynamicBuffer = null, this.dynamicData = null, this.dynamicDataUint32 = null, this.staticProperties = null, this.staticBuffer = null, this.staticData = null, this.staticDataUint32 = null, this.geometry.destroy();\n  }\n}\nexports.ParticleBuffer = ParticleBuffer;\n//# sourceMappingURL=ParticleBuffer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","ParticleBuffer","constructor","properties","dynamicPropertyFlags","size","geometry","Geometry","indexBuffer","dynamicProperties","staticProperties","i","length","property","attributeName","uploadFunction","type","TYPES","FLOAT","offset","push","staticStride","staticDataUint32","staticData","staticBuffer","dynamicStride","dynamicDataUint32","dynamicData","dynamicBuffer","_updateID","initBuffers","dynamicOffset","Buffer","utils","createIndicesForQuads","addIndex","dynBuffer","ArrayBuffer","Float32Array","Uint32Array","staticOffset","statBuffer","addAttribute","UNSIGNED_BYTE","uploadDynamic","children","startIndex","amount","uploadStatic","destroy"]
}
