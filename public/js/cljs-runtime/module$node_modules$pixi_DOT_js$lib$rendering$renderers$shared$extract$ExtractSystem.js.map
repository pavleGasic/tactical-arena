{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$extract$ExtractSystem.js",
"lineCount":100,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/extract/ExtractSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$extract$ExtractSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar Container = require('../../../../scene/container/Container.js');\nvar Texture = require('../texture/Texture.js');\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container.Container || options instanceof Texture.Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture.Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy(true);\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture.Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container.Container) {\n      texture.destroy(true);\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture.Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: \"png\",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexports.ExtractSystem = ExtractSystem;\n//# sourceMappingURL=ExtractSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Container","Texture","imageTypes","png","jpg","webp","constructor","renderer","_renderer","_normalizeOptions","options","defaults","target","image","Image","src","base64","_ExtractSystem","defaultImageOptions","format","quality","canvas","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","reader.onload","result","onerror","readAsDataURL","Error","toDataURL","convertToBlob","type","texture","generateCanvas","textureGenerator","generateTexture","destroy","pixels","pixelInfo","getPixels","download","link","document","createElement","filename","href","body","appendChild","click","removeChild","log","width","console","height","style","join","extension","ExtensionType","WebGLSystem","WebGPUSystem","name","ExtractSystem"]
}
