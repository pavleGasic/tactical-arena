{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$sprite_animated$AnimatedSprite.js",
"lineCount":144,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/sprite-animated/AnimatedSprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$sprite_animated$AnimatedSprite\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Texture = require('../../rendering/renderers/shared/texture/Texture.js');\nvar _const = require('../../ticker/const.js');\nvar Ticker = require('../../ticker/Ticker.js');\nvar Sprite = require('../sprite/Sprite.js');\n\n\"use strict\";\nclass AnimatedSprite extends Sprite.Sprite {\n  /** @ignore */\n  constructor(...args) {\n    let options = args[0];\n    if (Array.isArray(args[0])) {\n      options = {\n        textures: args[0],\n        autoUpdate: args[1]\n      };\n    }\n    const {\n      animationSpeed = 1,\n      autoPlay = false,\n      autoUpdate = true,\n      loop = true,\n      onComplete = null,\n      onFrameChange = null,\n      onLoop = null,\n      textures,\n      updateAnchor = false,\n      ...rest\n    } = options;\n    const [firstFrame] = textures;\n    super({\n      ...rest,\n      texture: firstFrame instanceof Texture.Texture ? firstFrame : firstFrame.texture\n    });\n    this._textures = null;\n    this._durations = null;\n    this._autoUpdate = autoUpdate;\n    this._isConnectedToTicker = false;\n    this.animationSpeed = animationSpeed;\n    this.loop = loop;\n    this.updateAnchor = updateAnchor;\n    this.onComplete = onComplete;\n    this.onFrameChange = onFrameChange;\n    this.onLoop = onLoop;\n    this._currentTime = 0;\n    this._playing = false;\n    this._previousFrame = null;\n    this.textures = textures;\n    if (autoPlay) {\n      this.play();\n    }\n  }\n  /** Stops the AnimatedSprite. */\n  stop() {\n    if (!this._playing) {\n      return;\n    }\n    this._playing = false;\n    if (this._autoUpdate && this._isConnectedToTicker) {\n      Ticker.Ticker.shared.remove(this.update, this);\n      this._isConnectedToTicker = false;\n    }\n  }\n  /** Plays the AnimatedSprite. */\n  play() {\n    if (this._playing) {\n      return;\n    }\n    this._playing = true;\n    if (this._autoUpdate && !this._isConnectedToTicker) {\n      Ticker.Ticker.shared.add(this.update, this, _const.UPDATE_PRIORITY.HIGH);\n      this._isConnectedToTicker = true;\n    }\n  }\n  /**\n   * Stops the AnimatedSprite and goes to a specific frame.\n   * @param frameNumber - Frame index to stop at.\n   */\n  gotoAndStop(frameNumber) {\n    this.stop();\n    this.currentFrame = frameNumber;\n  }\n  /**\n   * Goes to a specific frame and begins playing the AnimatedSprite.\n   * @param frameNumber - Frame index to start at.\n   */\n  gotoAndPlay(frameNumber) {\n    this.currentFrame = frameNumber;\n    this.play();\n  }\n  /**\n   * Updates the object transform for rendering.\n   * @param ticker - the ticker to use to update the object.\n   */\n  update(ticker) {\n    if (!this._playing) {\n      return;\n    }\n    const deltaTime = ticker.deltaTime;\n    const elapsed = this.animationSpeed * deltaTime;\n    const previousFrame = this.currentFrame;\n    if (this._durations !== null) {\n      let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n      lag += elapsed / 60 * 1e3;\n      while (lag < 0) {\n        this._currentTime--;\n        lag += this._durations[this.currentFrame];\n      }\n      const sign = Math.sign(this.animationSpeed * deltaTime);\n      this._currentTime = Math.floor(this._currentTime);\n      while (lag >= this._durations[this.currentFrame]) {\n        lag -= this._durations[this.currentFrame] * sign;\n        this._currentTime += sign;\n      }\n      this._currentTime += lag / this._durations[this.currentFrame];\n    } else {\n      this._currentTime += elapsed;\n    }\n    if (this._currentTime < 0 && !this.loop) {\n      this.gotoAndStop(0);\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (this._currentTime >= this._textures.length && !this.loop) {\n      this.gotoAndStop(this._textures.length - 1);\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (previousFrame !== this.currentFrame) {\n      if (this.loop && this.onLoop) {\n        if (this.animationSpeed > 0 && this.currentFrame < previousFrame || this.animationSpeed < 0 && this.currentFrame > previousFrame) {\n          this.onLoop();\n        }\n      }\n      this._updateTexture();\n    }\n  }\n  /** Updates the displayed texture to match the current frame index. */\n  _updateTexture() {\n    const currentFrame = this.currentFrame;\n    if (this._previousFrame === currentFrame) {\n      return;\n    }\n    this._previousFrame = currentFrame;\n    this.texture = this._textures[currentFrame];\n    if (this.updateAnchor && this.texture.defaultAnchor) {\n      this.anchor.copyFrom(this.texture.defaultAnchor);\n    }\n    if (this.onFrameChange) {\n      this.onFrameChange(this.currentFrame);\n    }\n  }\n  /** Stops the AnimatedSprite and destroys it. */\n  destroy() {\n    this.stop();\n    super.destroy();\n    this.onComplete = null;\n    this.onFrameChange = null;\n    this.onLoop = null;\n  }\n  /**\n   * A short hand way of creating an AnimatedSprite from an array of frame ids.\n   * @param frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n   * @returns - The new animated sprite with the specified frames.\n   */\n  static fromFrames(frames) {\n    const textures = [];\n    for (let i = 0; i < frames.length; ++i) {\n      textures.push(Texture.Texture.from(frames[i]));\n    }\n    return new AnimatedSprite(textures);\n  }\n  /**\n   * A short hand way of creating an AnimatedSprite from an array of image ids.\n   * @param images - The array of image urls the AnimatedSprite will use as its texture frames.\n   * @returns The new animate sprite with the specified images as frames.\n   */\n  static fromImages(images) {\n    const textures = [];\n    for (let i = 0; i < images.length; ++i) {\n      textures.push(Texture.Texture.from(images[i]));\n    }\n    return new AnimatedSprite(textures);\n  }\n  /**\n   * The total number of frames in the AnimatedSprite. This is the same as number of textures\n   * assigned to the AnimatedSprite.\n   * @readonly\n   * @default 0\n   */\n  get totalFrames() {\n    return this._textures.length;\n  }\n  /** The array of textures used for this AnimatedSprite. */\n  get textures() {\n    return this._textures;\n  }\n  set textures(value) {\n    if (value[0] instanceof Texture.Texture) {\n      this._textures = value;\n      this._durations = null;\n    } else {\n      this._textures = [];\n      this._durations = [];\n      for (let i = 0; i < value.length; i++) {\n        this._textures.push(value[i].texture);\n        this._durations.push(value[i].time);\n      }\n    }\n    this._previousFrame = null;\n    this.gotoAndStop(0);\n    this._updateTexture();\n  }\n  /** The AnimatedSprite's current frame index. */\n  get currentFrame() {\n    let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n    if (currentFrame < 0) {\n      currentFrame += this._textures.length;\n    }\n    return currentFrame;\n  }\n  set currentFrame(value) {\n    if (value < 0 || value > this.totalFrames - 1) {\n      throw new Error(`[AnimatedSprite]: Invalid frame index value ${value}, expected to be between 0 and totalFrames ${this.totalFrames}.`);\n    }\n    const previousFrame = this.currentFrame;\n    this._currentTime = value;\n    if (previousFrame !== this.currentFrame) {\n      this._updateTexture();\n    }\n  }\n  /**\n   * Indicates if the AnimatedSprite is currently playing.\n   * @readonly\n   */\n  get playing() {\n    return this._playing;\n  }\n  /** Whether to use Ticker.shared to auto update animation time. */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    if (value !== this._autoUpdate) {\n      this._autoUpdate = value;\n      if (!this._autoUpdate && this._isConnectedToTicker) {\n        Ticker.Ticker.shared.remove(this.update, this);\n        this._isConnectedToTicker = false;\n      } else if (this._autoUpdate && !this._isConnectedToTicker && this._playing) {\n        Ticker.Ticker.shared.add(this.update, this);\n        this._isConnectedToTicker = true;\n      }\n    }\n  }\n}\n\nexports.AnimatedSprite = AnimatedSprite;\n//# sourceMappingURL=AnimatedSprite.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Texture","_const","Ticker","Sprite","AnimatedSprite","constructor","args","options","Array","isArray","textures","autoUpdate","animationSpeed","autoPlay","loop","onComplete","onFrameChange","onLoop","updateAnchor","rest","firstFrame","texture","_durations","_textures","_autoUpdate","_isConnectedToTicker","_currentTime","_playing","_previousFrame","play","stop","shared","remove","update","add","UPDATE_PRIORITY","HIGH","gotoAndStop","frameNumber","currentFrame","gotoAndPlay","ticker","deltaTime","elapsed","previousFrame","lag","sign","Math","floor","length","_updateTexture","defaultAnchor","anchor","copyFrom","destroy","fromFrames","frames","i","push","from","fromImages","images","value","time","totalFrames","Error"]
}
