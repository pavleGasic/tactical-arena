{
"version":3,
"file":"module$node_modules$$pixi$core$lib$shader$utils$logProgramError.js",
"lineCount":21,
"mappings":"AAAAA,cAAA,CAAA,+DAAA,GAAoF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE5HC,UAASA,qBAAoB,CAACC,EAAD,EAAKC,MAAL,CAAa;AAAA,UAClCC,YAAYF,EAAGG,CAAAA,eAAH,CAAmBF,MAAnB,CAA2BG,CAAAA,KAA3B,CAAkC,IAAlC,CACjBC,CAAAA,GADiB,CACb,CAACC,IAAD,EAAOC,KAAP,CAAA,IAAkB,GAAEA,KAAF,KAAYD,IAAZ,EADL,CADsB;AAEIE,MAAAA,GAAYR,EAAGS,CAAAA,gBAAH,CAAoBR,MAApB,CAAZO;AAFJ,UAGtCE,SAAS,EAH6B,EAGuIC,UAAU,CAAC,EAAD,CAHjJ;AAE2DH,MAAUJ,CAAAA,KAAVQ,CAAiB,IAAjBA,CAC1DP,CAAAA,GAAZ,CAAiBC,IAAD,IAAUO,UAAA,CAAWP,IAAKQ,CAAAA,OAAL,CAAa,uBAAb,EAAyC,IAAzC,CAAX,CAA1B,CAAsFC,CAAAA,MAAtFC,CAA8FC,CAAD,IAAOA,CAAA,IAAK,CAACP,MAAA,CAAOO,CAAP,CAAN,IAAmBP,MAAA,CAAOO,CAAP,CAAA,GAAY,CAAA,CAAZ,EAAgB,CAAA,CAAnC,IAAyC,CAAA,CAA7ID,CACjBE,CAAAA,OAAZ,CAAqBC,MAAD,IAAY;AAC9BjB,eAAA,CAAUiB,MAAV,GAAmB,CAAnB,CAAA,GAAyB,KAAIjB,SAAA,CAAUiB,MAAV,GAAmB,CAAnB,CAAJ,IAAzB;AAAwDR,aAAQS,CAAAA,IAAR,CAAa,qDAAb,EAAoE,iBAApE,CAAA;AAD1B,KAAhC,CAAA;AAGMC,UAAAA,GAAsBnB,SAAUoB,CAAAA,IAAV,CAAgB,IAAhB,CAAtBD;AAENV,WAAA,CAAQ,CAAR,CAAA,GAAaU,MAAb;AAAkCE,WAAQC,CAAAA,KAAR,CAAchB,EAAd,CAAA;AAA0Be,WAAQE,CAAAA,cAAR,CAAuB,gCAAvB,CAAA;AAA0DF,WAAQG,CAAAA,IAAR,CAAa,GAAGf,OAAhB,CAAA;AAA0BY,WAAQI,CAAAA,QAAR,EAAA;AATxG;AAc1C7B,SAAQ8B,CAAAA,eAAR,GAHAA,QAAwB,CAAC5B,EAAD,EAAK6B,OAAL,EAAcC,YAAd,EAA4BC,cAA5B,CAA4C;AAClE/B,MAAGgC,CAAAA,mBAAH,CAAuBH,OAAvB,EAAgC7B,EAAGiC,CAAAA,WAAnC,CAAA,KAAoDjC,EAAGkC,CAAAA,kBAAH,CAAsBJ,YAAtB,EAAoC9B,EAAGmC,CAAAA,cAAvC,CAAA,IAA0DpC,oBAAA,CAAqBC,EAArB,EAAyB8B,YAAzB,CAA1D,EAAkG9B,EAAGkC,CAAAA,kBAAH,CAAsBH,cAAtB,EAAsC/B,EAAGmC,CAAAA,cAAzC,CAAlG,IAA8JpC,oBAAA,CAAqBC,EAArB,EAAyB+B,cAAzB,CAA9J,EAAwMR,OAAQC,CAAAA,KAAR,CAAc,4CAAd,CAAxM,EAAuS,EAAvS,KAAqQxB,EAAGoC,CAAAA,iBAAH,CAAqBP,OAArB,CAArQ,IAA6SN,OAAQG,CAAAA,IAAR,CAAa,wCAAb,EAAuD1B,EAAGoC,CAAAA,iBAAH,CAAqBP,OAArB,CAAvD,CAAjW;AADkE,GAGpE;AAhB4H,CAA5H;;",
"sources":["node_modules/@pixi/core/lib/shader/utils/logProgramError.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$shader$utils$logProgramError\"] = function(global,require,module,exports) {\n\"use strict\";\nfunction logPrettyShaderError(gl, shader) {\n  const shaderSrc = gl.getShaderSource(shader).split(`\n`).map((line, index) => `${index}: ${line}`), shaderLog = gl.getShaderInfoLog(shader), splitShader = shaderLog.split(`\n`), dedupe = {}, lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, \"$1\"))).filter((n) => n && !dedupe[n] ? (dedupe[n] = !0, !0) : !1), logArgs = [\"\"];\n  lineNumbers.forEach((number) => {\n    shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`, logArgs.push(\"background: #FF0000; color:#FFFFFF; font-size: 10px\", \"font-size: 10px\");\n  });\n  const fragmentSourceToLog = shaderSrc.join(`\n`);\n  logArgs[0] = fragmentSourceToLog, console.error(shaderLog), console.groupCollapsed(\"click to view full shader code\"), console.warn(...logArgs), console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  gl.getProgramParameter(program, gl.LINK_STATUS) || (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) || logPrettyShaderError(gl, vertexShader), gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) || logPrettyShaderError(gl, fragmentShader), console.error(\"PixiJS Error: Could not initialize shader.\"), gl.getProgramInfoLog(program) !== \"\" && console.warn(\"PixiJS Warning: gl.getProgramInfoLog()\", gl.getProgramInfoLog(program)));\n}\nexports.logProgramError = logProgramError;\n//# sourceMappingURL=logProgramError.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","logPrettyShaderError","gl","shader","shaderSrc","getShaderSource","split","map","line","index","shaderLog","getShaderInfoLog","dedupe","logArgs","splitShader","parseFloat","replace","filter","lineNumbers","n","forEach","number","push","fragmentSourceToLog","join","console","error","groupCollapsed","warn","groupEnd","logProgramError","program","vertexShader","fragmentShader","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getProgramInfoLog"]
}
