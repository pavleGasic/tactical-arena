{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$effectsMixin.js",
"lineCount":36,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/container-mixins/effectsMixin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$effectsMixin\"] = function(global,require,module,exports) {\n'use strict';\n\nvar FilterEffect = require('../../../filters/FilterEffect.js');\nvar MaskEffectManager = require('../../../rendering/mask/MaskEffectManager.js');\n\n\"use strict\";\nconst effectsMixin = {\n  _maskEffect: null,\n  _maskOptions: {\n    inverse: false\n  },\n  _filterEffect: null,\n  /**\n   * @todo Needs docs.\n   * @memberof scene.Container#\n   * @type {Array<Effect>}\n   */\n  effects: [],\n  _markStructureAsChanged() {\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n  },\n  /**\n   * @todo Needs docs.\n   * @param effect - The effect to add.\n   * @memberof scene.Container#\n   * @ignore\n   */\n  addEffect(effect) {\n    const index = this.effects.indexOf(effect);\n    if (index !== -1)\n      return;\n    this.effects.push(effect);\n    this.effects.sort((a, b) => a.priority - b.priority);\n    this._markStructureAsChanged();\n    this._updateIsSimple();\n  },\n  /**\n   * @todo Needs docs.\n   * @param effect - The effect to remove.\n   * @memberof scene.Container#\n   * @ignore\n   */\n  removeEffect(effect) {\n    const index = this.effects.indexOf(effect);\n    if (index === -1)\n      return;\n    this.effects.splice(index, 1);\n    this._markStructureAsChanged();\n    this._updateIsSimple();\n  },\n  set mask(value) {\n    const effect = this._maskEffect;\n    if (effect?.mask === value)\n      return;\n    if (effect) {\n      this.removeEffect(effect);\n      MaskEffectManager.MaskEffectManager.returnMaskEffect(effect);\n      this._maskEffect = null;\n    }\n    if (value === null || value === void 0)\n      return;\n    this._maskEffect = MaskEffectManager.MaskEffectManager.getMaskEffect(value);\n    this.addEffect(this._maskEffect);\n  },\n  /**\n   * Used to set mask and control mask options.\n   * @param options\n   * @example\n   * import { Graphics, Sprite } from 'pixi.js';\n   *\n   * const graphics = new Graphics();\n   * graphics.beginFill(0xFF3300);\n   * graphics.drawRect(50, 250, 100, 100);\n   * graphics.endFill();\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.setMask({\n   *     mask: graphics,\n   *     inverse: true,\n   * });\n   * @memberof scene.Container#\n   */\n  setMask(options) {\n    this._maskOptions = {\n      ...this._maskOptions,\n      ...options\n    };\n    if (options.mask) {\n      this.mask = options.mask;\n    }\n    this._markStructureAsChanged();\n  },\n  /**\n   * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n   * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n   * {@link Graphics} or a {@link Sprite} object. This allows for much faster masking in canvas as it\n   * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n   * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n   * To remove a mask, set this property to `null`.\n   *\n   * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n   * @example\n   * import { Graphics, Sprite } from 'pixi.js';\n   *\n   * const graphics = new Graphics();\n   * graphics.beginFill(0xFF3300);\n   * graphics.drawRect(50, 250, 100, 100);\n   * graphics.endFill();\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.mask = graphics;\n   * @memberof scene.Container#\n   */\n  get mask() {\n    return this._maskEffect?.mask;\n  },\n  set filters(value) {\n    if (!Array.isArray(value) && value)\n      value = [value];\n    const effect = this._filterEffect || (this._filterEffect = new FilterEffect.FilterEffect());\n    value = value;\n    const hasFilters = value?.length > 0;\n    const hadFilters = effect.filters?.length > 0;\n    const didChange = hasFilters !== hadFilters;\n    value = Array.isArray(value) ? value.slice(0) : value;\n    effect.filters = Object.freeze(value);\n    if (didChange) {\n      if (hasFilters) {\n        this.addEffect(effect);\n      } else {\n        this.removeEffect(effect);\n        effect.filters = value ?? null;\n      }\n    }\n  },\n  /**\n   * Sets the filters for the displayObject.\n   * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n   * To remove filters simply set this property to `'null'`.\n   * @memberof scene.Container#\n   */\n  get filters() {\n    return this._filterEffect?.filters;\n  },\n  set filterArea(value) {\n    this._filterEffect || (this._filterEffect = new FilterEffect.FilterEffect());\n    this._filterEffect.filterArea = value;\n  },\n  /**\n   * The area the filter is applied to. This is used as more of an optimization\n   * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n   *\n   * Also works as an interaction mask.\n   * @memberof scene.Container#\n   */\n  get filterArea() {\n    return this._filterEffect?.filterArea;\n  }\n};\n\nexports.effectsMixin = effectsMixin;\n//# sourceMappingURL=effectsMixin.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","FilterEffect","MaskEffectManager","effectsMixin","_maskEffect","_maskOptions","inverse","_filterEffect","effects","_markStructureAsChanged","renderGroup","parentRenderGroup","structureDidChange","addEffect","effect","indexOf","index","push","sort","a","b","priority","_updateIsSimple","removeEffect","splice","mask","value","returnMaskEffect","getMaskEffect","setMask","options","filters","Array","isArray","hasFilters","length","didChange","slice","Object","freeze","filterArea"]
}
