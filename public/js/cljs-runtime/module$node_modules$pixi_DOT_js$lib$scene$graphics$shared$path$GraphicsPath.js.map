{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$path$GraphicsPath.js",
"lineCount":298,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/path/GraphicsPath.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$path$GraphicsPath\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Point = require('../../../../maths/point/Point.js');\nvar uid = require('../../../../utils/data/uid.js');\nvar warn = require('../../../../utils/logging/warn.js');\nvar parseSVGPath = require('../svg/parseSVGPath.js');\nvar ShapePath = require('./ShapePath.js');\n\n\"use strict\";\nclass GraphicsPath {\n  /**\n   * Creates a `GraphicsPath` instance optionally from an SVG path string or an array of `PathInstruction`.\n   * @param instructions - An SVG path string or an array of `PathInstruction` objects.\n   * @param signed\n   */\n  constructor(instructions, signed = false) {\n    this.instructions = [];\n    /** unique id for this graphics path */\n    this.uid = uid.uid(\"graphicsPath\");\n    this._dirty = true;\n    this.checkForHoles = signed;\n    if (typeof instructions === \"string\") {\n      parseSVGPath.parseSVGPath(instructions, this);\n    } else {\n      this.instructions = instructions?.slice() ?? [];\n    }\n  }\n  /**\n   * Provides access to the internal shape path, ensuring it is up-to-date with the current instructions.\n   * @returns The `ShapePath` instance associated with this `GraphicsPath`.\n   */\n  get shapePath() {\n    if (!this._shapePath) {\n      this._shapePath = new ShapePath.ShapePath(this);\n    }\n    if (this._dirty) {\n      this._dirty = false;\n      this._shapePath.buildPath();\n    }\n    return this._shapePath;\n  }\n  /**\n   * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n   * @param path - The `GraphicsPath` to add.\n   * @param transform - An optional transformation to apply to the added path.\n   * @returns The instance of the current object for chaining.\n   */\n  addPath(path, transform) {\n    path = path.clone();\n    this.instructions.push({ action: \"addPath\", data: [path, transform] });\n    this._dirty = true;\n    return this;\n  }\n  arc(...args) {\n    this.instructions.push({ action: \"arc\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  arcTo(...args) {\n    this.instructions.push({ action: \"arcTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  arcToSvg(...args) {\n    this.instructions.push({ action: \"arcToSvg\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  bezierCurveTo(...args) {\n    this.instructions.push({ action: \"bezierCurveTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires two points: the second control point and the end point. The first control point is assumed to be\n   * The starting point is the last point in the current path.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveToShort(cp2x, cp2y, x, y, smoothness) {\n    const last = this.instructions[this.instructions.length - 1];\n    const lastPoint = this.getLastPoint(Point.Point.shared);\n    let cp1x = 0;\n    let cp1y = 0;\n    if (!last || last.action !== \"bezierCurveTo\") {\n      cp1x = lastPoint.x;\n      cp1y = lastPoint.y;\n    } else {\n      cp1x = last.data[2];\n      cp1y = last.data[3];\n      const currentX = lastPoint.x;\n      const currentY = lastPoint.y;\n      cp1x = currentX + (currentX - cp1x);\n      cp1y = currentY + (currentY - cp1y);\n    }\n    this.instructions.push({ action: \"bezierCurveTo\", data: [cp1x, cp1y, cp2x, cp2y, x, y, smoothness] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this.instructions.push({ action: \"closePath\", data: [] });\n    this._dirty = true;\n    return this;\n  }\n  ellipse(...args) {\n    this.instructions.push({ action: \"ellipse\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  lineTo(...args) {\n    this.instructions.push({ action: \"lineTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  moveTo(...args) {\n    this.instructions.push({ action: \"moveTo\", data: args });\n    return this;\n  }\n  quadraticCurveTo(...args) {\n    this.instructions.push({ action: \"quadraticCurveTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It uses the previous point as the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveToShort(x, y, smoothness) {\n    const last = this.instructions[this.instructions.length - 1];\n    const lastPoint = this.getLastPoint(Point.Point.shared);\n    let cpx1 = 0;\n    let cpy1 = 0;\n    if (!last || last.action !== \"quadraticCurveTo\") {\n      cpx1 = lastPoint.x;\n      cpy1 = lastPoint.y;\n    } else {\n      cpx1 = last.data[0];\n      cpy1 = last.data[1];\n      const currentX = lastPoint.x;\n      const currentY = lastPoint.y;\n      cpx1 = currentX + (currentX - cpx1);\n      cpy1 = currentY + (currentY - cpy1);\n    }\n    this.instructions.push({ action: \"quadraticCurveTo\", data: [cpx1, cpy1, x, y, smoothness] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h, transform) {\n    this.instructions.push({ action: \"rect\", data: [x, y, w, h, transform] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius, transform) {\n    this.instructions.push({ action: \"circle\", data: [x, y, radius, transform] });\n    this._dirty = true;\n    return this;\n  }\n  roundRect(...args) {\n    this.instructions.push({ action: \"roundRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  poly(...args) {\n    this.instructions.push({ action: \"poly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  regularPoly(...args) {\n    this.instructions.push({ action: \"regularPoly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  roundPoly(...args) {\n    this.instructions.push({ action: \"roundPoly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  roundShape(...args) {\n    this.instructions.push({ action: \"roundShape\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  filletRect(...args) {\n    this.instructions.push({ action: \"filletRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  chamferRect(...args) {\n    this.instructions.push({ action: \"chamferRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a star shape centered at a specified location. This method allows for the creation\n   *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n   * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n   * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n   * @param x - The x-coordinate of the center of the star.\n   * @param y - The y-coordinate of the center of the star.\n   * @param points - The number of points of the star.\n   * @param radius - The outer radius of the star (distance from the center to the outer points).\n   * @param innerRadius - Optional. The inner radius of the star\n   * (distance from the center to the inner points between the outer points).\n   * If not provided, defaults to half of the `radius`.\n   * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n   * Defaults to 0, meaning one point is directly upward.\n   * @param transform - An optional `Matrix` object to apply a transformation to the star.\n   * This can include rotations, scaling, and translations.\n   * @returns The instance of the current object for chaining further drawing commands.\n   */\n  // eslint-disable-next-line max-len\n  star(x, y, points, radius, innerRadius, rotation, transform) {\n    innerRadius || (innerRadius = radius / 2);\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const len = points * 2;\n    const delta = Math.PI * 2 / len;\n    const polygon = [];\n    for (let i = 0; i < len; i++) {\n      const r = i % 2 ? innerRadius : radius;\n      const angle = i * delta + startAngle;\n      polygon.push(\n        x + r * Math.cos(angle),\n        y + r * Math.sin(angle)\n      );\n    }\n    this.poly(polygon, true, transform);\n    return this;\n  }\n  /**\n   * Creates a copy of the current `GraphicsPath` instance. This method supports both shallow and deep cloning.\n   * A shallow clone copies the reference of the instructions array, while a deep clone creates a new array and\n   * copies each instruction individually, ensuring that modifications to the instructions of the cloned `GraphicsPath`\n   * do not affect the original `GraphicsPath` and vice versa.\n   * @param deep - A boolean flag indicating whether the clone should be deep.\n   * @returns A new `GraphicsPath` instance that is a clone of the current instance.\n   */\n  clone(deep = false) {\n    const newGraphicsPath2D = new GraphicsPath();\n    newGraphicsPath2D.checkForHoles = this.checkForHoles;\n    if (!deep) {\n      newGraphicsPath2D.instructions = this.instructions.slice();\n    } else {\n      for (let i = 0; i < this.instructions.length; i++) {\n        const instruction = this.instructions[i];\n        newGraphicsPath2D.instructions.push({ action: instruction.action, data: instruction.data.slice() });\n      }\n    }\n    return newGraphicsPath2D;\n  }\n  clear() {\n    this.instructions.length = 0;\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Applies a transformation matrix to all drawing instructions within the `GraphicsPath`.\n   * This method enables the modification of the path's geometry according to the provided\n   * transformation matrix, which can include translations, rotations, scaling, and skewing.\n   *\n   * Each drawing instruction in the path is updated to reflect the transformation,\n   * ensuring the visual representation of the path is consistent with the applied matrix.\n   *\n   * Note: The transformation is applied directly to the coordinates and control points of the drawing instructions,\n   * not to the path as a whole. This means the transformation's effects are baked into the individual instructions,\n   * allowing for fine-grained control over the path's appearance.\n   * @param matrix - A `Matrix` object representing the transformation to apply.\n   * @returns The instance of the current object for chaining further operations.\n   */\n  transform(matrix) {\n    if (matrix.isIdentity())\n      return this;\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    let x = 0;\n    let y = 0;\n    let cpx1 = 0;\n    let cpy1 = 0;\n    let cpx2 = 0;\n    let cpy2 = 0;\n    let rx = 0;\n    let ry = 0;\n    for (let i = 0; i < this.instructions.length; i++) {\n      const instruction = this.instructions[i];\n      const data = instruction.data;\n      switch (instruction.action) {\n        case \"moveTo\":\n        case \"lineTo\":\n          x = data[0];\n          y = data[1];\n          data[0] = a * x + c * y + tx;\n          data[1] = b * x + d * y + ty;\n          break;\n        case \"bezierCurveTo\":\n          cpx1 = data[0];\n          cpy1 = data[1];\n          cpx2 = data[2];\n          cpy2 = data[3];\n          x = data[4];\n          y = data[5];\n          data[0] = a * cpx1 + c * cpy1 + tx;\n          data[1] = b * cpx1 + d * cpy1 + ty;\n          data[2] = a * cpx2 + c * cpy2 + tx;\n          data[3] = b * cpx2 + d * cpy2 + ty;\n          data[4] = a * x + c * y + tx;\n          data[5] = b * x + d * y + ty;\n          break;\n        case \"quadraticCurveTo\":\n          cpx1 = data[0];\n          cpy1 = data[1];\n          x = data[2];\n          y = data[3];\n          data[0] = a * cpx1 + c * cpy1 + tx;\n          data[1] = b * cpx1 + d * cpy1 + ty;\n          data[2] = a * x + c * y + tx;\n          data[3] = b * x + d * y + ty;\n          break;\n        case \"arcToSvg\":\n          x = data[5];\n          y = data[6];\n          rx = data[0];\n          ry = data[1];\n          data[0] = a * rx + c * ry;\n          data[1] = b * rx + d * ry;\n          data[5] = a * x + c * y + tx;\n          data[6] = b * x + d * y + ty;\n          break;\n        case \"circle\":\n          data[4] = adjustTransform(data[3], matrix);\n          break;\n        case \"rect\":\n          data[4] = adjustTransform(data[4], matrix);\n          break;\n        case \"ellipse\":\n          data[8] = adjustTransform(data[8], matrix);\n          break;\n        case \"roundRect\":\n          data[5] = adjustTransform(data[5], matrix);\n          break;\n        case \"addPath\":\n          data[0].transform(matrix);\n          break;\n        case \"poly\":\n          data[2] = adjustTransform(data[2], matrix);\n          break;\n        default:\n          warn.warn(\"unknown transform action\", instruction.action);\n          break;\n      }\n    }\n    this._dirty = true;\n    return this;\n  }\n  get bounds() {\n    return this.shapePath.bounds;\n  }\n  /**\n   * Retrieves the last point from the current drawing instructions in the `GraphicsPath`.\n   * This method is useful for operations that depend on the path's current endpoint,\n   * such as connecting subsequent shapes or paths. It supports various drawing instructions,\n   * ensuring the last point's position is accurately determined regardless of the path's complexity.\n   *\n   * If the last instruction is a `closePath`, the method iterates backward through the instructions\n   *  until it finds an actionable instruction that defines a point (e.g., `moveTo`, `lineTo`,\n   * `quadraticCurveTo`, etc.). For compound paths added via `addPath`, it recursively retrieves\n   * the last point from the nested path.\n   * @param out - A `Point` object where the last point's coordinates will be stored.\n   * This object is modified directly to contain the result.\n   * @returns The `Point` object containing the last point's coordinates.\n   */\n  getLastPoint(out) {\n    let index = this.instructions.length - 1;\n    let lastInstruction = this.instructions[index];\n    if (!lastInstruction) {\n      out.x = 0;\n      out.y = 0;\n      return out;\n    }\n    while (lastInstruction.action === \"closePath\") {\n      index--;\n      if (index < 0) {\n        out.x = 0;\n        out.y = 0;\n        return out;\n      }\n      lastInstruction = this.instructions[index];\n    }\n    switch (lastInstruction.action) {\n      case \"moveTo\":\n      case \"lineTo\":\n        out.x = lastInstruction.data[0];\n        out.y = lastInstruction.data[1];\n        break;\n      case \"quadraticCurveTo\":\n        out.x = lastInstruction.data[2];\n        out.y = lastInstruction.data[3];\n        break;\n      case \"bezierCurveTo\":\n        out.x = lastInstruction.data[4];\n        out.y = lastInstruction.data[5];\n        break;\n      case \"arc\":\n      case \"arcToSvg\":\n        out.x = lastInstruction.data[5];\n        out.y = lastInstruction.data[6];\n        break;\n      case \"addPath\":\n        lastInstruction.data[0].getLastPoint(out);\n        break;\n    }\n    return out;\n  }\n}\nfunction adjustTransform(currentMatrix, transform) {\n  if (currentMatrix) {\n    return currentMatrix.prepend(transform);\n  }\n  return transform.clone();\n}\n\nexports.GraphicsPath = GraphicsPath;\n//# sourceMappingURL=GraphicsPath.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adjustTransform","currentMatrix","transform","prepend","clone","Point","uid","warn","parseSVGPath","ShapePath","GraphicsPath","constructor","instructions","signed","_dirty","checkForHoles","slice","_shapePath","buildPath","addPath","path","push","action","data","arc","args","arcTo","arcToSvg","bezierCurveTo","bezierCurveToShort","cp2x","cp2y","x","y","smoothness","last","length","lastPoint","getLastPoint","shared","cp1x","cp1y","currentX","currentY","closePath","ellipse","lineTo","moveTo","quadraticCurveTo","quadraticCurveToShort","cpx1","cpy1","rect","w","h","circle","radius","roundRect","poly","regularPoly","roundPoly","roundShape","filletRect","chamferRect","star","points","innerRadius","rotation","startAngle","Math","PI","len","delta","polygon","i","r","angle","cos","sin","deep","newGraphicsPath2D","instruction","clear","matrix","isIdentity","a","b","c","d","tx","ty","cpx2","cpy2","rx","ry","shapePath","bounds","out","index","lastInstruction"]
}
