shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSprite = function(global, require, module, exports) {
  var ObservablePoint = require("module$node_modules$pixi_DOT_js$lib$maths$point$ObservablePoint"), Texture = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$Texture"), deprecation = require("module$node_modules$pixi_DOT_js$lib$utils$logging$deprecation");
  global = require("module$node_modules$pixi_DOT_js$lib$scene$view$ViewContainer");
  var NineSliceGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceGeometry");
  "use strict";
  const node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSprite$classdecl$var47 = class extends global.ViewContainer {
    constructor(options) {
      options instanceof Texture.Texture && (options = {texture:options});
      const {width, height, anchor, leftWidth, rightWidth, topHeight, bottomHeight, texture, roundPixels, ...rest} = options;
      super({label:"NineSliceSprite", ...rest});
      this.renderPipeId = "nineSliceSprite";
      this.batched = !0;
      this._leftWidth = leftWidth ?? texture?.defaultBorders?.left ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.leftWidth;
      this._topHeight = topHeight ?? texture?.defaultBorders?.top ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.topHeight;
      this._rightWidth = rightWidth ?? texture?.defaultBorders?.right ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.rightWidth;
      this._bottomHeight = bottomHeight ?? texture?.defaultBorders?.bottom ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.bottomHeight;
      this._width = width ?? texture.width ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.width;
      this._height = height ?? texture.height ?? NineSliceGeometry.NineSliceGeometry.defaultOptions.height;
      this.allowChildren = !1;
      this.texture = texture ?? node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSprite$classdecl$var47.defaultOptions.texture;
      this.roundPixels = roundPixels ?? !1;
      this._anchor = new ObservablePoint.ObservablePoint({_onUpdate:() => {
        this.onViewUpdate();
      }});
      anchor ? this.anchor = anchor : this.texture.defaultAnchor && (this.anchor = this.texture.defaultAnchor);
    }
    get anchor() {
      return this._anchor;
    }
    set anchor(value) {
      "number" === typeof value ? this._anchor.set(value) : this._anchor.copyFrom(value);
    }
    get width() {
      return this._width;
    }
    set width(value) {
      this._width = value;
      this.onViewUpdate();
    }
    get height() {
      return this._height;
    }
    set height(value) {
      this._height = value;
      this.onViewUpdate();
    }
    setSize(value, height) {
      "object" === typeof value && (height = value.height ?? value.width, value = value.width);
      this._width = value;
      this._height = height ?? value;
      this.onViewUpdate();
    }
    getSize(out) {
      out || (out = {});
      out.width = this._width;
      out.height = this._height;
      return out;
    }
    get leftWidth() {
      return this._leftWidth;
    }
    set leftWidth(value) {
      this._leftWidth = value;
      this.onViewUpdate();
    }
    get topHeight() {
      return this._topHeight;
    }
    set topHeight(value) {
      this._topHeight = value;
      this.onViewUpdate();
    }
    get rightWidth() {
      return this._rightWidth;
    }
    set rightWidth(value) {
      this._rightWidth = value;
      this.onViewUpdate();
    }
    get bottomHeight() {
      return this._bottomHeight;
    }
    set bottomHeight(value) {
      this._bottomHeight = value;
      this.onViewUpdate();
    }
    get texture() {
      return this._texture;
    }
    set texture(value) {
      value || (value = Texture.Texture.EMPTY);
      const currentTexture = this._texture;
      if (currentTexture !== value) {
        currentTexture && currentTexture.dynamic && currentTexture.off("update", this.onViewUpdate, this);
        if (value.dynamic) {
          value.on("update", this.onViewUpdate, this);
        }
        this._texture = value;
        this.onViewUpdate();
      }
    }
    get originalWidth() {
      return this._texture.width;
    }
    get originalHeight() {
      return this._texture.height;
    }
    destroy(options) {
      super.destroy(options);
      ("boolean" === typeof options ? options : options?.texture) && this._texture.destroy("boolean" === typeof options ? options : options?.textureSource);
      this._texture = null;
    }
    updateBounds() {
      const bounds = this._bounds, anchor = this._anchor, width = this._width, height = this._height;
      bounds.minX = -anchor._x * width;
      bounds.maxX = bounds.minX + width;
      bounds.minY = -anchor._y * height;
      bounds.maxY = bounds.minY + height;
    }
  };
  require = node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSprite$classdecl$var47;
  require.defaultOptions = {texture:Texture.Texture.EMPTY};
  class NineSlicePlane extends require {
    constructor(...args) {
      let options = args[0];
      options instanceof Texture.Texture && (deprecation.deprecation(deprecation.v8_0_0, "NineSlicePlane now uses the options object {texture, leftWidth, rightWidth, topHeight, bottomHeight}"), options = {texture:options, leftWidth:args[1], topHeight:args[2], rightWidth:args[3], bottomHeight:args[4]});
      deprecation.deprecation(deprecation.v8_0_0, "NineSlicePlane is deprecated. Use NineSliceSprite instead.");
      super(options);
    }
  }
  exports.NineSlicePlane = NineSlicePlane;
  exports.NineSliceSprite = require;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSprite.js.map
