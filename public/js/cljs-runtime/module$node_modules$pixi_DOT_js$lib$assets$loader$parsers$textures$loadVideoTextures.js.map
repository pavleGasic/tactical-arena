{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$loadVideoTextures.js",
"lineCount":76,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/assets/loader/parsers/textures/loadVideoTextures.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$loadVideoTextures\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar VideoSource = require('../../../../rendering/renderers/shared/texture/sources/VideoSource.js');\nvar detectVideoAlphaMode = require('../../../../utils/browser/detectVideoAlphaMode.js');\nvar getResolutionOfUrl = require('../../../../utils/network/getResolutionOfUrl.js');\nvar checkDataUrl = require('../../../utils/checkDataUrl.js');\nvar checkExtension = require('../../../utils/checkExtension.js');\nvar createTexture = require('./utils/createTexture.js');\n\n\"use strict\";\nconst validVideoExtensions = [\".mp4\", \".m4v\", \".webm\", \".ogg\", \".ogv\", \".h264\", \".avi\", \".mov\"];\nconst validVideoMIMEs = validVideoExtensions.map((ext) => `video/${ext.substring(1)}`);\nfunction crossOrigin(element, url, crossorigin) {\n  if (crossorigin === void 0 && !url.startsWith(\"data:\")) {\n    element.crossOrigin = determineCrossOrigin(url);\n  } else if (crossorigin !== false) {\n    element.crossOrigin = typeof crossorigin === \"string\" ? crossorigin : \"anonymous\";\n  }\n}\nfunction preloadVideo(element) {\n  return new Promise((resolve, reject) => {\n    element.addEventListener(\"canplaythrough\", loaded);\n    element.addEventListener(\"error\", error);\n    element.load();\n    function loaded() {\n      cleanup();\n      resolve();\n    }\n    function error(err) {\n      cleanup();\n      reject(err);\n    }\n    function cleanup() {\n      element.removeEventListener(\"canplaythrough\", loaded);\n      element.removeEventListener(\"error\", error);\n    }\n  });\n}\nfunction determineCrossOrigin(url, loc = globalThis.location) {\n  if (url.startsWith(\"data:\")) {\n    return \"\";\n  }\n  loc || (loc = globalThis.location);\n  const parsedUrl = new URL(url, document.baseURI);\n  if (parsedUrl.hostname !== loc.hostname || parsedUrl.port !== loc.port || parsedUrl.protocol !== loc.protocol) {\n    return \"anonymous\";\n  }\n  return \"\";\n}\nconst loadVideoTextures = {\n  name: \"loadVideo\",\n  extension: {\n    type: Extensions.ExtensionType.LoadParser,\n    name: \"loadVideo\"\n  },\n  test(url) {\n    const isValidDataUrl = checkDataUrl.checkDataUrl(url, validVideoMIMEs);\n    const isValidExtension = checkExtension.checkExtension(url, validVideoExtensions);\n    return isValidDataUrl || isValidExtension;\n  },\n  async load(url, asset, loader) {\n    const options = {\n      ...VideoSource.VideoSource.defaultOptions,\n      resolution: asset.data?.resolution || getResolutionOfUrl.getResolutionOfUrl(url),\n      alphaMode: asset.data?.alphaMode || await detectVideoAlphaMode.detectVideoAlphaMode(),\n      ...asset.data\n    };\n    const videoElement = document.createElement(\"video\");\n    const attributeMap = {\n      preload: options.autoLoad !== false ? \"auto\" : void 0,\n      \"webkit-playsinline\": options.playsinline !== false ? \"\" : void 0,\n      playsinline: options.playsinline !== false ? \"\" : void 0,\n      muted: options.muted === true ? \"\" : void 0,\n      loop: options.loop === true ? \"\" : void 0,\n      autoplay: options.autoPlay !== false ? \"\" : void 0\n    };\n    Object.keys(attributeMap).forEach((key) => {\n      const value = attributeMap[key];\n      if (value !== void 0)\n        videoElement.setAttribute(key, value);\n    });\n    if (options.muted === true) {\n      videoElement.muted = true;\n    }\n    crossOrigin(videoElement, url, options.crossorigin);\n    const sourceElement = document.createElement(\"source\");\n    let mime;\n    if (url.startsWith(\"data:\")) {\n      mime = url.slice(5, url.indexOf(\";\"));\n    } else if (!url.startsWith(\"blob:\")) {\n      const ext = url.split(\"?\")[0].slice(url.lastIndexOf(\".\") + 1).toLowerCase();\n      mime = VideoSource.VideoSource.MIME_TYPES[ext] || `video/${ext}`;\n    }\n    sourceElement.src = url;\n    if (mime) {\n      sourceElement.type = mime;\n    }\n    return new Promise((resolve) => {\n      const onCanPlay = async () => {\n        const base = new VideoSource.VideoSource({ ...options, resource: videoElement });\n        videoElement.removeEventListener(\"canplay\", onCanPlay);\n        if (asset.data.preload) {\n          await preloadVideo(videoElement);\n        }\n        resolve(createTexture.createTexture(base, loader, url));\n      };\n      videoElement.addEventListener(\"canplay\", onCanPlay);\n      videoElement.appendChild(sourceElement);\n    });\n  },\n  unload(texture) {\n    texture.destroy(true);\n  }\n};\n\nexports.crossOrigin = crossOrigin;\nexports.determineCrossOrigin = determineCrossOrigin;\nexports.loadVideoTextures = loadVideoTextures;\nexports.preloadVideo = preloadVideo;\n//# sourceMappingURL=loadVideoTextures.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","crossOrigin","element","url","crossorigin","startsWith","determineCrossOrigin","preloadVideo","Promise","resolve","reject","loaded","cleanup","error","err","removeEventListener","addEventListener","load","loc","globalThis","location","parsedUrl","URL","document","baseURI","hostname","port","protocol","Extensions","VideoSource","detectVideoAlphaMode","getResolutionOfUrl","checkDataUrl","checkExtension","createTexture","validVideoExtensions","validVideoMIMEs","map","ext","substring","loadVideoTextures","name","extension","type","ExtensionType","LoadParser","test","isValidDataUrl","isValidExtension","asset","loader","options","defaultOptions","resolution","data","alphaMode","videoElement","createElement","attributeMap","preload","autoLoad","playsinline","muted","loop","autoplay","autoPlay","Object","keys","forEach","key","value","setAttribute","sourceElement","mime","slice","indexOf","split","lastIndexOf","toLowerCase","MIME_TYPES","src","onCanPlay","base","resource","appendChild","unload","texture","destroy"]
}
