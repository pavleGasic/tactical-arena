{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$TextureSource.js",
"lineCount":176,
"mappings":"AAAAA,cAAA,CAAA,4FAAA,GAAiH,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGrJC,QAAAA,GAAeH,OAAA,CAAQ,yCAAR,CAAfG;AACJ,MAAIC,OAAOJ,OAAA,CAAQ,qDAAR,CAAX,EACIK,eAAeL,OAAA,CAAQ,wEAAR,CADnB,EAEIM,MAAMN,OAAA,CAAQ,oDAAR,CAFV,EAGIO,eAAeP,OAAA,CAAQ,qFAAR,CAHnB;AAKA,cAAA;AACuB,QAAA,uGAAA,aAA6BG,OAA7B;AAIrBK,eAAW,CAACC,OAAA,GAAU,EAAX,CAAe;AACxB,WAAA,EAAA;AACA,UAAKA,CAAAA,OAAL,GAAeA,OAAf;AAEA,UAAKH,CAAAA,GAAL,GAAWA,GAAIA,CAAAA,GAAJ,CAAQ,eAAR,CAAX;AAOA,UAAKI,CAAAA,aAAL,GAAqB,eAArB;AAKA,UAAKC,CAAAA,WAAL,GAAmBL,GAAIA,CAAAA,GAAJ,CAAQ,UAAR,CAAnB;AAQA,UAAKM,CAAAA,cAAL,GAAsB,SAAtB;AAyBA,UAAKC,CAAAA,aAAL,GAFA,IAAKC,CAAAA,WAEL,GATA,IAAKC,CAAAA,MASL,GAdA,IAAKC,CAAAA,KAcL,GAnBA,IAAKC,CAAAA,WAmBL,GArBA,IAAKC,CAAAA,UAqBL,GAvBA,IAAKC,CAAAA,WAuBL,GAvBmB,CAuBnB;AASA,UAAKC,CAAAA,mBAAL,GAA2B,CAAA,CAA3B;AAEA,UAAKC,CAAAA,MAAL,GAAc,YAAd;AAEA,UAAKC,CAAAA,SAAL,GAAiB,IAAjB;AAMA,UAAKC,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AAKA,UAAKC,CAAAA,QAAL,GAAgB,CAAhB;AAUA,UAAKC,CAAAA,oBAAL,GALA,IAAKC,CAAAA,UAKL,GALkB,CAAC,CAKnB;AACAjB,aAAA,GAAU,CAAE,GAAGkB,oGAAeC,CAAAA,cAApB,EAAoC,GAAGnB,OAAvC,CAAV;AACA,UAAKoB,CAAAA,KAAL,GAAapB,OAAQoB,CAAAA,KAArB,IAA8B,EAA9B;AACA,UAAKC,CAAAA,QAAL,GAAgBrB,OAAQqB,CAAAA,QAAxB;AACA,UAAKC,CAAAA,kBAAL,GAA0BtB,OAAQsB,CAAAA,kBAAlC;AACA,UAAKZ,CAAAA,WAAL,GAAmBV,OAAQuB,CAAAA,UAA3B;AAEE,UAAKd,CAAAA,UAAL,GADET,OAAQO,CAAAA,KAAZ,GACoBP,OAAQO,CAAAA,KAD5B,GACoC,IAAKG,CAAAA,WADzC,GAGoB,IAAKW,CAAAA,QAAL,GAAgB,IAAKG,CAAAA,aAArB,IAAsC,CAAtC,GAA0C,CAF5D;AAKA,UAAKhB,CAAAA,WAAL,GADER,OAAQM,CAAAA,MAAZ,GACqBN,OAAQM,CAAAA,MAD7B,GACsC,IAAKI,CAAAA,WAD3C,GAGqB,IAAKW,CAAAA,QAAL,GAAgB,IAAKI,CAAAA,cAArB,IAAuC,CAAvC,GAA2C,CAF9D;AAIF,UAAKlB,CAAAA,KAAL,GAAa,IAAKE,CAAAA,UAAlB,GAA+B,IAAKC,CAAAA,WAApC;AACA,UAAKJ,CAAAA,MAAL,GAAc,IAAKE,CAAAA,WAAnB,GAAiC,IAAKE,CAAAA,WAAtC;AACA,UAAKE,CAAAA,MAAL,GAAcZ,OAAQY,CAAAA,MAAtB;AACA,UAAKC,CAAAA,SAAL,GAAiBb,OAAQ0B,CAAAA,UAAzB;AACA,UAAKtB,CAAAA,aAAL,GAAqBJ,OAAQI,CAAAA,aAA7B;AACA,UAAKO,CAAAA,mBAAL,GAA2BX,OAAQW,CAAAA,mBAAnC;AACA,UAAKN,CAAAA,WAAL,GAAmBL,OAAQK,CAAAA,WAA3B;AACA,UAAKS,CAAAA,SAAL,GAAiBd,OAAQc,CAAAA,SAAzB;AACA,UAAKa,CAAAA,SAAL,GAAiB3B,OAAQ2B,CAAAA,SAAzB;AACA,UAAKC,CAAAA,KAAL,GAAa,IAAI9B,YAAaA,CAAAA,YAAjB,CAA8BF,YAAaA,CAAAA,YAAb,CAA0BI,OAA1B,CAA9B,CAAb;AACA,UAAK6B,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AACA,UAAKC,CAAAA,WAAL,EAAA;AA9GwB;AAiHtB,cAAS,EAAA;AACX,aAAO,IAAP;AADW;AAIT,aAAQ,EAAA;AACV,aAAO,IAAKC,CAAAA,MAAZ;AADU;AAGR,aAAK,CAACC,KAAD,CAAQ;AACX,UAAKJ,CAAAA,KAAT,KAAmBI,KAAnB,KAEA,IAAKD,CAAAA,MAAQE,EAAAA,GAAb,CAAiB,QAAjB,EAA2B,IAAKC,CAAAA,cAAhC,EAAgD,IAAhD,CAGA,EAFA,IAAKH,CAAAA,MAEL,GAFcC,KAEd,EADA,IAAKD,CAAAA,MAAQI,EAAAA,EAAb,CAAgB,QAAhB,EAA0B,IAAKD,CAAAA,cAA/B,EAA+C,IAA/C,CACA,EAAA,IAAKA,CAAAA,cAAL,EALA;AADe;AASb,mBAAc,EAAA;AAChB,aAAO,IAAKH,CAAAA,MAAOK,CAAAA,WAAnB;AADgB;AAGd,mBAAW,CAACJ,KAAD,CAAQ;AACrB,UAAKD,CAAAA,MAAOK,CAAAA,WAAZ,GAA0BJ,KAA1B;AADqB;AAInB,kBAAa,EAAA;AACf,aAAO,IAAKD,CAAAA,MAAOK,CAAAA,WAAnB;AADe;AAGb,kBAAU,CAACJ,KAAD,CAAQ;AACpB,UAAKD,CAAAA,MAAOK,CAAAA,WAAZ,GAA0BJ,KAA1B;AADoB;AAIlB,iBAAY,EAAA;AACd,aAAO,IAAKD,CAAAA,MAAOM,CAAAA,SAAnB;AADc;AAGZ,iBAAS,CAACL,KAAD,CAAQ;AACnB,UAAKD,CAAAA,MAAOM,CAAAA,SAAZ,GAAwBL,KAAxB;AADmB;AAIjB,iBAAY,EAAA;AACd,aAAO,IAAKD,CAAAA,MAAOO,CAAAA,SAAnB;AADc;AAGZ,iBAAS,CAACN,KAAD,CAAQ;AACnB,UAAKD,CAAAA,MAAOO,CAAAA,SAAZ,GAAwBN,KAAxB;AADmB;AAIjB,oBAAe,EAAA;AACjB,aAAO,IAAKD,CAAAA,MAAOQ,CAAAA,YAAnB;AADiB;AAGf,oBAAY,CAACP,KAAD,CAAQ;AACtB,UAAKD,CAAAA,MAAOQ,CAAAA,YAAZ,GAA2BP,KAA3B;AADsB;AAIpB,mBAAc,EAAA;AAChB,aAAO,IAAKD,CAAAA,MAAOS,CAAAA,WAAnB;AADgB;AAGd,mBAAW,CAACR,KAAD,CAAQ;AACrB,UAAKD,CAAAA,MAAOS,CAAAA,WAAZ,GAA0BR,KAA1B;AADqB;AAInB,mBAAc,EAAA;AAChB,aAAO,IAAKD,CAAAA,MAAOU,CAAAA,WAAnB;AADgB;AAGd,mBAAW,CAACT,KAAD,CAAQ;AACrB,UAAKD,CAAAA,MAAOU,CAAAA,WAAZ,GAA0BT,KAA1B;AADqB;AAGvBE,kBAAc,EAAG;AACf,UAAKQ,CAAAA,IAAL,CAAU,aAAV,EAAyB,IAAzB,CAAA;AADe;AAIjBC,UAAM,EAAG;AACP,UAAI,IAAKtB,CAAAA,QAAT,CAAmB;AACjB,cAAME,aAAa,IAAKb,CAAAA,WAAxB;AAEA,YADkB,IAAKkC,CAAAA,MAALC,CAAY,IAAKrB,CAAAA,aAAjBqB,GAAiCtB,UAAjCsB,EAA6C,IAAKpB,CAAAA,cAAlDoB,GAAmEtB,UAAnEsB,CAClB;AACE;AADF;AAHiB;AAMnB,UAAKH,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AAPO;AAUTI,WAAO,EAAG;AACR,UAAKjB,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AACA,UAAKa,CAAAA,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAA;AACA,UAAKA,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AACI,UAAKX,CAAAA,MAAT,KACE,IAAKA,CAAAA,MAAOe,CAAAA,OAAZ,EACA,EAAA,IAAKf,CAAAA,MAAL,GAAc,IAFhB;AAKA,UAAKV,CAAAA,QAAL,GADA,IAAKlB,CAAAA,cACL,GADsB,IACtB;AACA,UAAK4C,CAAAA,kBAAL,EAAA;AAVQ;AAgBVC,UAAM,EAAG;AACP,UAAK9C,CAAAA,WAAL,GAAmBL,GAAIA,CAAAA,GAAJ,CAAQ,UAAR,CAAnB;AACA,UAAK6C,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AACA,UAAKA,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AAHO;AAML,qBAAgB,EAAA;AAClB,YAAM,CAAErB,QAAF,CAAA,GAAe,IAArB;AACA,aAAOA,QAAS4B,CAAAA,YAAhB,IAAgC5B,QAAS6B,CAAAA,UAAzC,IAAuD7B,QAAS8B,CAAAA,YAAhE,IAAgF9B,QAASd,CAAAA,KAAzF;AAFkB;AAKhB,sBAAiB,EAAA;AACnB,YAAM,CAAEc,QAAF,CAAA,GAAe,IAArB;AACA,aAAOA,QAAS+B,CAAAA,aAAhB,IAAiC/B,QAASgC,CAAAA,WAA1C,IAAyDhC,QAASiC,CAAAA,aAAlE,IAAmFjC,QAASf,CAAAA,MAA5F;AAFmB;AAWjB,kBAAa,EAAA;AACf,aAAO,IAAKI,CAAAA,WAAZ;AADe;AAGb,kBAAU,CAACa,UAAD,CAAa;AACrB,UAAKb,CAAAA,WAAT,KAAyBa,UAAzB,KAEA,IAAKb,CAAAA,WAEL,GAFmBa,UAEnB,EADA,IAAKhB,CAAAA,KACL,GADa,IAAKE,CAAAA,UAClB,GAD+Bc,UAC/B,EAAA,IAAKjB,CAAAA,MAAL,GAAc,IAAKE,CAAAA,WAAnB,GAAiCe,UAJjC;AADyB;AAc3BqB,UAAM,CAACrC,KAAD,EAAQD,MAAR,EAAgBiB,UAAhB,CAA4B;AAChCA,gBAAA,KAAeA,UAAf,GAA4B,IAAKb,CAAAA,WAAjC;AACAH,WAAA,KAAUA,KAAV,GAAkB,IAAKA,CAAAA,KAAvB;AACAD,YAAA,KAAWA,MAAX,GAAoB,IAAKA,CAAAA,MAAzB;AACMiD,WAAAA,GAAgBC,IAAKC,CAAAA,KAAL,CAAWlD,KAAX,GAAmBgB,UAAnB,CAAhBgC;AACAG,YAAAA,GAAiBF,IAAKC,CAAAA,KAAL,CAAWnD,MAAX,GAAoBiB,UAApB,CAAjBmC;AACN,UAAKnD,CAAAA,KAAL,GAAagD,KAAb,GAA6BhC,UAA7B;AACA,UAAKjB,CAAAA,MAAL,GAAcoD,MAAd,GAA+BnC,UAA/B;AACA,UAAKb,CAAAA,WAAL,GAAmBa,UAAnB;AACA,UAAI,IAAKd,CAAAA,UAAT,KAAwB8C,KAAxB,IAAyC,IAAK/C,CAAAA,WAA9C,KAA8DkD,MAA9D;AACE,eAAO,CAAA,CAAP;AADF;AAGA,UAAK5B,CAAAA,WAAL,EAAA;AACA,UAAKrB,CAAAA,UAAL,GAAkB8C,KAAlB;AACA,UAAK/C,CAAAA,WAAL,GAAmBkD,MAAnB;AACA,UAAKhB,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AACA,UAAKxC,CAAAA,WAAL,GAAmBL,GAAIA,CAAAA,GAAJ,CAAQ,UAAR,CAAnB;AACA,UAAK6C,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AACA,aAAO,CAAA,CAAP;AAlBgC;AA8BlCiB,iBAAa,EAAG;AACV,UAAKhD,CAAAA,mBAAT,IAAqD,CAArD,GAAgC,IAAKP,CAAAA,aAArC,IACE,IAAKsC,CAAAA,IAAL,CAAU,eAAV,EAA2B,IAA3B,CADF;AADc;AAKZ,gBAAQ,CAACV,KAAD,CAAQ;AAClB,UAAKD,CAAAA,MAAO6B,CAAAA,QAAZ,GAAuB5B,KAAvB;AADkB;AAGhB,gBAAW,EAAA;AACb,aAAO,IAAKD,CAAAA,MAAO6B,CAAAA,QAAnB;AADa;AAGX,iBAAS,CAAC5B,KAAD,CAAQ;AACnB,UAAKD,CAAAA,MAAO8B,CAAAA,SAAZ,GAAwB7B,KAAxB;AADmB;AAIjB,iBAAY,EAAA;AACd,aAAO,IAAKD,CAAAA,MAAO8B,CAAAA,SAAnB;AADc;AAOhB/B,eAAW,EAAG;AACZ,UAAKgC,CAAAA,YAAL,GAAoBnE,IAAKoE,CAAAA,MAAL,CAAY,IAAKtD,CAAAA,UAAjB,CAApB,IAAoDd,IAAKoE,CAAAA,MAAL,CAAY,IAAKvD,CAAAA,WAAjB,CAApD;AADY;AAGPwD,eAAI,CAACC,SAAD,CAAY;AACrB,YAAUC,KAAJ,CAAU,eAAV,CAAN;AADqB;AAjTF,GAAA;AAAjBhD,SAAAA,GAAiB,oGAAjBA;AAsTNA,SAAeC,CAAAA,cAAf,GAAgC,CAC9BI,WAAY,CADkB,EAE9BX,OAAQ,YAFsB,EAG9Be,UAAW,6BAHmB,EAI9BD,WAAY,IAJkB,EAK9BtB,cAAe,CALe,EAM9BO,oBAAqB,CAAA,CANS,EAO9BN,YAAa,CAPiB,EAQ9BS,UAAW,CAAA,CARmB,EAS9BQ,mBAAoB,CAAA,CATU,CAAhC;AAaA7B,SAAQ0E,CAAAA,aAAR,GAFoBjD,OAEpB;AA7UyJ,CAAzJ;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/sources/TextureSource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$TextureSource\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar pow2 = require('../../../../../maths/misc/pow2.js');\nvar definedProps = require('../../../../../scene/container/utils/definedProps.js');\nvar uid = require('../../../../../utils/data/uid.js');\nvar TextureStyle = require('../TextureStyle.js');\n\n\"use strict\";\nconst _TextureSource = class _TextureSource extends EventEmitter {\n  /**\n   * @param options - options for creating a new TextureSource\n   */\n  constructor(options = {}) {\n    super();\n    this.options = options;\n    /** unique id for this Texture source */\n    this.uid = uid.uid(\"textureSource\");\n    /**\n     * The resource type used by this TextureSource. This is used by the bind groups to determine\n     * how to handle this resource.\n     * @ignore\n     * @internal\n     */\n    this._resourceType = \"textureSource\";\n    /**\n     * i unique resource id, used by the bind group systems.\n     * This can change if the texture is resized or its resource changes\n     */\n    this._resourceId = uid.uid(\"resource\");\n    /**\n     * this is how the backends know how to upload this texture to the GPU\n     * It changes depending on the resource type. Classes that extend TextureSource\n     * should override this property.\n     * @ignore\n     * @internal\n     */\n    this.uploadMethodId = \"unknown\";\n    // dimensions\n    this._resolution = 1;\n    /** the pixel width of this texture source. This is the REAL pure number, not accounting resolution */\n    this.pixelWidth = 1;\n    /** the pixel height of this texture source. This is the REAL pure number, not accounting resolution */\n    this.pixelHeight = 1;\n    /**\n     * the width of this texture source, accounting for resolution\n     * eg pixelWidth 200, resolution 2, then width will be 100\n     */\n    this.width = 1;\n    /**\n     * the height of this texture source, accounting for resolution\n     * eg pixelHeight 200, resolution 2, then height will be 100\n     */\n    this.height = 1;\n    /**\n     * The number of samples of a multisample texture. This is always 1 for non-multisample textures.\n     * To enable multisample for a texture, set antialias to true\n     * @internal\n     * @ignore\n     */\n    this.sampleCount = 1;\n    /** The number of mip levels to generate for this texture. this is  overridden if autoGenerateMipmaps is true */\n    this.mipLevelCount = 1;\n    /**\n     * Should we auto generate mipmaps for this texture? This will automatically generate mipmaps\n     * for this texture when uploading to the GPU. Mipmapped textures take up more memory, but\n     * can look better when scaled down.\n     *\n     * For performance reasons, it is recommended to NOT use this with RenderTextures, as they are often updated every frame.\n     * If you do, make sure to call `updateMipmaps` after you update the texture.\n     */\n    this.autoGenerateMipmaps = false;\n    /** the format that the texture data has */\n    this.format = \"rgba8unorm\";\n    /** how many dimensions does this texture have? currently v8 only supports 2d */\n    this.dimension = \"2d\";\n    /**\n     * Only really affects RenderTextures.\n     * Should we use antialiasing for this texture. It will look better, but may impact performance as a\n     * Blit operation will be required to resolve the texture.\n     */\n    this.antialias = false;\n    /**\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n     * @protected\n     */\n    this._touched = 0;\n    /**\n     * Used by the batcher to build texture batches. faster to have the variable here!\n     * @protected\n     */\n    this._batchTick = -1;\n    /**\n     * A temporary batch location for the texture batching. Here for performance reasons only!\n     * @protected\n     */\n    this._textureBindLocation = -1;\n    options = { ..._TextureSource.defaultOptions, ...options };\n    this.label = options.label ?? \"\";\n    this.resource = options.resource;\n    this.autoGarbageCollect = options.autoGarbageCollect;\n    this._resolution = options.resolution;\n    if (options.width) {\n      this.pixelWidth = options.width * this._resolution;\n    } else {\n      this.pixelWidth = this.resource ? this.resourceWidth ?? 1 : 1;\n    }\n    if (options.height) {\n      this.pixelHeight = options.height * this._resolution;\n    } else {\n      this.pixelHeight = this.resource ? this.resourceHeight ?? 1 : 1;\n    }\n    this.width = this.pixelWidth / this._resolution;\n    this.height = this.pixelHeight / this._resolution;\n    this.format = options.format;\n    this.dimension = options.dimensions;\n    this.mipLevelCount = options.mipLevelCount;\n    this.autoGenerateMipmaps = options.autoGenerateMipmaps;\n    this.sampleCount = options.sampleCount;\n    this.antialias = options.antialias;\n    this.alphaMode = options.alphaMode;\n    this.style = new TextureStyle.TextureStyle(definedProps.definedProps(options));\n    this.destroyed = false;\n    this._refreshPOT();\n  }\n  /** returns itself */\n  get source() {\n    return this;\n  }\n  /** the style of the texture */\n  get style() {\n    return this._style;\n  }\n  set style(value) {\n    if (this.style === value)\n      return;\n    this._style?.off(\"change\", this._onStyleChange, this);\n    this._style = value;\n    this._style?.on(\"change\", this._onStyleChange, this);\n    this._onStyleChange();\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get addressMode() {\n    return this._style.addressMode;\n  }\n  set addressMode(value) {\n    this._style.addressMode = value;\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get repeatMode() {\n    return this._style.addressMode;\n  }\n  set repeatMode(value) {\n    this._style.addressMode = value;\n  }\n  /** Specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n  get magFilter() {\n    return this._style.magFilter;\n  }\n  set magFilter(value) {\n    this._style.magFilter = value;\n  }\n  /** Specifies the sampling behavior when the sample footprint is larger than one texel. */\n  get minFilter() {\n    return this._style.minFilter;\n  }\n  set minFilter(value) {\n    this._style.minFilter = value;\n  }\n  /** Specifies behavior for sampling between mipmap levels. */\n  get mipmapFilter() {\n    return this._style.mipmapFilter;\n  }\n  set mipmapFilter(value) {\n    this._style.mipmapFilter = value;\n  }\n  /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n  get lodMinClamp() {\n    return this._style.lodMinClamp;\n  }\n  set lodMinClamp(value) {\n    this._style.lodMinClamp = value;\n  }\n  /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n  get lodMaxClamp() {\n    return this._style.lodMaxClamp;\n  }\n  set lodMaxClamp(value) {\n    this._style.lodMaxClamp = value;\n  }\n  _onStyleChange() {\n    this.emit(\"styleChange\", this);\n  }\n  /** call this if you have modified the texture outside of the constructor */\n  update() {\n    if (this.resource) {\n      const resolution = this._resolution;\n      const didResize = this.resize(this.resourceWidth / resolution, this.resourceHeight / resolution);\n      if (didResize)\n        return;\n    }\n    this.emit(\"update\", this);\n  }\n  /** Destroys this texture source */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    if (this._style) {\n      this._style.destroy();\n      this._style = null;\n    }\n    this.uploadMethodId = null;\n    this.resource = null;\n    this.removeAllListeners();\n  }\n  /**\n   * This will unload the Texture source from the GPU. This will free up the GPU memory\n   * As soon as it is required fore rendering, it will be re-uploaded.\n   */\n  unload() {\n    this._resourceId = uid.uid(\"resource\");\n    this.emit(\"change\", this);\n    this.emit(\"unload\", this);\n  }\n  /** the width of the resource. This is the REAL pure number, not accounting resolution   */\n  get resourceWidth() {\n    const { resource } = this;\n    return resource.naturalWidth || resource.videoWidth || resource.displayWidth || resource.width;\n  }\n  /** the height of the resource. This is the REAL pure number, not accounting resolution */\n  get resourceHeight() {\n    const { resource } = this;\n    return resource.naturalHeight || resource.videoHeight || resource.displayHeight || resource.height;\n  }\n  /**\n   * the resolution of the texture. Changing this number, will not change the number of pixels in the actual texture\n   * but will the size of the texture when rendered.\n   *\n   * changing the resolution of this texture to 2 for example will make it appear twice as small when rendered (as pixel\n   * density will have increased)\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(resolution) {\n    if (this._resolution === resolution)\n      return;\n    this._resolution = resolution;\n    this.width = this.pixelWidth / resolution;\n    this.height = this.pixelHeight / resolution;\n  }\n  /**\n   * Resize the texture, this is handy if you want to use the texture as a render texture\n   * @param width - the new width of the texture\n   * @param height - the new height of the texture\n   * @param resolution - the new resolution of the texture\n   * @returns - if the texture was resized\n   */\n  resize(width, height, resolution) {\n    resolution || (resolution = this._resolution);\n    width || (width = this.width);\n    height || (height = this.height);\n    const newPixelWidth = Math.round(width * resolution);\n    const newPixelHeight = Math.round(height * resolution);\n    this.width = newPixelWidth / resolution;\n    this.height = newPixelHeight / resolution;\n    this._resolution = resolution;\n    if (this.pixelWidth === newPixelWidth && this.pixelHeight === newPixelHeight) {\n      return false;\n    }\n    this._refreshPOT();\n    this.pixelWidth = newPixelWidth;\n    this.pixelHeight = newPixelHeight;\n    this.emit(\"resize\", this);\n    this._resourceId = uid.uid(\"resource\");\n    this.emit(\"change\", this);\n    return true;\n  }\n  /**\n   * Lets the renderer know that this texture has been updated and its mipmaps should be re-generated.\n   * This is only important for RenderTexture instances, as standard Texture instances will have their\n   * mipmaps generated on upload. You should call this method after you make any change to the texture\n   *\n   * The reason for this is is can be quite expensive to update mipmaps for a texture. So by default,\n   * We want you, the developer to specify when this action should happen.\n   *\n   * Generally you don't want to have mipmaps generated on Render targets that are changed every frame,\n   */\n  updateMipmaps() {\n    if (this.autoGenerateMipmaps && this.mipLevelCount > 1) {\n      this.emit(\"updateMipmaps\", this);\n    }\n  }\n  set wrapMode(value) {\n    this._style.wrapMode = value;\n  }\n  get wrapMode() {\n    return this._style.wrapMode;\n  }\n  set scaleMode(value) {\n    this._style.scaleMode = value;\n  }\n  /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n  get scaleMode() {\n    return this._style.scaleMode;\n  }\n  /**\n   * Refresh check for isPowerOfTwo texture based on size\n   * @private\n   */\n  _refreshPOT() {\n    this.isPowerOfTwo = pow2.isPow2(this.pixelWidth) && pow2.isPow2(this.pixelHeight);\n  }\n  static test(_resource) {\n    throw new Error(\"Unimplemented\");\n  }\n};\n/** The default options used when creating a new TextureSource. override these to add your own defaults */\n_TextureSource.defaultOptions = {\n  resolution: 1,\n  format: \"bgra8unorm\",\n  alphaMode: \"premultiply-alpha-on-upload\",\n  dimensions: \"2d\",\n  mipLevelCount: 1,\n  autoGenerateMipmaps: false,\n  sampleCount: 1,\n  antialias: false,\n  autoGarbageCollect: false\n};\nlet TextureSource = _TextureSource;\n\nexports.TextureSource = TextureSource;\n//# sourceMappingURL=TextureSource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","pow2","definedProps","uid","TextureStyle","constructor","options","_resourceType","_resourceId","uploadMethodId","mipLevelCount","sampleCount","height","width","pixelHeight","pixelWidth","_resolution","autoGenerateMipmaps","format","dimension","antialias","_touched","_textureBindLocation","_batchTick","_TextureSource","defaultOptions","label","resource","autoGarbageCollect","resolution","resourceWidth","resourceHeight","dimensions","alphaMode","style","destroyed","_refreshPOT","_style","value","off","_onStyleChange","on","addressMode","magFilter","minFilter","mipmapFilter","lodMinClamp","lodMaxClamp","emit","update","resize","didResize","destroy","removeAllListeners","unload","naturalWidth","videoWidth","displayWidth","naturalHeight","videoHeight","displayHeight","newPixelWidth","Math","round","newPixelHeight","updateMipmaps","wrapMode","scaleMode","isPowerOfTwo","isPow2","test","_resource","Error","TextureSource"]
}
