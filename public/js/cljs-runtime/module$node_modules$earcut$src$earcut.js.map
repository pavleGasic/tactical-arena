{
"version":3,
"file":"module$node_modules$earcut$src$earcut.js",
"lineCount":381,
"mappings":"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",
"sources":["node_modules/earcut/src/earcut.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$earcut$src$earcut\"] = function(global,require,module,exports) {\n'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","earcut","data","holeIndices","dim","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","maxX","queue","len","i","start","end","list","steiner","push","p","leftmost","x","y","sort","compareX","m","hx","hole","hy","qx","Infinity","stop","mx","my","tanMin","pointInTriangle","tan","Math","abs","area","bridge","bridgeReverse","splitPolygon","filterPoints","minX","minY","maxY","invSize","max","earcutLinked","clockwise","signedArea","last","insertNode","equals","removeNode","again","ear","pass","z","zOrder","prevZ","nextZ","numMerges","pSize","qSize","inSize","tail","q","e","a","b","c","ax","bx","cx","ay","by","cy","x0","y0","x1","y1","intersects","locallyInside","inside","px","py","isEarHashed","minZ","maxZ","n","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","min","num","a2","Node","b2","an","bp","sum","j","default","deviation","earcut.deviation","polygonArea","trianglesArea","flatten","earcut.flatten","result","vertices","holes","dimensions","holeIndex","d"]
}
