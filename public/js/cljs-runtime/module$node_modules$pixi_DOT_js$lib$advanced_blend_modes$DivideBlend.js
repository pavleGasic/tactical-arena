shadow$provide.module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$DivideBlend = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  require = require("module$node_modules$pixi_DOT_js$lib$filters$blend_modes$BlendModeFilter");
  "use strict";
  class DivideBlend extends require.BlendModeFilter {
    constructor() {
      super({gl:{functions:"\n                float divide(float base, float blend)\n                {\n                    return (blend \x3e 0.0) ? clamp(base / blend, 0.0, 1.0) : 1.0;\n                }\n\n                vec3 blendDivide(vec3 base, vec3 blend, float opacity)\n                {\n                    vec3 blended \x3d vec3(\n                        divide(base.r, blend.r),\n                        divide(base.g, blend.g),\n                        divide(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                ", 
      main:"\n                finalColor \x3d vec4(blendDivide(back.rgb, front.rgb,front.a), blendedAlpha) * uBlend;\n                "}, gpu:{functions:"\n                fn divide(base: f32, blend: f32) -\x3e f32\n                {\n                    return select(1.0, clamp(base / blend, 0.0, 1.0), blend \x3e 0.0);\n                }\n\n                fn blendDivide(base: vec3\x3cf32\x3e, blend: vec3\x3cf32\x3e, opacity: f32) -\x3e vec3\x3cf32\x3e\n                {\n                    let blended \x3d vec3\x3cf32\x3e(\n                        divide(base.r, blend.r),\n                        divide(base.g, blend.g),\n                        divide(base.b, blend.b)\n                    );\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            ", 
      main:"\n                out \x3d vec4\x3cf32\x3e(blendDivide(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n            "}});
    }
  }
  DivideBlend.extension = {name:"divide", type:global.ExtensionType.BlendMode};
  exports.DivideBlend = DivideBlend;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$DivideBlend.js.map
