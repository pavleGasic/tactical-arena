{
"version":3,
"file":"module$node_modules$$pixi$core$lib$system$SystemManager.js",
"lineCount":50,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/system/SystemManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$system$SystemManager\"] = function(global,require,module,exports) {\n\"use strict\";\nvar runner = require(\"@pixi/runner\"), utils = require(\"@pixi/utils\");\nclass SystemManager extends utils.EventEmitter {\n  constructor() {\n    super(...arguments), this.runners = {}, this._systemsHash = {};\n  }\n  /**\n   * Set up a system with a collection of SystemClasses and runners.\n   * Systems are attached dynamically to this class when added.\n   * @param config - the config for the system manager\n   */\n  setup(config) {\n    this.addRunners(...config.runners);\n    const priority = (config.priority ?? []).filter((key) => config.systems[key]), orderByPriority = [\n      ...priority,\n      ...Object.keys(config.systems).filter((key) => !priority.includes(key))\n    ];\n    for (const i of orderByPriority)\n      this.addSystem(config.systems[i], i);\n  }\n  /**\n   * Create a bunch of runners based of a collection of ids\n   * @param runnerIds - the runner ids to add\n   */\n  addRunners(...runnerIds) {\n    runnerIds.forEach((runnerId) => {\n      this.runners[runnerId] = new runner.Runner(runnerId);\n    });\n  }\n  /**\n   * Add a new system to the renderer.\n   * @param ClassRef - Class reference\n   * @param name - Property name for system, if not specified\n   *        will use a static `name` property on the class itself. This\n   *        name will be assigned as s property on the Renderer so make\n   *        sure it doesn't collide with properties on Renderer.\n   * @returns Return instance of renderer\n   */\n  addSystem(ClassRef, name) {\n    const system = new ClassRef(this);\n    if (this[name])\n      throw new Error(`Whoops! The name \"${name}\" is already in use`);\n    this[name] = system, this._systemsHash[name] = system;\n    for (const i in this.runners)\n      this.runners[i].add(system);\n    return this;\n  }\n  /**\n   * A function that will run a runner and call the runners function but pass in different options\n   * to each system based on there name.\n   *\n   * E.g. If you have two systems added called `systemA` and `systemB` you could call do the following:\n   *\n   * ```js\n   * system.emitWithCustomOptions(init, {\n   *     systemA: {...optionsForA},\n   *     systemB: {...optionsForB},\n   * });\n   * ```\n   *\n   * `init` would be called on system A passing `optionsForA` and on system B passing `optionsForB`.\n   * @param runner - the runner to target\n   * @param options - key value options for each system\n   */\n  emitWithCustomOptions(runner2, options) {\n    const systemHashKeys = Object.keys(this._systemsHash);\n    runner2.items.forEach((system) => {\n      const systemName = systemHashKeys.find((systemId) => this._systemsHash[systemId] === system);\n      system[runner2.name](options[systemName]);\n    });\n  }\n  /** destroy the all runners and systems. Its apps job to */\n  destroy() {\n    Object.values(this.runners).forEach((runner2) => {\n      runner2.destroy();\n    }), this._systemsHash = {};\n  }\n  // TODO implement!\n  // removeSystem(ClassRef: ISystemConstructor, name: string): void\n  // {\n  // }\n}\nexports.SystemManager = SystemManager;\n//# sourceMappingURL=SystemManager.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","runner","utils","SystemManager","EventEmitter","constructor","arguments","runners","_systemsHash","setup","config","addRunners","priority","filter","key","systems","orderByPriority","Object","keys","includes","i","addSystem","runnerIds","forEach","runnerId","Runner","ClassRef","name","system","Error","add","emitWithCustomOptions","runner2","options","systemHashKeys","items","systemName","find","systemId","destroy","values"]
}
