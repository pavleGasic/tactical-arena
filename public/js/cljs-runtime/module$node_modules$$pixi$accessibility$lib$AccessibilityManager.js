shadow$provide.module$node_modules$$pixi$accessibility$lib$AccessibilityManager = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index");
  global = require("module$node_modules$$pixi$display$lib$index");
  var events = require("module$node_modules$$pixi$events$lib$index");
  require = require("module$node_modules$$pixi$accessibility$lib$accessibleTarget");
  global.DisplayObject.mixin(require.accessibleTarget);
  class AccessibilityManager {
    constructor(renderer) {
      this._isMobileAccessibility = this._isActive = this.debug = !1;
      this.pool = [];
      this.renderId = 0;
      this.children = [];
      this.androidUpdateCount = 0;
      this.androidUpdateFrequency = 500;
      this._hookDiv = null;
      (core.utils.isMobile.tablet || core.utils.isMobile.phone) && this.createTouchHook();
      const div = document.createElement("div");
      div.style.width = "100px";
      div.style.height = "100px";
      div.style.position = "absolute";
      div.style.top = "0px";
      div.style.left = "0px";
      div.style.zIndex = (2).toString();
      this.div = div;
      this.renderer = renderer;
      this._onKeyDown = this._onKeyDown.bind(this);
      this._onMouseMove = this._onMouseMove.bind(this);
      globalThis.addEventListener("keydown", this._onKeyDown, !1);
    }
    get isActive() {
      return this._isActive;
    }
    get isMobileAccessibility() {
      return this._isMobileAccessibility;
    }
    createTouchHook() {
      const hookDiv = document.createElement("button");
      hookDiv.style.width = "1px";
      hookDiv.style.height = "1px";
      hookDiv.style.position = "absolute";
      hookDiv.style.top = "-1000px";
      hookDiv.style.left = "-1000px";
      hookDiv.style.zIndex = (2).toString();
      hookDiv.style.backgroundColor = "#FF0000";
      hookDiv.title = "select to enable accessibility for this content";
      hookDiv.addEventListener("focus", () => {
        this._isMobileAccessibility = !0;
        this.activate();
        this.destroyTouchHook();
      });
      document.body.appendChild(hookDiv);
      this._hookDiv = hookDiv;
    }
    destroyTouchHook() {
      this._hookDiv && (document.body.removeChild(this._hookDiv), this._hookDiv = null);
    }
    activate() {
      this._isActive || (this._isActive = !0, globalThis.document.addEventListener("mousemove", this._onMouseMove, !0), globalThis.removeEventListener("keydown", this._onKeyDown, !1), this.renderer.on("postrender", this.update, this), this.renderer.view.parentNode?.appendChild(this.div));
    }
    deactivate() {
      !this._isActive || this._isMobileAccessibility || (this._isActive = !1, globalThis.document.removeEventListener("mousemove", this._onMouseMove, !0), globalThis.addEventListener("keydown", this._onKeyDown, !1), this.renderer.off("postrender", this.update), this.div.parentNode?.removeChild(this.div));
    }
    updateAccessibleObjects(displayObject) {
      if (displayObject.visible && displayObject.accessibleChildren && (displayObject.accessible && displayObject.isInteractive() && (displayObject._accessibleActive || this.addChild(displayObject), displayObject.renderId = this.renderId), displayObject = displayObject.children)) {
        for (let i = 0; i < displayObject.length; i++) {
          this.updateAccessibleObjects(displayObject[i]);
        }
      }
    }
    update() {
      var now = performance.now();
      if (!(core.utils.isMobile.android.device && now < this.androidUpdateCount) && (this.androidUpdateCount = now + this.androidUpdateFrequency, this.renderer.renderingToScreen)) {
        this.renderer.lastObjectRendered && this.updateAccessibleObjects(this.renderer.lastObjectRendered);
        var {x, y, width, height} = this.renderer.view.getBoundingClientRect(), {width:viewWidth, height:viewHeight, resolution} = this.renderer;
        now = width / viewWidth * resolution;
        var sy = height / viewHeight * resolution, div = this.div;
        div.style.left = `${x}px`;
        div.style.top = `${y}px`;
        div.style.width = `${viewWidth}px`;
        div.style.height = `${viewHeight}px`;
        for (let i = 0; i < this.children.length; i++) {
          const child = this.children[i];
          if (child.renderId !== this.renderId) {
            child._accessibleActive = !1, core.utils.removeItems(this.children, i, 1), this.div.removeChild(child._accessibleDiv), this.pool.push(child._accessibleDiv), child._accessibleDiv = null, i--;
          } else {
            div = child._accessibleDiv;
            let hitArea = child.hitArea;
            const wt = child.worldTransform;
            child.hitArea ? (div.style.left = `${(wt.tx + hitArea.x * wt.a) * now}px`, div.style.top = `${(wt.ty + hitArea.y * wt.d) * sy}px`, div.style.width = `${hitArea.width * wt.a * now}px`, div.style.height = `${hitArea.height * wt.d * sy}px`) : (hitArea = child.getBounds(), this.capHitArea(hitArea), div.style.left = `${hitArea.x * now}px`, div.style.top = `${hitArea.y * sy}px`, div.style.width = `${hitArea.width * now}px`, div.style.height = `${hitArea.height * sy}px`, div.title !== child.accessibleTitle && 
            null !== child.accessibleTitle && (div.title = child.accessibleTitle), div.getAttribute("aria-label") !== child.accessibleHint && null !== child.accessibleHint && div.setAttribute("aria-label", child.accessibleHint));
            (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) && (div.title = child.accessibleTitle, div.tabIndex = child.tabIndex, this.debug && this.updateDebugHTML(div));
          }
        }
        this.renderId++;
      }
    }
    updateDebugHTML(div) {
      div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;
    }
    capHitArea(hitArea) {
      0 > hitArea.x && (hitArea.width += hitArea.x, hitArea.x = 0);
      0 > hitArea.y && (hitArea.height += hitArea.y, hitArea.y = 0);
      const {width:viewWidth, height:viewHeight} = this.renderer;
      hitArea.x + hitArea.width > viewWidth && (hitArea.width = viewWidth - hitArea.x);
      hitArea.y + hitArea.height > viewHeight && (hitArea.height = viewHeight - hitArea.y);
    }
    addChild(displayObject) {
      let div = this.pool.pop();
      div || (div = document.createElement("button"), div.style.width = "100px", div.style.height = "100px", div.style.backgroundColor = this.debug ? "rgba(255,255,255,0.5)" : "transparent", div.style.position = "absolute", div.style.zIndex = (2).toString(), div.style.borderStyle = "none", navigator.userAgent.toLowerCase().includes("chrome") ? div.setAttribute("aria-live", "off") : div.setAttribute("aria-live", "polite"), navigator.userAgent.match(/rv:.*Gecko\//) ? div.setAttribute("aria-relevant", 
      "additions") : div.setAttribute("aria-relevant", "text"), div.addEventListener("click", this._onClick.bind(this)), div.addEventListener("focus", this._onFocus.bind(this)), div.addEventListener("focusout", this._onFocusOut.bind(this)));
      div.style.pointerEvents = displayObject.accessiblePointerEvents;
      div.type = displayObject.accessibleType;
      displayObject.accessibleTitle && null !== displayObject.accessibleTitle ? div.title = displayObject.accessibleTitle : displayObject.accessibleHint && null !== displayObject.accessibleHint || (div.title = `displayObject ${displayObject.tabIndex}`);
      displayObject.accessibleHint && null !== displayObject.accessibleHint && div.setAttribute("aria-label", displayObject.accessibleHint);
      this.debug && this.updateDebugHTML(div);
      displayObject._accessibleActive = !0;
      displayObject._accessibleDiv = div;
      div.displayObject = displayObject;
      this.children.push(displayObject);
      this.div.appendChild(displayObject._accessibleDiv);
      displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;
    }
    _dispatchEvent(e, type) {
      ({displayObject:e} = e.target);
      const boundry = this.renderer.events.rootBoundary, event = Object.assign(new events.FederatedEvent(boundry), {target:e});
      boundry.rootTarget = this.renderer.lastObjectRendered;
      type.forEach(type2 => boundry.dispatchEvent(event, type2));
    }
    _onClick(e) {
      this._dispatchEvent(e, ["click", "pointertap", "tap"]);
    }
    _onFocus(e) {
      e.target.getAttribute("aria-live") || e.target.setAttribute("aria-live", "assertive");
      this._dispatchEvent(e, ["mouseover"]);
    }
    _onFocusOut(e) {
      e.target.getAttribute("aria-live") || e.target.setAttribute("aria-live", "polite");
      this._dispatchEvent(e, ["mouseout"]);
    }
    _onKeyDown(e) {
      9 === e.keyCode && this.activate();
    }
    _onMouseMove(e) {
      0 === e.movementX && 0 === e.movementY || this.deactivate();
    }
    destroy() {
      this.destroyTouchHook();
      this.div = null;
      globalThis.document.removeEventListener("mousemove", this._onMouseMove, !0);
      globalThis.removeEventListener("keydown", this._onKeyDown);
      this.renderer = this.children = this.pool = null;
    }
  }
  AccessibilityManager.extension = {name:"accessibility", type:[core.ExtensionType.RendererPlugin, core.ExtensionType.CanvasRendererPlugin]};
  core.extensions.add(AccessibilityManager);
  exports.AccessibilityManager = AccessibilityManager;
};

//# sourceMappingURL=module$node_modules$$pixi$accessibility$lib$AccessibilityManager.js.map
