{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$basis$utils$createLevelBuffers.js",
"lineCount":21,
"mappings":"AAAAA,cAAA,CAAA,sFAAA,GAA2G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AA0BnJA,SAAQC,CAAAA,kBAAR,GAtBAA,QAA2B,CAACC,YAAD,EAAeC,qBAAf,CAAsC;AAC/D,UAAMC,SAASF,YAAaG,CAAAA,YAAb,EAAf,EACMC,SAASJ,YAAaK,CAAAA,YAAb,CAA0B,CAA1B,CADf;AAGA,QAAI,CADYL,YAAaM,CAAAA,gBAAbC,EAChB;AACE,YAAUC,KAAJ,CAAU,yBAAV,CAAN;AADF;AAGA,UAAMC,eAAe,EAArB;AACA,SAAK,IAAIC,aAAa,CAAtB,EAAyBA,UAAzB,GAAsCN,MAAtC,EAA8C,EAAEM,UAAhD;AACE,WAAK,IAAIC,aAAa,CAAtB,EAAyBA,UAAzB,GAAsCT,MAAtC,EAA8C,EAAES,UAAhD,CAA4D;AAC1D,YAAMC,gBAAgBZ,YAAaa,CAAAA,6BAAb,CAA2CF,UAA3C,EAAuDD,UAAvD,EAAmET,qBAAnE,CAAtB;AACMa,qBAAAA,GAAc,IAAIC,UAAJ,CAAeH,aAAf,CAAdE;AAEN,YAAI,CADad,YAAagB,CAAAA,cAAbC,CAA4BH,aAA5BG,EAAyCN,UAAzCM,EAAqDP,UAArDO,EAAiEhB,qBAAjEgB,EAAwF,CAAxFA,EAA2F,CAA3FA,CACjB;AACE,gBAAUT,KAAJ,CAAU,uBAAV,CAAN;AADF;AAGAC,oBAAaS,CAAAA,IAAb,CAAkBJ,aAAlB,CAAA;AAP0D;AAD9D;AAWA,WAAOL,YAAP;AAnB+D,GAsBjE;AA1BmJ,CAAnJ;;",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/basis/utils/createLevelBuffers.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$basis$utils$createLevelBuffers\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nfunction createLevelBuffers(basisTexture, basisTranscoderFormat) {\n  const images = basisTexture.getNumImages();\n  const levels = basisTexture.getNumLevels(0);\n  const success = basisTexture.startTranscoding();\n  if (!success) {\n    throw new Error(\"startTranscoding failed\");\n  }\n  const levelBuffers = [];\n  for (let levelIndex = 0; levelIndex < levels; ++levelIndex) {\n    for (let sliceIndex = 0; sliceIndex < images; ++sliceIndex) {\n      const transcodeSize = basisTexture.getImageTranscodedSizeInBytes(sliceIndex, levelIndex, basisTranscoderFormat);\n      const levelBuffer = new Uint8Array(transcodeSize);\n      const success2 = basisTexture.transcodeImage(levelBuffer, sliceIndex, levelIndex, basisTranscoderFormat, 1, 0);\n      if (!success2) {\n        throw new Error(\"transcodeImage failed\");\n      }\n      levelBuffers.push(levelBuffer);\n    }\n  }\n  return levelBuffers;\n}\n\nexports.createLevelBuffers = createLevelBuffers;\n//# sourceMappingURL=createLevelBuffers.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","createLevelBuffers","basisTexture","basisTranscoderFormat","images","getNumImages","levels","getNumLevels","startTranscoding","success","Error","levelBuffers","levelIndex","sliceIndex","transcodeSize","getImageTranscodedSizeInBytes","levelBuffer","Uint8Array","transcodeImage","success2","push"]
}
