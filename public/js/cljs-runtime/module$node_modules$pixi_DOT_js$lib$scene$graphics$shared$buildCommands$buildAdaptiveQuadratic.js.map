{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildAdaptiveQuadratic.js",
"lineCount":30,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/buildCommands/buildAdaptiveQuadratic.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$buildCommands$buildAdaptiveQuadratic\"] = function(global,require,module,exports) {\n'use strict';\n\nvar GraphicsContextSystem = require('../GraphicsContextSystem.js');\n\n\"use strict\";\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 11920929e-14;\nconst PATH_DISTANCE_EPSILON = 1;\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nfunction buildAdaptiveQuadratic(points, sX, sY, cp1x, cp1y, eX, eY, smoothness) {\n  const scale = 1;\n  const smoothing = Math.min(\n    0.99,\n    // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n    Math.max(0, smoothness ?? GraphicsContextSystem.GraphicsContextSystem.defaultOptions.bezierSmoothness)\n  );\n  let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n  distanceTolerance *= distanceTolerance;\n  begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance);\n  return points;\n}\nfunction begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance) {\n  recursive(points, sX, sY, cp1x, cp1y, eX, eY, distanceTolerance, 0);\n  points.push(eX, eY);\n}\nfunction recursive(points, x1, y1, x2, y2, x3, y3, distanceTolerance, level) {\n  if (level > RECURSION_LIMIT) {\n    return;\n  }\n  const pi = Math.PI;\n  const x12 = (x1 + x2) / 2;\n  const y12 = (y1 + y2) / 2;\n  const x23 = (x2 + x3) / 2;\n  const y23 = (y2 + y3) / 2;\n  const x123 = (x12 + x23) / 2;\n  const y123 = (y12 + y23) / 2;\n  let dx = x3 - x1;\n  let dy = y3 - y1;\n  const d = Math.abs((x2 - x3) * dy - (y2 - y3) * dx);\n  if (d > FLT_EPSILON) {\n    if (d * d <= distanceTolerance * (dx * dx + dy * dy)) {\n      if (mAngleTolerance < curveAngleToleranceEpsilon) {\n        points.push(x123, y123);\n        return;\n      }\n      let da = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n      if (da >= pi)\n        da = 2 * pi - da;\n      if (da < mAngleTolerance) {\n        points.push(x123, y123);\n        return;\n      }\n    }\n  } else {\n    dx = x123 - (x1 + x3) / 2;\n    dy = y123 - (y1 + y3) / 2;\n    if (dx * dx + dy * dy <= distanceTolerance) {\n      points.push(x123, y123);\n      return;\n    }\n  }\n  recursive(points, x1, y1, x12, y12, x123, y123, distanceTolerance, level + 1);\n  recursive(points, x123, y123, x23, y23, x3, y3, distanceTolerance, level + 1);\n}\n\nexports.buildAdaptiveQuadratic = buildAdaptiveQuadratic;\n//# sourceMappingURL=buildAdaptiveQuadratic.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","recursive","points","x1","y1","x2","y2","x3","y3","distanceTolerance","level","RECURSION_LIMIT","x12","y12","x23","y23","x123","y123","dx","dy","d","Math","abs","FLT_EPSILON","push","GraphicsContextSystem","buildAdaptiveQuadratic","sX","sY","cp1x","cp1y","eX","eY","smoothness","PATH_DISTANCE_EPSILON","min","smoothing","max","defaultOptions","bezierSmoothness"]
}
