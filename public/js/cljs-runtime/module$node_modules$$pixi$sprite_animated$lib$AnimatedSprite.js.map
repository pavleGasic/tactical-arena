{
"version":3,
"file":"module$node_modules$$pixi$sprite_animated$lib$AnimatedSprite.js",
"lineCount":119,
"mappings":"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",
"sources":["node_modules/@pixi/sprite-animated/lib/AnimatedSprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$sprite_animated$lib$AnimatedSprite\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), sprite = require(\"@pixi/sprite\");\nclass AnimatedSprite extends sprite.Sprite {\n  /**\n   * @param textures - An array of {@link PIXI.Texture} or frame\n   *  objects that make up the animation.\n   * @param {boolean} [autoUpdate=true] - Whether to use Ticker.shared to auto update animation time.\n   */\n  constructor(textures, autoUpdate = !0) {\n    super(textures[0] instanceof core.Texture ? textures[0] : textures[0].texture), this._textures = null, this._durations = null, this._autoUpdate = autoUpdate, this._isConnectedToTicker = !1, this.animationSpeed = 1, this.loop = !0, this.updateAnchor = !1, this.onComplete = null, this.onFrameChange = null, this.onLoop = null, this._currentTime = 0, this._playing = !1, this._previousFrame = null, this.textures = textures;\n  }\n  /** Stops the AnimatedSprite. */\n  stop() {\n    this._playing && (this._playing = !1, this._autoUpdate && this._isConnectedToTicker && (core.Ticker.shared.remove(this.update, this), this._isConnectedToTicker = !1));\n  }\n  /** Plays the AnimatedSprite. */\n  play() {\n    this._playing || (this._playing = !0, this._autoUpdate && !this._isConnectedToTicker && (core.Ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.HIGH), this._isConnectedToTicker = !0));\n  }\n  /**\n   * Stops the AnimatedSprite and goes to a specific frame.\n   * @param frameNumber - Frame index to stop at.\n   */\n  gotoAndStop(frameNumber) {\n    this.stop(), this.currentFrame = frameNumber;\n  }\n  /**\n   * Goes to a specific frame and begins playing the AnimatedSprite.\n   * @param frameNumber - Frame index to start at.\n   */\n  gotoAndPlay(frameNumber) {\n    this.currentFrame = frameNumber, this.play();\n  }\n  /**\n   * Updates the object transform for rendering.\n   * @param deltaTime - Time since last tick.\n   */\n  update(deltaTime) {\n    if (!this._playing)\n      return;\n    const elapsed = this.animationSpeed * deltaTime, previousFrame = this.currentFrame;\n    if (this._durations !== null) {\n      let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n      for (lag += elapsed / 60 * 1e3; lag < 0; )\n        this._currentTime--, lag += this._durations[this.currentFrame];\n      const sign = Math.sign(this.animationSpeed * deltaTime);\n      for (this._currentTime = Math.floor(this._currentTime); lag >= this._durations[this.currentFrame]; )\n        lag -= this._durations[this.currentFrame] * sign, this._currentTime += sign;\n      this._currentTime += lag / this._durations[this.currentFrame];\n    } else\n      this._currentTime += elapsed;\n    this._currentTime < 0 && !this.loop ? (this.gotoAndStop(0), this.onComplete && this.onComplete()) : this._currentTime >= this._textures.length && !this.loop ? (this.gotoAndStop(this._textures.length - 1), this.onComplete && this.onComplete()) : previousFrame !== this.currentFrame && (this.loop && this.onLoop && (this.animationSpeed > 0 && this.currentFrame < previousFrame || this.animationSpeed < 0 && this.currentFrame > previousFrame) && this.onLoop(), this.updateTexture());\n  }\n  /** Updates the displayed texture to match the current frame index. */\n  updateTexture() {\n    const currentFrame = this.currentFrame;\n    this._previousFrame !== currentFrame && (this._previousFrame = currentFrame, this._texture = this._textures[currentFrame], this._textureID = -1, this._textureTrimmedID = -1, this._cachedTint = 16777215, this.uvs = this._texture._uvs.uvsFloat32, this.updateAnchor && this._anchor.copyFrom(this._texture.defaultAnchor), this.onFrameChange && this.onFrameChange(this.currentFrame));\n  }\n  /**\n   * Stops the AnimatedSprite and destroys it.\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value.\n   * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n   * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n   */\n  destroy(options) {\n    this.stop(), super.destroy(options), this.onComplete = null, this.onFrameChange = null, this.onLoop = null;\n  }\n  /**\n   * A short hand way of creating an AnimatedSprite from an array of frame ids.\n   * @param frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n   * @returns - The new animated sprite with the specified frames.\n   */\n  static fromFrames(frames) {\n    const textures = [];\n    for (let i = 0; i < frames.length; ++i)\n      textures.push(core.Texture.from(frames[i]));\n    return new AnimatedSprite(textures);\n  }\n  /**\n   * A short hand way of creating an AnimatedSprite from an array of image ids.\n   * @param images - The array of image urls the AnimatedSprite will use as its texture frames.\n   * @returns The new animate sprite with the specified images as frames.\n   */\n  static fromImages(images) {\n    const textures = [];\n    for (let i = 0; i < images.length; ++i)\n      textures.push(core.Texture.from(images[i]));\n    return new AnimatedSprite(textures);\n  }\n  /**\n   * The total number of frames in the AnimatedSprite. This is the same as number of textures\n   * assigned to the AnimatedSprite.\n   * @readonly\n   * @default 0\n   */\n  get totalFrames() {\n    return this._textures.length;\n  }\n  /** The array of textures used for this AnimatedSprite. */\n  get textures() {\n    return this._textures;\n  }\n  set textures(value) {\n    if (value[0] instanceof core.Texture)\n      this._textures = value, this._durations = null;\n    else {\n      this._textures = [], this._durations = [];\n      for (let i = 0; i < value.length; i++)\n        this._textures.push(value[i].texture), this._durations.push(value[i].time);\n    }\n    this._previousFrame = null, this.gotoAndStop(0), this.updateTexture();\n  }\n  /** The AnimatedSprite's current frame index. */\n  get currentFrame() {\n    let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n    return currentFrame < 0 && (currentFrame += this._textures.length), currentFrame;\n  }\n  set currentFrame(value) {\n    if (value < 0 || value > this.totalFrames - 1)\n      throw new Error(`[AnimatedSprite]: Invalid frame index value ${value}, expected to be between 0 and totalFrames ${this.totalFrames}.`);\n    const previousFrame = this.currentFrame;\n    this._currentTime = value, previousFrame !== this.currentFrame && this.updateTexture();\n  }\n  /**\n   * Indicates if the AnimatedSprite is currently playing.\n   * @readonly\n   */\n  get playing() {\n    return this._playing;\n  }\n  /** Whether to use Ticker.shared to auto update animation time. */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    value !== this._autoUpdate && (this._autoUpdate = value, !this._autoUpdate && this._isConnectedToTicker ? (core.Ticker.shared.remove(this.update, this), this._isConnectedToTicker = !1) : this._autoUpdate && !this._isConnectedToTicker && this._playing && (core.Ticker.shared.add(this.update, this), this._isConnectedToTicker = !0));\n  }\n}\nexports.AnimatedSprite = AnimatedSprite;\n//# sourceMappingURL=AnimatedSprite.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","sprite","AnimatedSprite","Sprite","constructor","textures","autoUpdate","Texture","texture","_durations","_textures","_autoUpdate","_isConnectedToTicker","animationSpeed","loop","updateAnchor","onLoop","onFrameChange","onComplete","_currentTime","_playing","_previousFrame","stop","Ticker","shared","remove","update","play","add","UPDATE_PRIORITY","HIGH","gotoAndStop","frameNumber","currentFrame","gotoAndPlay","deltaTime","elapsed","previousFrame","lag","sign","Math","floor","length","updateTexture","_texture","_textureID","_textureTrimmedID","_cachedTint","uvs","_uvs","uvsFloat32","_anchor","copyFrom","defaultAnchor","destroy","options","fromFrames","frames","i","push","from","fromImages","images","value","time","totalFrames","Error"]
}
