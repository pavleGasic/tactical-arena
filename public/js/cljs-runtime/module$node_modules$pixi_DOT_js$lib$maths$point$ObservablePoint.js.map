{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$maths$point$ObservablePoint.js",
"lineCount":48,
"mappings":"AAAAA,cAAA,CAAA,+DAAA,GAAoF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAI5H,OAAMC,gBAAN;AAOEC,eAAW,CAACC,QAAD,EAAWC,CAAX,EAAcC,CAAd,CAAiB;AAC1B,UAAKC,CAAAA,EAAL,GAAUF,CAAV,IAAe,CAAf;AACA,UAAKG,CAAAA,EAAL,GAAUF,CAAV,IAAe,CAAf;AACA,UAAKG,CAAAA,SAAL,GAAiBL,QAAjB;AAH0B;AAU5BM,SAAK,CAACN,QAAD,CAAW;AACd,aAAO,IAAIF,eAAJ,CAAoBE,QAApB,IAAgC,IAAKK,CAAAA,SAArC,EAAgD,IAAKF,CAAAA,EAArD,EAAyD,IAAKC,CAAAA,EAA9D,CAAP;AADc;AAUhBG,OAAG,CAACN,CAAA,GAAI,CAAL,EAAQC,CAAA,GAAID,CAAZ,CAAe;AAChB,UAAI,IAAKE,CAAAA,EAAT,KAAgBF,CAAhB,IAAqB,IAAKG,CAAAA,EAA1B,KAAiCF,CAAjC;AACE,YAAKC,CAAAA,EAEL,GAFUF,CAEV,EADA,IAAKG,CAAAA,EACL,GADUF,CACV,EAAA,IAAKG,CAAAA,SAAUG,CAAAA,SAAf,CAAyB,IAAzB,CAAA;AAHF;AAKA,aAAO,IAAP;AANgB;AAalBC,YAAQ,CAACC,CAAD,CAAI;AACV,UAAI,IAAKP,CAAAA,EAAT,KAAgBO,CAAET,CAAAA,CAAlB,IAAuB,IAAKG,CAAAA,EAA5B,KAAmCM,CAAER,CAAAA,CAArC;AACE,YAAKC,CAAAA,EAEL,GAFUO,CAAET,CAAAA,CAEZ,EADA,IAAKG,CAAAA,EACL,GADUM,CAAER,CAAAA,CACZ,EAAA,IAAKG,CAAAA,SAAUG,CAAAA,SAAf,CAAyB,IAAzB,CAAA;AAHF;AAKA,aAAO,IAAP;AANU;AAaZG,UAAM,CAACD,CAAD,CAAI;AACRA,OAAEH,CAAAA,GAAF,CAAM,IAAKJ,CAAAA,EAAX,EAAe,IAAKC,CAAAA,EAApB,CAAA;AACA,aAAOM,CAAP;AAFQ;AASVE,UAAM,CAACF,CAAD,CAAI;AACR,aAAOA,CAAET,CAAAA,CAAT,KAAe,IAAKE,CAAAA,EAApB,IAA0BO,CAAER,CAAAA,CAA5B,KAAkC,IAAKE,CAAAA,EAAvC;AADQ;AAGVS,YAAQ,EAAG;AACT,aAAQ,mCAAkC,CAAlC,MAAyC,CAAzC,UAAoD,IAAKR,CAAAA,SAAzD,GAAR;AADS;AAIP,SAAI,EAAA;AACN,aAAO,IAAKF,CAAAA,EAAZ;AADM;AAGJ,SAAC,CAACW,KAAD,CAAQ;AACP,UAAKX,CAAAA,EAAT,KAAgBW,KAAhB,KACE,IAAKX,CAAAA,EACL,GADUW,KACV,EAAA,IAAKT,CAAAA,SAAUG,CAAAA,SAAf,CAAyB,IAAzB,CAFF;AADW;AAOT,SAAI,EAAA;AACN,aAAO,IAAKJ,CAAAA,EAAZ;AADM;AAGJ,SAAC,CAACU,KAAD,CAAQ;AACP,UAAKV,CAAAA,EAAT,KAAgBU,KAAhB,KACE,IAAKV,CAAAA,EACL,GADUU,KACV,EAAA,IAAKT,CAAAA,SAAUG,CAAAA,SAAf,CAAyB,IAAzB,CAFF;AADW;AAlFf;AA0FAX,SAAQC,CAAAA,eAAR,GAA0BA,eAA1B;AA9F4H,CAA5H;;",
"sources":["node_modules/pixi_DOT_js/lib/maths/point/ObservablePoint.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$maths$point$ObservablePoint\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nclass ObservablePoint {\n  /**\n   * Creates a new `ObservablePoint`\n   * @param observer - Observer to pass to listen for change events.\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  constructor(observer, x, y) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._observer = observer;\n  }\n  /**\n   * Creates a clone of this point.\n   * @param observer - Optional observer to pass to the new observable point.\n   * @returns a copy of this observable point\n   */\n  clone(observer) {\n    return new ObservablePoint(observer ?? this._observer, this._x, this._y);\n  }\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns The observable point instance itself\n   */\n  set(x = 0, y = x) {\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this._observer._onUpdate(this);\n    }\n    return this;\n  }\n  /**\n   * Copies x and y from the given point (`p`)\n   * @param p - The point to copy from. Can be any of type that is or extends `PointData`\n   * @returns The observable point instance itself\n   */\n  copyFrom(p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this._observer._onUpdate(this);\n    }\n    return this;\n  }\n  /**\n   * Copies this point's x and y into that of the given point (`p`)\n   * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n   * @returns The point (`p`) with values updated\n   */\n  copyTo(p) {\n    p.set(this._x, this._y);\n    return p;\n  }\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  equals(p) {\n    return p.x === this._x && p.y === this._y;\n  }\n  toString() {\n    return `[pixi.js/math:ObservablePoint x=${0} y=${0} scope=${this._observer}]`;\n  }\n  /** Position of the observable point on the x axis. */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    if (this._x !== value) {\n      this._x = value;\n      this._observer._onUpdate(this);\n    }\n  }\n  /** Position of the observable point on the y axis. */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    if (this._y !== value) {\n      this._y = value;\n      this._observer._onUpdate(this);\n    }\n  }\n}\n\nexports.ObservablePoint = ObservablePoint;\n//# sourceMappingURL=ObservablePoint.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ObservablePoint","constructor","observer","x","y","_x","_y","_observer","clone","set","_onUpdate","copyFrom","p","copyTo","equals","toString","value"]
}
