{
"version":3,
"file":"module$node_modules$$pixi$extensions$lib$index.js",
"lineCount":58,
"mappings":"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",
"sources":["node_modules/@pixi/extensions/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$extensions$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\nvar ExtensionType = /* @__PURE__ */ ((ExtensionType2) => (ExtensionType2.Renderer = \"renderer\", ExtensionType2.Application = \"application\", ExtensionType2.RendererSystem = \"renderer-webgl-system\", ExtensionType2.RendererPlugin = \"renderer-webgl-plugin\", ExtensionType2.CanvasRendererSystem = \"renderer-canvas-system\", ExtensionType2.CanvasRendererPlugin = \"renderer-canvas-plugin\", ExtensionType2.Asset = \"asset\", ExtensionType2.LoadParser = \"load-parser\", ExtensionType2.ResolveParser = \"resolve-parser\", ExtensionType2.CacheParser = \"cache-parser\", ExtensionType2.DetectionParser = \"detection-parser\", ExtensionType2))(ExtensionType || {});\nconst normalizeExtension = (ext) => {\n  if (typeof ext == \"function\" || typeof ext == \"object\" && ext.extension) {\n    if (!ext.extension)\n      throw new Error(\"Extension class must have an extension object\");\n    ext = { ...typeof ext.extension != \"object\" ? { type: ext.extension } : ext.extension, ref: ext };\n  }\n  if (typeof ext == \"object\")\n    ext = { ...ext };\n  else\n    throw new Error(\"Invalid extension type\");\n  return typeof ext.type == \"string\" && (ext.type = [ext.type]), ext;\n}, normalizePriority = (ext, defaultPriority) => normalizeExtension(ext).priority ?? defaultPriority, extensions = {\n  /** @ignore */\n  _addHandlers: {},\n  /** @ignore */\n  _removeHandlers: {},\n  /** @ignore */\n  _queue: {},\n  /**\n   * Remove extensions from PixiJS.\n   * @param extensions - Extensions to be removed.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  remove(...extensions2) {\n    return extensions2.map(normalizeExtension).forEach((ext) => {\n      ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n    }), this;\n  },\n  /**\n   * Register new extensions with PixiJS.\n   * @param extensions - The spread of extensions to add to PixiJS.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  add(...extensions2) {\n    return extensions2.map(normalizeExtension).forEach((ext) => {\n      ext.type.forEach((type) => {\n        const handlers = this._addHandlers, queue = this._queue;\n        handlers[type] ? handlers[type]?.(ext) : (queue[type] = queue[type] || [], queue[type]?.push(ext));\n      });\n    }), this;\n  },\n  /**\n   * Internal method to handle extensions by name.\n   * @param type - The extension type.\n   * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.\n   * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  handle(type, onAdd, onRemove) {\n    const addHandlers = this._addHandlers, removeHandlers = this._removeHandlers;\n    if (addHandlers[type] || removeHandlers[type])\n      throw new Error(`Extension type ${type} already has a handler`);\n    addHandlers[type] = onAdd, removeHandlers[type] = onRemove;\n    const queue = this._queue;\n    return queue[type] && (queue[type]?.forEach((ext) => onAdd(ext)), delete queue[type]), this;\n  },\n  /**\n   * Handle a type, but using a map by `name` property.\n   * @param type - Type of extension to handle.\n   * @param map - The object map of named extensions.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  handleByMap(type, map) {\n    return this.handle(\n      type,\n      (extension) => {\n        extension.name && (map[extension.name] = extension.ref);\n      },\n      (extension) => {\n        extension.name && delete map[extension.name];\n      }\n    );\n  },\n  /**\n   * Handle a type, but using a list of extensions.\n   * @param type - Type of extension to handle.\n   * @param list - The list of extensions.\n   * @param defaultPriority - The default priority to use if none is specified.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  handleByList(type, list, defaultPriority = -1) {\n    return this.handle(\n      type,\n      (extension) => {\n        list.includes(extension.ref) || (list.push(extension.ref), list.sort((a, b) => normalizePriority(b, defaultPriority) - normalizePriority(a, defaultPriority)));\n      },\n      (extension) => {\n        const index = list.indexOf(extension.ref);\n        index !== -1 && list.splice(index, 1);\n      }\n    );\n  }\n};\nexports.ExtensionType = ExtensionType;\nexports.extensions = extensions;\n//# sourceMappingURL=index.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ExtensionType","ExtensionType2","Renderer","Application","RendererSystem","RendererPlugin","CanvasRendererSystem","CanvasRendererPlugin","Asset","LoadParser","ResolveParser","CacheParser","DetectionParser","normalizeExtension","ext","extension","Error","type","ref","extensions","_addHandlers","_removeHandlers","_queue","remove","extensions2","map","forEach","add","handlers","queue","push","handle","onAdd","onRemove","addHandlers","removeHandlers","handleByMap","name","handleByList","list","defaultPriority","includes","sort","a","b","priority","index","indexOf","splice"]
}
