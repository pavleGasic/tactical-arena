{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$asset$loadBitmapFont.js",
"lineCount":42,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/asset/loadBitmapFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$asset$loadBitmapFont\"] = function(global,require,module,exports) {\n'use strict';\n\nvar LoaderParser = require('../../../assets/loader/parsers/LoaderParser.js');\nvar copySearchParams = require('../../../assets/utils/copySearchParams.js');\nvar adapter = require('../../../environment/adapter.js');\nvar Extensions = require('../../../extensions/Extensions.js');\nvar path = require('../../../utils/path.js');\nvar BitmapFont = require('../BitmapFont.js');\nvar bitmapFontTextParser = require('./bitmapFontTextParser.js');\nvar bitmapFontXMLStringParser = require('./bitmapFontXMLStringParser.js');\n\n\"use strict\";\nconst validExtensions = [\".xml\", \".fnt\"];\nconst bitmapFontCachePlugin = {\n  extension: {\n    type: Extensions.ExtensionType.CacheParser,\n    name: \"cacheBitmapFont\"\n  },\n  test: (asset) => asset instanceof BitmapFont.BitmapFont,\n  getCacheableAssets(keys, asset) {\n    const out = {};\n    keys.forEach((key) => {\n      out[key] = asset;\n      out[`${key}-bitmap`] = asset;\n    });\n    out[`${asset.fontFamily}-bitmap`] = asset;\n    return out;\n  }\n};\nconst loadBitmapFont = {\n  extension: {\n    type: Extensions.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.Normal\n  },\n  name: \"loadBitmapFont\",\n  test(url) {\n    return validExtensions.includes(path.path.extname(url).toLowerCase());\n  },\n  async testParse(data) {\n    return bitmapFontTextParser.bitmapFontTextParser.test(data) || bitmapFontXMLStringParser.bitmapFontXMLStringParser.test(data);\n  },\n  async parse(asset, data, loader) {\n    const bitmapFontData = bitmapFontTextParser.bitmapFontTextParser.test(asset) ? bitmapFontTextParser.bitmapFontTextParser.parse(asset) : bitmapFontXMLStringParser.bitmapFontXMLStringParser.parse(asset);\n    const { src } = data;\n    const { pages } = bitmapFontData;\n    const textureUrls = [];\n    const textureOptions = bitmapFontData.distanceField ? {\n      scaleMode: \"linear\",\n      alphaMode: \"premultiply-alpha-on-upload\",\n      autoGenerateMipmaps: false,\n      resolution: 1\n    } : {};\n    for (let i = 0; i < pages.length; ++i) {\n      const pageFile = pages[i].file;\n      let imagePath = path.path.join(path.path.dirname(src), pageFile);\n      imagePath = copySearchParams.copySearchParams(imagePath, src);\n      textureUrls.push({\n        src: imagePath,\n        data: textureOptions\n      });\n    }\n    const loadedTextures = await loader.load(textureUrls);\n    const textures = textureUrls.map((url) => loadedTextures[url.src]);\n    const bitmapFont = new BitmapFont.BitmapFont({\n      data: bitmapFontData,\n      textures\n    }, src);\n    return bitmapFont;\n  },\n  async load(url, _options) {\n    const response = await adapter.DOMAdapter.get().fetch(url);\n    return await response.text();\n  },\n  async unload(bitmapFont, _resolvedAsset, loader) {\n    await Promise.all(bitmapFont.pages.map((page) => loader.unload(page.texture.source._sourceOrigin)));\n    bitmapFont.destroy();\n  }\n};\n\nexports.bitmapFontCachePlugin = bitmapFontCachePlugin;\nexports.loadBitmapFont = loadBitmapFont;\n//# sourceMappingURL=loadBitmapFont.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","LoaderParser","copySearchParams","adapter","Extensions","path","BitmapFont","bitmapFontTextParser","bitmapFontXMLStringParser","validExtensions","loadBitmapFont","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","Normal","name","test","url","includes","extname","toLowerCase","testParse","data","parse","asset","loader","bitmapFontData","src","pages","textureUrls","textureOptions","distanceField","scaleMode","alphaMode","autoGenerateMipmaps","resolution","i","length","pageFile","file","imagePath","join","dirname","push","loadedTextures","load","textures","map","bitmapFont","_options","text","response","DOMAdapter","get","fetch","unload","_resolvedAsset","Promise","all","page","texture","source","_sourceOrigin","destroy","bitmapFontCachePlugin","CacheParser","getCacheableAssets","keys","out","forEach","key","fontFamily"]
}
