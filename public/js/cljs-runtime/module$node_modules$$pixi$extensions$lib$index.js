shadow$provide.module$node_modules$$pixi$extensions$lib$index = function(global, require, module, exports) {
  var ExtensionType = (ExtensionType2 => (ExtensionType2.Renderer = "renderer", ExtensionType2.Application = "application", ExtensionType2.RendererSystem = "renderer-webgl-system", ExtensionType2.RendererPlugin = "renderer-webgl-plugin", ExtensionType2.CanvasRendererSystem = "renderer-canvas-system", ExtensionType2.CanvasRendererPlugin = "renderer-canvas-plugin", ExtensionType2.Asset = "asset", ExtensionType2.LoadParser = "load-parser", ExtensionType2.ResolveParser = "resolve-parser", ExtensionType2.CacheParser = 
  "cache-parser", ExtensionType2.DetectionParser = "detection-parser", ExtensionType2))(ExtensionType || {});
  const normalizeExtension = ext => {
    if ("function" == typeof ext || "object" == typeof ext && ext.extension) {
      if (!ext.extension) {
        throw Error("Extension class must have an extension object");
      }
      ext = {...("object" != typeof ext.extension ? {type:ext.extension} : ext.extension), ref:ext};
    }
    if ("object" == typeof ext) {
      ext = {...ext};
    } else {
      throw Error("Invalid extension type");
    }
    return "string" == typeof ext.type && (ext.type = [ext.type]), ext;
  };
  exports.ExtensionType = ExtensionType;
  exports.extensions = {_addHandlers:{}, _removeHandlers:{}, _queue:{}, remove(...extensions2) {
    return extensions2.map(normalizeExtension).forEach(ext => {
      ext.type.forEach(type => this._removeHandlers[type]?.(ext));
    }), this;
  }, add(...extensions2) {
    return extensions2.map(normalizeExtension).forEach(ext => {
      ext.type.forEach(type => {
        const handlers = this._addHandlers, queue = this._queue;
        handlers[type] ? handlers[type]?.(ext) : (queue[type] = queue[type] || [], queue[type]?.push(ext));
      });
    }), this;
  }, handle(type, onAdd, onRemove) {
    const addHandlers = this._addHandlers, removeHandlers = this._removeHandlers;
    if (addHandlers[type] || removeHandlers[type]) {
      throw Error(`Extension type ${type} already has a handler`);
    }
    addHandlers[type] = onAdd;
    removeHandlers[type] = onRemove;
    onRemove = this._queue;
    return onRemove[type] && (onRemove[type]?.forEach(ext => onAdd(ext)), delete onRemove[type]), this;
  }, handleByMap(type, map) {
    return this.handle(type, extension => {
      extension.name && (map[extension.name] = extension.ref);
    }, extension => {
      extension.name && delete map[extension.name];
    });
  }, handleByList(type, list, defaultPriority = -1) {
    return this.handle(type, extension => {
      list.includes(extension.ref) || (list.push(extension.ref), list.sort((a, b) => {
        b = normalizeExtension(b).priority ?? defaultPriority;
        a = normalizeExtension(a).priority ?? defaultPriority;
        return b - a;
      }));
    }, extension => {
      extension = list.indexOf(extension.ref);
      -1 !== extension && list.splice(extension, 1);
    });
  }};
};

//# sourceMappingURL=module$node_modules$$pixi$extensions$lib$index.js.map
