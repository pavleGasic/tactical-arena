shadow$provide.module$node_modules$$pixi$events$lib$EventSystem = function(global, require, module, exports) {
  global = require("module$node_modules$$pixi$core$lib$index");
  var EventBoundary = require("module$node_modules$$pixi$events$lib$EventBoundary"), EventTicker = require("module$node_modules$$pixi$events$lib$EventTicker"), FederatedPointerEvent = require("module$node_modules$$pixi$events$lib$FederatedPointerEvent"), FederatedWheelEvent = require("module$node_modules$$pixi$events$lib$FederatedWheelEvent");
  const TOUCH_TO_POINTER = {touchstart:"pointerdown", touchend:"pointerup", touchendoutside:"pointerupoutside", touchmove:"pointermove", touchcancel:"pointercancel"};
  require = (() => {
    const node_modules$$pixi$events$lib$EventSystem$classdecl$var14 = class {
      constructor(renderer) {
        this.supportsTouchEvents = "ontouchstart" in globalThis;
        this.supportsPointerEvents = !!globalThis.PointerEvent;
        this.domElement = null;
        this.resolution = 1;
        this.renderer = renderer;
        this.rootBoundary = new EventBoundary.EventBoundary(null);
        EventTicker.EventsTicker.init(this);
        this.autoPreventDefault = !0;
        this.eventsAdded = !1;
        this.rootPointerEvent = new FederatedPointerEvent.FederatedPointerEvent(null);
        this.rootWheelEvent = new FederatedWheelEvent.FederatedWheelEvent(null);
        this.cursorStyles = {default:"inherit", pointer:"pointer"};
        this.features = new Proxy({...node_modules$$pixi$events$lib$EventSystem$classdecl$var14.defaultEventFeatures}, {set:(target, key, value) => ("globalMove" === key && (this.rootBoundary.enableGlobalMoveEvents = value), target[key] = value, !0)});
        this.onPointerDown = this.onPointerDown.bind(this);
        this.onPointerMove = this.onPointerMove.bind(this);
        this.onPointerUp = this.onPointerUp.bind(this);
        this.onPointerOverOut = this.onPointerOverOut.bind(this);
        this.onWheel = this.onWheel.bind(this);
      }
      static get defaultEventMode() {
        return this._defaultEventMode;
      }
      init(options) {
        const {view, resolution} = this.renderer;
        this.setTargetElement(view);
        this.resolution = resolution;
        node_modules$$pixi$events$lib$EventSystem$classdecl$var14._defaultEventMode = options.eventMode ?? "auto";
        Object.assign(this.features, options.eventFeatures ?? {});
        this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;
      }
      resolutionChange(resolution) {
        this.resolution = resolution;
      }
      destroy() {
        this.setTargetElement(null);
        this.renderer = null;
      }
      setCursor(mode) {
        mode = mode || "default";
        let applyStyles = !0;
        if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas && (applyStyles = !1), this.currentCursor !== mode) {
          this.currentCursor = mode;
          var style = this.cursorStyles[mode];
          if (style) {
            switch(typeof style) {
              case "string":
                applyStyles && (this.domElement.style.cursor = style);
                break;
              case "function":
                style(mode);
                break;
              case "object":
                applyStyles && Object.assign(this.domElement.style, style);
            }
          } else {
            applyStyles && "string" == typeof mode && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode) && (this.domElement.style.cursor = mode);
          }
        }
      }
      get pointer() {
        return this.rootPointerEvent;
      }
      onPointerDown(nativeEvent) {
        if (this.features.click) {
          this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;
          var events = this.normalizeToPointerData(nativeEvent);
          !this.autoPreventDefault || !events[0].isNormalized || !nativeEvent.cancelable && "cancelable" in nativeEvent || nativeEvent.preventDefault();
          for (let i = 0, j = events.length; i < j; i++) {
            nativeEvent = this.bootstrapEvent(this.rootPointerEvent, events[i]), this.rootBoundary.mapEvent(nativeEvent);
          }
          this.setCursor(this.rootBoundary.cursor);
        }
      }
      onPointerMove(nativeEvent) {
        if (this.features.move) {
          this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;
          EventTicker.EventsTicker.pointerMoved();
          nativeEvent = this.normalizeToPointerData(nativeEvent);
          for (let i = 0, j = nativeEvent.length; i < j; i++) {
            const event = this.bootstrapEvent(this.rootPointerEvent, nativeEvent[i]);
            this.rootBoundary.mapEvent(event);
          }
          this.setCursor(this.rootBoundary.cursor);
        }
      }
      onPointerUp(nativeEvent) {
        if (this.features.click) {
          this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;
          var target = nativeEvent.target;
          nativeEvent.composedPath && 0 < nativeEvent.composedPath().length && (target = nativeEvent.composedPath()[0]);
          target = target !== this.domElement ? "outside" : "";
          nativeEvent = this.normalizeToPointerData(nativeEvent);
          for (let i = 0, j = nativeEvent.length; i < j; i++) {
            const event = this.bootstrapEvent(this.rootPointerEvent, nativeEvent[i]);
            event.type += target;
            this.rootBoundary.mapEvent(event);
          }
          this.setCursor(this.rootBoundary.cursor);
        }
      }
      onPointerOverOut(nativeEvent) {
        if (this.features.click) {
          this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;
          nativeEvent = this.normalizeToPointerData(nativeEvent);
          for (let i = 0, j = nativeEvent.length; i < j; i++) {
            const event = this.bootstrapEvent(this.rootPointerEvent, nativeEvent[i]);
            this.rootBoundary.mapEvent(event);
          }
          this.setCursor(this.rootBoundary.cursor);
        }
      }
      onWheel(nativeEvent) {
        this.features.wheel && (nativeEvent = this.normalizeWheelEvent(nativeEvent), this.rootBoundary.rootTarget = this.renderer.lastObjectRendered, this.rootBoundary.mapEvent(nativeEvent));
      }
      setTargetElement(element) {
        this.removeEvents();
        this.domElement = element;
        EventTicker.EventsTicker.domElement = element;
        this.addEvents();
      }
      addEvents() {
        if (!this.eventsAdded && this.domElement) {
          EventTicker.EventsTicker.addTickerListener();
          var style = this.domElement.style;
          style && (globalThis.navigator.msPointerEnabled ? (style.msContentZooming = "none", style.msTouchAction = "none") : this.supportsPointerEvents && (style.touchAction = "none"));
          this.supportsPointerEvents ? (globalThis.document.addEventListener("pointermove", this.onPointerMove, !0), this.domElement.addEventListener("pointerdown", this.onPointerDown, !0), this.domElement.addEventListener("pointerleave", this.onPointerOverOut, !0), this.domElement.addEventListener("pointerover", this.onPointerOverOut, !0), globalThis.addEventListener("pointerup", this.onPointerUp, !0)) : (globalThis.document.addEventListener("mousemove", this.onPointerMove, !0), this.domElement.addEventListener("mousedown", 
          this.onPointerDown, !0), this.domElement.addEventListener("mouseout", this.onPointerOverOut, !0), this.domElement.addEventListener("mouseover", this.onPointerOverOut, !0), globalThis.addEventListener("mouseup", this.onPointerUp, !0), this.supportsTouchEvents && (this.domElement.addEventListener("touchstart", this.onPointerDown, !0), this.domElement.addEventListener("touchend", this.onPointerUp, !0), this.domElement.addEventListener("touchmove", this.onPointerMove, !0)));
          this.domElement.addEventListener("wheel", this.onWheel, {passive:!0, capture:!0});
          this.eventsAdded = !0;
        }
      }
      removeEvents() {
        if (this.eventsAdded && this.domElement) {
          EventTicker.EventsTicker.removeTickerListener();
          var style = this.domElement.style;
          globalThis.navigator.msPointerEnabled ? (style.msContentZooming = "", style.msTouchAction = "") : this.supportsPointerEvents && (style.touchAction = "");
          this.supportsPointerEvents ? (globalThis.document.removeEventListener("pointermove", this.onPointerMove, !0), this.domElement.removeEventListener("pointerdown", this.onPointerDown, !0), this.domElement.removeEventListener("pointerleave", this.onPointerOverOut, !0), this.domElement.removeEventListener("pointerover", this.onPointerOverOut, !0), globalThis.removeEventListener("pointerup", this.onPointerUp, !0)) : (globalThis.document.removeEventListener("mousemove", this.onPointerMove, !0), 
          this.domElement.removeEventListener("mousedown", this.onPointerDown, !0), this.domElement.removeEventListener("mouseout", this.onPointerOverOut, !0), this.domElement.removeEventListener("mouseover", this.onPointerOverOut, !0), globalThis.removeEventListener("mouseup", this.onPointerUp, !0), this.supportsTouchEvents && (this.domElement.removeEventListener("touchstart", this.onPointerDown, !0), this.domElement.removeEventListener("touchend", this.onPointerUp, !0), this.domElement.removeEventListener("touchmove", 
          this.onPointerMove, !0)));
          this.domElement.removeEventListener("wheel", this.onWheel, !0);
          this.domElement = null;
          this.eventsAdded = !1;
        }
      }
      mapPositionToPoint(point, x, y) {
        const rect = this.domElement.isConnected ? this.domElement.getBoundingClientRect() : {x:0, y:0, width:this.domElement.width, height:this.domElement.height, left:0, top:0}, resolutionMultiplier = 1 / this.resolution;
        point.x = this.domElement.width / rect.width * (x - rect.left) * resolutionMultiplier;
        point.y = this.domElement.height / rect.height * (y - rect.top) * resolutionMultiplier;
      }
      normalizeToPointerData(event) {
        const normalizedEvents = [];
        if (this.supportsTouchEvents && event instanceof TouchEvent) {
          for (let i = 0, li = event.changedTouches.length; i < li; i++) {
            const touch = event.changedTouches[i];
            "u" < typeof touch.button && (touch.button = 0);
            "u" < typeof touch.buttons && (touch.buttons = 1);
            "u" < typeof touch.isPrimary && (touch.isPrimary = 1 === event.touches.length && "touchstart" === event.type);
            "u" < typeof touch.width && (touch.width = touch.radiusX || 1);
            "u" < typeof touch.height && (touch.height = touch.radiusY || 1);
            "u" < typeof touch.tiltX && (touch.tiltX = 0);
            "u" < typeof touch.tiltY && (touch.tiltY = 0);
            "u" < typeof touch.pointerType && (touch.pointerType = "touch");
            "u" < typeof touch.pointerId && (touch.pointerId = touch.identifier || 0);
            "u" < typeof touch.pressure && (touch.pressure = touch.force || 0.5);
            "u" < typeof touch.twist && (touch.twist = 0);
            "u" < typeof touch.tangentialPressure && (touch.tangentialPressure = 0);
            "u" < typeof touch.layerX && (touch.layerX = touch.offsetX = touch.clientX);
            "u" < typeof touch.layerY && (touch.layerY = touch.offsetY = touch.clientY);
            touch.isNormalized = !0;
            touch.type = event.type;
            normalizedEvents.push(touch);
          }
        } else {
          if (!globalThis.MouseEvent || event instanceof MouseEvent && !(this.supportsPointerEvents && event instanceof globalThis.PointerEvent)) {
            "u" < typeof event.isPrimary && (event.isPrimary = !0), "u" < typeof event.width && (event.width = 1), "u" < typeof event.height && (event.height = 1), "u" < typeof event.tiltX && (event.tiltX = 0), "u" < typeof event.tiltY && (event.tiltY = 0), "u" < typeof event.pointerType && (event.pointerType = "mouse"), "u" < typeof event.pointerId && (event.pointerId = 1), "u" < typeof event.pressure && (event.pressure = 0.5), "u" < typeof event.twist && (event.twist = 0), "u" < typeof event.tangentialPressure && 
            (event.tangentialPressure = 0), event.isNormalized = !0;
          }
          normalizedEvents.push(event);
        }
        return normalizedEvents;
      }
      normalizeWheelEvent(nativeEvent) {
        const event = this.rootWheelEvent;
        return this.transferMouseData(event, nativeEvent), event.deltaX = nativeEvent.deltaX, event.deltaY = nativeEvent.deltaY, event.deltaZ = nativeEvent.deltaZ, event.deltaMode = nativeEvent.deltaMode, this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY), event.global.copyFrom(event.screen), event.offset.copyFrom(event.screen), event.nativeEvent = nativeEvent, event.type = nativeEvent.type, event;
      }
      bootstrapEvent(event, nativeEvent) {
        return event.originalEvent = null, event.nativeEvent = nativeEvent, event.pointerId = nativeEvent.pointerId, event.width = nativeEvent.width, event.height = nativeEvent.height, event.isPrimary = nativeEvent.isPrimary, event.pointerType = nativeEvent.pointerType, event.pressure = nativeEvent.pressure, event.tangentialPressure = nativeEvent.tangentialPressure, event.tiltX = nativeEvent.tiltX, event.tiltY = nativeEvent.tiltY, event.twist = nativeEvent.twist, this.transferMouseData(event, nativeEvent), 
        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY), event.global.copyFrom(event.screen), event.offset.copyFrom(event.screen), event.isTrusted = nativeEvent.isTrusted, "pointerleave" === event.type && (event.type = "pointerout"), event.type.startsWith("mouse") && (event.type = event.type.replace("mouse", "pointer")), event.type.startsWith("touch") && (event.type = TOUCH_TO_POINTER[event.type] || event.type), event;
      }
      transferMouseData(event, nativeEvent) {
        event.isTrusted = nativeEvent.isTrusted;
        event.srcElement = nativeEvent.srcElement;
        event.timeStamp = performance.now();
        event.type = nativeEvent.type;
        event.altKey = nativeEvent.altKey;
        event.button = nativeEvent.button;
        event.buttons = nativeEvent.buttons;
        event.client.x = nativeEvent.clientX;
        event.client.y = nativeEvent.clientY;
        event.ctrlKey = nativeEvent.ctrlKey;
        event.metaKey = nativeEvent.metaKey;
        event.movement.x = nativeEvent.movementX;
        event.movement.y = nativeEvent.movementY;
        event.page.x = nativeEvent.pageX;
        event.page.y = nativeEvent.pageY;
        event.relatedTarget = null;
        event.shiftKey = nativeEvent.shiftKey;
      }
    };
    return node_modules$$pixi$events$lib$EventSystem$classdecl$var14;
  })();
  require.extension = {name:"events", type:[global.ExtensionType.RendererSystem, global.ExtensionType.CanvasRendererSystem]};
  require.defaultEventFeatures = {move:!0, globalMove:!0, click:!0, wheel:!0};
  global.extensions.add(require);
  exports.EventSystem = require;
};

//# sourceMappingURL=module$node_modules$$pixi$events$lib$EventSystem.js.map
