{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapFontManager.js",
"lineCount":61,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/BitmapFontManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapFontManager\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Cache = require('../../assets/cache/Cache.js');\nvar deprecation = require('../../utils/logging/deprecation.js');\nvar warn = require('../../utils/logging/warn.js');\nvar TextStyle = require('../text/TextStyle.js');\nvar DynamicBitmapFont = require('./DynamicBitmapFont.js');\nvar getBitmapTextLayout = require('./utils/getBitmapTextLayout.js');\nvar resolveCharacters = require('./utils/resolveCharacters.js');\n\n\"use strict\";\nlet fontCount = 0;\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill && !style._stroke) {\n      fontFamilyKey += style._fill.fill.styleKey;\n      overrideFill = false;\n    } else if (style._stroke || style.dropShadow) {\n      let key = style.styleKey;\n      key = key.substring(0, key.lastIndexOf(\"-\"));\n      fontFamilyKey = `${key}-bitmap`;\n      overrideFill = false;\n    }\n    if (!Cache.Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont.DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fontCount++;\n      if (fontCount > 50) {\n        warn.warn(\"BitmapText\", `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n      }\n      fnt.once(\"destroy\", () => {\n        fontCount--;\n        Cache.Cache.remove(fontFamilyKey);\n      });\n      Cache.Cache.set(\n        fontFamilyKey,\n        fnt\n      );\n    }\n    const dynamicFont = Cache.Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  getLayout(text, style, trimEnd = true) {\n    const bitmapFont = this.getFont(text, style);\n    return getBitmapTextLayout.getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  measureText(text, style, trimEnd = true) {\n    return this.getLayout(text, style, trimEnd);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation.deprecation(deprecation.v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = { ...this.defaultOptions, ...options };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle.TextStyle ? textStyle : new TextStyle.TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont.DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false\n    });\n    const flatChars = resolveCharacters.resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.Cache.get(cacheKey);\n    if (font) {\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\n\nexports.BitmapFontManager = BitmapFontManager;\n//# sourceMappingURL=BitmapFontManager.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Cache","deprecation","warn","TextStyle","DynamicBitmapFont","getBitmapTextLayout","resolveCharacters","fontCount","BitmapFontManagerClass","constructor","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","defaultOptions","chars","resolution","padding","skipKerning","getFont","text","style","fontFamilyKey","fontFamily","overrideFill","_fill","fill","_stroke","styleKey","dropShadow","key","substring","lastIndexOf","has","fnt","overrideSize","once","remove","set","dynamicFont","get","ensureCharacters","getLayout","trimEnd","bitmapFont","measureText","install","args","options","name","v8_0_0","Error","textStyle","font","flatChars","join","uninstall","cacheKey","destroy","BitmapFontManager"]
}
