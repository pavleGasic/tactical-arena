{"version":3,"sources":["app/frontend/ui/battlefield/map.cljs"],"mappings":"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","names":["app.frontend.ui.battlefield.map/walkable-ids","app.frontend.ui.battlefield.map/mark-walkable","tile","cljs.core.assoc","cljs.core/contains?","app.frontend.ui.battlefield.map/mark-walkable-layer","layer","p1__36983#","cljs.core.update","cljs.core.mapv","app.frontend.ui.battlefield.map/load-map!","js/fetch","p1__36984#","raw-data","data","cljs.core.js__GT_clj","layers","updated-layers","cljs.core/reset!","app.frontend.ui.battlefield.state/map-data","p1__36985#","js/console.error","p__36986","map__36987","cljs.core/--destructure-map","cljs.core.get","app.frontend.ui.battlefield.map/calc-map-dimensions","tileSize","height-in-tiles","cljs.core.apply","cljs.core/max","cljs.core.mapcat","cljs.core.map","width-in-tiles","map-height","app.frontend.ui.battlefield.config/tile-scale","map-width","app.frontend.ui.battlefield.map/populate-map-container!","map-container","texture","seq__36994","cljs.core/seq","chunk__36999","count__37000","i__37001","map__37019","seq__37002","chunk__37003","count__37004","i__37005","map__37034","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__37039","cljs.core/first","cljs.core/next","map__37040","seq__36995","chunk__36996","count__36997","i__36998","map__37047","map__37048","tiles","id","x","y","sprite","app.frontend.ui.battlefield.sprites/create-map-tile-sprite","app.frontend.ui.battlefield.map/setup-drag-handlers!","container","screen-width","screen-height","dragging","reagent.core.atom","offset","event","pos","cljs.core/deref","new-x","Math/floor","new-y","clamped-x","x__5087__auto__","y__5088__auto__","x__5090__auto__","y__5091__auto__","clamped-y"],"sourcesContent":["(ns app.frontend.ui.battlefield.map\n  (:require [app.frontend.ui.battlefield.state :as state]\n            [app.frontend.ui.battlefield.config :as config]\n            [app.frontend.ui.battlefield.sprites :as sprites]\n            [reagent.core :as r]))\n\n(def walkable-ids\n  #{\"10\" \"11\" \"12\" \"19\" \"23\" \"26\" \"27\" \"28\" \"29\"})\n\n(defn mark-walkable [tile]\n  (assoc tile :walkable? (contains? walkable-ids (:id tile))))\n\n(defn mark-walkable-layer [layer]\n  (update layer :tiles #(mapv mark-walkable %)))\n\n(defn load-map! []\n  (-> (js/fetch \"/assets/map.json\")\n      (.then #(.json %))\n      (.then\n        (fn [raw-data]\n          (let [data (js->clj raw-data :keywordize-keys true)\n                layers (:layers data)\n                updated-layers (mapv mark-walkable-layer layers)]\n            (reset! state/map-data (assoc data :layers updated-layers)))))\n      (.catch #(js/console.error \"Failed to load map:\" %))))\n\n(defn calc-map-dimensions [{:keys [tileSize layers]}]\n  (let [height-in-tiles (apply max (mapcat (fn [layer] (map :y (:tiles layer))) layers))\n        width-in-tiles (apply max (mapcat (fn [layer] (map :x (:tiles layer))) layers))\n        map-height (* (inc height-in-tiles) tileSize config/tile-scale)\n        map-width (* (inc width-in-tiles) tileSize config/tile-scale)]\n    {:map-height map-height :map-width map-width}))\n\n(defn populate-map-container! [map-container layers texture]\n  (doseq [{:keys [tiles]} layers\n          {:keys [id x y]} tiles]\n    (let [sprite (sprites/create-map-tile-sprite texture id x y)]\n      (.addChild ^js map-container sprite))))\n\n(defn setup-drag-handlers! [container screen-width screen-height map-width map-height]\n  (let [dragging (r/atom false)\n        offset (r/atom {:x 0 :y 0})]\n    (.on container \"pointerdown\"\n         (fn [event]\n           (reset! dragging true)\n           (let [pos (.-global (.-data event))]\n             (reset! offset {:x (- (.-x pos) (.-x container))\n                             :y (- (.-y pos) (.-y container))}))))\n    (.on container \"pointerup\" #(reset! dragging false))\n    (.on container \"pointerupoutside\" #(reset! dragging false))\n    (.on container \"pointermove\"\n         (fn [event]\n           (when @dragging\n             (let [pos (.-global (.-data event))\n                   new-x (Math/floor (- (.-x pos) (:x @offset)))\n                   new-y (Math/floor (- (.-y pos) (:y @offset)))\n                   clamped-x (max (min 0 new-x) (- screen-width map-width))\n                   clamped-y (max (min 0 new-y) (- screen-height map-height))]\n               (set! (.-x container) clamped-x)\n               (set! (.-y container) clamped-y)))))\n    (set! (.-eventMode container) \"dynamic\")))"]}