{"version":3,"sources":["app/frontend/ui/battlefield.cljs"],"mappings":"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","names":["js/app","js/app.frontend","js/app.frontend.ui","js/app.frontend.ui.battlefield","js/app.frontend.ui.battlefield.map-data","app.frontend.ui.battlefield/map-data","reagent.core.atom","js/app.frontend.ui.battlefield.overlay-placeholders","app.frontend.ui.battlefield/overlay-placeholders","js/app.frontend.ui.battlefield.characters","app.frontend.ui.battlefield/characters","app.frontend.ui.battlefield/create-sprite","texture","id","x","y","tileSize","tile-scale","cols","tile-w","tile-h","frame-x","cljs.core/mod","frame-y","Math/floor","frame","js/module$node_modules$pixi_DOT_js$lib$index.Rectangle","tile-texture","js/module$node_modules$pixi_DOT_js$lib$index.Texture","sprite","js/module$node_modules$pixi_DOT_js$lib$index.Sprite","app.frontend.ui.battlefield/create-character-sprite","character","tile-size","_","p1__36705#","cljs.core.swap_BANG_","cljs.core.mapv","c","cljs.core.assoc","cljs.core._EQ_","app.frontend.ui.battlefield/clear-overlay!","map-container","seq__36706","cljs.core/seq","cljs.core/deref","chunk__36707","count__36708","i__36709","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","s","cljs.core/reset!","app.frontend.ui.battlefield/animate-move!","from-x","from-y","to-x","to-y","start-time","js/performance","pixel-from-x","pixel-from-y","pixel-to-x","pixel-to-y","now","elapsed","t","x__5090__auto__","y__5091__auto__","new-x","new-y","js/requestAnimationFrame","step","app.frontend.ui.battlefield/render-characters!","js/module$node_modules$pixi_DOT_js$lib$index.Assets","module$node_modules$pixi_DOT_js$lib$index/Texture","module$node_modules$pixi_DOT_js$lib$index/SCALE_MODES","seq__36711","chunk__36712","count__36713","i__36714","p1__36710#","app.frontend.ui.battlefield/load-map!","js/fetch","p1__36715#","p1__36716#","cljs.core.js__GT_clj","p1__36717#","js/console.error","p__36718","map__36719","cljs.core/--destructure-map","cljs.core.get","app.frontend.ui.battlefield/calc-map-dimensions","layers","height-in-tiles","cljs.core.apply","cljs.core/max","cljs.core.mapcat","layer","cljs.core.map","width-in-tiles","map-height","map-width","app.frontend.ui.battlefield/setup-drag-handlers!","container","screen-width","screen-height","dragging","offset","event","pos","clamped-x","x__5087__auto__","y__5088__auto__","clamped-y","app.frontend.ui.battlefield/populate-map-container!","seq__36720","chunk__36725","count__36726","i__36727","map__36742","seq__36728","chunk__36729","count__36730","i__36731","map__36745","map__36746","map__36747","seq__36721","chunk__36722","count__36723","i__36724","map__36750","map__36751","tiles","app.frontend.ui.battlefield/render-tilemap","app","map__36752","map-dimensions","initial-x","initial-y","js/module$node_modules$pixi_DOT_js$lib$index.Container","placeholder-texture","cljs.core/add-watch","new-state","seq__36753","chunk__36754","count__36755","i__36756","app.frontend.ui.battlefield/draw-move-overlay","app.frontend.ui.battlefield/display-battlefield","canvas-div","on-resize","reagent.core.create_class","resize-handler","js/window","and__5000__auto__","js/module$node_modules$pixi_DOT_js$lib$index.Application","cljs.core/clj->js","p1__36757#"],"sourcesContent":["(ns app.frontend.ui.battlefield\n  (:require [reagent.core :as r]\n            [\"pixi.js\" :refer [Application Assets Texture Sprite Rectangle Container SCALE_MODES]]))\n\n(defonce map-data (r/atom nil))\n\n(defonce overlay-placeholders (r/atom []))\n\n(defonce characters\n         (r/atom\n           [{:id        1\n             :type      :wizard\n             :x         6\n             :y         27\n             :sprite    nil\n             :selected? false}]))\n\n\n(defn create-sprite [texture id x y tileSize tile-scale]\n  (let [cols 8\n        tile-w tileSize\n        tile-h tileSize\n        frame-x (* (mod id cols) tile-w)\n        frame-y (* (Math/floor (/ id cols)) tile-h)\n        frame (Rectangle. frame-x frame-y tile-w tile-h)\n        tile-texture (Texture. texture frame)\n        sprite (Sprite. tile-texture)]\n    (set! (.-x sprite) (* x tile-w tile-scale))\n    (set! (.-y sprite) (* y tile-h tile-scale))\n    (set! (.-scale.x sprite) tile-scale)\n    (set! (.-scale.y sprite) tile-scale)\n    sprite))\n\n(defn create-character-sprite [character texture tile-size tile-scale]\n  (let [sprite (Sprite. texture)]\n    (set! (.-x sprite) (* (:x character) tile-size tile-scale))\n    (set! (.-y sprite) (* (:y character) tile-size tile-scale))\n    (set! (.-scale.x sprite) tile-scale)\n    (set! (.-scale.y sprite) tile-scale)\n    (set! (.-eventMode sprite) \"dynamic\")\n    (set! (.-buttonMode sprite) true)\n    (.on sprite \"pointerdown\"\n         (fn [_]\n           (swap! characters #(mapv (fn [c] (assoc c :selected? (= (:id c) (:id character)))) %))))\n    sprite))\n\n(defn clear-overlay! [map-container]\n  (doseq [s @overlay-placeholders]\n    (.removeChild ^js map-container s))\n  (reset! overlay-placeholders []))\n\n(defn animate-move! [sprite from-x from-y to-x to-y tile-size tile-scale]\n  (let [start-time (.now js/performance)\n        pixel-from-x (* from-x tile-size tile-scale)\n        pixel-from-y (* from-y tile-size tile-scale)\n        pixel-to-x (* to-x tile-size tile-scale)\n        pixel-to-y (* to-y tile-size tile-scale)]\n    (letfn [(step []\n              (let [now (.now js/performance)\n                    elapsed (- now start-time)\n                    t (min 1 (/ elapsed 300))\n                    new-x (+ pixel-from-x (* (- pixel-to-x pixel-from-x) t))\n                    new-y (+ pixel-from-y (* (- pixel-to-y pixel-from-y) t))]\n                (set! (.-x sprite) new-x)\n                (set! (.-y sprite) new-y)\n                (when (< t 1)\n                  (js/requestAnimationFrame step))))]\n      (js/requestAnimationFrame step))))\n\n(defn render-characters! [map-container tile-size tile-scale]\n  (-> (.load Assets \"/assets/images/warrior.png\")\n      (.then (fn [_]\n               (let [texture (Texture.from \"/assets/images/warrior.png\")]\n                 (set! (.-scaleMode (.-baseTexture texture)) SCALE_MODES.NEAREST)\n                 (doseq [character @characters]\n                   (let [sprite (create-character-sprite character texture tile-size tile-scale)]\n                     (swap! characters #(mapv (fn [c]\n                                                (if (= (:id c) (:id character))\n                                                  (assoc c :sprite sprite) c)) %))\n                     (.addChild ^js map-container sprite))))))))\n\n(defn load-map! []\n  (-> (js/fetch \"/assets/map.json\")\n      (.then #(.json %))\n      (.then #(reset! map-data (js->clj % :keywordize-keys true)))\n      (.catch #(js/console.error \"Failed to load map:\" %))))\n\n(defn calc-map-dimensions [{:keys [tileSize layers]} tile-scale]\n  (let [height-in-tiles (apply max (mapcat (fn [layer] (map :y (:tiles layer))) layers))\n        width-in-tiles (apply max (mapcat (fn [layer] (map :x (:tiles layer))) layers))\n        map-height (* (inc height-in-tiles) tileSize tile-scale)\n        map-width (* (inc width-in-tiles) tileSize tile-scale)]\n    {:map-height map-height :map-width map-width}))\n\n\n(defn setup-drag-handlers! [container screen-width screen-height map-width map-height]\n  (let [dragging (r/atom false)\n        offset (r/atom {:x 0 :y 0})]\n    (.on container \"pointerdown\"\n         (fn [event]\n           (reset! dragging true)\n           (let [pos (.-global (.-data event))]\n             (reset! offset {:x (- (.-x pos) (.-x container))\n                             :y (- (.-y pos) (.-y container))}))))\n    (.on container \"pointerup\" #(reset! dragging false))\n    (.on container \"pointerupoutside\" #(reset! dragging false))\n    (.on container \"pointermove\"\n         (fn [event]\n           (when @dragging\n             (let [pos (.-global (.-data event))\n                   new-x (Math/floor (- (.-x pos) (:x @offset)))\n                   new-y (Math/floor (- (.-y pos) (:y @offset)))\n                   clamped-x (max (min 0 new-x) (- screen-width map-width))\n                   clamped-y (max (min 0 new-y) (- screen-height map-height))]\n               (set! (.-x container) clamped-x)\n               (set! (.-y container) clamped-y)))))\n    (set! (.-eventMode container) \"dynamic\")))\n\n(defn populate-map-container! [map-container layers texture tileSize tile-scale]\n  (doseq [{:keys [tiles]} layers\n          {:keys [id x y]} tiles]\n    (let [sprite (create-sprite texture id x y tileSize tile-scale)]\n      (.addChild ^js map-container sprite))))\n\n(defn render-tilemap [app]\n  (let [{:keys [tileSize layers]} @map-data\n        tile-scale 2.5\n        map-dimensions (calc-map-dimensions @map-data tile-scale)\n        screen-width (.-width (.-renderer app))\n        screen-height (.-height (.-renderer app))\n        initial-x 0\n        initial-y (- screen-height (- (:map-height map-dimensions) 100))\n        map-container (Container.)]\n    (-> (.load Assets \"/assets/spritesheet.png\")\n        (.then\n          (fn [_]\n            (-> (.load Assets \"/assets/images/placeholder.png\")\n                (.then\n                  (fn [_]\n                    (let [texture (Texture.from \"/assets/spritesheet.png\")\n                          placeholder-texture (Texture.from \"/assets/images/placeholder.png\")]\n                      (set! (.-scaleMode (.-baseTexture texture)) SCALE_MODES.NEAREST)\n                      (set! (.-scaleMode (.-baseTexture placeholder-texture)) SCALE_MODES.NEAREST)\n\n                      (set! (.-x map-container) initial-x)\n                      (set! (.-y map-container) initial-y)\n\n                      (.addChild ^js (.-stage app) map-container)\n\n                      (setup-drag-handlers! map-container screen-width screen-height (:map-width map-dimensions) (:map-height map-dimensions))\n                      (populate-map-container! map-container layers texture tileSize tile-scale)\n                      (render-characters! map-container tileSize tile-scale)\n                      (add-watch characters :movement-overlay\n                                 (fn [_ _ _ new-state]\n                                   (doseq [c new-state]\n                                     (when (:selected? c)\n                                       (draw-move-overlay map-container c tileSize tile-scale placeholder-texture))))))))))))))\n\n\n(defn display-battlefield []\n  (let [container (r/atom nil)\n        canvas-div (r/atom nil)\n        on-resize (r/atom nil)]\n    (r/create-class\n      {:component-did-mount\n       (fn []\n         (load-map!)\n         (let [resize-handler\n               (fn []\n                 (when-let [app @container]\n                   (.resize (.-renderer app) (.-innerWidth js/window) (.-innerHeight js/window))))]\n           (reset! on-resize resize-handler)\n           (.addEventListener js/window \"resize\" resize-handler)))\n\n       :component-will-unmount\n       (fn []\n         (when @on-resize\n           (.removeEventListener js/window \"resize\" @on-resize)))\n\n       :component-did-update\n       (fn []\n         (when (and (nil? @container) @map-data @canvas-div)\n           (let [app (Application. (clj->js {:width (.-innerWidth js/window) :height (.-innerHeight js/window)}))]\n             (reset! container app)\n             (.appendChild @canvas-div (.-view app))\n             (render-tilemap app))))\n\n       :reagent-render\n       (fn []\n         [:div\n          [:div {:ref #(reset! canvas-div %)}]\n          (when-not @map-data\n            [:p \"Loading-map...\"])])})))"]}