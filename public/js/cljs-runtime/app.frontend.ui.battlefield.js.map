{"version":3,"sources":["app/frontend/ui/battlefield.cljs"],"mappings":"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","names":["app.frontend.ui.battlefield/tile-images","app.frontend.ui.components.tiles/display-tile","app.frontend.ui.components.tiles/display-tile-rotated","js/app","js/app.frontend","js/app.frontend.ui","js/app.frontend.ui.battlefield","js/app.frontend.ui.battlefield.map-data","app.frontend.ui.battlefield/map-data","reagent.core.atom","app.frontend.ui.battlefield/load-map!","js/fetch","p1__28331#","p1__28332#","cljs.core/reset!","cljs.core.js__GT_clj","p1__28333#","js/console.error","p__28334","map__28335","cljs.core/--destructure-map","cljs.core.get","app.frontend.ui.battlefield/calc-map-dimensions","tileSize","layers","tile-scale","height-in-tiles","cljs.core.apply","cljs.core/max","cljs.core.mapcat","layer","cljs.core.map","width-in-tiles","map-height","map-width","app.frontend.ui.battlefield/setup-drag-handlers!","container","screen-width","screen-height","dragging","offset","event","pos","cljs.core/deref","new-x","Math/floor","new-y","clamped-x","x__5087__auto__","y__5088__auto__","x__5090__auto__","y__5091__auto__","clamped-y","app.frontend.ui.battlefield/create-sprite","texture","id","x","y","cols","tile-w","tile-h","frame-x","cljs.core/mod","frame-y","frame","js/module$node_modules$pixi_DOT_js$lib$index.Rectangle","tile-texture","js/module$node_modules$pixi_DOT_js$lib$index.Texture","sprite","js/module$node_modules$pixi_DOT_js$lib$index.Sprite","app.frontend.ui.battlefield/populate-map-container!","map-container","seq__28336","cljs.core/seq","chunk__28341","count__28342","i__28343","map__28358","seq__28344","chunk__28345","count__28346","i__28347","map__28361","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__28362","cljs.core/first","cljs.core/next","map__28363","seq__28337","chunk__28338","count__28339","i__28340","map__28366","map__28367","tiles","app.frontend.ui.battlefield/render-tilemap","app","map__28368","map-dimensions","initial-x","initial-y","js/module$node_modules$pixi_DOT_js$lib$index.Container","js/module$node_modules$pixi_DOT_js$lib$index.Assets","_","module$node_modules$pixi_DOT_js$lib$index/Texture","module$node_modules$pixi_DOT_js$lib$index/SCALE_MODES","app.frontend.ui.battlefield/display-battlefield","canvas-div","on-resize","reagent.core.create_class","resize-handler","js/window","and__5000__auto__","js/module$node_modules$pixi_DOT_js$lib$index.Application","cljs.core/clj->js","p1__28369#"],"sourcesContent":["(ns app.frontend.ui.battlefield\n  (:require [app.frontend.ui.components.tiles :as tiles]\n            [reagent.core :as r]\n            [\"pixi.js\" :refer [Application Assets Texture Sprite Rectangle Container SCALE_MODES]]))\n\n(def tile-images\n  {:empty-ground            (tiles/display-tile \"empty_ground.png\")\n   :corner-shadow-ground    (tiles/display-tile-rotated \"corner_shadow_ground.png\" 270)\n   :top-shadow-ground       (tiles/display-tile-rotated \"side_shadow_ground.png\" 0)\n   :left-shadow-ground      (tiles/display-tile-rotated \"side_shadow_ground.png\" 270)\n   :stone-ground            (tiles/display-tile \"stones_in_ground.png\")\n   :rock-ground             (tiles/display-tile \"rocks_in_ground.png\")\n   :placeholder             (tiles/display-tile \"placeholder.png\")\n   :stone-wall              (tiles/display-tile \"stone_wall.png\")\n   :top-stone-wall          (tiles/display-tile \"top_stone_wall.png\")\n   :left-top-stone-wall     (tiles/display-tile \"left_top_stone_wall.png\")\n   :right-top-stone-wall    (tiles/display-tile \"right_top_stone_wall.png\")\n   :right-side-stone-wall   (tiles/display-tile \"right_side_stone_wall.png\")\n   :left-side-stone-wall    (tiles/display-tile \"left_side_stone_wall.png\")\n   :left-bottom-stone-wall  (tiles/display-tile \"left_bottom_stone_wall.png\")\n   :right-bottom-stone-wall (tiles/display-tile \"right_bottom_stone_wall.png\")\n   :bottom-top-stone-wall   (tiles/display-tile \"bottom_top_stone_wall.png\")\n   })\n(defonce map-data (r/atom nil))\n\n(defn load-map! []\n  (-> (js/fetch \"/assets/map.json\")\n      (.then #(.json %))\n      (.then #(reset! map-data (js->clj % :keywordize-keys true)))\n      (.catch #(js/console.error \"Failed to load map:\" %))))\n\n(defn calc-map-dimensions [{:keys [tileSize layers]} tile-scale]\n  (let [height-in-tiles (apply max (mapcat (fn [layer] (map :y (:tiles layer))) layers))\n        width-in-tiles (apply max (mapcat (fn [layer] (map :x (:tiles layer))) layers))\n        map-height (* (inc height-in-tiles) tileSize tile-scale)\n        map-width (* (inc width-in-tiles) tileSize tile-scale)]\n    {:map-height map-height :map-width map-width}))\n\n\n(defn setup-drag-handlers! [container screen-width screen-height map-width map-height]\n  (let [dragging (r/atom false)\n        offset (r/atom {:x 0 :y 0})]\n    (.on container \"pointerdown\"\n         (fn [event]\n           (reset! dragging true)\n           (let [pos (.-global (.-data event))]\n             (reset! offset {:x (- (.-x pos) (.-x container))\n                             :y (- (.-y pos) (.-y container))}))))\n    (.on container \"pointerup\" #(reset! dragging false))\n    (.on container \"pointerupoutside\" #(reset! dragging false))\n    (.on container \"pointermove\"\n         (fn [event]\n           (when @dragging\n             (let [pos (.-global (.-data event))\n                   new-x (Math/floor (- (.-x pos) (:x @offset)))\n                   new-y (Math/floor (- (.-y pos) (:y @offset)))\n                   clamped-x (max (min 0 new-x) (- screen-width map-width))\n                   clamped-y (max (min 0 new-y) (- screen-height map-height))]\n               (set! (.-x container) clamped-x)\n               (set! (.-y container) clamped-y)))))\n    (set! (.-eventMode container) \"dynamic\")))\n\n(defn create-sprite [texture id x y tileSize tile-scale]\n  (let [cols 8\n        tile-w tileSize\n        tile-h tileSize\n        frame-x (* (mod id cols) tile-w)\n        frame-y (* (Math/floor (/ id cols)) tile-h)\n        frame (Rectangle. frame-x frame-y tile-w tile-h)\n        tile-texture (Texture. texture frame)\n        sprite (Sprite. tile-texture)]\n    (set! (.-x sprite) (* x tile-w tile-scale))\n    (set! (.-y sprite) (* y tile-h tile-scale))\n    (set! (.-scale.x sprite) tile-scale)\n    (set! (.-scale.y sprite) tile-scale)\n    sprite))\n\n(defn populate-map-container! [map-container layers texture tileSize tile-scale]\n  (doseq [{:keys [tiles]} layers\n          {:keys [id x y]} tiles]\n    (let [sprite (create-sprite texture id x y tileSize tile-scale)]\n      (.addChild ^js map-container sprite))))\n\n(defn render-tilemap [app]\n  (let [{:keys [tileSize layers]} @map-data\n        tile-scale 2.5\n        map-dimensions (calc-map-dimensions @map-data tile-scale)\n        screen-width (.-width (.-renderer app))\n        screen-height (.-height (.-renderer app))\n        initial-x 0\n        initial-y (- screen-height (- (:map-height map-dimensions) 100))\n        map-container (Container.)]\n    (-> (.load Assets \"/assets/spritesheet.png\")\n        (.then\n          (fn [_]\n            (let [texture (Texture.from \"/assets/spritesheet.png\")]\n              (set! (.-scaleMode (.-baseTexture texture)) SCALE_MODES.NEAREST)\n              (set! (.-x map-container) initial-x)\n              (set! (.-y map-container) initial-y)\n              (.addChild ^js (.-stage app) map-container)\n              (setup-drag-handlers! map-container screen-width screen-height (:map-width map-dimensions) (:map-height map-dimensions))\n              (populate-map-container! map-container layers texture tileSize tile-scale)))))))\n\n\n(defn display-battlefield []\n  (let [container (r/atom nil)\n        canvas-div (r/atom nil)\n        on-resize (r/atom nil)]\n    (r/create-class\n      {:component-did-mount\n       (fn []\n         (load-map!)\n         (let [resize-handler\n               (fn []\n                 (when-let [app @container]\n                   (.resize (.-renderer app) (.-innerWidth js/window) (.-innerHeight js/window))))]\n           (reset! on-resize resize-handler)\n           (.addEventListener js/window \"resize\" resize-handler)))\n\n       :component-will-unmount\n       (fn []\n         (when @on-resize\n           (.removeEventListener js/window \"resize\" @on-resize)))\n\n       :component-did-update\n       (fn []\n         (when (and (nil? @container) @map-data @canvas-div)\n           (let [app (Application. (clj->js {:width (.-innerWidth js/window) :height (.-innerHeight js/window)}))]\n             (reset! container app)\n             (.appendChild @canvas-div (.-view app))\n             (render-tilemap app))))\n\n       :reagent-render\n       (fn []\n         [:div\n          [:div {:ref #(reset! canvas-div %)}]\n          (when-not @map-data\n            [:p \"Loading-map...\"])])})))"]}