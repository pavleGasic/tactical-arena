{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$PinLightBlend.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,sEAAA,GAA2F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG/HC,QAAAA,GAAaH,OAAA,CAAQ,2DAAR,CAAbG;AACAC,SAAAA,GAAkBJ,OAAA,CAAQ,yEAAR,CAAlBI;AAEJ,cAAA;AACA,OAAMC,cAAN,QAA4BD,QAAgBA,CAAAA,eAA5C;AACEE,eAAW,EAAG;AACZ,WAAA,CAAM,CACJC,GAAI,CACFC,UAAY,ynBADV;AAkBFC,WAAO,+HAlBL,CADA,EAuBJC,IAAK,CACHF,UAAY,krBADT;AAkBHC,WAAO,iJAlBJ,CAvBD,CAAN,CAAA;AADY;AADhB;AAmDAJ,eAAcM,CAAAA,SAAd,GAA0B,CACxBC,KAAM,WADkB,EAExBC,KAAMV,MAAWW,CAAAA,aAAcC,CAAAA,SAFP,CAA1B;AAKAb,SAAQG,CAAAA,aAAR,GAAwBA,aAAxB;AA/DmI,CAAnI;;",
"sources":["node_modules/pixi_DOT_js/lib/advanced-blend-modes/PinLightBlend.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$advanced_blend_modes$PinLightBlend\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../extensions/Extensions.js');\nvar BlendModeFilter = require('../filters/blend-modes/BlendModeFilter.js');\n\n\"use strict\";\nclass PinLightBlend extends BlendModeFilter.BlendModeFilter {\n  constructor() {\n    super({\n      gl: {\n        functions: `\n                float pinLight(float base, float blend)\n                {\n                    return (blend <= 0.5) ? min(base, 2.0 * blend) : max(base, 2.0 * (blend - 0.5));\n                }\n\n                vec3 blendPinLight(vec3 base, vec3 blend, float opacity)\n                {\n                    vec3 blended = vec3(\n                        pinLight(base.r, blend.r),\n                        pinLight(base.g, blend.g),\n                        pinLight(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n            `,\n        main: `\n                finalColor = vec4(blendPinLight(back.rgb, front.rgb, front.a), blendedAlpha) * uBlend;\n                `\n      },\n      gpu: {\n        functions: `\n                fn pinLight(base: f32, blend: f32) -> f32\n                {\n                    return select(max(base,2.0*(blend-0.5)), min(base,2.0*blend), blend <= 0.5);\n                }\n\n                fn blendPinLight(base:vec3<f32>,  blend:vec3<f32>,  opacity:f32) -> vec3<f32>\n                {\n                    let blended = vec3<f32>(\n                        pinLight(base.r, blend.r),\n                        pinLight(base.g, blend.g),\n                        pinLight(base.b, blend.b)\n                    );\n\n                    return (blended * opacity + base * (1.0 - opacity));\n                }\n                `,\n        main: `\n                out = vec4<f32>(blendPinLight(back.rgb, front.rgb, front.a), blendedAlpha) * blendUniforms.uBlend;\n                `\n      }\n    });\n  }\n}\n/** @ignore */\nPinLightBlend.extension = {\n  name: \"pin-light\",\n  type: Extensions.ExtensionType.BlendMode\n};\n\nexports.PinLightBlend = PinLightBlend;\n//# sourceMappingURL=PinLightBlend.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","BlendModeFilter","PinLightBlend","constructor","gl","functions","main","gpu","extension","name","type","ExtensionType","BlendMode"]
}
