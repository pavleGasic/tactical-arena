shadow$provide.module$node_modules$$pixi$text_bitmap$lib$formats$XMLFormat = function(global, require, module, exports) {
  var BitmapFontData = require("module$node_modules$$pixi$text_bitmap$lib$BitmapFontData");
  class XMLFormat {
    static test(data) {
      return "string" != typeof data && "getElementsByTagName" in data && data.getElementsByTagName("page").length && null !== data.getElementsByTagName("info")[0].getAttribute("face");
    }
    static parse(xml) {
      const data = new BitmapFontData.BitmapFontData();
      var info = xml.getElementsByTagName("info"), common = xml.getElementsByTagName("common"), page = xml.getElementsByTagName("page"), char = xml.getElementsByTagName("char"), kerning = xml.getElementsByTagName("kerning");
      xml = xml.getElementsByTagName("distanceField");
      for (let i = 0; i < info.length; i++) {
        data.info.push({face:info[i].getAttribute("face"), size:parseInt(info[i].getAttribute("size"), 10)});
      }
      for (info = 0; info < common.length; info++) {
        data.common.push({lineHeight:parseInt(common[info].getAttribute("lineHeight"), 10)});
      }
      for (common = 0; common < page.length; common++) {
        data.page.push({id:parseInt(page[common].getAttribute("id"), 10) || 0, file:page[common].getAttribute("file")});
      }
      for (page = 0; page < char.length; page++) {
        common = char[page], data.char.push({id:parseInt(common.getAttribute("id"), 10), page:parseInt(common.getAttribute("page"), 10) || 0, x:parseInt(common.getAttribute("x"), 10), y:parseInt(common.getAttribute("y"), 10), width:parseInt(common.getAttribute("width"), 10), height:parseInt(common.getAttribute("height"), 10), xoffset:parseInt(common.getAttribute("xoffset"), 10), yoffset:parseInt(common.getAttribute("yoffset"), 10), xadvance:parseInt(common.getAttribute("xadvance"), 10)});
      }
      for (char = 0; char < kerning.length; char++) {
        data.kerning.push({first:parseInt(kerning[char].getAttribute("first"), 10), second:parseInt(kerning[char].getAttribute("second"), 10), amount:parseInt(kerning[char].getAttribute("amount"), 10)});
      }
      for (kerning = 0; kerning < xml.length; kerning++) {
        data.distanceField.push({fieldType:xml[kerning].getAttribute("fieldType"), distanceRange:parseInt(xml[kerning].getAttribute("distanceRange"), 10)});
      }
      return data;
    }
  }
  exports.XMLFormat = XMLFormat;
};

//# sourceMappingURL=module$node_modules$$pixi$text_bitmap$lib$formats$XMLFormat.js.map
