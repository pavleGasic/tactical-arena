shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$index = function(global, require, module, exports) {
  var GlBatchAdaptor = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$gl$GlBatchAdaptor"), checkMaxIfStatementsInShader = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$gl$utils$checkMaxIfStatementsInShader"), maxRecommendedTextures = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$gl$utils$maxRecommendedTextures"), generateGPULayout = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$gpu$generateGPULayout"), generateLayout = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$gpu$generateLayout"), 
  getTextureBatchBindGroup = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$gpu$getTextureBatchBindGroup"), GpuBatchAdaptor = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$gpu$GpuBatchAdaptor"), Batcher = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$Batcher"), BatcherPipe = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$BatcherPipe"), BatchGeometry = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$BatchGeometry"), 
  BatchTextureArray = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$BatchTextureArray"), DefaultBatcher = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$DefaultBatcher"), DefaultShader = require("module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$DefaultShader"), compileHighShaderToProgram = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compileHighShaderToProgram"), compileHighShader = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$compileHighShader");
  require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$types");
  var addBits = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$utils$addBits"), compileHooks = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$utils$compileHooks"), compileInputs = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$utils$compileInputs"), compileOutputs = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$utils$compileOutputs"), formatShader = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$utils$formatShader"), 
  injectBits = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$compiler$utils$injectBits"), defaultProgramTemplate = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$defaultProgramTemplate"), colorBit = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$shader_bits$colorBit"), generateTextureBatchBit = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$shader_bits$generateTextureBatchBit"), globalUniformsBit = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$shader_bits$globalUniformsBit"), 
  localUniformBit = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$shader_bits$localUniformBit"), roundPixelsBit = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$shader_bits$roundPixelsBit"), textureBit = require("module$node_modules$pixi_DOT_js$lib$rendering$high_shader$shader_bits$textureBit"), AlphaMask = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$alpha$AlphaMask"), AlphaMaskPipe = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$alpha$AlphaMaskPipe"), 
  ColorMask = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$color$ColorMask"), ColorMaskPipe = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$color$ColorMaskPipe"), MaskEffectManager = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$MaskEffectManager"), ScissorMask = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$scissor$ScissorMask"), StencilMask = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$stencil$StencilMask"), StencilMaskPipe = 
  require("module$node_modules$pixi_DOT_js$lib$rendering$mask$stencil$StencilMaskPipe"), addMaskBounds = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$utils$addMaskBounds"), addMaskLocalBounds = require("module$node_modules$pixi_DOT_js$lib$rendering$mask$utils$addMaskLocalBounds"), autoDetectRenderer = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$autoDetectRenderer"), _const = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$buffer$const"), GlBuffer = 
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$buffer$GlBuffer"), GlBufferSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$buffer$GlBufferSystem"), _const$1 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$const"), GlContextSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$context$GlContextSystem");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$context$GlRenderingContext");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$context$WebGLExtensions");
  var GlGeometrySystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$geometry$GlGeometrySystem"), getGlTypeFromFormat = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$geometry$utils$getGlTypeFromFormat"), GlBackBufferSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlBackBufferSystem"), GlColorMaskSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlColorMaskSystem"), GlEncoderSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlEncoderSystem"), 
  GlRenderTarget = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlRenderTarget"), GlStencilSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlStencilSystem"), GlUboSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$GlUboSystem"), GlRenderTargetAdaptor = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$renderTarget$GlRenderTargetAdaptor"), GlRenderTargetSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$renderTarget$GlRenderTargetSystem");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$const");
  var GenerateShaderSyncCode = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GenerateShaderSyncCode"), getBatchSamplersUniformGroup = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$getBatchSamplersUniformGroup"), GlProgram = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlProgram"), GlProgramData = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlProgramData"), GlShaderSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlShaderSystem"), 
  GlUniformGroupSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$GlUniformGroupSystem"), migrateFragmentFromV7toV8 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$migrateFragmentFromV7toV8"), compileShader = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$compileShader"), defaultValue = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$defaultValue"), ensureAttributes = 
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$ensureAttributes"), extractAttributesFromGlProgram = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$extractAttributesFromGlProgram"), generateProgram = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$generateProgram"), getMaxFragmentPrecision = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$getMaxFragmentPrecision"), 
  getTestContext = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$getTestContext"), getUboData = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$getUboData"), getUniformData = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$getUniformData"), logProgramError = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$logProgramError"), mapSize = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$mapSize"), 
  mapType = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$mapType"), addProgramDefines = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$preprocessors$addProgramDefines"), ensurePrecision = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$preprocessors$ensurePrecision"), insertVersion = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$preprocessors$insertVersion"), 
  setProgramName = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$preprocessors$setProgramName"), stripVersion = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$program$preprocessors$stripVersion"), createUboElementsSTD40 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$utils$createUboElementsSTD40"), createUboSyncSTD40 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$utils$createUboSyncSTD40"), 
  generateArraySyncSTD40 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$utils$generateArraySyncSTD40"), generateUniformsSync = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$utils$generateUniformsSync"), generateUniformsSyncTypes = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$shader$utils$generateUniformsSyncTypes"), GlStateSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$state$GlStateSystem"), 
  mapWebGLBlendModesToPixi = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$state$mapWebGLBlendModesToPixi"), _const$2 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$const"), GlTexture = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$GlTexture"), GlTextureSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$GlTextureSystem");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$uploaders$GLTextureUploader");
  var glUploadBufferImageResource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$uploaders$glUploadBufferImageResource"), glUploadCompressedTextureResource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$uploaders$glUploadCompressedTextureResource"), glUploadImageResource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$uploaders$glUploadImageResource"), glUploadVideoResource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$uploaders$glUploadVideoResource"), 
  applyStyleParams = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$utils$applyStyleParams"), getSupportedGlCompressedTextureFormats = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$utils$getSupportedGlCompressedTextureFormats"), mapFormatToGlFormat = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$utils$mapFormatToGlFormat"), mapFormatToGlInternalFormat = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$utils$mapFormatToGlInternalFormat"), 
  mapFormatToGlType = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$utils$mapFormatToGlType"), pixiToGlMaps = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$utils$pixiToGlMaps"), unpremultiplyAlpha = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$texture$utils$unpremultiplyAlpha"), WebGLRenderer = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gl$WebGLRenderer"), BindGroupSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$BindGroupSystem"), 
  GpuBufferSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$GpuBufferSystem"), GpuReadBuffer = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$GpuReadBuffer"), UboBatch = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$buffer$UboBatch"), GpuColorMaskSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuColorMaskSystem"), GpuDeviceSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuDeviceSystem"), 
  GpuEncoderSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuEncoderSystem"), GpuStencilSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuStencilSystem"), GpuUboSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuUboSystem"), GpuUniformBatchPipe = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$GpuUniformBatchPipe"), PipelineSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$pipeline$PipelineSystem"), 
  calculateProjection = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$renderTarget$calculateProjection"), GpuRenderTarget = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$renderTarget$GpuRenderTarget"), GpuRenderTargetAdaptor = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$renderTarget$GpuRenderTargetAdaptor"), GpuRenderTargetSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$renderTarget$GpuRenderTargetSystem"), 
  BindGroup = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$BindGroup");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$BindResource");
  var GpuProgram = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$GpuProgram"), GpuShaderSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$GpuShaderSystem"), createUboElementsWGSL = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$createUboElementsWGSL"), createUboSyncFunctionWGSL = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$createUboSyncFunctionWGSL"), extractAttributesFromGpuProgram = 
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$extractAttributesFromGpuProgram"), extractStructAndGroups = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$extractStructAndGroups"), generateArraySyncWGSL = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$generateArraySyncWGSL"), generateGpuLayoutGroups = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$generateGpuLayoutGroups"), 
  generateLayoutHash = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$generateLayoutHash"), removeStructAndGroupDuplicates = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$removeStructAndGroupDuplicates"), GpuBlendModesToPixi = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$state$GpuBlendModesToPixi"), GpuStateSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$state$GpuStateSystem"), 
  GpuStencilModesToPixi = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$state$GpuStencilModesToPixi"), GpuTextureSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$GpuTextureSystem");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$uploaders$GpuTextureUploader");
  var gpuUploadBufferImageResource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$uploaders$gpuUploadBufferImageResource"), gpuUploadCompressedTextureResource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$uploaders$gpuUploadCompressedTextureResource"), gpuUploadImageSource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$uploaders$gpuUploadImageSource"), gpuUploadVideoSource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$uploaders$gpuUploadVideoSource"), 
  getSupportedGPUCompressedTextureFormats = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$utils$getSupportedGPUCompressedTextureFormats"), GpuMipmapGenerator = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$utils$GpuMipmapGenerator"), WebGPURenderer = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$WebGPURenderer"), BackgroundSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$background$BackgroundSystem"), 
  BlendModePipe = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$blendModes$BlendModePipe"), Buffer = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$Buffer"), BufferResource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$BufferResource"), _const$3 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$const"), fastCopy = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$utils$fastCopy"), 
  ExtractSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$extract$ExtractSystem"), GenerateTextureSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$extract$GenerateTextureSystem"), _const$4 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$const"), Geometry = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$Geometry"), buildUvs = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$utils$buildUvs"), 
  ensureIsBuffer = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$utils$ensureIsBuffer"), getAttributeInfoFromFormat = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$utils$getAttributeInfoFromFormat"), getGeometryBounds = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$utils$getGeometryBounds"), transformVertices = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$geometry$utils$transformVertices");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$instructions$Instruction");
  var InstructionSet = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$instructions$InstructionSet");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$instructions$RenderPipe");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$Renderable");
  var GlobalUniformSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$renderTarget$GlobalUniformSystem"), isRenderingToScreen = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$renderTarget$isRenderingToScreen"), RenderTarget = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$renderTarget$RenderTarget"), RenderTargetSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$renderTarget$RenderTargetSystem"), 
  viewportFromFrame = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$renderTarget$viewportFromFrame"), SchedulerSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$SchedulerSystem"), _const$5 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$const"), Shader = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$Shader");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$ShaderSystem");
  var types = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$types"), UboSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$UboSystem"), UniformGroup = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$UniformGroup"), createUboSyncFunction = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$utils$createUboSyncFunction"), getDefaultUniformValue = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$utils$getDefaultUniformValue"), 
  uboSyncFunctions = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$utils$uboSyncFunctions"), uniformParsers = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$utils$uniformParsers"), HelloSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$startup$HelloSystem"), _const$6 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$const"), getAdjustedBlendModeBlend = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$getAdjustedBlendModeBlend"), 
  State = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$state$State"), AbstractRenderer = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$system$AbstractRenderer"), SharedSystems = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$system$SharedSystems");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$system$System");
  var SystemRunner = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$system$SystemRunner");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$system$utils$typeUtils");
  var CanvasPool = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$CanvasPool"), _const$7 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$const");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$GenerateCanvas");
  var RenderableGCSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$RenderableGCSystem"), RenderTexture = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$RenderTexture"), BufferImageSource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$BufferImageSource"), CanvasSource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$CanvasSource"), CompressedSource = 
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$CompressedSource"), ImageSource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$ImageSource"), TextureSource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$TextureSource"), VideoSource = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$VideoSource"), Texture = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$Texture"), 
  TextureGCSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureGCSystem"), TextureMatrix = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureMatrix"), TexturePool = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TexturePool"), TextureStyle = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureStyle"), TextureUvs = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$TextureUvs"), 
  generateUID = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$generateUID"), getCanvasTexture = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getCanvasTexture"), getSupportedCompressedTextureFormats = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getSupportedCompressedTextureFormats"), getSupportedTextureFormats = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getSupportedTextureFormats"), 
  textureFrom = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$textureFrom"), createIdFromString = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$utils$createIdFromString"), parseFunctionBody = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$utils$parseFunctionBody");
  require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$view$View");
  var ViewSystem = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$view$ViewSystem"), types$1 = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$types");
  "use strict";
  exports.GlBatchAdaptor = GlBatchAdaptor.GlBatchAdaptor;
  exports.checkMaxIfStatementsInShader = checkMaxIfStatementsInShader.checkMaxIfStatementsInShader;
  exports.getMaxTexturesPerBatch = maxRecommendedTextures.getMaxTexturesPerBatch;
  exports.generateGPULayout = generateGPULayout.generateGPULayout;
  exports.generateLayout = generateLayout.generateLayout;
  exports.getTextureBatchBindGroup = getTextureBatchBindGroup.getTextureBatchBindGroup;
  exports.GpuBatchAdaptor = GpuBatchAdaptor.GpuBatchAdaptor;
  exports.Batch = Batcher.Batch;
  exports.Batcher = Batcher.Batcher;
  exports.BatcherPipe = BatcherPipe.BatcherPipe;
  exports.BatchGeometry = BatchGeometry.BatchGeometry;
  exports.BatchTextureArray = BatchTextureArray.BatchTextureArray;
  exports.DefaultBatcher = DefaultBatcher.DefaultBatcher;
  exports.DefaultShader = DefaultShader.DefaultShader;
  exports.compileHighShaderGlProgram = compileHighShaderToProgram.compileHighShaderGlProgram;
  exports.compileHighShaderGpuProgram = compileHighShaderToProgram.compileHighShaderGpuProgram;
  exports.compileHighShader = compileHighShader.compileHighShader;
  exports.compileHighShaderGl = compileHighShader.compileHighShaderGl;
  exports.addBits = addBits.addBits;
  exports.compileHooks = compileHooks.compileHooks;
  exports.findHooksRx = compileHooks.findHooksRx;
  exports.compileInputs = compileInputs.compileInputs;
  exports.compileOutputs = compileOutputs.compileOutputs;
  exports.formatShader = formatShader.formatShader;
  exports.injectBits = injectBits.injectBits;
  exports.fragmentGPUTemplate = defaultProgramTemplate.fragmentGPUTemplate;
  exports.fragmentGlTemplate = defaultProgramTemplate.fragmentGlTemplate;
  exports.vertexGPUTemplate = defaultProgramTemplate.vertexGPUTemplate;
  exports.vertexGlTemplate = defaultProgramTemplate.vertexGlTemplate;
  exports.colorBit = colorBit.colorBit;
  exports.colorBitGl = colorBit.colorBitGl;
  exports.generateTextureBatchBit = generateTextureBatchBit.generateTextureBatchBit;
  exports.generateTextureBatchBitGl = generateTextureBatchBit.generateTextureBatchBitGl;
  exports.globalUniformsBit = globalUniformsBit.globalUniformsBit;
  exports.globalUniformsBitGl = globalUniformsBit.globalUniformsBitGl;
  exports.globalUniformsUBOBitGl = globalUniformsBit.globalUniformsUBOBitGl;
  exports.localUniformBit = localUniformBit.localUniformBit;
  exports.localUniformBitGl = localUniformBit.localUniformBitGl;
  exports.localUniformBitGroup2 = localUniformBit.localUniformBitGroup2;
  exports.roundPixelsBit = roundPixelsBit.roundPixelsBit;
  exports.roundPixelsBitGl = roundPixelsBit.roundPixelsBitGl;
  exports.textureBit = textureBit.textureBit;
  exports.textureBitGl = textureBit.textureBitGl;
  exports.AlphaMask = AlphaMask.AlphaMask;
  exports.AlphaMaskPipe = AlphaMaskPipe.AlphaMaskPipe;
  exports.ColorMask = ColorMask.ColorMask;
  exports.ColorMaskPipe = ColorMaskPipe.ColorMaskPipe;
  exports.MaskEffectManager = MaskEffectManager.MaskEffectManager;
  exports.MaskEffectManagerClass = MaskEffectManager.MaskEffectManagerClass;
  exports.ScissorMask = ScissorMask.ScissorMask;
  exports.StencilMask = StencilMask.StencilMask;
  exports.StencilMaskPipe = StencilMaskPipe.StencilMaskPipe;
  exports.addMaskBounds = addMaskBounds.addMaskBounds;
  exports.addMaskLocalBounds = addMaskLocalBounds.addMaskLocalBounds;
  exports.getMatrixRelativeToParent = addMaskLocalBounds.getMatrixRelativeToParent;
  exports.autoDetectRenderer = autoDetectRenderer.autoDetectRenderer;
  exports.BUFFER_TYPE = _const.BUFFER_TYPE;
  exports.GlBuffer = GlBuffer.GlBuffer;
  exports.GlBufferSystem = GlBufferSystem.GlBufferSystem;
  exports.CLEAR = _const$1.CLEAR;
  exports.GlContextSystem = GlContextSystem.GlContextSystem;
  exports.GlGeometrySystem = GlGeometrySystem.GlGeometrySystem;
  exports.getGlTypeFromFormat = getGlTypeFromFormat.getGlTypeFromFormat;
  exports.GlBackBufferSystem = GlBackBufferSystem.GlBackBufferSystem;
  exports.GlColorMaskSystem = GlColorMaskSystem.GlColorMaskSystem;
  exports.GlEncoderSystem = GlEncoderSystem.GlEncoderSystem;
  exports.GlRenderTarget = GlRenderTarget.GlRenderTarget;
  exports.GlStencilSystem = GlStencilSystem.GlStencilSystem;
  exports.GlUboSystem = GlUboSystem.GlUboSystem;
  exports.GlRenderTargetAdaptor = GlRenderTargetAdaptor.GlRenderTargetAdaptor;
  exports.GlRenderTargetSystem = GlRenderTargetSystem.GlRenderTargetSystem;
  exports.generateShaderSyncCode = GenerateShaderSyncCode.generateShaderSyncCode;
  exports.getBatchSamplersUniformGroup = getBatchSamplersUniformGroup.getBatchSamplersUniformGroup;
  exports.GlProgram = GlProgram.GlProgram;
  exports.GlProgramData = GlProgramData.GlProgramData;
  exports.IGLUniformData = GlProgramData.IGLUniformData;
  exports.GlShaderSystem = GlShaderSystem.GlShaderSystem;
  exports.GlUniformGroupSystem = GlUniformGroupSystem.GlUniformGroupSystem;
  exports.migrateFragmentFromV7toV8 = migrateFragmentFromV7toV8.migrateFragmentFromV7toV8;
  exports.compileShader = compileShader.compileShader;
  exports.defaultValue = defaultValue.defaultValue;
  exports.ensureAttributes = ensureAttributes.ensureAttributes;
  exports.extractAttributesFromGlProgram = extractAttributesFromGlProgram.extractAttributesFromGlProgram;
  exports.generateProgram = generateProgram.generateProgram;
  exports.getMaxFragmentPrecision = getMaxFragmentPrecision.getMaxFragmentPrecision;
  exports.getTestContext = getTestContext.getTestContext;
  exports.getUboData = getUboData.getUboData;
  exports.getUniformData = getUniformData.getUniformData;
  exports.logProgramError = logProgramError.logProgramError;
  exports.mapSize = mapSize.mapSize;
  exports.mapGlToVertexFormat = mapType.mapGlToVertexFormat;
  exports.mapType = mapType.mapType;
  exports.addProgramDefines = addProgramDefines.addProgramDefines;
  exports.ensurePrecision = ensurePrecision.ensurePrecision;
  exports.insertVersion = insertVersion.insertVersion;
  exports.setProgramName = setProgramName.setProgramName;
  exports.stripVersion = stripVersion.stripVersion;
  exports.WGSL_TO_STD40_SIZE = createUboElementsSTD40.WGSL_TO_STD40_SIZE;
  exports.createUboElementsSTD40 = createUboElementsSTD40.createUboElementsSTD40;
  exports.createUboSyncFunctionSTD40 = createUboSyncSTD40.createUboSyncFunctionSTD40;
  exports.generateArraySyncSTD40 = generateArraySyncSTD40.generateArraySyncSTD40;
  exports.generateUniformsSync = generateUniformsSync.generateUniformsSync;
  exports.UNIFORM_TO_ARRAY_SETTERS = generateUniformsSyncTypes.UNIFORM_TO_ARRAY_SETTERS;
  exports.UNIFORM_TO_SINGLE_SETTERS = generateUniformsSyncTypes.UNIFORM_TO_SINGLE_SETTERS;
  exports.GlStateSystem = GlStateSystem.GlStateSystem;
  exports.mapWebGLBlendModesToPixi = mapWebGLBlendModesToPixi.mapWebGLBlendModesToPixi;
  exports.GL_FORMATS = _const$2.GL_FORMATS;
  exports.GL_TARGETS = _const$2.GL_TARGETS;
  exports.GL_TYPES = _const$2.GL_TYPES;
  exports.GL_WRAP_MODES = _const$2.GL_WRAP_MODES;
  exports.GlTexture = GlTexture.GlTexture;
  exports.GlTextureSystem = GlTextureSystem.GlTextureSystem;
  exports.glUploadBufferImageResource = glUploadBufferImageResource.glUploadBufferImageResource;
  exports.glUploadCompressedTextureResource = glUploadCompressedTextureResource.glUploadCompressedTextureResource;
  exports.glUploadImageResource = glUploadImageResource.glUploadImageResource;
  exports.glUploadVideoResource = glUploadVideoResource.glUploadVideoResource;
  exports.applyStyleParams = applyStyleParams.applyStyleParams;
  exports.getSupportedGlCompressedTextureFormats = getSupportedGlCompressedTextureFormats.getSupportedGlCompressedTextureFormats;
  exports.mapFormatToGlFormat = mapFormatToGlFormat.mapFormatToGlFormat;
  exports.mapFormatToGlInternalFormat = mapFormatToGlInternalFormat.mapFormatToGlInternalFormat;
  exports.mapFormatToGlType = mapFormatToGlType.mapFormatToGlType;
  exports.compareModeToGlCompare = pixiToGlMaps.compareModeToGlCompare;
  exports.mipmapScaleModeToGlFilter = pixiToGlMaps.mipmapScaleModeToGlFilter;
  exports.scaleModeToGlFilter = pixiToGlMaps.scaleModeToGlFilter;
  exports.wrapModeToGlAddress = pixiToGlMaps.wrapModeToGlAddress;
  exports.unpremultiplyAlpha = unpremultiplyAlpha.unpremultiplyAlpha;
  exports.WebGLRenderer = WebGLRenderer.WebGLRenderer;
  exports.BindGroupSystem = BindGroupSystem.BindGroupSystem;
  exports.GpuBufferSystem = GpuBufferSystem.GpuBufferSystem;
  exports.GpuReadBuffer = GpuReadBuffer.GpuReadBuffer;
  exports.UboBatch = UboBatch.UboBatch;
  exports.GpuColorMaskSystem = GpuColorMaskSystem.GpuColorMaskSystem;
  exports.GpuDeviceSystem = GpuDeviceSystem.GpuDeviceSystem;
  exports.GpuEncoderSystem = GpuEncoderSystem.GpuEncoderSystem;
  exports.GpuStencilSystem = GpuStencilSystem.GpuStencilSystem;
  exports.GpuUboSystem = GpuUboSystem.GpuUboSystem;
  exports.GpuUniformBatchPipe = GpuUniformBatchPipe.GpuUniformBatchPipe;
  exports.PipelineSystem = PipelineSystem.PipelineSystem;
  exports.calculateProjection = calculateProjection.calculateProjection;
  exports.GpuRenderTarget = GpuRenderTarget.GpuRenderTarget;
  exports.GpuRenderTargetAdaptor = GpuRenderTargetAdaptor.GpuRenderTargetAdaptor;
  exports.GpuRenderTargetSystem = GpuRenderTargetSystem.GpuRenderTargetSystem;
  exports.BindGroup = BindGroup.BindGroup;
  exports.GpuProgram = GpuProgram.GpuProgram;
  exports.GpuShaderSystem = GpuShaderSystem.GpuShaderSystem;
  exports.WGSL_ALIGN_SIZE_DATA = createUboElementsWGSL.WGSL_ALIGN_SIZE_DATA;
  exports.createUboElementsWGSL = createUboElementsWGSL.createUboElementsWGSL;
  exports.createUboSyncFunctionWGSL = createUboSyncFunctionWGSL.createUboSyncFunctionWGSL;
  exports.extractAttributesFromGpuProgram = extractAttributesFromGpuProgram.extractAttributesFromGpuProgram;
  exports.extractStructAndGroups = extractStructAndGroups.extractStructAndGroups;
  exports.generateArraySyncWGSL = generateArraySyncWGSL.generateArraySyncWGSL;
  exports.generateGpuLayoutGroups = generateGpuLayoutGroups.generateGpuLayoutGroups;
  exports.generateLayoutHash = generateLayoutHash.generateLayoutHash;
  exports.removeStructAndGroupDuplicates = removeStructAndGroupDuplicates.removeStructAndGroupDuplicates;
  exports.GpuBlendModesToPixi = GpuBlendModesToPixi.GpuBlendModesToPixi;
  exports.GpuStateSystem = GpuStateSystem.GpuStateSystem;
  exports.GpuStencilModesToPixi = GpuStencilModesToPixi.GpuStencilModesToPixi;
  exports.GpuTextureSystem = GpuTextureSystem.GpuTextureSystem;
  exports.gpuUploadBufferImageResource = gpuUploadBufferImageResource.gpuUploadBufferImageResource;
  exports.blockDataMap = gpuUploadCompressedTextureResource.blockDataMap;
  exports.gpuUploadCompressedTextureResource = gpuUploadCompressedTextureResource.gpuUploadCompressedTextureResource;
  exports.gpuUploadImageResource = gpuUploadImageSource.gpuUploadImageResource;
  exports.gpuUploadVideoResource = gpuUploadVideoSource.gpuUploadVideoResource;
  exports.getSupportedGPUCompressedTextureFormats = getSupportedGPUCompressedTextureFormats.getSupportedGPUCompressedTextureFormats;
  exports.GpuMipmapGenerator = GpuMipmapGenerator.GpuMipmapGenerator;
  exports.WebGPURenderer = WebGPURenderer.WebGPURenderer;
  exports.BackgroundSystem = BackgroundSystem.BackgroundSystem;
  exports.BlendModePipe = BlendModePipe.BlendModePipe;
  exports.Buffer = Buffer.Buffer;
  exports.BufferResource = BufferResource.BufferResource;
  exports.BufferUsage = _const$3.BufferUsage;
  exports.fastCopy = fastCopy.fastCopy;
  exports.ExtractSystem = ExtractSystem.ExtractSystem;
  exports.GenerateTextureSystem = GenerateTextureSystem.GenerateTextureSystem;
  exports.DRAW_MODES = _const$4.DRAW_MODES;
  exports.Geometry = Geometry.Geometry;
  exports.buildSimpleUvs = buildUvs.buildSimpleUvs;
  exports.buildUvs = buildUvs.buildUvs;
  exports.ensureIsBuffer = ensureIsBuffer.ensureIsBuffer;
  exports.getAttributeInfoFromFormat = getAttributeInfoFromFormat.getAttributeInfoFromFormat;
  exports.getGeometryBounds = getGeometryBounds.getGeometryBounds;
  exports.transformVertices = transformVertices.transformVertices;
  exports.InstructionSet = InstructionSet.InstructionSet;
  exports.GlobalUniformSystem = GlobalUniformSystem.GlobalUniformSystem;
  exports.isRenderingToScreen = isRenderingToScreen.isRenderingToScreen;
  exports.RenderTarget = RenderTarget.RenderTarget;
  exports.RenderTargetSystem = RenderTargetSystem.RenderTargetSystem;
  exports.viewportFromFrame = viewportFromFrame.viewportFromFrame;
  exports.SchedulerSystem = SchedulerSystem.SchedulerSystem;
  exports.ShaderStage = _const$5.ShaderStage;
  exports.Shader = Shader.Shader;
  exports.UNIFORM_TYPES_MAP = types.UNIFORM_TYPES_MAP;
  exports.UNIFORM_TYPES_VALUES = types.UNIFORM_TYPES_VALUES;
  exports.UboSystem = UboSystem.UboSystem;
  exports.UniformGroup = UniformGroup.UniformGroup;
  exports.createUboSyncFunction = createUboSyncFunction.createUboSyncFunction;
  exports.getDefaultUniformValue = getDefaultUniformValue.getDefaultUniformValue;
  exports.uboSyncFunctionsSTD40 = uboSyncFunctions.uboSyncFunctionsSTD40;
  exports.uboSyncFunctionsWGSL = uboSyncFunctions.uboSyncFunctionsWGSL;
  exports.uniformParsers = uniformParsers.uniformParsers;
  exports.HelloSystem = HelloSystem.HelloSystem;
  exports.BLEND_TO_NPM = _const$6.BLEND_TO_NPM;
  exports.STENCIL_MODES = _const$6.STENCIL_MODES;
  exports.getAdjustedBlendModeBlend = getAdjustedBlendModeBlend.getAdjustedBlendModeBlend;
  exports.State = State.State;
  exports.AbstractRenderer = AbstractRenderer.AbstractRenderer;
  exports.SharedRenderPipes = SharedSystems.SharedRenderPipes;
  exports.SharedSystems = SharedSystems.SharedSystems;
  exports.SystemRunner = SystemRunner.SystemRunner;
  exports.CanvasPool = CanvasPool.CanvasPool;
  exports.CanvasPoolClass = CanvasPool.CanvasPoolClass;
  exports.DEPRECATED_SCALE_MODES = _const$7.DEPRECATED_SCALE_MODES;
  exports.DEPRECATED_WRAP_MODES = _const$7.DEPRECATED_WRAP_MODES;
  exports.MSAA_QUALITY = _const$7.MSAA_QUALITY;
  exports.SCALE_MODES = _const$7.SCALE_MODES;
  exports.WRAP_MODES = _const$7.WRAP_MODES;
  exports.RenderableGCSystem = RenderableGCSystem.RenderableGCSystem;
  exports.RenderTexture = RenderTexture.RenderTexture;
  exports.BufferImageSource = BufferImageSource.BufferImageSource;
  exports.CanvasSource = CanvasSource.CanvasSource;
  exports.CompressedSource = CompressedSource.CompressedSource;
  exports.ImageSource = ImageSource.ImageSource;
  exports.TextureSource = TextureSource.TextureSource;
  exports.VideoSource = VideoSource.VideoSource;
  exports.Texture = Texture.Texture;
  exports.TextureGCSystem = TextureGCSystem.TextureGCSystem;
  exports.TextureMatrix = TextureMatrix.TextureMatrix;
  exports.TexturePool = TexturePool.TexturePool;
  exports.TexturePoolClass = TexturePool.TexturePoolClass;
  exports.TextureStyle = TextureStyle.TextureStyle;
  exports.TextureUvs = TextureUvs.TextureUvs;
  exports.generateUID = generateUID.generateUID;
  exports.getCanvasTexture = getCanvasTexture.getCanvasTexture;
  exports.hasCachedCanvasTexture = getCanvasTexture.hasCachedCanvasTexture;
  exports.getSupportedCompressedTextureFormats = getSupportedCompressedTextureFormats.getSupportedCompressedTextureFormats;
  exports.getSupportedTextureFormats = getSupportedTextureFormats.getSupportedTextureFormats;
  exports.nonCompressedFormats = getSupportedTextureFormats.nonCompressedFormats;
  exports.autoDetectSource = textureFrom.autoDetectSource;
  exports.resourceToTexture = textureFrom.resourceToTexture;
  exports.textureFrom = textureFrom.textureFrom;
  exports.createIdFromString = createIdFromString.createIdFromString;
  exports.parseFunctionBody = parseFunctionBody.parseFunctionBody;
  exports.ViewSystem = ViewSystem.ViewSystem;
  exports.RendererType = types$1.RendererType;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$index.js.map
