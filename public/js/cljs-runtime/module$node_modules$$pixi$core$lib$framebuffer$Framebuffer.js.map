{
"version":3,
"file":"module$node_modules$$pixi$core$lib$framebuffer$Framebuffer.js",
"lineCount":56,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/framebuffer/Framebuffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$framebuffer$Framebuffer\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), runner = require(\"@pixi/runner\"), BaseTexture = require(\"../textures/BaseTexture.js\");\nclass Framebuffer {\n  /**\n   * @param width - Width of the frame buffer\n   * @param height - Height of the frame buffer\n   */\n  constructor(width, height) {\n    if (this.width = Math.round(width), this.height = Math.round(height), !this.width || !this.height)\n      throw new Error(\"Framebuffer width or height is zero\");\n    this.stencil = !1, this.depth = !1, this.dirtyId = 0, this.dirtyFormat = 0, this.dirtySize = 0, this.depthTexture = null, this.colorTextures = [], this.glFramebuffers = {}, this.disposeRunner = new runner.Runner(\"disposeFramebuffer\"), this.multisample = constants.MSAA_QUALITY.NONE;\n  }\n  /**\n   * Reference to the colorTexture.\n   * @readonly\n   */\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  /**\n   * Add texture to the colorTexture array.\n   * @param index - Index of the array to add the texture to\n   * @param texture - Texture to add to the array\n   */\n  addColorTexture(index = 0, texture) {\n    return this.colorTextures[index] = texture || new BaseTexture.BaseTexture(null, {\n      scaleMode: constants.SCALE_MODES.NEAREST,\n      resolution: 1,\n      mipmap: constants.MIPMAP_MODES.OFF,\n      width: this.width,\n      height: this.height\n    }), this.dirtyId++, this.dirtyFormat++, this;\n  }\n  /**\n   * Add a depth texture to the frame buffer.\n   * @param texture - Texture to add.\n   */\n  addDepthTexture(texture) {\n    return this.depthTexture = texture || new BaseTexture.BaseTexture(null, {\n      scaleMode: constants.SCALE_MODES.NEAREST,\n      resolution: 1,\n      width: this.width,\n      height: this.height,\n      mipmap: constants.MIPMAP_MODES.OFF,\n      format: constants.FORMATS.DEPTH_COMPONENT,\n      type: constants.TYPES.UNSIGNED_SHORT\n    }), this.dirtyId++, this.dirtyFormat++, this;\n  }\n  /** Enable depth on the frame buffer. */\n  enableDepth() {\n    return this.depth = !0, this.dirtyId++, this.dirtyFormat++, this;\n  }\n  /** Enable stencil on the frame buffer. */\n  enableStencil() {\n    return this.stencil = !0, this.dirtyId++, this.dirtyFormat++, this;\n  }\n  /**\n   * Resize the frame buffer\n   * @param width - Width of the frame buffer to resize to\n   * @param height - Height of the frame buffer to resize to\n   */\n  resize(width, height) {\n    if (width = Math.round(width), height = Math.round(height), !width || !height)\n      throw new Error(\"Framebuffer width and height must not be zero\");\n    if (!(width === this.width && height === this.height)) {\n      this.width = width, this.height = height, this.dirtyId++, this.dirtySize++;\n      for (let i = 0; i < this.colorTextures.length; i++) {\n        const texture = this.colorTextures[i], resolution = texture.resolution;\n        texture.setSize(width / resolution, height / resolution);\n      }\n      if (this.depthTexture) {\n        const resolution = this.depthTexture.resolution;\n        this.depthTexture.setSize(width / resolution, height / resolution);\n      }\n    }\n  }\n  /** Disposes WebGL resources that are connected to this geometry. */\n  dispose() {\n    this.disposeRunner.emit(this, !1);\n  }\n  /** Destroys and removes the depth texture added to this framebuffer. */\n  destroyDepthTexture() {\n    this.depthTexture && (this.depthTexture.destroy(), this.depthTexture = null, ++this.dirtyId, ++this.dirtyFormat);\n  }\n}\nexports.Framebuffer = Framebuffer;\n//# sourceMappingURL=Framebuffer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","runner","BaseTexture","Framebuffer","constructor","width","height","Math","round","Error","depth","stencil","dirtySize","dirtyFormat","dirtyId","depthTexture","colorTextures","glFramebuffers","disposeRunner","Runner","multisample","MSAA_QUALITY","NONE","addColorTexture","index","texture","scaleMode","SCALE_MODES","NEAREST","resolution","mipmap","MIPMAP_MODES","OFF","addDepthTexture","format","FORMATS","DEPTH_COMPONENT","type","TYPES","UNSIGNED_SHORT","enableDepth","enableStencil","resize","i","length","setSize","dispose","emit","destroyDepthTexture","destroy"]
}
