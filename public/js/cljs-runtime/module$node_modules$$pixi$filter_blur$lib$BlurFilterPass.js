shadow$provide.module$node_modules$$pixi$filter_blur$lib$BlurFilterPass = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index"), generateBlurFragSource = require("module$node_modules$$pixi$filter_blur$lib$generateBlurFragSource"), generateBlurVertSource = require("module$node_modules$$pixi$filter_blur$lib$generateBlurVertSource");
  class BlurFilterPass extends core.Filter {
    constructor(horizontal, strength = 8, quality = 4, resolution = core.Filter.defaultResolution, kernelSize = 5) {
      const vertSrc = generateBlurVertSource.generateBlurVertSource(kernelSize, horizontal);
      kernelSize = generateBlurFragSource.generateBlurFragSource(kernelSize);
      super(vertSrc, kernelSize);
      this.horizontal = horizontal;
      this.resolution = resolution;
      this._quality = 0;
      this.quality = quality;
      this.blur = strength;
    }
    apply(filterManager, input, output, clearMode) {
      if (output ? this.horizontal ? this.uniforms.strength = 1 / output.width * (output.width / input.width) : this.uniforms.strength = 1 / output.height * (output.height / input.height) : this.horizontal ? this.uniforms.strength = 1 / filterManager.renderer.width * (filterManager.renderer.width / input.width) : this.uniforms.strength = 1 / filterManager.renderer.height * (filterManager.renderer.height / input.height), this.uniforms.strength *= this.strength, this.uniforms.strength /= this.passes, 
      1 === this.passes) {
        filterManager.applyFilter(this, input, output, clearMode);
      } else {
        const renderTarget = filterManager.getFilterTexture(), renderer = filterManager.renderer;
        let flop = renderTarget;
        this.state.blend = !1;
        filterManager.applyFilter(this, input, flop, core.CLEAR_MODES.CLEAR);
        for (let i = 1; i < this.passes - 1; i++) {
          filterManager.bindAndClear(input, core.CLEAR_MODES.BLIT);
          const temp = this.uniforms.uSampler = flop;
          flop = input;
          input = temp;
          renderer.shader.bind(this);
          renderer.geometry.draw(5);
        }
        this.state.blend = !0;
        filterManager.applyFilter(this, flop, output, clearMode);
        filterManager.returnFilterTexture(renderTarget);
      }
    }
    get blur() {
      return this.strength;
    }
    set blur(value) {
      this.padding = 1 + 2 * Math.abs(value);
      this.strength = value;
    }
    get quality() {
      return this._quality;
    }
    set quality(value) {
      this.passes = this._quality = value;
    }
  }
  exports.BlurFilterPass = BlurFilterPass;
};

//# sourceMappingURL=module$node_modules$$pixi$filter_blur$lib$BlurFilterPass.js.map
