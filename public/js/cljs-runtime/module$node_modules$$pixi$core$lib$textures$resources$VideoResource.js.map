{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$VideoResource.js",
"lineCount":126,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/resources/VideoResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$VideoResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar ticker = require(\"@pixi/ticker\"), BaseImageResource = require(\"./BaseImageResource.js\");\nconst _VideoResource = class _VideoResource2 extends BaseImageResource.BaseImageResource {\n  /**\n   * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.\n   * @param {object} [options] - Options to use\n   * @param {boolean} [options.autoLoad=true] - Start loading the video immediately\n   * @param {boolean} [options.autoPlay=true] - Start playing video immediately\n   * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.\n   * If 0, `requestVideoFrameCallback` is used to update the texture.\n   * If `requestVideoFrameCallback` is not available, the texture is updated every render.\n   * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n   * @param {boolean} [options.loop=false] - Loops the video\n   * @param {boolean} [options.muted=false] - Mutes the video audio, useful for autoplay\n   * @param {boolean} [options.playsinline=true] - Prevents opening the video on mobile devices\n   */\n  constructor(source, options) {\n    if (options = options || {}, !(source instanceof HTMLVideoElement)) {\n      const videoElement = document.createElement(\"video\");\n      options.autoLoad !== !1 && videoElement.setAttribute(\"preload\", \"auto\"), options.playsinline !== !1 && (videoElement.setAttribute(\"webkit-playsinline\", \"\"), videoElement.setAttribute(\"playsinline\", \"\")), options.muted === !0 && (videoElement.setAttribute(\"muted\", \"\"), videoElement.muted = !0), options.loop === !0 && videoElement.setAttribute(\"loop\", \"\"), options.autoPlay !== !1 && videoElement.setAttribute(\"autoplay\", \"\"), typeof source == \"string\" && (source = [source]);\n      const firstSrc = source[0].src || source[0];\n      BaseImageResource.BaseImageResource.crossOrigin(videoElement, firstSrc, options.crossorigin);\n      for (let i = 0; i < source.length; ++i) {\n        const sourceElement = document.createElement(\"source\");\n        let { src, mime } = source[i];\n        if (src = src || source[i], src.startsWith(\"data:\"))\n          mime = src.slice(5, src.indexOf(\";\"));\n        else if (!src.startsWith(\"blob:\")) {\n          const baseSrc = src.split(\"?\").shift().toLowerCase(), ext = baseSrc.slice(baseSrc.lastIndexOf(\".\") + 1);\n          mime = mime || _VideoResource2.MIME_TYPES[ext] || `video/${ext}`;\n        }\n        sourceElement.src = src, mime && (sourceElement.type = mime), videoElement.appendChild(sourceElement);\n      }\n      source = videoElement;\n    }\n    super(source), this.noSubImage = !0, this._autoUpdate = !0, this._isConnectedToTicker = !1, this._updateFPS = options.updateFPS || 0, this._msToNextUpdate = 0, this.autoPlay = options.autoPlay !== !1, this._videoFrameRequestCallback = this._videoFrameRequestCallback.bind(this), this._videoFrameRequestCallbackHandle = null, this._load = null, this._resolve = null, this._reject = null, this._onCanPlay = this._onCanPlay.bind(this), this._onError = this._onError.bind(this), this._onPlayStart = this._onPlayStart.bind(this), this._onPlayStop = this._onPlayStop.bind(this), this._onSeeked = this._onSeeked.bind(this), options.autoLoad !== !1 && this.load();\n  }\n  /**\n   * Trigger updating of the texture.\n   * @param _deltaTime - time delta since last tick\n   */\n  update(_deltaTime = 0) {\n    if (!this.destroyed) {\n      if (this._updateFPS) {\n        const elapsedMS = ticker.Ticker.shared.elapsedMS * this.source.playbackRate;\n        this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n      }\n      (!this._updateFPS || this._msToNextUpdate <= 0) && (super.update(\n        /* deltaTime*/\n      ), this._msToNextUpdate = this._updateFPS ? Math.floor(1e3 / this._updateFPS) : 0);\n    }\n  }\n  _videoFrameRequestCallback() {\n    this.update(), this.destroyed ? this._videoFrameRequestCallbackHandle = null : this._videoFrameRequestCallbackHandle = this.source.requestVideoFrameCallback(\n      this._videoFrameRequestCallback\n    );\n  }\n  /**\n   * Start preloading the video resource.\n   * @returns {Promise<void>} Handle the validate event\n   */\n  load() {\n    if (this._load)\n      return this._load;\n    const source = this.source;\n    return (source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA) && source.width && source.height && (source.complete = !0), source.addEventListener(\"play\", this._onPlayStart), source.addEventListener(\"pause\", this._onPlayStop), source.addEventListener(\"seeked\", this._onSeeked), this._isSourceReady() ? this._onCanPlay() : (source.addEventListener(\"canplay\", this._onCanPlay), source.addEventListener(\"canplaythrough\", this._onCanPlay), source.addEventListener(\"error\", this._onError, !0)), this._load = new Promise((resolve, reject) => {\n      this.valid ? resolve(this) : (this._resolve = resolve, this._reject = reject, source.load());\n    }), this._load;\n  }\n  /**\n   * Handle video error events.\n   * @param event\n   */\n  _onError(event) {\n    this.source.removeEventListener(\"error\", this._onError, !0), this.onError.emit(event), this._reject && (this._reject(event), this._reject = null, this._resolve = null);\n  }\n  /**\n   * Returns true if the underlying source is playing.\n   * @returns - True if playing.\n   */\n  _isSourcePlaying() {\n    const source = this.source;\n    return !source.paused && !source.ended;\n  }\n  /**\n   * Returns true if the underlying source is ready for playing.\n   * @returns - True if ready.\n   */\n  _isSourceReady() {\n    return this.source.readyState > 2;\n  }\n  /** Runs the update loop when the video is ready to play. */\n  _onPlayStart() {\n    this.valid || this._onCanPlay(), this._configureAutoUpdate();\n  }\n  /** Fired when a pause event is triggered, stops the update loop. */\n  _onPlayStop() {\n    this._configureAutoUpdate();\n  }\n  /** Fired when the video is completed seeking to the current playback position. */\n  _onSeeked() {\n    this._autoUpdate && !this._isSourcePlaying() && (this._msToNextUpdate = 0, this.update(), this._msToNextUpdate = 0);\n  }\n  /** Fired when the video is loaded and ready to play. */\n  _onCanPlay() {\n    const source = this.source;\n    source.removeEventListener(\"canplay\", this._onCanPlay), source.removeEventListener(\"canplaythrough\", this._onCanPlay);\n    const valid = this.valid;\n    this._msToNextUpdate = 0, this.update(), this._msToNextUpdate = 0, !valid && this._resolve && (this._resolve(this), this._resolve = null, this._reject = null), this._isSourcePlaying() ? this._onPlayStart() : this.autoPlay && source.play();\n  }\n  /** Destroys this texture. */\n  dispose() {\n    this._configureAutoUpdate();\n    const source = this.source;\n    source && (source.removeEventListener(\"play\", this._onPlayStart), source.removeEventListener(\"pause\", this._onPlayStop), source.removeEventListener(\"seeked\", this._onSeeked), source.removeEventListener(\"canplay\", this._onCanPlay), source.removeEventListener(\"canplaythrough\", this._onCanPlay), source.removeEventListener(\"error\", this._onError, !0), source.pause(), source.src = \"\", source.load()), super.dispose();\n  }\n  /** Should the base texture automatically update itself, set to true by default. */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    value !== this._autoUpdate && (this._autoUpdate = value, this._configureAutoUpdate());\n  }\n  /**\n   * How many times a second to update the texture from the video. If 0, `requestVideoFrameCallback` is used to\n   * update the texture. If `requestVideoFrameCallback` is not available, the texture is updated every render.\n   * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n   */\n  get updateFPS() {\n    return this._updateFPS;\n  }\n  set updateFPS(value) {\n    value !== this._updateFPS && (this._updateFPS = value, this._configureAutoUpdate());\n  }\n  _configureAutoUpdate() {\n    this._autoUpdate && this._isSourcePlaying() ? !this._updateFPS && this.source.requestVideoFrameCallback ? (this._isConnectedToTicker && (ticker.Ticker.shared.remove(this.update, this), this._isConnectedToTicker = !1, this._msToNextUpdate = 0), this._videoFrameRequestCallbackHandle === null && (this._videoFrameRequestCallbackHandle = this.source.requestVideoFrameCallback(\n      this._videoFrameRequestCallback\n    ))) : (this._videoFrameRequestCallbackHandle !== null && (this.source.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle), this._videoFrameRequestCallbackHandle = null), this._isConnectedToTicker || (ticker.Ticker.shared.add(this.update, this), this._isConnectedToTicker = !0, this._msToNextUpdate = 0)) : (this._videoFrameRequestCallbackHandle !== null && (this.source.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle), this._videoFrameRequestCallbackHandle = null), this._isConnectedToTicker && (ticker.Ticker.shared.remove(this.update, this), this._isConnectedToTicker = !1, this._msToNextUpdate = 0));\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @param {string} extension - The extension of source, if set\n   * @returns {boolean} `true` if video source\n   */\n  static test(source, extension) {\n    return globalThis.HTMLVideoElement && source instanceof HTMLVideoElement || _VideoResource2.TYPES.includes(extension);\n  }\n};\n_VideoResource.TYPES = [\"mp4\", \"m4v\", \"webm\", \"ogg\", \"ogv\", \"h264\", \"avi\", \"mov\"], /**\n* Map of video MIME types that can't be directly derived from file extensions.\n* @readonly\n*/\n_VideoResource.MIME_TYPES = {\n  ogv: \"video/ogg\",\n  mov: \"video/quicktime\",\n  m4v: \"video/mp4\"\n};\nlet VideoResource = _VideoResource;\nexports.VideoResource = VideoResource;\n//# sourceMappingURL=VideoResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","ticker","BaseImageResource","constructor","source","options","HTMLVideoElement","videoElement","document","createElement","autoLoad","setAttribute","playsinline","muted","loop","autoPlay","crossOrigin","src","crossorigin","i","length","sourceElement","mime","startsWith","slice","indexOf","baseSrc","split","shift","toLowerCase","ext","lastIndexOf","_VideoResource2","MIME_TYPES","type","appendChild","_autoUpdate","noSubImage","_isConnectedToTicker","_updateFPS","updateFPS","_msToNextUpdate","_videoFrameRequestCallback","bind","_reject","_resolve","_load","_videoFrameRequestCallbackHandle","_onCanPlay","_onError","_onPlayStart","_onPlayStop","_onSeeked","load","update","_deltaTime","destroyed","Math","floor","Ticker","shared","elapsedMS","playbackRate","requestVideoFrameCallback","readyState","HAVE_ENOUGH_DATA","HAVE_FUTURE_DATA","width","height","complete","addEventListener","_isSourceReady","Promise","resolve","reject","valid","event","removeEventListener","onError","emit","_isSourcePlaying","paused","ended","_configureAutoUpdate","play","dispose","pause","value","remove","cancelVideoFrameCallback","add","test","extension","globalThis","TYPES","includes","_VideoResource","ogv","mov","m4v","VideoResource"]
}
