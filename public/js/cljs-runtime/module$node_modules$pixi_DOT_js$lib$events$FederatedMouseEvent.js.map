{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$events$FederatedMouseEvent.js",
"lineCount":62,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,GAAmF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG3H,MAAIC,QAAQH,OAAA,CAAQ,uDAAR,CAAZ;AACII,QAAAA,GAAiBJ,OAAA,CAAQ,2DAAR,CAAjBI;AAEJ,cAAA;AACA,OAAMC,oBAAN,QAAkCD,OAAeA,CAAAA,cAAjD;AACEE,eAAW,EAAG;AACZ,WAAA,CAAM,GAAGC,SAAT,CAAA;AAEA,UAAKC,CAAAA,MAAL,GAAc,IAAIL,KAAMA,CAAAA,KAAV,EAAd;AAEA,UAAKM,CAAAA,QAAL,GAAgB,IAAIN,KAAMA,CAAAA,KAAV,EAAhB;AAEA,UAAKO,CAAAA,MAAL,GAAc,IAAIP,KAAMA,CAAAA,KAAV,EAAd;AAEA,UAAKJ,CAAAA,MAAL,GAAc,IAAII,KAAMA,CAAAA,KAAV,EAAd;AAKA,UAAKQ,CAAAA,MAAL,GAAc,IAAIR,KAAMA,CAAAA,KAAV,EAAd;AAdY;AAiBV,eAAU,EAAA;AACZ,aAAO,IAAKK,CAAAA,MAAOI,CAAAA,CAAnB;AADY;AAIV,eAAU,EAAA;AACZ,aAAO,IAAKJ,CAAAA,MAAOK,CAAAA,CAAnB;AADY;AAOV,SAAI,EAAA;AACN,aAAO,IAAKC,CAAAA,OAAZ;AADM;AAOJ,SAAI,EAAA;AACN,aAAO,IAAKC,CAAAA,OAAZ;AADM;AAIJ,iBAAY,EAAA;AACd,aAAO,IAAKN,CAAAA,QAASG,CAAAA,CAArB;AADc;AAIZ,iBAAY,EAAA;AACd,aAAO,IAAKH,CAAAA,QAASI,CAAAA,CAArB;AADc;AAIZ,eAAU,EAAA;AACZ,aAAO,IAAKH,CAAAA,MAAOE,CAAAA,CAAnB;AADY;AAIV,eAAU,EAAA;AACZ,aAAO,IAAKF,CAAAA,MAAOG,CAAAA,CAAnB;AADY;AAIV,eAAU,EAAA;AACZ,aAAO,IAAKd,CAAAA,MAAOa,CAAAA,CAAnB;AADY;AAIV,eAAU,EAAA;AACZ,aAAO,IAAKb,CAAAA,MAAOc,CAAAA,CAAnB;AADY;AAOV,eAAU,EAAA;AACZ,aAAO,IAAKF,CAAAA,MAAOC,CAAAA,CAAnB;AADY;AAOV,eAAU,EAAA;AACZ,aAAO,IAAKD,CAAAA,MAAOE,CAAAA,CAAnB;AADY;AAcdG,oBAAgB,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,SAAnB,CAA8B;AAC5C,aAAOF,SAAUG,CAAAA,cAAeC,CAAAA,YAAzB,CAAsCF,SAAtC,IAAmD,IAAKpB,CAAAA,MAAxD,EAAgEmB,KAAhE,CAAP;AAD4C;AAO9CI,oBAAgB,CAACC,GAAD,CAAM;AACpB,aAAO,kBAAP,IAA6B,IAAKC,CAAAA,WAAlC,IAAiD,IAAKA,CAAAA,WAAYF,CAAAA,gBAAjB,CAAkCC,GAAlC,CAAjD;AADoB;AAuBtBE,kBAAc,CAACC,QAAD,EAAWC,aAAX,EAA0BC,cAA1B,EAA0CC,QAA1C,EAAoDC,UAApD,EAAgEC,WAAhE,EAA6EC,WAA7E,EAA0FC,WAA1F,EAAuGC,WAAvG,EAAoHC,WAApH,EAAiIC,UAAjI,EAA6IC,YAA7I,EAA2JC,WAA3J,EAAwKC,UAAxK,EAAoLC,iBAApL,CAAuM;AACnN,YAAUC,KAAJ,CAAU,yBAAV,CAAN;AADmN;AAtHvN;AA2HAvC,SAAQG,CAAAA,mBAAR,GAA8BA,mBAA9B;AAlI2H,CAA3H;;",
"sources":["node_modules/pixi_DOT_js/lib/events/FederatedMouseEvent.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$events$FederatedMouseEvent\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Point = require('../maths/point/Point.js');\nvar FederatedEvent = require('./FederatedEvent.js');\n\n\"use strict\";\nclass FederatedMouseEvent extends FederatedEvent.FederatedEvent {\n  constructor() {\n    super(...arguments);\n    /** The coordinates of the mouse event relative to the canvas. */\n    this.client = new Point.Point();\n    /** The movement in this pointer relative to the last `mousemove` event. */\n    this.movement = new Point.Point();\n    /** The offset of the pointer coordinates w.r.t. target Container in world space. This is not supported at the moment. */\n    this.offset = new Point.Point();\n    /** The pointer coordinates in world space. */\n    this.global = new Point.Point();\n    /**\n     * The pointer coordinates in the renderer's {@link Renderer.screen screen}. This has slightly\n     * different semantics than native PointerEvent screenX/screenY.\n     */\n    this.screen = new Point.Point();\n  }\n  /** @readonly */\n  get clientX() {\n    return this.client.x;\n  }\n  /** @readonly */\n  get clientY() {\n    return this.client.y;\n  }\n  /**\n   * Alias for {@link FederatedMouseEvent.clientX this.clientX}.\n   * @readonly\n   */\n  get x() {\n    return this.clientX;\n  }\n  /**\n   * Alias for {@link FederatedMouseEvent.clientY this.clientY}.\n   * @readonly\n   */\n  get y() {\n    return this.clientY;\n  }\n  /** @readonly */\n  get movementX() {\n    return this.movement.x;\n  }\n  /** @readonly */\n  get movementY() {\n    return this.movement.y;\n  }\n  /** @readonly */\n  get offsetX() {\n    return this.offset.x;\n  }\n  /** @readonly */\n  get offsetY() {\n    return this.offset.y;\n  }\n  /** @readonly */\n  get globalX() {\n    return this.global.x;\n  }\n  /** @readonly */\n  get globalY() {\n    return this.global.y;\n  }\n  /**\n   * The pointer coordinates in the renderer's screen. Alias for {@code screen.x}.\n   * @readonly\n   */\n  get screenX() {\n    return this.screen.x;\n  }\n  /**\n   * The pointer coordinates in the renderer's screen. Alias for {@code screen.y}.\n   * @readonly\n   */\n  get screenY() {\n    return this.screen.y;\n  }\n  /**\n   * This will return the local coordinates of the specified container for this InteractionData\n   * @param {Container} container - The Container that you would like the local\n   *  coords off\n   * @param {PointData} point - A Point object in which to store the value, optional (otherwise\n   *  will create a new point)\n   * @param {PointData} globalPos - A Point object containing your custom global coords, optional\n   *  (otherwise will use the current global coords)\n   * @returns - A point containing the coordinates of the InteractionData position relative\n   *  to the Container\n   */\n  getLocalPosition(container, point, globalPos) {\n    return container.worldTransform.applyInverse(globalPos || this.global, point);\n  }\n  /**\n   * Whether the modifier key was pressed when this event natively occurred.\n   * @param key - The modifier key.\n   */\n  getModifierState(key) {\n    return \"getModifierState\" in this.nativeEvent && this.nativeEvent.getModifierState(key);\n  }\n  /**\n   * Not supported.\n   * @param _typeArg\n   * @param _canBubbleArg\n   * @param _cancelableArg\n   * @param _viewArg\n   * @param _detailArg\n   * @param _screenXArg\n   * @param _screenYArg\n   * @param _clientXArg\n   * @param _clientYArg\n   * @param _ctrlKeyArg\n   * @param _altKeyArg\n   * @param _shiftKeyArg\n   * @param _metaKeyArg\n   * @param _buttonArg\n   * @param _relatedTargetArg\n   * @deprecated since 7.0.0\n   */\n  // eslint-disable-next-line max-params\n  initMouseEvent(_typeArg, _canBubbleArg, _cancelableArg, _viewArg, _detailArg, _screenXArg, _screenYArg, _clientXArg, _clientYArg, _ctrlKeyArg, _altKeyArg, _shiftKeyArg, _metaKeyArg, _buttonArg, _relatedTargetArg) {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n\nexports.FederatedMouseEvent = FederatedMouseEvent;\n//# sourceMappingURL=FederatedMouseEvent.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Point","FederatedEvent","FederatedMouseEvent","constructor","arguments","client","movement","offset","screen","x","y","clientX","clientY","getLocalPosition","container","point","globalPos","worldTransform","applyInverse","getModifierState","key","nativeEvent","initMouseEvent","_typeArg","_canBubbleArg","_cancelableArg","_viewArg","_detailArg","_screenXArg","_screenYArg","_clientXArg","_clientYArg","_ctrlKeyArg","_altKeyArg","_shiftKeyArg","_metaKeyArg","_buttonArg","_relatedTargetArg","Error"]
}
