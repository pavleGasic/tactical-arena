{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapText.js",
"lineCount":36,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,GAAqF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG7H,MAAIC,OAAOH,OAAA,CAAQ,wDAAR,CAAX,EACII,eAAeJ,OAAA,CAAQ,6DAAR,CADnB,EAEIK,YAAYL,OAAA,CAAQ,0DAAR,CAFhB,EAGIM,oBAAoBN,OAAA,CAAQ,yEAAR,CAHxB;AAKA,cAAA;AACA,OAAMO,WAAN,QAAyBH,aAAaA,CAAAA,YAAtC;AACEI,eAAW,CAAC,GAAGC,IAAJ,CAAU;AACnB,UAAIC,EAAJ;AACMC,UAAAA,GAAUP,YAAaQ,CAAAA,iBAAb,CAA+BH,IAA/B,EAAqC,YAArC,CAAVE;AACNA,UAAQE,CAAAA,KAAR,KAAkBF,IAAQE,CAAAA,KAA1B,GAAkCF,IAAQE,CAAAA,KAA1C,IAAmD,EAAnD;AACqBC,OAApBJ,EAAoBI,GAAfH,IAAQE,CAAAA,KAAOC,EAAAA,IAArB,KAA8BJ,EAAGI,CAAAA,IAAjC,GAAwC,QAAxC;AACA,WAAA,CAAMH,IAAN,EAAeN,SAAUA,CAAAA,SAAzB,CAAA;AACA,UAAKU,CAAAA,YAAL,GAAoB,YAApB;AANmB;AASrBC,gBAAY,EAAG;AACb,YAAMC,SAAS,IAAKC,CAAAA,OAApB,EACMC,SAAS,IAAKC,CAAAA,OADpB;AAEA,UAAMC,oBAAoBf,iBAAkBA,CAAAA,iBAAkBgB,CAAAA,WAApC,CAAgD,IAAKC,CAAAA,IAArD,EAA2D,IAAKC,CAAAA,MAAhE,CAA1B,EACMC,QAAQJ,iBAAkBI,CAAAA,KADhC;AAEA,YAAMC,SAASL,iBAAkBM,CAAAA,OAA3BD,GAAqCD,KAA3C;AACA,UAAIG,QAAQP,iBAAkBO,CAAAA,KAA1BA,GAAkCH,KAAtC;AACII,uBAAAA,GAASR,iBAAkBQ,CAAAA,MAA3BA,GAAoCJ,KAApCI;AAEJ,UADMC,KACN,GADe,IAAKN,CAAAA,MAAOO,CAAAA,OAC3B;AACEH,aACA,IADSE,KAAOF,CAAAA,KAChB,EAAAC,iBAAA,IAAUC,KAAOF,CAAAA,KAAjB;AAFF;AAIAX,YAAOe,CAAAA,IAAP,GAAc,CAACb,MAAOc,CAAAA,EAAtB,GAA2BL,KAA3B;AACAX,YAAOiB,CAAAA,IAAP,GAAcjB,MAAOe,CAAAA,IAArB,GAA4BJ,KAA5B;AACAX,YAAOkB,CAAAA,IAAP,GAAc,CAAChB,MAAOiB,CAAAA,EAAtB,IAA4BP,iBAA5B,GAAqCH,MAArC;AACAT,YAAOoB,CAAAA,IAAP,GAAcpB,MAAOkB,CAAAA,IAArB,GAA4BN,iBAA5B;AAhBa;AAsBX,kBAAU,CAACS,KAAD,CAAQ;AACN,UAAd,KAAIA,KAAJ,IACEnC,IAAKA,CAAAA,IAAL,CAEE,oHAFF,CADF;AADoB;AAQlB,kBAAa,EAAA;AACf,aAAO,IAAKoC,CAAAA,WAAZ;AADe;AAxCnB;AA6CArC,SAAQK,CAAAA,UAAR,GAAqBA,UAArB;AAtD6H,CAA7H;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/BitmapText.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$BitmapText\"] = function(global,require,module,exports) {\n'use strict';\n\nvar warn = require('../../utils/logging/warn.js');\nvar AbstractText = require('../text/AbstractText.js');\nvar TextStyle = require('../text/TextStyle.js');\nvar BitmapFontManager = require('./BitmapFontManager.js');\n\n\"use strict\";\nclass BitmapText extends AbstractText.AbstractText {\n  constructor(...args) {\n    var _a;\n    const options = AbstractText.ensureTextOptions(args, \"BitmapText\");\n    options.style ?? (options.style = options.style || {});\n    (_a = options.style).fill ?? (_a.fill = 16777215);\n    super(options, TextStyle.TextStyle);\n    this.renderPipeId = \"bitmapText\";\n  }\n  /** @private */\n  updateBounds() {\n    const bounds = this._bounds;\n    const anchor = this._anchor;\n    const bitmapMeasurement = BitmapFontManager.BitmapFontManager.measureText(this.text, this._style);\n    const scale = bitmapMeasurement.scale;\n    const offset = bitmapMeasurement.offsetY * scale;\n    let width = bitmapMeasurement.width * scale;\n    let height = bitmapMeasurement.height * scale;\n    const stroke = this._style._stroke;\n    if (stroke) {\n      width += stroke.width;\n      height += stroke.width;\n    }\n    bounds.minX = -anchor._x * width;\n    bounds.maxX = bounds.minX + width;\n    bounds.minY = -anchor._y * (height + offset);\n    bounds.maxY = bounds.minY + height;\n  }\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   * @default 1\n   */\n  set resolution(value) {\n    if (value !== null) {\n      warn.warn(\n        // eslint-disable-next-line max-len\n        \"[BitmapText] dynamically updating the resolution is not supported. Resolution should be managed by the BitmapFont.\"\n      );\n    }\n  }\n  get resolution() {\n    return this._resolution;\n  }\n}\n\nexports.BitmapText = BitmapText;\n//# sourceMappingURL=BitmapText.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","warn","AbstractText","TextStyle","BitmapFontManager","BitmapText","constructor","args","_a","options","ensureTextOptions","style","fill","renderPipeId","updateBounds","bounds","_bounds","anchor","_anchor","bitmapMeasurement","measureText","text","_style","scale","offset","offsetY","width","height","stroke","_stroke","minX","_x","maxX","minY","_y","maxY","value","_resolution"]
}
