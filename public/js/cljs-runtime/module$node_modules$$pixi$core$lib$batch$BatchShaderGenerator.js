shadow$provide.module$node_modules$$pixi$core$lib$batch$BatchShaderGenerator = function(global, require, module, exports) {
  var math = require("module$node_modules$$pixi$math$lib$index"), Program = require("module$node_modules$$pixi$core$lib$shader$Program"), Shader = require("module$node_modules$$pixi$core$lib$shader$Shader"), UniformGroup = require("module$node_modules$$pixi$core$lib$shader$UniformGroup");
  class BatchShaderGenerator {
    constructor(vertexSrc, fragTemplate) {
      if (this.vertexSrc = vertexSrc, this.fragTemplate = fragTemplate, this.programCache = {}, this.defaultGroupCache = {}, !fragTemplate.includes("%count%")) {
        throw Error('Fragment template must contain "%count%".');
      }
      if (!fragTemplate.includes("%forloop%")) {
        throw Error('Fragment template must contain "%forloop%".');
      }
    }
    generateShader(maxTextures) {
      if (!this.programCache[maxTextures]) {
        var sampleValues = new Int32Array(maxTextures);
        for (let i = 0; i < maxTextures; i++) {
          sampleValues[i] = i;
        }
        this.defaultGroupCache[maxTextures] = UniformGroup.UniformGroup.from({uSamplers:sampleValues}, !0);
        sampleValues = this.fragTemplate;
        sampleValues = sampleValues.replace(/%count%/gi, `${maxTextures}`);
        sampleValues = sampleValues.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));
        this.programCache[maxTextures] = new Program.Program(this.vertexSrc, sampleValues);
      }
      sampleValues = {tint:new Float32Array([1, 1, 1, 1]), translationMatrix:new math.Matrix(), default:this.defaultGroupCache[maxTextures]};
      return new Shader.Shader(this.programCache[maxTextures], sampleValues);
    }
    generateSampleSrc(maxTextures) {
      let src;
      src = "\n\n";
      for (let i = 0; i < maxTextures; i++) {
        0 < i && (src += "\nelse "), i < maxTextures - 1 && (src += `if(vTextureId < ${i}.5)`), src += "\n{", src += `
	color = texture2D(uSamplers[${i}], vTextureCoord);`, src += "\n}";
      }
      return src += "\n", src += "\n", src;
    }
  }
  exports.BatchShaderGenerator = BatchShaderGenerator;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$batch$BatchShaderGenerator.js.map
