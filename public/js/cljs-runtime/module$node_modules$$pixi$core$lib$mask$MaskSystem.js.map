{
"version":3,
"file":"module$node_modules$$pixi$core$lib$mask$MaskSystem.js",
"lineCount":102,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/mask/MaskSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$mask$MaskSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), extensions = require(\"@pixi/extensions\"), SpriteMaskFilter = require(\"../filters/spriteMask/SpriteMaskFilter.js\"), MaskData = require(\"./MaskData.js\");\nclass MaskSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.enableScissor = !0, this.alphaMaskPool = [], this.maskDataPool = [], this.maskStack = [], this.alphaMaskIndex = 0;\n  }\n  /**\n   * Changes the mask stack that is used by this System.\n   * @param maskStack - The mask stack\n   */\n  setMaskStack(maskStack) {\n    this.maskStack = maskStack, this.renderer.scissor.setMaskStack(maskStack), this.renderer.stencil.setMaskStack(maskStack);\n  }\n  /**\n   * Enables the mask and appends it to the current mask stack.\n   *\n   * NOTE: The batch renderer should be flushed beforehand to prevent pending renders from being masked.\n   * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n   * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskDataOrTarget - The masking data.\n   */\n  push(target, maskDataOrTarget) {\n    let maskData = maskDataOrTarget;\n    if (!maskData.isMaskData) {\n      const d = this.maskDataPool.pop() || new MaskData.MaskData();\n      d.pooled = !0, d.maskObject = maskDataOrTarget, maskData = d;\n    }\n    const maskAbove = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n    if (maskData.copyCountersOrReset(maskAbove), maskData._colorMask = maskAbove ? maskAbove._colorMask : 15, maskData.autoDetect && this.detect(maskData), maskData._target = target, maskData.type !== constants.MASK_TYPES.SPRITE && this.maskStack.push(maskData), maskData.enabled)\n      switch (maskData.type) {\n        case constants.MASK_TYPES.SCISSOR:\n          this.renderer.scissor.push(maskData);\n          break;\n        case constants.MASK_TYPES.STENCIL:\n          this.renderer.stencil.push(maskData);\n          break;\n        case constants.MASK_TYPES.SPRITE:\n          maskData.copyCountersOrReset(null), this.pushSpriteMask(maskData);\n          break;\n        case constants.MASK_TYPES.COLOR:\n          this.pushColorMask(maskData);\n          break;\n        default:\n          break;\n      }\n    maskData.type === constants.MASK_TYPES.SPRITE && this.maskStack.push(maskData);\n  }\n  /**\n   * Removes the last mask from the mask stack and doesn't return it.\n   *\n   * NOTE: The batch renderer should be flushed beforehand to render the masked contents before the mask is removed.\n   * @param {PIXI.IMaskTarget} target - Display Object to pop the mask from\n   */\n  pop(target) {\n    const maskData = this.maskStack.pop();\n    if (!(!maskData || maskData._target !== target)) {\n      if (maskData.enabled)\n        switch (maskData.type) {\n          case constants.MASK_TYPES.SCISSOR:\n            this.renderer.scissor.pop(maskData);\n            break;\n          case constants.MASK_TYPES.STENCIL:\n            this.renderer.stencil.pop(maskData.maskObject);\n            break;\n          case constants.MASK_TYPES.SPRITE:\n            this.popSpriteMask(maskData);\n            break;\n          case constants.MASK_TYPES.COLOR:\n            this.popColorMask(maskData);\n            break;\n          default:\n            break;\n        }\n      if (maskData.reset(), maskData.pooled && this.maskDataPool.push(maskData), this.maskStack.length !== 0) {\n        const maskCurrent = this.maskStack[this.maskStack.length - 1];\n        maskCurrent.type === constants.MASK_TYPES.SPRITE && maskCurrent._filters && (maskCurrent._filters[0].maskSprite = maskCurrent.maskObject);\n      }\n    }\n  }\n  /**\n   * Sets type of MaskData based on its maskObject.\n   * @param maskData\n   */\n  detect(maskData) {\n    const maskObject = maskData.maskObject;\n    maskObject ? maskObject.isSprite ? maskData.type = constants.MASK_TYPES.SPRITE : this.enableScissor && this.renderer.scissor.testScissor(maskData) ? maskData.type = constants.MASK_TYPES.SCISSOR : maskData.type = constants.MASK_TYPES.STENCIL : maskData.type = constants.MASK_TYPES.COLOR;\n  }\n  /**\n   * Applies the Mask and adds it to the current filter stack.\n   * @param maskData - Sprite to be used as the mask.\n   */\n  pushSpriteMask(maskData) {\n    const { maskObject } = maskData, target = maskData._target;\n    let alphaMaskFilter = maskData._filters;\n    alphaMaskFilter || (alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex], alphaMaskFilter || (alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new SpriteMaskFilter.SpriteMaskFilter()])), alphaMaskFilter[0].resolution = maskData.resolution, alphaMaskFilter[0].multisample = maskData.multisample, alphaMaskFilter[0].maskSprite = maskObject;\n    const stashFilterArea = target.filterArea;\n    target.filterArea = maskObject.getBounds(!0), this.renderer.filter.push(target, alphaMaskFilter), target.filterArea = stashFilterArea, maskData._filters || this.alphaMaskIndex++;\n  }\n  /**\n   * Removes the last filter from the filter stack and doesn't return it.\n   * @param maskData - Sprite to be used as the mask.\n   */\n  popSpriteMask(maskData) {\n    this.renderer.filter.pop(), maskData._filters ? maskData._filters[0].maskSprite = null : (this.alphaMaskIndex--, this.alphaMaskPool[this.alphaMaskIndex][0].maskSprite = null);\n  }\n  /**\n   * Pushes the color mask.\n   * @param maskData - The mask data\n   */\n  pushColorMask(maskData) {\n    const currColorMask = maskData._colorMask, nextColorMask = maskData._colorMask = currColorMask & maskData.colorMask;\n    nextColorMask !== currColorMask && this.renderer.gl.colorMask(\n      (nextColorMask & 1) !== 0,\n      (nextColorMask & 2) !== 0,\n      (nextColorMask & 4) !== 0,\n      (nextColorMask & 8) !== 0\n    );\n  }\n  /**\n   * Pops the color mask.\n   * @param maskData - The mask data\n   */\n  popColorMask(maskData) {\n    const currColorMask = maskData._colorMask, nextColorMask = this.maskStack.length > 0 ? this.maskStack[this.maskStack.length - 1]._colorMask : 15;\n    nextColorMask !== currColorMask && this.renderer.gl.colorMask(\n      (nextColorMask & 1) !== 0,\n      (nextColorMask & 2) !== 0,\n      (nextColorMask & 4) !== 0,\n      (nextColorMask & 8) !== 0\n    );\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nMaskSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"mask\"\n};\nextensions.extensions.add(MaskSystem);\nexports.MaskSystem = MaskSystem;\n//# sourceMappingURL=MaskSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","extensions","SpriteMaskFilter","MaskData","MaskSystem","constructor","renderer","enableScissor","alphaMaskPool","maskDataPool","maskStack","alphaMaskIndex","setMaskStack","scissor","stencil","push","target","maskDataOrTarget","maskData","isMaskData","d","pop","pooled","maskObject","maskAbove","length","copyCountersOrReset","_colorMask","autoDetect","detect","_target","type","MASK_TYPES","SPRITE","enabled","SCISSOR","STENCIL","pushSpriteMask","COLOR","pushColorMask","popSpriteMask","popColorMask","reset","maskCurrent","_filters","maskSprite","isSprite","testScissor","alphaMaskFilter","resolution","multisample","stashFilterArea","filterArea","getBounds","filter","currColorMask","nextColorMask","colorMask","gl","destroy","extension","ExtensionType","RendererSystem","name","add"]
}
