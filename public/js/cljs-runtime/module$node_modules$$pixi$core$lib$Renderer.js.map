{
"version":3,
"file":"module$node_modules$$pixi$core$lib$Renderer.js",
"lineCount":117,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,GAAgE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAEpGC,YAAYH,OAAA,CAAQ,+CAAR,CAFwF;AAE5DI,QAAAA,GAAaJ,OAAA,CAAQ,gDAAR,CAAbI;AAF4D,MAElBC,OAAOL,OAAA,CAAQ,0CAAR,CAFW,EAEYM,WAAWN,OAAA,CAAQ,8CAAR,CAFvB,EAEkDO,QAAQP,OAAA,CAAQ,2CAAR,CAF1D,EAEkFQ,eAAeR,OAAA,CAAQ,wDAAR,CAFjG;AAEsIS,SAAAA,GAAgBT,OAAA,CAAQ,yDAAR,CAAhBS;AAC5N,QAAA,sDAAA,aAAyBA,QAAcA,CAAAA,aAAvC;AAIhBC,eAAW,CAACC,OAAD,CAAU;AACnB,WAAA,EAAA;AAAS,UAAKC,CAAAA,IAAL,GAAYT,SAAUU,CAAAA,aAAcC,CAAAA,KAApC;AAA2CH,aAAA,GAAUI,MAAOC,CAAAA,MAAP,CAAc,EAAd,EAAkBV,QAASA,CAAAA,QAASW,CAAAA,cAApC,EAAoDN,OAApD,CAAV;AAAwE,UAAKO,CAAAA,EAAL,GAAU,IAAV;AAAgB,UAAKC,CAAAA,WAAL,GAAmB,CAAnB;AAAsB,UAAKC,CAAAA,cAAL,GAAsB,IAAIZ,YAAaA,CAAAA,YAAjB,CAA8B,CACpNa,iBAAkB,IAAIhB,IAAKiB,CAAAA,MAAT,EADkM,CAA9B,EAErL,CAAA,CAFqL,CAAtB;AA2ClK,UAAKC,CAAAA,KAAL,CAxCqBC,CACnBC,QAAS,sFAAA,CAAA,KAAA,CAAA,GAAA,CADUD,EAYnBE,QAASC,mDAAWC,CAAAA,SAZDJ,EAanBK,SAAU,wNAAA,CAAA,KAAA,CAAA,GAAA,CAbSL,CAwCrB,CAAA;AAA0B,uBAAA,IAAqBb,OAArB,KAAiCJ,KAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,2GAA3B,CAAA,EAAyInB,OAAQoB,CAAAA,kBAAjJ,GAAsKpB,OAAQqB,CAAAA,eAA9K,IAA6N,eAA7N,KAAiMrB,OAAQqB,CAAAA,eAAzM,EAA8OrB,OAAQsB,CAAAA,eAAtP,GAAoS,CAAA,CAA5B,KAAAtB,OAAQqB,CAAAA,eAAR,GAAiC,CAAjC,GAAqCrB,OAAQsB,CAAAA,eAAtV;AAAwW,UAAKC,CAAAA,OAAQC,CAAAA,eAAb,GAA+BR,mDAAWS,CAAAA,SAA1C;AAAqD,UAAKzB,CAAAA,OAAL,GAAeA,OAAf;AAAwB,UAAK0B,CAAAA,OAAQC,CAAAA,GAAb,CAAiB,IAAK3B,CAAAA,OAAtB,CAAA;AA5C5b;AAqDd4B,eAAI,CAAC5B,OAAD,CAAU;AACnB,aAAOA,OAAS6B,EAAAA,WAAT,GAAuB,CAAA,CAAvB,GAA4BjC,KAAMkC,CAAAA,gBAAN,EAAnC;AADmB;AAYrBC,UAAM,CAACC,aAAD,EAAgBhC,OAAhB,CAAyB;AAC7B,UAAKiC,CAAAA,cAAeF,CAAAA,MAApB,CAA2BC,aAA3B,EAA0ChC,OAA1C,CAAA;AAD6B;AAQ/BkC,UAAM,CAACC,kBAAD,EAAqBC,mBAArB,CAA0C;AAC9C,UAAKC,CAAAA,KAAMC,CAAAA,UAAX,CAAsBH,kBAAtB,EAA0CC,mBAA1C,CAAA;AAD8C;AAOhDG,SAAK,EAAG;AACN,aAAO,IAAKzB,CAAAA,OAAQyB,CAAAA,KAAMC,CAAAA,IAAnB,EAAA,EAA2B,IAAlC;AADM;AAIRC,SAAK,EAAG;AACN,UAAKC,CAAAA,aAAcC,CAAAA,IAAnB,EAAA;AAA2B,UAAKD,CAAAA,aAAcD,CAAAA,KAAnB,EAAA;AADrB;AAQRG,WAAO,CAACC,UAAA,GAAa,CAAA,CAAd,CAAkB;AACvB,UAAK/B,CAAAA,OAAQ8B,CAAAA,OAAQE,CAAAA,KAAMC,CAAAA,OAA3B,EAAA;AAAsC,UAAKC,CAAAA,qBAAL,CAA2B,IAAKlC,CAAAA,OAAQ8B,CAAAA,OAAxC,EAAiD,CACrFP,MAAOQ,UAD8E,CAAjD,CAAA;AAElC,WAAMD,CAAAA,OAAN,EAAA;AAHmB;AAMrB,eAAU,EAAA;AACZ,aAAO,IAAKrB,CAAAA,OAAQ0B,CAAAA,OAApB;AADY;AAIV,mBAAc,EAAA;AAChB,aAAO,IAAKC,CAAAA,YAAaC,CAAAA,WAAzB;AADgB;AASd,aAAQ,EAAA;AACV,aAAO,IAAKd,CAAAA,KAAMe,CAAAA,OAAQC,CAAAA,KAA1B;AADU;AAOR,cAAS,EAAA;AACX,aAAO,IAAKhB,CAAAA,KAAMe,CAAAA,OAAQE,CAAAA,MAA1B;AADW;AAIT,kBAAa,EAAA;AACf,aAAO,IAAKjB,CAAAA,KAAMkB,CAAAA,UAAlB;AADe;AAGb,kBAAU,CAACC,KAAD,CAAQ;AACpB,UAAKnB,CAAAA,KAAMkB,CAAAA,UAAX,GAAwBC,KAAxB;AAA+B,UAAK1C,CAAAA,OAAQ2C,CAAAA,gBAAiBjB,CAAAA,IAA9B,CAAmCgB,KAAnC,CAAA;AADX;AAIlB,mBAAc,EAAA;AAChB,aAAO,IAAKnB,CAAAA,KAAMqB,CAAAA,WAAlB;AADgB;AAId,YAAO,EAAA;AACT,aAAO,IAAKrB,CAAAA,KAAMe,CAAAA,OAAlB;AADS;AASP,cAAS,EAAA;AACX,aAAO,IAAKf,CAAAA,KAAMsB,CAAAA,MAAlB;AADW;AAIT,0BAAqB,EAAA;AACvB,aAAO,IAAK1B,CAAAA,cAAe2B,CAAAA,kBAA3B;AADuB;AAIrB,yBAAoB,EAAA;AACtB,aAAO,IAAK3B,CAAAA,cAAe4B,CAAAA,iBAA3B;AADsB;AAIpB,qBAAgB,EAAA;AAClB,aAAQ,SAAQ,IAAKC,CAAAA,OAAQC,CAAAA,YAArB,EAAR;AADkB;AAOhB,yBAAoB,EAAA;AACtB,aAAOnE,KAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,2GAA3B,CAAA,EAAyI,IAAK6C,CAAAA,UAAWC,CAAAA,iBAAhK;AADsB;AASpB,uBAAkB,EAAA;AACpB,aAAOrE,KAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,uGAA3B,CAAA,EAAqI,IAAK2C,CAAAA,OAAQzC,CAAAA,eAAzJ;AADoB;AAQlB,6BAAwB,EAAA;AAC1B,aAAOzB,KAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,+GAA3B,CAAA,EAA6I,IAAK2C,CAAAA,OAAQI,CAAAA,qBAAjK;AAD0B;AAQxB,uBAAkB,EAAA;AACpB,aAAOtE,KAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,sFAA3B,CAAA,EAAoH,IAAK6C,CAAAA,UAAWG,CAAAA,KAA3I;AADoB;AAGlB,uBAAe,CAACX,KAAD,CAAQ;AACzB5D,WAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,sFAA3B,CAAA;AAAoH,UAAK6C,CAAAA,UAAWG,CAAAA,KAAhB,GAAwBX,KAAxB;AAD3F;AAQvB,uBAAkB,EAAA;AACpB,aAAO5D,KAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,sFAA3B,CAAA,EAAoH,IAAK6C,CAAAA,UAAWI,CAAAA,KAA3I;AADoB;AAMlB,uBAAe,CAACZ,KAAD,CAAQ;AACzB5D,WAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,sFAA3B,CAAA;AAAoH,UAAK6C,CAAAA,UAAWI,CAAAA,KAAhB,GAAwBZ,KAAxB;AAD3F;AAMvB,uBAAkB,EAAA;AACpB,aAAO5D,KAAMuB,CAAAA,WAAN,CAAkB,OAAlB,EAA2B,iGAA3B,CAAA,EAA+H,IAAK2C,CAAAA,OAAQO,CAAAA,eAAnJ;AADoB;AActBC,mBAAe,CAACtC,aAAD,EAAgBhC,OAAhB,CAAyB;AACtC,aAAO,IAAKuE,CAAAA,gBAAiBD,CAAAA,eAAtB,CAAsCtC,aAAtC,EAAqDhC,OAArD,CAAP;AADsC;AAnOxB,GAAA;AAAZwE,SAAAA,GAAY,mDAAZA;AAuONA,SAAUC,CAAAA,SAAV,GAAsB,CACpBxE,KAAMR,MAAWiF,CAAAA,aAAcC,CAAAA,QADX,EAEpBzD,SAAU,CAFU,CAAtB;AASAsD,SAAU/C,CAAAA,SAAV,GAAsB,EAAtB;AAIA+C,SAAUvD,CAAAA,SAAV,GAAsB,EAAtB;AAEAxB,QAAWA,CAAAA,UAAWmF,CAAAA,WAAtB,CAAkCnF,MAAWiF,CAAAA,aAAcG,CAAAA,cAA3D,EADeL,OACqE/C,CAAAA,SAApF,CAAA;AACAhC,QAAWA,CAAAA,UAAWmF,CAAAA,WAAtB,CAAkCnF,MAAWiF,CAAAA,aAAcI,CAAAA,cAA3D,EAFeN,OAEqEvD,CAAAA,SAApF,CAAA;AACAxB,QAAWA,CAAAA,UAAWsF,CAAAA,GAAtB,CAHeP,OAGf,CAAA;AACAjF,SAAQoF,CAAAA,QAAR,GAJeH,OAIf;AA5PwG,CAAxG;;",
"sources":["node_modules/@pixi/core/lib/Renderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$Renderer\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), extensions = require(\"@pixi/extensions\"), math = require(\"@pixi/math\"), settings = require(\"@pixi/settings\"), utils = require(\"@pixi/utils\"), UniformGroup = require(\"./shader/UniformGroup.js\"), SystemManager = require(\"./system/SystemManager.js\");\nconst _Renderer = class _Renderer2 extends SystemManager.SystemManager {\n  /**\n   * @param {PIXI.IRendererOptions} [options] - See {@link PIXI.settings.RENDER_OPTIONS} for defaults.\n   */\n  constructor(options) {\n    super(), this.type = constants.RENDERER_TYPE.WEBGL, options = Object.assign({}, settings.settings.RENDER_OPTIONS, options), this.gl = null, this.CONTEXT_UID = 0, this.globalUniforms = new UniformGroup.UniformGroup({\n      projectionMatrix: new math.Matrix()\n    }, !0);\n    const systemConfig = {\n      runners: [\n        \"init\",\n        \"destroy\",\n        \"contextChange\",\n        \"resolutionChange\",\n        \"reset\",\n        \"update\",\n        \"postrender\",\n        \"prerender\",\n        \"resize\"\n      ],\n      systems: _Renderer2.__systems,\n      priority: [\n        \"_view\",\n        \"textureGenerator\",\n        \"background\",\n        \"_plugin\",\n        \"startup\",\n        // low level WebGL systems\n        \"context\",\n        \"state\",\n        \"texture\",\n        \"buffer\",\n        \"geometry\",\n        \"framebuffer\",\n        \"transformFeedback\",\n        // high level pixi specific rendering\n        \"mask\",\n        \"scissor\",\n        \"stencil\",\n        \"projection\",\n        \"textureGC\",\n        \"filter\",\n        \"renderTexture\",\n        \"batch\",\n        \"objectRenderer\",\n        \"_multisample\"\n      ]\n    };\n    this.setup(systemConfig), \"useContextAlpha\" in options && (utils.deprecation(\"7.0.0\", \"options.useContextAlpha is deprecated, use options.premultipliedAlpha and options.backgroundAlpha instead\"), options.premultipliedAlpha = options.useContextAlpha && options.useContextAlpha !== \"notMultiplied\", options.backgroundAlpha = options.useContextAlpha === !1 ? 1 : options.backgroundAlpha), this._plugin.rendererPlugins = _Renderer2.__plugins, this.options = options, this.startup.run(this.options);\n  }\n  /**\n   * Create renderer if WebGL is available. Overrideable\n   * by the **@pixi/canvas-renderer** package to allow fallback.\n   * throws error if WebGL is not available.\n   * @param options\n   * @private\n   */\n  static test(options) {\n    return options?.forceCanvas ? !1 : utils.isWebGLSupported();\n  }\n  /**\n   * Renders the object to its WebGL view.\n   * @param displayObject - The object to be rendered.\n   * @param {object} [options] - Object to use for render options.\n   * @param {PIXI.RenderTexture} [options.renderTexture] - The render texture to render to.\n   * @param {boolean} [options.clear=true] - Should the canvas be cleared before the new render.\n   * @param {PIXI.Matrix} [options.transform] - A transform to apply to the render texture before rendering.\n   * @param {boolean} [options.skipUpdateTransform=false] - Should we skip the update transform pass?\n   */\n  render(displayObject, options) {\n    this.objectRenderer.render(displayObject, options);\n  }\n  /**\n   * Resizes the WebGL view to the specified width and height.\n   * @param desiredScreenWidth - The desired width of the screen.\n   * @param desiredScreenHeight - The desired height of the screen.\n   */\n  resize(desiredScreenWidth, desiredScreenHeight) {\n    this._view.resizeView(desiredScreenWidth, desiredScreenHeight);\n  }\n  /**\n   * Resets the WebGL state so you can render things however you fancy!\n   * @returns Returns itself.\n   */\n  reset() {\n    return this.runners.reset.emit(), this;\n  }\n  /** Clear the frame buffer. */\n  clear() {\n    this.renderTexture.bind(), this.renderTexture.clear();\n  }\n  /**\n   * Removes everything from the renderer (event listeners, spritebatch, etc...)\n   * @param [removeView=false] - Removes the Canvas element from the DOM.\n   *  See: https://github.com/pixijs/pixijs/issues/2233\n   */\n  destroy(removeView = !1) {\n    this.runners.destroy.items.reverse(), this.emitWithCustomOptions(this.runners.destroy, {\n      _view: removeView\n    }), super.destroy();\n  }\n  /** Collection of plugins */\n  get plugins() {\n    return this._plugin.plugins;\n  }\n  /** The number of msaa samples of the canvas. */\n  get multisample() {\n    return this._multisample.multisample;\n  }\n  /**\n   * Same as view.width, actual number of pixels in the canvas by horizontal.\n   * @member {number}\n   * @readonly\n   * @default 800\n   */\n  get width() {\n    return this._view.element.width;\n  }\n  /**\n   * Same as view.height, actual number of pixels in the canvas by vertical.\n   * @default 600\n   */\n  get height() {\n    return this._view.element.height;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this._view.resolution;\n  }\n  set resolution(value) {\n    this._view.resolution = value, this.runners.resolutionChange.emit(value);\n  }\n  /** Whether CSS dimensions of canvas view should be resized to screen dimensions automatically. */\n  get autoDensity() {\n    return this._view.autoDensity;\n  }\n  /** The canvas element that everything is drawn to.*/\n  get view() {\n    return this._view.element;\n  }\n  /**\n   * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n   *\n   * Its safe to use as filterArea or hitArea for the whole stage.\n   * @member {PIXI.Rectangle}\n   */\n  get screen() {\n    return this._view.screen;\n  }\n  /** the last object rendered by the renderer. Useful for other plugins like interaction managers */\n  get lastObjectRendered() {\n    return this.objectRenderer.lastObjectRendered;\n  }\n  /** Flag if we are rendering to the screen vs renderTexture */\n  get renderingToScreen() {\n    return this.objectRenderer.renderingToScreen;\n  }\n  /** When logging Pixi to the console, this is the name we will show */\n  get rendererLogId() {\n    return `WebGL ${this.context.webGLVersion}`;\n  }\n  /**\n   * This sets weather the screen is totally cleared between each frame withthe background color and alpha\n   * @deprecated since 7.0.0\n   */\n  get clearBeforeRender() {\n    return utils.deprecation(\"7.0.0\", \"renderer.clearBeforeRender has been deprecated, please use renderer.background.clearBeforeRender instead.\"), this.background.clearBeforeRender;\n  }\n  /**\n   * Pass-thru setting for the canvas' context `alpha` property. This is typically\n   * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.\n   * @deprecated since 7.0.0\n   * @member {boolean}\n   */\n  get useContextAlpha() {\n    return utils.deprecation(\"7.0.0\", \"renderer.useContextAlpha has been deprecated, please use renderer.context.premultipliedAlpha instead.\"), this.context.useContextAlpha;\n  }\n  /**\n   * readonly drawing buffer preservation\n   * we can only know this if Pixi created the context\n   * @deprecated since 7.0.0\n   */\n  get preserveDrawingBuffer() {\n    return utils.deprecation(\"7.0.0\", \"renderer.preserveDrawingBuffer has been deprecated, we cannot truly know this unless pixi created the context\"), this.context.preserveDrawingBuffer;\n  }\n  /**\n   * The background color to fill if not transparent\n   * @member {number}\n   * @deprecated since 7.0.0\n   */\n  get backgroundColor() {\n    return utils.deprecation(\"7.0.0\", \"renderer.backgroundColor has been deprecated, use renderer.background.color instead.\"), this.background.color;\n  }\n  set backgroundColor(value) {\n    utils.deprecation(\"7.0.0\", \"renderer.backgroundColor has been deprecated, use renderer.background.color instead.\"), this.background.color = value;\n  }\n  /**\n   * The background color alpha. Setting this to 0 will make the canvas transparent.\n   * @member {number}\n   * @deprecated since 7.0.0\n   */\n  get backgroundAlpha() {\n    return utils.deprecation(\"7.0.0\", \"renderer.backgroundAlpha has been deprecated, use renderer.background.alpha instead.\"), this.background.alpha;\n  }\n  /**\n   * @deprecated since 7.0.0\n   */\n  set backgroundAlpha(value) {\n    utils.deprecation(\"7.0.0\", \"renderer.backgroundAlpha has been deprecated, use renderer.background.alpha instead.\"), this.background.alpha = value;\n  }\n  /**\n   * @deprecated since 7.0.0\n   */\n  get powerPreference() {\n    return utils.deprecation(\"7.0.0\", \"renderer.powerPreference has been deprecated, we can only know this if pixi creates the context\"), this.context.powerPreference;\n  }\n  /**\n   * Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n   * @param displayObject - The displayObject the object will be generated from.\n   * @param {IGenerateTextureOptions} options - Generate texture options.\n   * @param {PIXI.Rectangle} options.region - The region of the displayObject, that shall be rendered,\n   *        if no region is specified, defaults to the local bounds of the displayObject.\n   * @param {number} [options.resolution] - If not given, the renderer's resolution is used.\n   * @param {PIXI.MSAA_QUALITY} [options.multisample] - If not given, the renderer's multisample is used.\n   * @returns A texture of the graphics object.\n   */\n  generateTexture(displayObject, options) {\n    return this.textureGenerator.generateTexture(displayObject, options);\n  }\n};\n_Renderer.extension = {\n  type: extensions.ExtensionType.Renderer,\n  priority: 1\n}, /**\n* Collection of installed plugins. These are included by default in PIXI, but can be excluded\n* by creating a custom build. Consult the README for more information about creating custom\n* builds and excluding plugins.\n* @private\n*/\n_Renderer.__plugins = {}, /**\n* The collection of installed systems.\n* @private\n*/\n_Renderer.__systems = {};\nlet Renderer = _Renderer;\nextensions.extensions.handleByMap(extensions.ExtensionType.RendererPlugin, Renderer.__plugins);\nextensions.extensions.handleByMap(extensions.ExtensionType.RendererSystem, Renderer.__systems);\nextensions.extensions.add(Renderer);\nexports.Renderer = Renderer;\n//# sourceMappingURL=Renderer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","extensions","math","settings","utils","UniformGroup","SystemManager","constructor","options","type","RENDERER_TYPE","WEBGL","Object","assign","RENDER_OPTIONS","gl","CONTEXT_UID","globalUniforms","projectionMatrix","Matrix","setup","systemConfig","runners","systems","_Renderer2","__systems","priority","deprecation","premultipliedAlpha","useContextAlpha","backgroundAlpha","_plugin","rendererPlugins","__plugins","startup","run","test","forceCanvas","isWebGLSupported","render","displayObject","objectRenderer","resize","desiredScreenWidth","desiredScreenHeight","_view","resizeView","reset","emit","clear","renderTexture","bind","destroy","removeView","items","reverse","emitWithCustomOptions","plugins","_multisample","multisample","element","width","height","resolution","value","resolutionChange","autoDensity","screen","lastObjectRendered","renderingToScreen","context","webGLVersion","background","clearBeforeRender","preserveDrawingBuffer","color","alpha","powerPreference","generateTexture","textureGenerator","_Renderer","extension","ExtensionType","Renderer","handleByMap","RendererPlugin","RendererSystem","add"]
}
