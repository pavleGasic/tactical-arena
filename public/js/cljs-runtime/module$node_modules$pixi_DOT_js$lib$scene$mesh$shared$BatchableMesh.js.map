{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$BatchableMesh.js",
"lineCount":61,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh/shared/BatchableMesh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$BatchableMesh\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexports.BatchableMesh = BatchableMesh;\n//# sourceMappingURL=BatchableMesh.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","BatchableMesh","constructor","batcherName","packAsQuad","roundPixels","attributeOffset","indexOffset","_batch","_batcher","_uvUpdateId","_textureMatrixUpdateId","renderable","groupBlendMode","_topology","geometry","topology","value","reset","texture","setTexture","uvBuffer","getBuffer","uvs","data","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","length","Float32Array","multiplyUvs","positions","indices","groupColorAlpha","groupTransform"]
}
