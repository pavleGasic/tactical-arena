{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$system$AbstractRenderer.js",
"lineCount":148,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/system/AbstractRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$system$AbstractRenderer\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Color = require('../../../../color/Color.js');\nvar autoDetectEnvironment = require('../../../../environment/autoDetectEnvironment.js');\nvar Container = require('../../../../scene/container/Container.js');\nvar unsafeEvalSupported = require('../../../../utils/browser/unsafeEvalSupported.js');\nvar deprecation = require('../../../../utils/logging/deprecation.js');\nrequire('../../../../utils/utils.js');\nvar _const = require('../../gl/const.js');\nvar SystemRunner = require('./SystemRunner.js');\nvar EventEmitter = require('eventemitter3');\n\n\"use strict\";\nconst defaultRunners = [\n  \"init\",\n  \"destroy\",\n  \"contextChange\",\n  \"resolutionChange\",\n  \"resetState\",\n  \"renderEnd\",\n  \"renderStart\",\n  \"render\",\n  \"update\",\n  \"postrender\",\n  \"prerender\"\n];\nconst _AbstractRenderer = class _AbstractRenderer extends EventEmitter {\n  /**\n   * Set up a system with a collection of SystemClasses and runners.\n   * Systems are attached dynamically to this class when added.\n   * @param config - the config for the system manager\n   */\n  constructor(config) {\n    super();\n    this.runners = /* @__PURE__ */ Object.create(null);\n    this.renderPipes = /* @__PURE__ */ Object.create(null);\n    this._initOptions = {};\n    this._systemsHash = /* @__PURE__ */ Object.create(null);\n    this.type = config.type;\n    this.name = config.name;\n    this.config = config;\n    const combinedRunners = [...defaultRunners, ...this.config.runners ?? []];\n    this._addRunners(...combinedRunners);\n    this._unsafeEvalCheck();\n  }\n  /**\n   * Initialize the renderer.\n   * @param options - The options to use to create the renderer.\n   */\n  async init(options = {}) {\n    const skip = options.skipExtensionImports === true ? true : options.manageImports === false;\n    await autoDetectEnvironment.loadEnvironmentExtensions(skip);\n    this._addSystems(this.config.systems);\n    this._addPipes(this.config.renderPipes, this.config.renderPipeAdaptors);\n    for (const systemName in this._systemsHash) {\n      const system = this._systemsHash[systemName];\n      const defaultSystemOptions = system.constructor.defaultOptions;\n      options = { ...defaultSystemOptions, ...options };\n    }\n    options = { ..._AbstractRenderer.defaultOptions, ...options };\n    this._roundPixels = options.roundPixels ? 1 : 0;\n    for (let i = 0; i < this.runners.init.items.length; i++) {\n      await this.runners.init.items[i].init(options);\n    }\n    this._initOptions = options;\n  }\n  render(args, deprecated) {\n    let options = args;\n    if (options instanceof Container.Container) {\n      options = { container: options };\n      if (deprecated) {\n        deprecation.deprecation(deprecation.v8_0_0, \"passing a second argument is deprecated, please use render options instead\");\n        options.target = deprecated.renderTexture;\n      }\n    }\n    options.target || (options.target = this.view.renderTarget);\n    if (options.target === this.view.renderTarget) {\n      this._lastObjectRendered = options.container;\n      options.clearColor ?? (options.clearColor = this.background.colorRgba);\n      options.clear ?? (options.clear = this.background.clearBeforeRender);\n    }\n    if (options.clearColor) {\n      const isRGBAArray = Array.isArray(options.clearColor) && options.clearColor.length === 4;\n      options.clearColor = isRGBAArray ? options.clearColor : Color.Color.shared.setValue(options.clearColor).toArray();\n    }\n    if (!options.transform) {\n      options.container.updateLocalTransform();\n      options.transform = options.container.localTransform;\n    }\n    options.container.enableRenderGroup();\n    this.runners.prerender.emit(options);\n    this.runners.renderStart.emit(options);\n    this.runners.render.emit(options);\n    this.runners.renderEnd.emit(options);\n    this.runners.postrender.emit(options);\n  }\n  /**\n   * Resizes the WebGL view to the specified width and height.\n   * @param desiredScreenWidth - The desired width of the screen.\n   * @param desiredScreenHeight - The desired height of the screen.\n   * @param resolution - The resolution / device pixel ratio of the renderer.\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    const previousResolution = this.view.resolution;\n    this.view.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.emit(\"resize\", this.view.screen.width, this.view.screen.height, this.view.resolution);\n    if (resolution !== void 0 && resolution !== previousResolution) {\n      this.runners.resolutionChange.emit(resolution);\n    }\n  }\n  clear(options = {}) {\n    const renderer = this;\n    options.target || (options.target = renderer.renderTarget.renderTarget);\n    options.clearColor || (options.clearColor = this.background.colorRgba);\n    options.clear ?? (options.clear = _const.CLEAR.ALL);\n    const { clear, clearColor, target } = options;\n    Color.Color.shared.setValue(clearColor ?? this.background.colorRgba);\n    renderer.renderTarget.clear(target, clear, Color.Color.shared.toArray());\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.view.resolution;\n  }\n  set resolution(value) {\n    this.view.resolution = value;\n    this.runners.resolutionChange.emit(value);\n  }\n  /**\n   * Same as view.width, actual number of pixels in the canvas by horizontal.\n   * @member {number}\n   * @readonly\n   * @default 800\n   */\n  get width() {\n    return this.view.texture.frame.width;\n  }\n  /**\n   * Same as view.height, actual number of pixels in the canvas by vertical.\n   * @default 600\n   */\n  get height() {\n    return this.view.texture.frame.height;\n  }\n  // NOTE: this was `view` in v7\n  /**\n   * The canvas element that everything is drawn to.\n   * @type {environment.ICanvas}\n   */\n  get canvas() {\n    return this.view.canvas;\n  }\n  /**\n   * the last object rendered by the renderer. Useful for other plugins like interaction managers\n   * @readonly\n   */\n  get lastObjectRendered() {\n    return this._lastObjectRendered;\n  }\n  /**\n   * Flag if we are rendering to the screen vs renderTexture\n   * @readonly\n   * @default true\n   */\n  get renderingToScreen() {\n    const renderer = this;\n    return renderer.renderTarget.renderingToScreen;\n  }\n  /**\n   * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n   *\n   * Its safe to use as filterArea or hitArea for the whole stage.\n   */\n  get screen() {\n    return this.view.screen;\n  }\n  /**\n   * Create a bunch of runners based of a collection of ids\n   * @param runnerIds - the runner ids to add\n   */\n  _addRunners(...runnerIds) {\n    runnerIds.forEach((runnerId) => {\n      this.runners[runnerId] = new SystemRunner.SystemRunner(runnerId);\n    });\n  }\n  _addSystems(systems) {\n    let i;\n    for (i in systems) {\n      const val = systems[i];\n      this._addSystem(val.value, val.name);\n    }\n  }\n  /**\n   * Add a new system to the renderer.\n   * @param ClassRef - Class reference\n   * @param name - Property name for system, if not specified\n   *        will use a static `name` property on the class itself. This\n   *        name will be assigned as s property on the Renderer so make\n   *        sure it doesn't collide with properties on Renderer.\n   * @returns Return instance of renderer\n   */\n  _addSystem(ClassRef, name) {\n    const system = new ClassRef(this);\n    if (this[name]) {\n      throw new Error(`Whoops! The name \"${name}\" is already in use`);\n    }\n    this[name] = system;\n    this._systemsHash[name] = system;\n    for (const i in this.runners) {\n      this.runners[i].add(system);\n    }\n    return this;\n  }\n  _addPipes(pipes, pipeAdaptors) {\n    const adaptors = pipeAdaptors.reduce((acc, adaptor) => {\n      acc[adaptor.name] = adaptor.value;\n      return acc;\n    }, {});\n    pipes.forEach((pipe) => {\n      const PipeClass = pipe.value;\n      const name = pipe.name;\n      const Adaptor = adaptors[name];\n      this.renderPipes[name] = new PipeClass(\n        this,\n        Adaptor ? new Adaptor() : null\n      );\n    });\n  }\n  destroy(options = false) {\n    this.runners.destroy.items.reverse();\n    this.runners.destroy.emit(options);\n    Object.values(this.runners).forEach((runner) => {\n      runner.destroy();\n    });\n    this._systemsHash = null;\n    this.renderPipes = null;\n  }\n  /**\n   * Generate a texture from a container.\n   * @param options - options or container target to use when generating the texture\n   * @returns a texture\n   */\n  generateTexture(options) {\n    return this.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Whether the renderer will round coordinates to whole pixels when rendering.\n   * Can be overridden on a per scene item basis.\n   */\n  get roundPixels() {\n    return !!this._roundPixels;\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   * @ignore\n   */\n  _unsafeEvalCheck() {\n    if (!unsafeEvalSupported.unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  /**\n   * Resets the rendering state of the renderer.\n   * This is useful when you want to use the WebGL context directly and need to ensure PixiJS's internal state\n   * stays synchronized. When modifying the WebGL context state externally, calling this method before the next Pixi\n   * render will reset all internal caches and ensure it executes correctly.\n   *\n   * This is particularly useful when combining PixiJS with other rendering engines like Three.js:\n   * ```js\n   * // Reset Three.js state\n   * threeRenderer.resetState();\n   *\n   * // Render a Three.js scene\n   * threeRenderer.render(threeScene, threeCamera);\n   *\n   * // Reset PixiJS state since Three.js modified the WebGL context\n   * pixiRenderer.resetState();\n   *\n   * // Now render Pixi content\n   * pixiRenderer.render(pixiScene);\n   * ```\n   */\n  resetState() {\n    this.runners.resetState.emit();\n  }\n};\n/** The default options for the renderer. */\n_AbstractRenderer.defaultOptions = {\n  /**\n   * Default resolution / device pixel ratio of the renderer.\n   * @default 1\n   */\n  resolution: 1,\n  /**\n   * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported`\n   * function. If set to true, a WebGL renderer can fail to be created if the browser thinks there could be\n   * performance issues when using WebGL.\n   *\n   * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many\n   * scenarios as possible. However, some users may have a poor experience, for example, if a user has a gpu or\n   * driver version blacklisted by the\n   * browser.\n   *\n   * If your application requires high performance rendering, you may wish to set this to false.\n   * We recommend one of two options if you decide to set this flag to false:\n   *\n   * 1: Use the Canvas renderer as a fallback in case high performance WebGL is\n   *    not supported.\n   *\n   * 2: Call `isWebGLSupported` (which if found in the utils package) in your code before attempting to create a\n   *    PixiJS renderer, and show an error message to the user if the function returns false, explaining that their\n   *    device & browser combination does not support high performance WebGL.\n   *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.\n   * @default false\n   */\n  failIfMajorPerformanceCaveat: false,\n  /**\n   * Should round pixels be forced when rendering?\n   * @default false\n   */\n  roundPixels: false\n};\nlet AbstractRenderer = _AbstractRenderer;\n\nexports.AbstractRenderer = AbstractRenderer;\n//# sourceMappingURL=AbstractRenderer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","autoDetectEnvironment","Container","unsafeEvalSupported","deprecation","_const","SystemRunner","EventEmitter","defaultRunners","constructor","config","runners","Object","create","renderPipes","_initOptions","_systemsHash","type","name","combinedRunners","_addRunners","_unsafeEvalCheck","init","options","loadEnvironmentExtensions","skip","skipExtensionImports","manageImports","_addSystems","systems","_addPipes","renderPipeAdaptors","systemName","system","defaultOptions","_AbstractRenderer","_roundPixels","roundPixels","i","items","length","render","args","deprecated","container","v8_0_0","target","renderTexture","view","renderTarget","_lastObjectRendered","clearColor","background","colorRgba","clear","clearBeforeRender","isRGBAArray","Array","isArray","shared","setValue","toArray","transform","updateLocalTransform","localTransform","enableRenderGroup","prerender","emit","renderStart","renderEnd","postrender","resize","desiredScreenWidth","desiredScreenHeight","resolution","previousResolution","screen","width","height","resolutionChange","renderer","CLEAR","ALL","value","texture","frame","canvas","renderingToScreen","runnerIds","forEach","runnerId","val","_addSystem","ClassRef","Error","add","pipes","pipeAdaptors","adaptors","reduce","acc","adaptor","pipe","Adaptor","destroy","reverse","values","runner","generateTexture","textureGenerator","resetState","failIfMajorPerformanceCaveat","AbstractRenderer"]
}
