shadow$provide.module$node_modules$$pixi$core$lib$render$ObjectRendererSystem = function(global, require, module, exports) {
  global = require("module$node_modules$$pixi$extensions$lib$index");
  class ObjectRendererSystem {
    constructor(renderer) {
      this.renderer = renderer;
    }
    render(displayObject, options) {
      const renderer = this.renderer;
      let renderTexture, clear;
      var transform;
      let skipUpdateTransform;
      (options && (renderTexture = options.renderTexture, clear = options.clear, transform = options.transform, skipUpdateTransform = options.skipUpdateTransform), this.renderingToScreen = !renderTexture, renderer.runners.prerender.emit(), renderer.emit("prerender"), renderer.projection.transform = transform, renderer.context.isLost) || ((renderTexture || (this.lastObjectRendered = displayObject), skipUpdateTransform) || (transform = displayObject.enableTempParent(), displayObject.updateTransform(), 
      displayObject.disableTempParent(transform)), renderer.renderTexture.bind(renderTexture), renderer.batch.currentRenderer.start(), (clear ?? renderer.background.clearBeforeRender) && renderer.renderTexture.clear(), displayObject.render(renderer), renderer.batch.currentRenderer.flush(), renderTexture && (options.blit && renderer.framebuffer.blit(), renderTexture.baseTexture.update()), renderer.runners.postrender.emit(), renderer.projection.transform = null, renderer.emit("postrender"));
    }
    destroy() {
      this.lastObjectRendered = this.renderer = null;
    }
  }
  ObjectRendererSystem.extension = {type:global.ExtensionType.RendererSystem, name:"objectRenderer"};
  global.extensions.add(ObjectRendererSystem);
  exports.ObjectRendererSystem = ObjectRendererSystem;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$render$ObjectRendererSystem.js.map
