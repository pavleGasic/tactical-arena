{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$GpuProgram.js",
"lineCount":45,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/shader/GpuProgram.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$GpuProgram\"] = function(global,require,module,exports) {\n'use strict';\n\nvar createIdFromString = require('../../shared/utils/createIdFromString.js');\nvar extractAttributesFromGpuProgram = require('./utils/extractAttributesFromGpuProgram.js');\nvar extractStructAndGroups = require('./utils/extractStructAndGroups.js');\nvar generateGpuLayoutGroups = require('./utils/generateGpuLayoutGroups.js');\nvar generateLayoutHash = require('./utils/generateLayoutHash.js');\nvar removeStructAndGroupDuplicates = require('./utils/removeStructAndGroupDuplicates.js');\n\n\"use strict\";\nconst programCache = /* @__PURE__ */ Object.create(null);\nclass GpuProgram {\n  /**\n   * Create a new GpuProgram\n   * @param options - The options for the gpu program\n   */\n  constructor(options) {\n    /**\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    /**\n     * @internal\n     * @ignore\n     */\n    this._attributeLocationsKey = 0;\n    const { fragment, vertex, layout, gpuLayout, name } = options;\n    this.name = name;\n    this.fragment = fragment;\n    this.vertex = vertex;\n    if (fragment.source === vertex.source) {\n      const structsAndGroups = extractStructAndGroups.extractStructAndGroups(fragment.source);\n      this.structsAndGroups = structsAndGroups;\n    } else {\n      const vertexStructsAndGroups = extractStructAndGroups.extractStructAndGroups(vertex.source);\n      const fragmentStructsAndGroups = extractStructAndGroups.extractStructAndGroups(fragment.source);\n      this.structsAndGroups = removeStructAndGroupDuplicates.removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n    }\n    this.layout = layout ?? generateLayoutHash.generateLayoutHash(this.structsAndGroups);\n    this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups.generateGpuLayoutGroups(this.structsAndGroups);\n    this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== void 0);\n    this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== void 0);\n    this._generateProgramKey();\n  }\n  // TODO maker this pure\n  _generateProgramKey() {\n    const { vertex, fragment } = this;\n    const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n    this._layoutKey = createIdFromString.createIdFromString(bigKey, \"program\");\n  }\n  get attributeData() {\n    this._attributeData ?? (this._attributeData = extractAttributesFromGpuProgram.extractAttributesFromGpuProgram(this.vertex));\n    return this._attributeData;\n  }\n  /** destroys the program */\n  destroy() {\n    this.gpuLayout = null;\n    this.layout = null;\n    this.structsAndGroups = null;\n    this.fragment = null;\n    this.vertex = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n    if (!programCache[key]) {\n      programCache[key] = new GpuProgram(options);\n    }\n    return programCache[key];\n  }\n}\n\nexports.GpuProgram = GpuProgram;\n//# sourceMappingURL=GpuProgram.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","createIdFromString","extractAttributesFromGpuProgram","extractStructAndGroups","generateGpuLayoutGroups","generateLayoutHash","removeStructAndGroupDuplicates","programCache","Object","create","GpuProgram","constructor","options","_attributeLocationsKey","_layoutKey","fragment","vertex","layout","gpuLayout","name","source","structsAndGroups","vertexStructsAndGroups","fragmentStructsAndGroups","autoAssignGlobalUniforms","globalUniforms","autoAssignLocalUniforms","localUniforms","_generateProgramKey","entryPoint","_attributeData","destroy","from","key"]
}
