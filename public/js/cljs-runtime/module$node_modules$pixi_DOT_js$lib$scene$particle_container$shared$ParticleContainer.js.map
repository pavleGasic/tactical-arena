{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$ParticleContainer.js",
"lineCount":115,
"mappings":"AAAAA,cAAA,CAAA,qFAAA,GAA0G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG9IC,QAAAA,GAASH,OAAA,CAAQ,mEAAR,CAATG;AACAC,QAAAA,GAAgBJ,OAAA,CAAQ,8DAAR,CAAhBI;AACJ,MAAIC,eAAeL,OAAA,CAAQ,kFAAR,CAAnB;AAEA,cAAA;AACA,QAAMM,cAAc,IAAIH,MAAOA,CAAAA,MAAX,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAApB,EAC2B,iGAAA,aAAiCC,OAAcA,CAAAA,aAA/C;AAIzBG,eAAW,CAACC,OAAA,GAAU,EAAX,CAAe;AACxBA,aAAA,GAAU,CACR,GAAGC,8FAAmBC,CAAAA,cADd,EAER,GAAGF,OAFK,EAGRG,kBAAmB,CACjB,GAAGF,8FAAmBC,CAAAA,cAAeC,CAAAA,iBADpB,EAEjB,GAAGH,OAASG,EAAAA,iBAFK,CAHX,CAAV;AAQA,YAAM,CAAEA,iBAAF,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,OAA1C,EAAmDC,SAAnD,EAA8D,GAAGC,IAAjE,CAAA,GAA0ER,OAAhF;AACA,WAAA,CAAM,CACJS,MAAO,mBADH,EAEJ,GAAGD,IAFC,CAAN,CAAA;AAKA,UAAKE,CAAAA,YAAL,GAAoB,UAApB;AAGA,UAAKC,CAAAA,cAAL,GAFA,IAAKC,CAAAA,OAEL,GAFe,CAAA,CAEf;AACA,UAAKN,CAAAA,OAAL,GAAeA,OAAf,IAA0B,IAA1B;AACA,UAAKF,CAAAA,MAAL,GAAcA,MAAd;AACA,UAAKS,CAAAA,WAAL,GAAmB,EAAnB;AACA,WAAK,MAAMC,GAAX,GAAkBjB,aAAaA,CAAAA,YAA/B;AAGE,YAAKgB,CAAAA,WAAL,CAAiBC,GAAjB,CAAA,GAAwB,CACtB,GAHejB,YAAaA,CAAAA,YAAbkB,CAA0BD,GAA1BC,CAEO,EAEtBC,QAHcb,iBAAAa,CAAkBF,GAAlBE,CACQ,CAAxB;AAHF;AAQA,UAAKC,CAAAA,aAAL,GAAqB,CAAA,CAArB;AACA,UAAKZ,CAAAA,WAAL,GAAmBA,WAAnB,IAAkC,CAAA,CAAlC;AACA,UAAKa,CAAAA,gBAAL,GAAwBX,SAAxB,IAAqC,EAArC;AAhCwB;AAyC1BY,eAAW,CAAC,GAAGC,QAAJ,CAAc;AACvB,WAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,QAASE,CAAAA,MAA7B,EAAqCD,CAAA,EAArC;AACE,YAAKH,CAAAA,gBAAiBK,CAAAA,IAAtB,CAA2BH,QAAA,CAASC,CAAT,CAA3B,CAAA;AADF;AAGA,UAAKG,CAAAA,YAAL,EAAA;AACA,aAAOJ,QAAA,CAAS,CAAT,CAAP;AALuB;AAYzBK,kBAAc,CAAC,GAAGL,QAAJ,CAAc;AAC1B,UAAIM,YAAY,CAAA,CAAhB;AACA,WAAK,IAAIL,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,QAASE,CAAAA,MAA7B,EAAqCD,CAAA,EAArC,CAA0C;AACxC,cAAMM,QAAQ,IAAKT,CAAAA,gBAAiBU,CAAAA,OAAtB,CAA8BR,QAAA,CAASC,CAAT,CAA9B,CAAd;AACY,SAAC,CAAb,GAAIM,KAAJ,KACE,IAAKT,CAAAA,gBAAiBW,CAAAA,MAAtB,CAA6BF,KAA7B,EAAoC,CAApC,CACA,EAAAD,SAAA,GAAY,CAAA,CAFd;AAFwC;AAO1C,UAAIA,SAAJ;AACE,YAAKF,CAAAA,YAAL,EAAA;AADF;AAEA,aAAOJ,QAAA,CAAS,CAAT,CAAP;AAX0B;AAkB5BU,UAAM,EAAG;AACP,UAAKnB,CAAAA,cAAL,GAAsB,CAAA,CAAtB;AADO;AAGTa,gBAAY,EAAG;AACb,UAAKb,CAAAA,cAAL,GAAsB,CAAA,CAAtB;AACA,WAAMa,CAAAA,YAAN,EAAA;AAFa;AAQX,cAAS,EAAA;AACX,aAAO1B,WAAP;AADW;AAIbiC,gBAAY,EAAG;;AASfC,WAAO,CAAChC,OAAA,GAAU,CAAA,CAAX,CAAkB;AACvB,WAAMgC,CAAAA,OAAN,CAAchC,OAAd,CAAA;AAEA,UAD0C,SAAnBiC,KAAA,MAAOjC,QAAPiC,GAA+BjC,OAA/BiC,GAAyCjC,OAASM,EAAAA,OACzE,CAAoB;AAElB,cAAMA,UAAU,IAAKA,CAAAA,OAAfA,IAA0B,IAAKY,CAAAA,gBAAL,CAAsB,CAAtB,CAA0BZ,EAAAA,OAA1D;AACIA,eAAJ,IACEA,OAAQ0B,CAAAA,OAAR,CAH8C,SAAnBE,KAAA,MAAOlC,QAAPkC,GAA+BlC,OAA/BkC,GAAyClC,OAASmC,EAAAA,aAG7E,CADF;AAHkB;AAOpB,UAAK7B,CAAAA,OAAL,GAAe,IAAf;AACA,UAAKF,CAAAA,MAAQ4B,EAAAA,OAAb,EAAA;AAXuB;AAmBzBI,mBAAe,CAACC,UAAD,EAAaC,QAAb,CAAuB;AAC9BlB,gBAAAA,GAAW,IAAKF,CAAAA,gBAAiBW,CAAAA,MAAtB,CAA6BQ,UAA7B,EAAyCC,QAAzC,CAAXlB;AACN,UAAKI,CAAAA,YAAL,EAAA;AACA,aAAOJ,UAAP;AAHoC;AAUtCmB,oBAAgB,CAACZ,KAAD,CAAQ;AAChBa,WAAAA,GAAQ,IAAKtB,CAAAA,gBAAiBW,CAAAA,MAAtB,CAA6BF,KAA7B,EAAoC,CAApC,CAARa;AACN,UAAKhB,CAAAA,YAAL,EAAA;AACA,aAAOgB,KAAA,CAAM,CAAN,CAAP;AAHsB;AAYxBC,iBAAa,CAACD,KAAD,EAAQb,KAAR,CAAe;AAC1B,UAAKT,CAAAA,gBAAiBW,CAAAA,MAAtB,CAA6BF,KAA7B,EAAoC,CAApC,EAAuCa,KAAvC,CAAA;AACA,UAAKhB,CAAAA,YAAL,EAAA;AACA,aAAOgB,KAAP;AAH0B;AAY5BE,YAAQ,CAAC,GAAGC,SAAJ,CAAe;AACrB,YAAUC,KAAJ,CACJ,2FADI,CAAN;AADqB;AAWvBC,eAAW,CAAC,GAAGF,SAAJ,CAAe;AACxB,YAAUC,KAAJ,CACJ,iGADI,CAAN;AADwB;AAa1BE,kBAAc,CAACC,WAAD,EAAcC,SAAd,CAAyB;AACrC,YAAUJ,KAAJ,CACJ,qGADI,CAAN;AADqC;AAYvCK,iBAAa,CAACC,MAAD,CAAS;AACpB,YAAUN,KAAJ,CACJ,qGADI,CAAN;AADoB;AAYtBO,cAAU,CAACD,MAAD,CAAS;AACjB,YAAUN,KAAJ,CACJ,+FADI,CAAN;AADiB;AAanBQ,iBAAa,CAACC,MAAD,EAASH,MAAT,CAAiB;AAC5B,YAAUN,KAAJ,CACJ,qGADI,CAAN;AAD4B;AAY9BU,iBAAa,CAACD,MAAD,CAAS;AACpB,YAAUT,KAAJ,CACJ,qGADI,CAAN;AADoB;AAatBW,cAAU,CAACF,MAAD,EAASH,MAAT,CAAiB;AACzB,YAAUN,KAAJ,CACJ,+FADI,CAAN;AADyB;AAY3BY,gBAAY,CAACH,MAAD,EAASI,OAAT,CAAkB;AAC5B,YAAUb,KAAJ,CACJ,iGADI,CAAN;AAD4B;AAY9Bc,iBAAa,CAAC,GAAGL,MAAJ,CAAY;AACvB,YAAUT,KAAJ,CAAU,gFAAV,CAAN;AADuB;AAWzBe,mBAAe,CAACN,MAAD,EAASH,MAAT,CAAiB;AAC9B,YAAUN,KAAJ,CAAU,kFAAV,CAAN;AAD8B;AAjRP,GAD3B;AACM3C,SAAAA,GAAqB,8FAArBA;AA0RNA,SAAmBC,CAAAA,cAAnB,GAAoC,CAClCC,kBAAmB,CACjByD,OAAQ,CAAA,CADS,EAGjBC,SAAU,CAAA,CAHO,EAKjBC,SAAU,CAAA,CALO,EAOjBC,IAAK,CAAA,CAPY,EASjBC,MAAO,CAAA,CATU,CADe,EAalC3D,YAAa,CAAA,CAbqB,CAApC;AAkBAX,SAAQuE,CAAAA,iBAAR,GAFwBhE,OAExB;AArTkJ,CAAlJ;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/particle-container/shared/ParticleContainer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$ParticleContainer\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Bounds = require('../../container/bounds/Bounds.js');\nvar ViewContainer = require('../../view/ViewContainer.js');\nvar particleData = require('./particleData.js');\n\n\"use strict\";\nconst emptyBounds = new Bounds.Bounds(0, 0, 0, 0);\nconst _ParticleContainer = class _ParticleContainer extends ViewContainer.ViewContainer {\n  /**\n   * @param options - The options for creating the sprite.\n   */\n  constructor(options = {}) {\n    options = {\n      ..._ParticleContainer.defaultOptions,\n      ...options,\n      dynamicProperties: {\n        ..._ParticleContainer.defaultOptions.dynamicProperties,\n        ...options?.dynamicProperties\n      }\n    };\n    const { dynamicProperties, shader, roundPixels, texture, particles, ...rest } = options;\n    super({\n      label: \"ParticleContainer\",\n      ...rest\n    });\n    /** The unique identifier for the render pipe of this ParticleContainer. */\n    this.renderPipeId = \"particle\";\n    this.batched = false;\n    /** Indicates if the children of this ParticleContainer have changed and need to be updated. */\n    this._childrenDirty = false;\n    this.texture = texture || null;\n    this.shader = shader;\n    this._properties = {};\n    for (const key in particleData.particleData) {\n      const property = particleData.particleData[key];\n      const dynamic = dynamicProperties[key];\n      this._properties[key] = {\n        ...property,\n        dynamic\n      };\n    }\n    this.allowChildren = true;\n    this.roundPixels = roundPixels ?? false;\n    this.particleChildren = particles ?? [];\n  }\n  /**\n   * Adds one or more particles to the container.\n   *\n   * Multiple items can be added like so: `myContainer.addParticle(thingOne, thingTwo, thingThree)`\n   * @param {...IParticle} children - The Particle(s) to add to the container\n   * @returns {IParticle} - The first child that was added.\n   */\n  addParticle(...children) {\n    for (let i = 0; i < children.length; i++) {\n      this.particleChildren.push(children[i]);\n    }\n    this.onViewUpdate();\n    return children[0];\n  }\n  /**\n   * Removes one or more particles from the container.\n   * @param {...IParticle} children - The Particle(s) to remove\n   * @returns {IParticle} The first child that was removed.\n   */\n  removeParticle(...children) {\n    let didRemove = false;\n    for (let i = 0; i < children.length; i++) {\n      const index = this.particleChildren.indexOf(children[i]);\n      if (index > -1) {\n        this.particleChildren.splice(index, 1);\n        didRemove = true;\n      }\n    }\n    if (didRemove)\n      this.onViewUpdate();\n    return children[0];\n  }\n  /**\n   * Updates the particle container.\n   * Please call this when you modify the particleChildren array.\n   * or any static properties of the particles.\n   */\n  update() {\n    this._childrenDirty = true;\n  }\n  onViewUpdate() {\n    this._childrenDirty = true;\n    super.onViewUpdate();\n  }\n  /**\n   * ParticleContainer does not calculated bounds as it would slow things down,\n   * its up to you to set this via the boundsArea property\n   */\n  get bounds() {\n    return emptyBounds;\n  }\n  /** @private */\n  updateBounds() {\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options = false) {\n    super.destroy(options);\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      const texture = this.texture ?? this.particleChildren[0]?.texture;\n      if (texture) {\n        texture.destroy(destroyTextureSource);\n      }\n    }\n    this.texture = null;\n    this.shader?.destroy();\n  }\n  /**\n   * Removes all particles from this container that are within the begin and end indexes.\n   * @param beginIndex - The beginning position.\n   * @param endIndex - The ending position. Default value is size of the container.\n   * @returns - List of removed particles\n   */\n  removeParticles(beginIndex, endIndex) {\n    const children = this.particleChildren.splice(beginIndex, endIndex);\n    this.onViewUpdate();\n    return children;\n  }\n  /**\n   * Removes a particle from the specified index position.\n   * @param index - The index to get the particle from\n   * @returns The particle that was removed.\n   */\n  removeParticleAt(index) {\n    const child = this.particleChildren.splice(index, 1);\n    this.onViewUpdate();\n    return child[0];\n  }\n  /**\n   * Adds a particle to the container at a specified index. If the index is out of bounds an error will be thrown.\n   * If the particle is already in this container, it will be moved to the specified index.\n   * @param {Container} child - The particle to add.\n   * @param {number} index - The absolute index where the particle will be positioned at the end of the operation.\n   * @returns {Container} The particle that was added.\n   */\n  addParticleAt(child, index) {\n    this.particleChildren.splice(index, 0, child);\n    this.onViewUpdate();\n    return child;\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error. Please use `ParticleContainer.addParticle()` instead.\n   * @param {...any} _children\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  addChild(..._children) {\n    throw new Error(\n      \"ParticleContainer.addChild() is not available. Please use ParticleContainer.addParticle()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   * Calling this method will throw an error. Please use `ParticleContainer.removeParticle()` instead.\n   * @param {...any} _children\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  removeChild(..._children) {\n    throw new Error(\n      \"ParticleContainer.removeChild() is not available. Please use ParticleContainer.removeParticle()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error. Please use `ParticleContainer.removeParticles()` instead.\n   * @param {number} [_beginIndex]\n   * @param {number} [_endIndex]\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  removeChildren(_beginIndex, _endIndex) {\n    throw new Error(\n      \"ParticleContainer.removeChildren() is not available. Please use ParticleContainer.removeParticles()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error. Please use `ParticleContainer.removeParticleAt()` instead.\n   * @param {number} _index\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  removeChildAt(_index) {\n    throw new Error(\n      \"ParticleContainer.removeChildAt() is not available. Please use ParticleContainer.removeParticleAt()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error. Please use `ParticleContainer.getParticleAt()` instead.\n   * @param {number} _index\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  getChildAt(_index) {\n    throw new Error(\n      \"ParticleContainer.getChildAt() is not available. Please use ParticleContainer.getParticleAt()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error. Please use `ParticleContainer.setParticleIndex()` instead.\n   * @param {ContainerChild} _child\n   * @param {number} _index\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  setChildIndex(_child, _index) {\n    throw new Error(\n      \"ParticleContainer.setChildIndex() is not available. Please use ParticleContainer.setParticleIndex()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error. Please use `ParticleContainer.getParticleIndex()` instead.\n   * @param {ContainerChild} _child\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  getChildIndex(_child) {\n    throw new Error(\n      \"ParticleContainer.getChildIndex() is not available. Please use ParticleContainer.getParticleIndex()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error. Please use `ParticleContainer.addParticleAt()` instead.\n   * @param {ContainerChild} _child\n   * @param {number} _index\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  addChildAt(_child, _index) {\n    throw new Error(\n      \"ParticleContainer.addChildAt() is not available. Please use ParticleContainer.addParticleAt()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error. Please use `ParticleContainer.swapParticles()` instead.\n   * @param {ContainerChild} _child\n   * @param {ContainerChild} _child2\n   */\n  swapChildren(_child, _child2) {\n    throw new Error(\n      \"ParticleContainer.swapChildren() is not available. Please use ParticleContainer.swapParticles()\"\n    );\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error.\n   * @param _child - The child to reparent\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  reparentChild(..._child) {\n    throw new Error(\"ParticleContainer.reparentChild() is not available with the particle container\");\n  }\n  /**\n   * This method is not available in ParticleContainer.\n   *\n   * Calling this method will throw an error.\n   * @param _child - The child to reparent\n   * @param _index - The index to reparent the child to\n   * @throws {Error} Always throws an error as this method is not available.\n   */\n  reparentChildAt(_child, _index) {\n    throw new Error(\"ParticleContainer.reparentChildAt() is not available with the particle container\");\n  }\n};\n/**\n * Defines the default options for creating a ParticleContainer.\n * @property {Record<string, boolean>} dynamicProperties - Specifies which properties are dynamic.\n * @property {boolean} roundPixels - Indicates if pixels should be  rounded.\n */\n_ParticleContainer.defaultOptions = {\n  dynamicProperties: {\n    vertex: false,\n    // Indicates if vertex positions are dynamic.\n    position: true,\n    // Indicates if particle positions are dynamic.\n    rotation: false,\n    // Indicates if particle rotations are dynamic.\n    uvs: false,\n    // Indicates if UV coordinates are dynamic.\n    color: false\n    // Indicates if particle colors are dynamic.\n  },\n  roundPixels: false\n  // Indicates if pixels should be rounded for rendering.\n};\nlet ParticleContainer = _ParticleContainer;\n\nexports.ParticleContainer = ParticleContainer;\n//# sourceMappingURL=ParticleContainer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Bounds","ViewContainer","particleData","emptyBounds","constructor","options","_ParticleContainer","defaultOptions","dynamicProperties","shader","roundPixels","texture","particles","rest","label","renderPipeId","_childrenDirty","batched","_properties","key","property","dynamic","allowChildren","particleChildren","addParticle","children","i","length","push","onViewUpdate","removeParticle","didRemove","index","indexOf","splice","update","updateBounds","destroy","destroyTexture","destroyTextureSource","textureSource","removeParticles","beginIndex","endIndex","removeParticleAt","child","addParticleAt","addChild","_children","Error","removeChild","removeChildren","_beginIndex","_endIndex","removeChildAt","_index","getChildAt","setChildIndex","_child","getChildIndex","addChildAt","swapChildren","_child2","reparentChild","reparentChildAt","vertex","position","rotation","uvs","color","ParticleContainer"]
}
