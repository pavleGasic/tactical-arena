shadow$provide.module$node_modules$$pixi$text_bitmap$lib$loadBitmapFont = function(global, require, module, exports) {
  var assets = require("module$node_modules$$pixi$assets$lib$index"), core = require("module$node_modules$$pixi$core$lib$index"), BitmapFont = require("module$node_modules$$pixi$text_bitmap$lib$BitmapFont");
  require("module$node_modules$$pixi$text_bitmap$lib$formats$index");
  var TextFormat = require("module$node_modules$$pixi$text_bitmap$lib$formats$TextFormat"), XMLStringFormat = require("module$node_modules$$pixi$text_bitmap$lib$formats$XMLStringFormat");
  const validExtensions = [".xml", ".fnt"];
  global = {extension:{type:core.ExtensionType.LoadParser, priority:assets.LoaderParserPriority.Normal}, name:"loadBitmapFont", test(url) {
    return validExtensions.includes(core.utils.path.extname(url).toLowerCase());
  }, async testParse(data) {
    return TextFormat.TextFormat.test(data) || XMLStringFormat.XMLStringFormat.test(data);
  }, async parse(asset, data, loader) {
    asset = TextFormat.TextFormat.test(asset) ? TextFormat.TextFormat.parse(asset) : XMLStringFormat.XMLStringFormat.parse(asset);
    ({src:data} = data);
    const {page:pages} = asset, textureUrls = [];
    for (let i = 0; i < pages.length; ++i) {
      var pageFile = pages[i].file;
      pageFile = core.utils.path.join(core.utils.path.dirname(data), pageFile);
      pageFile = assets.copySearchParams(pageFile, data);
      textureUrls.push(pageFile);
    }
    const loadedTextures = await loader.load(textureUrls);
    loader = textureUrls.map(url => loadedTextures[url]);
    return BitmapFont.BitmapFont.install(asset, loader, !0);
  }, async load(url, _options) {
    return (await core.settings.ADAPTER.fetch(url)).text();
  }, unload(bitmapFont) {
    bitmapFont.destroy();
  }};
  core.extensions.add(global);
  exports.loadBitmapFont = global;
};

//# sourceMappingURL=module$node_modules$$pixi$text_bitmap$lib$loadBitmapFont.js.map
