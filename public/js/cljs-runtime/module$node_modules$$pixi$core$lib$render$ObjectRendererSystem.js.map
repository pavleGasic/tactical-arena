{
"version":3,
"file":"module$node_modules$$pixi$core$lib$render$ObjectRendererSystem.js",
"lineCount":23,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,GAAmF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAEvHC,QAAAA,GAAaH,OAAA,CAAQ,gDAAR,CAAbG;AACJ,OAAMC,qBAAN;AAEEC,eAAW,CAACC,QAAD,CAAW;AACpB,UAAKA,CAAAA,QAAL,GAAgBA,QAAhB;AADoB;AAQtBC,UAAM,CAACC,aAAD,EAAgBC,OAAhB,CAAyB;AAC7B,YAAMH,WAAW,IAAKA,CAAAA,QAAtB;AAD6B,UAEzBI,aAFyB,EAEVC,KAFU;AAAA,UAEHC,SAFG;AAE7B,UAAqCC,mBAArC;AACA,OAAIJ,OAAA,KAAYC,aAAA,GAAgBD,OAAQC,CAAAA,aAAxB,EAAuCC,KAAvC,GAA+CF,OAAQE,CAAAA,KAAvD,EAA8DC,SAA9D,GAA0EH,OAAQG,CAAAA,SAAlF,EAA6FC,mBAA7F,GAAmHJ,OAAQI,CAAAA,mBAAvI,GAA6J,IAAKC,CAAAA,iBAAlK,GAAsL,CAACJ,aAAvL,EAAsMJ,QAASS,CAAAA,OAAQC,CAAAA,SAAUC,CAAAA,IAA3B,EAAtM,EAAyOX,QAASW,CAAAA,IAAT,CAAc,WAAd,CAAzO,EAAqQX,QAASY,CAAAA,UAAWN,CAAAA,SAAzR,GAAqSA,SAArS,EAAiTN,QAASa,CAAAA,OAAQC,CAAAA,MAAtU,MAKga,CAJ1ZV,aAAA,KAAkB,IAAKW,CAAAA,kBAAvB,GAA4Cb,aAA5C,GAA6DK,mBAI6V,MAHtZS,SAC2B,GADbd,aAAce,CAAAA,gBAAd,EACa,EAAjCf,aAAcgB,CAAAA,eAAd,EAAiC;AAAAhB,mBAAciB,CAAAA,iBAAd,CAAgCH,SAAhC,CAE2X,GAA9ZhB,QAASI,CAAAA,aAAcgB,CAAAA,IAAvB,CAA4BhB,aAA5B,CAA8Z,EAAlXJ,QAASqB,CAAAA,KAAMC,CAAAA,eAAgBC,CAAAA,KAA/B,EAAkX,GAAzUlB,KAAyU,IAAhUL,QAASwB,CAAAA,UAAWC,CAAAA,iBAA4S,KAAtRzB,QAASI,CAAAA,aAAcC,CAAAA,KAAvB,EAAsR,EAAtPH,aAAcD,CAAAA,MAAd,CAAqBD,QAArB,CAAsP,EAAtNA,QAASqB,CAAAA,KAAMC,CAAAA,eAAgBI,CAAAA,KAA/B,EAAsN,EAA9KtB,aAA8K,KAA5JD,OAAQwB,CAAAA,IAAR,IAAgB3B,QAAS4B,CAAAA,WAAYD,CAAAA,IAArB,EAAhB,EAA6CvB,aAAcyB,CAAAA,WAAYC,CAAAA,MAA1B,EAA+G,GAA1E9B,QAASS,CAAAA,OAAQsB,CAAAA,UAAWpB,CAAAA,IAA5B,EAA0E,EAAtCX,QAASY,CAAAA,UAAWN,CAAAA,SAAkB,GAAN,IAAM,EAAAN,QAASW,CAAAA,IAAT,CAAc,YAAd,CALha;AAH6B;AAW/BqB,WAAO,EAAG;AACc,UAAKjB,CAAAA,kBAAL,GAAtB,IAAKf,CAAAA,QAAiB,GAAN,IAAM;AADd;AArBZ;AAyBAF,sBAAqBmC,CAAAA,SAArB,GAAiC,CAC/BC,KAAMrC,MAAWsC,CAAAA,aAAcC,CAAAA,cADA,EAE/BC,KAAM,gBAFyB,CAAjC;AAIAxC,QAAWA,CAAAA,UAAWyC,CAAAA,GAAtB,CAA0BxC,oBAA1B,CAAA;AACAF,SAAQE,CAAAA,oBAAR,GAA+BA,oBAA/B;AAjC2H,CAA3H;;",
"sources":["node_modules/@pixi/core/lib/render/ObjectRendererSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$render$ObjectRendererSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar extensions = require(\"@pixi/extensions\");\nclass ObjectRendererSystem {\n  // renderers scene graph!\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  /**\n   * Renders the object to its WebGL view.\n   * @param displayObject - The object to be rendered.\n   * @param options - the options to be passed to the renderer\n   */\n  render(displayObject, options) {\n    const renderer = this.renderer;\n    let renderTexture, clear, transform, skipUpdateTransform;\n    if (options && (renderTexture = options.renderTexture, clear = options.clear, transform = options.transform, skipUpdateTransform = options.skipUpdateTransform), this.renderingToScreen = !renderTexture, renderer.runners.prerender.emit(), renderer.emit(\"prerender\"), renderer.projection.transform = transform, !renderer.context.isLost) {\n      if (renderTexture || (this.lastObjectRendered = displayObject), !skipUpdateTransform) {\n        const cacheParent = displayObject.enableTempParent();\n        displayObject.updateTransform(), displayObject.disableTempParent(cacheParent);\n      }\n      renderer.renderTexture.bind(renderTexture), renderer.batch.currentRenderer.start(), (clear ?? renderer.background.clearBeforeRender) && renderer.renderTexture.clear(), displayObject.render(renderer), renderer.batch.currentRenderer.flush(), renderTexture && (options.blit && renderer.framebuffer.blit(), renderTexture.baseTexture.update()), renderer.runners.postrender.emit(), renderer.projection.transform = null, renderer.emit(\"postrender\");\n    }\n  }\n  destroy() {\n    this.renderer = null, this.lastObjectRendered = null;\n  }\n}\nObjectRendererSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"objectRenderer\"\n};\nextensions.extensions.add(ObjectRendererSystem);\nexports.ObjectRendererSystem = ObjectRendererSystem;\n//# sourceMappingURL=ObjectRendererSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","extensions","ObjectRendererSystem","constructor","renderer","render","displayObject","options","renderTexture","clear","transform","skipUpdateTransform","renderingToScreen","runners","prerender","emit","projection","context","isLost","lastObjectRendered","cacheParent","enableTempParent","updateTransform","disableTempParent","bind","batch","currentRenderer","start","background","clearBeforeRender","flush","blit","framebuffer","baseTexture","update","postrender","destroy","extension","type","ExtensionType","RendererSystem","name","add"]
}
