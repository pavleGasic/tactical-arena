{
"version":3,
"file":"module$node_modules$$pixi$text_bitmap$lib$BitmapFont.js",
"lineCount":137,
"mappings":"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",
"sources":["node_modules/@pixi/text-bitmap/lib/BitmapFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text_bitmap$lib$BitmapFont\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), text = require(\"@pixi/text\"), BitmapFontData = require(\"./BitmapFontData.js\"), index = require(\"./formats/index.js\");\nrequire(\"./utils/index.js\");\nvar resolveCharacters = require(\"./utils/resolveCharacters.js\"), drawGlyph = require(\"./utils/drawGlyph.js\"), extractCharCode = require(\"./utils/extractCharCode.js\");\nconst _BitmapFont = class _BitmapFont2 {\n  /**\n   * @param data\n   * @param textures\n   * @param ownsTextures - Setting to `true` will destroy page textures\n   *        when the font is uninstalled.\n   */\n  constructor(data, textures, ownsTextures) {\n    const [info] = data.info, [common] = data.common, [page] = data.page, [distanceField] = data.distanceField, res = core.utils.getResolutionOfUrl(page.file), pageTextures = {};\n    this._ownsTextures = ownsTextures, this.font = info.face, this.size = info.size, this.lineHeight = common.lineHeight / res, this.chars = {}, this.pageTextures = pageTextures;\n    for (let i = 0; i < data.page.length; i++) {\n      const { id, file } = data.page[i];\n      pageTextures[id] = textures instanceof Array ? textures[i] : textures[file], distanceField?.fieldType && distanceField.fieldType !== \"none\" && (pageTextures[id].baseTexture.alphaMode = core.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA, pageTextures[id].baseTexture.mipmap = core.MIPMAP_MODES.OFF);\n    }\n    for (let i = 0; i < data.char.length; i++) {\n      const { id, page: page2 } = data.char[i];\n      let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n      x /= res, y /= res, width /= res, height /= res, xoffset /= res, yoffset /= res, xadvance /= res;\n      const rect = new core.Rectangle(\n        x + pageTextures[page2].frame.x / res,\n        y + pageTextures[page2].frame.y / res,\n        width,\n        height\n      );\n      this.chars[id] = {\n        xOffset: xoffset,\n        yOffset: yoffset,\n        xAdvance: xadvance,\n        kerning: {},\n        texture: new core.Texture(\n          pageTextures[page2].baseTexture,\n          rect\n        ),\n        page: page2\n      };\n    }\n    for (let i = 0; i < data.kerning.length; i++) {\n      let { first, second, amount } = data.kerning[i];\n      first /= res, second /= res, amount /= res, this.chars[second] && (this.chars[second].kerning[first] = amount);\n    }\n    this.distanceFieldRange = distanceField?.distanceRange, this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? \"none\";\n  }\n  /** Remove references to created glyph textures. */\n  destroy() {\n    for (const id in this.chars)\n      this.chars[id].texture.destroy(), this.chars[id].texture = null;\n    for (const id in this.pageTextures)\n      this._ownsTextures && this.pageTextures[id].destroy(!0), this.pageTextures[id] = null;\n    this.chars = null, this.pageTextures = null;\n  }\n  /**\n   * Register a new bitmap font.\n   * @param data - The\n   *        characters map that could be provided as xml or raw string.\n   * @param textures - List of textures for each page.\n   * @param ownsTextures - Set to `true` to destroy page textures\n   *        when the font is uninstalled. By default fonts created with\n   *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n   * @returns {PIXI.BitmapFont} Result font object with font, size, lineHeight\n   *         and char fields.\n   */\n  static install(data, textures, ownsTextures) {\n    let fontData;\n    if (data instanceof BitmapFontData.BitmapFontData)\n      fontData = data;\n    else {\n      const format = index.autoDetectFormat(data);\n      if (!format)\n        throw new Error(\"Unrecognized data format for font.\");\n      fontData = format.parse(data);\n    }\n    textures instanceof core.Texture && (textures = [textures]);\n    const font = new _BitmapFont2(fontData, textures, ownsTextures);\n    return _BitmapFont2.available[font.font] = font, font;\n  }\n  /**\n   * Remove bitmap font by name.\n   * @param name - Name of the font to uninstall.\n   */\n  static uninstall(name) {\n    const font = _BitmapFont2.available[name];\n    if (!font)\n      throw new Error(`No font found named '${name}'`);\n    font.destroy(), delete _BitmapFont2.available[name];\n  }\n  /**\n   * Generates a bitmap-font for the given style and character set. This does not support\n   * kernings yet. With `style` properties, only the following non-layout properties are used:\n   *\n   * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n   * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n   * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n   * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n   * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n   * - {@link PIXI.TextStyle#fill|fill}\n   * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n   * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n   * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n   * - {@link PIXI.TextStyle#fontSize|fontSize}\n   * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n   * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n   * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n   * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n   * - {@link PIXI.TextStyle#stroke|stroke}\n   * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n   * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n   * @param name - The name of the custom font to use with BitmapText.\n   * @param textStyle - Style options to render with BitmapFont.\n   * @param options - Setup options for font or name of the font.\n   * @returns Font generated by style options.\n   * @example\n   * import { BitmapFont, BitmapText } from 'pixi.js';\n   *\n   * BitmapFont.from('TitleFont', {\n   *     fontFamily: 'Arial',\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: 'purple',\n   * });\n   *\n   * const title = new BitmapText('This is the title', { fontName: 'TitleFont' });\n   */\n  static from(name, textStyle, options) {\n    if (!name)\n      throw new Error(\"[BitmapFont] Property `name` is required.\");\n    const {\n      chars,\n      padding,\n      resolution,\n      textureWidth,\n      textureHeight,\n      ...baseOptions\n    } = Object.assign({}, _BitmapFont2.defaultOptions, options), charsList = resolveCharacters.resolveCharacters(chars), style = textStyle instanceof text.TextStyle ? textStyle : new text.TextStyle(textStyle), lineWidth = textureWidth, fontData = new BitmapFontData.BitmapFontData();\n    fontData.info[0] = {\n      face: style.fontFamily,\n      size: style.fontSize\n    }, fontData.common[0] = {\n      lineHeight: style.fontSize\n    };\n    let positionX = 0, positionY = 0, canvas, context, baseTexture, maxCharHeight = 0;\n    const baseTextures = [], textures = [];\n    for (let i = 0; i < charsList.length; i++) {\n      canvas || (canvas = core.settings.ADAPTER.createCanvas(), canvas.width = textureWidth, canvas.height = textureHeight, context = canvas.getContext(\"2d\"), baseTexture = new core.BaseTexture(canvas, { resolution, ...baseOptions }), baseTextures.push(baseTexture), textures.push(new core.Texture(baseTexture)), fontData.page.push({\n        id: textures.length - 1,\n        file: \"\"\n      }));\n      const character = charsList[i], metrics = text.TextMetrics.measureText(character, style, !1, canvas), width = metrics.width, height = Math.ceil(metrics.height), textureGlyphWidth = Math.ceil((style.fontStyle === \"italic\" ? 2 : 1) * width);\n      if (positionY >= textureHeight - height * resolution) {\n        if (positionY === 0)\n          throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is too small (fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n        --i, canvas = null, context = null, baseTexture = null, positionY = 0, positionX = 0, maxCharHeight = 0;\n        continue;\n      }\n      if (maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight), textureGlyphWidth * resolution + positionX >= lineWidth) {\n        if (positionX === 0)\n          throw new Error(`[BitmapFont] textureWidth ${textureWidth}px is too small (fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n        --i, positionY += maxCharHeight * resolution, positionY = Math.ceil(positionY), positionX = 0, maxCharHeight = 0;\n        continue;\n      }\n      drawGlyph.drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n      const id = extractCharCode.extractCharCode(metrics.text);\n      fontData.char.push({\n        id,\n        page: textures.length - 1,\n        x: positionX / resolution,\n        y: positionY / resolution,\n        width: textureGlyphWidth,\n        height,\n        xoffset: 0,\n        yoffset: 0,\n        xadvance: width - (style.dropShadow ? style.dropShadowDistance : 0) - (style.stroke ? style.strokeThickness : 0)\n      }), positionX += (textureGlyphWidth + 2 * padding) * resolution, positionX = Math.ceil(positionX);\n    }\n    if (!options?.skipKerning)\n      for (let i = 0, len = charsList.length; i < len; i++) {\n        const first = charsList[i];\n        for (let j = 0; j < len; j++) {\n          const second = charsList[j], c1 = context.measureText(first).width, c2 = context.measureText(second).width, amount = context.measureText(first + second).width - (c1 + c2);\n          amount && fontData.kerning.push({\n            first: extractCharCode.extractCharCode(first),\n            second: extractCharCode.extractCharCode(second),\n            amount\n          });\n        }\n      }\n    const font = new _BitmapFont2(fontData, textures, !0);\n    return _BitmapFont2.available[name] !== void 0 && _BitmapFont2.uninstall(name), _BitmapFont2.available[name] = font, font;\n  }\n};\n_BitmapFont.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"], /**\n* This character set includes all decimal digits (from 0 to 9).\n* @type {string[][]}\n* @example\n* BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n*/\n_BitmapFont.NUMERIC = [[\"0\", \"9\"]], /**\n* This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n* @type {string[][]}\n*/\n_BitmapFont.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"], /**\n* This character set consists of all the ASCII table.\n* @member {string[][]}\n* @see http://www.asciitable.com/\n*/\n_BitmapFont.ASCII = [[\" \", \"~\"]], /**\n* Collection of default options when using `BitmapFont.from`.\n* @property {number} [resolution=1] -\n* @property {number} [textureWidth=512] -\n* @property {number} [textureHeight=512] -\n* @property {number} [padding=4] -\n* @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n*/\n_BitmapFont.defaultOptions = {\n  resolution: 1,\n  textureWidth: 512,\n  textureHeight: 512,\n  padding: 4,\n  chars: _BitmapFont.ALPHANUMERIC\n}, /** Collection of available/installed fonts. */\n_BitmapFont.available = {};\nlet BitmapFont = _BitmapFont;\nexports.BitmapFont = BitmapFont;\n//# sourceMappingURL=BitmapFont.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","text","BitmapFontData","index","resolveCharacters","drawGlyph","extractCharCode","constructor","data","textures","ownsTextures","info","common","page","distanceField","res","utils","getResolutionOfUrl","file","pageTextures","_ownsTextures","font","face","size","lineHeight","chars","i","length","id","Array","fieldType","baseTexture","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","mipmap","MIPMAP_MODES","OFF","char","page2","x","y","width","height","xoffset","yoffset","xadvance","rect","Rectangle","frame","xOffset","yOffset","xAdvance","kerning","texture","Texture","first","second","amount","distanceFieldRange","distanceRange","distanceFieldType","toLowerCase","destroy","install","format","autoDetectFormat","Error","fontData","parse","_BitmapFont2","available","uninstall","name","from","textStyle","options","padding","resolution","textureWidth","textureHeight","baseOptions","Object","assign","defaultOptions","charsList","style","TextStyle","fontFamily","fontSize","positionX","positionY","canvas","context","maxCharHeight","baseTextures","settings","ADAPTER","createCanvas","getContext","BaseTexture","push","character","metrics","TextMetrics","measureText","Math","ceil","textureGlyphWidth","fontStyle","max","fontProperties","descent","dropShadow","dropShadowDistance","stroke","strokeThickness","skipKerning","len","j","c1","c2","_BitmapFont","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","BitmapFont"]
}
