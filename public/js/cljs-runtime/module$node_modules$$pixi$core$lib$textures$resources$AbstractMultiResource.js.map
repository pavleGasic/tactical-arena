{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$resources$AbstractMultiResource.js",
"lineCount":62,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/resources/AbstractMultiResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$resources$AbstractMultiResource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar BaseTexture = require(\"../BaseTexture.js\"), autoDetectResource = require(\"./autoDetectResource.js\"), Resource = require(\"./Resource.js\");\nclass AbstractMultiResource extends Resource.Resource {\n  /**\n   * @param length\n   * @param options - Options to for Resource constructor\n   * @param {number} [options.width] - Width of the resource\n   * @param {number} [options.height] - Height of the resource\n   */\n  constructor(length, options) {\n    const { width, height } = options || {};\n    super(width, height), this.items = [], this.itemDirtyIds = [];\n    for (let i = 0; i < length; i++) {\n      const partTexture = new BaseTexture.BaseTexture();\n      this.items.push(partTexture), this.itemDirtyIds.push(-2);\n    }\n    this.length = length, this._load = null, this.baseTexture = null;\n  }\n  /**\n   * Used from ArrayResource and CubeResource constructors.\n   * @param resources - Can be resources, image elements, canvas, etc. ,\n   *  length should be same as constructor length\n   * @param options - Detect options for resources\n   */\n  initFromArray(resources, options) {\n    for (let i = 0; i < this.length; i++)\n      resources[i] && (resources[i].castToBaseTexture ? this.addBaseTextureAt(resources[i].castToBaseTexture(), i) : resources[i] instanceof Resource.Resource ? this.addResourceAt(resources[i], i) : this.addResourceAt(autoDetectResource.autoDetectResource(resources[i], options), i));\n  }\n  /** Destroy this BaseImageResource. */\n  dispose() {\n    for (let i = 0, len = this.length; i < len; i++)\n      this.items[i].destroy();\n    this.items = null, this.itemDirtyIds = null, this._load = null;\n  }\n  /**\n   * Set a resource by ID\n   * @param resource\n   * @param index - Zero-based index of resource to set\n   * @returns - Instance for chaining\n   */\n  addResourceAt(resource, index) {\n    if (!this.items[index])\n      throw new Error(`Index ${index} is out of bounds`);\n    return resource.valid && !this.valid && this.resize(resource.width, resource.height), this.items[index].setResource(resource), this;\n  }\n  /**\n   * Set the parent base texture.\n   * @param baseTexture\n   */\n  bind(baseTexture) {\n    if (this.baseTexture !== null)\n      throw new Error(\"Only one base texture per TextureArray is allowed\");\n    super.bind(baseTexture);\n    for (let i = 0; i < this.length; i++)\n      this.items[i].parentTextureArray = baseTexture, this.items[i].on(\"update\", baseTexture.update, baseTexture);\n  }\n  /**\n   * Unset the parent base texture.\n   * @param baseTexture\n   */\n  unbind(baseTexture) {\n    super.unbind(baseTexture);\n    for (let i = 0; i < this.length; i++)\n      this.items[i].parentTextureArray = null, this.items[i].off(\"update\", baseTexture.update, baseTexture);\n  }\n  /**\n   * Load all the resources simultaneously\n   * @returns - When load is resolved\n   */\n  load() {\n    if (this._load)\n      return this._load;\n    const promises = this.items.map((item) => item.resource).filter((item) => item).map((item) => item.load());\n    return this._load = Promise.all(promises).then(\n      () => {\n        const { realWidth, realHeight } = this.items[0];\n        return this.resize(realWidth, realHeight), this.update(), Promise.resolve(this);\n      }\n    ), this._load;\n  }\n}\nexports.AbstractMultiResource = AbstractMultiResource;\n//# sourceMappingURL=AbstractMultiResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseTexture","autoDetectResource","Resource","AbstractMultiResource","constructor","length","options","width","height","items","itemDirtyIds","i","partTexture","push","baseTexture","_load","initFromArray","resources","castToBaseTexture","addBaseTextureAt","addResourceAt","dispose","len","destroy","resource","index","Error","valid","resize","setResource","bind","parentTextureArray","on","update","unbind","off","load","promises","map","item","filter","Promise","all","then","realWidth","realHeight","resolve"]
}
