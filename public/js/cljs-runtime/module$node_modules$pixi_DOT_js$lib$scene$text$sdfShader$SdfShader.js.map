{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text$sdfShader$SdfShader.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,GAAuF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG/H,MAAIC,SAASH,OAAA,CAAQ,yDAAR,CAAb,EACII,yBAAyBJ,OAAA,CAAQ,uFAAR,CAD7B,EAEIK,6BAA6BL,OAAA,CAAQ,sFAAR,CAFjC,EAGIM,WAAWN,OAAA,CAAQ,gFAAR,CAHf,EAIIO,0BAA0BP,OAAA,CAAQ,+FAAR,CAJ9B;AAKIQ,mBAAiBR,OAAA,CAAQ,sFAAR,CALrB,EAMIS,+BAA+BT,OAAA,CAAQ,gGAAR,CANnC;AAOIU,QAAAA,GAASV,OAAA,CAAQ,8EAAR,CAATU;AACJ,MAAIC,eAAeX,OAAA,CAAQ,oFAAR,CAAnB,EACIY,sBAAsBZ,OAAA,CAAQ,0FAAR,CAD1B,EAEIa,UAAUb,OAAA,CAAQ,8EAAR,CAFd;AAIA,cAAA;AACA,MAAIc,UAAJ,EACIC,SADJ;AAEA,OAAMC,UAAN,QAAwBN,OAAOA,CAAAA,MAA/B;AACEO,eAAW,EAAG;AACZ,YAAMC,WAAW,IAAIP,YAAaA,CAAAA,YAAjB,CAA8B,CAC7CQ,OAAQ,CAAEC,MAAO,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB,CAAT,EAAyCC,KAAM,iBAA/C,CADqC,EAE7CC,iBAAkB,CAAEH,MAAO,IAAIjB,MAAOA,CAAAA,MAAX,EAAT,EAA8BmB,KAAM,mBAApC,CAF2B,EAG7CE,UAAW,CAAEJ,MAAO,CAAT,EAAYE,KAAM,KAAlB,CAHkC,EAI7CG,OAAQ,CAAEL,MAAO,CAAT,EAAYE,KAAM,KAAlB,CAJqC,CAA9B,CAAjB,EAMMI,cAActB,sBAAuBuB,CAAAA,sBAAvB,EANpB;AAOAb,gBAAA,KAAeA,UAAf,GAA4BT,0BAA2BuB,CAAAA,2BAA3B,CAAuD,CACjFC,KAAM,YAD2E,EAEjFC,KAAM,CACJxB,QAASA,CAAAA,QADL,EAEJC,uBAAwBA,CAAAA,uBAAxB,CAAgDmB,WAAhD,CAFI,EAGJd,mBAAoBA,CAAAA,mBAHhB,EAIJC,OAAQA,CAAAA,OAJJ,EAKJL,cAAeA,CAAAA,cALX,CAF2E,CAAvD,CAA5B;AAUAO,eAAA,KAAcA,SAAd,GAA0BV,0BAA2B0B,CAAAA,0BAA3B,CAAsD,CAC9EF,KAAM,YADwE,EAE9EC,KAAM,CACJxB,QAAS0B,CAAAA,UADL,EAEJzB,uBAAwB0B,CAAAA,yBAAxB,CAAkDP,WAAlD,CAFI,EAGJd,mBAAoBsB,CAAAA,qBAHhB,EAIJrB,OAAQsB,CAAAA,SAJJ,EAKJ3B,cAAe4B,CAAAA,gBALX,CAFwE,CAAtD,CAA1B;AAUA,WAAA,CAAM,CACJrB,SADI,EAEJD,UAFI,EAGJuB,UAAW,CACTC,cAAepB,QADN,EAETqB,cAAe9B,4BAA6BA,CAAAA,4BAA7B,CAA0DiB,WAA1D,CAFN,CAHP,CAAN,CAAA;AA5BY;AADhB;AAwCAxB,SAAQc,CAAAA,SAAR,GAAoBA,SAApB;AA1D+H,CAA/H;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/text/sdfShader/SdfShader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text$sdfShader$SdfShader\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar maxRecommendedTextures = require('../../../rendering/batcher/gl/utils/maxRecommendedTextures.js');\nvar compileHighShaderToProgram = require('../../../rendering/high-shader/compileHighShaderToProgram.js');\nvar colorBit = require('../../../rendering/high-shader/shader-bits/colorBit.js');\nvar generateTextureBatchBit = require('../../../rendering/high-shader/shader-bits/generateTextureBatchBit.js');\nvar roundPixelsBit = require('../../../rendering/high-shader/shader-bits/roundPixelsBit.js');\nvar getBatchSamplersUniformGroup = require('../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.js');\nvar Shader = require('../../../rendering/renderers/shared/shader/Shader.js');\nvar UniformGroup = require('../../../rendering/renderers/shared/shader/UniformGroup.js');\nvar localUniformMSDFBit = require('./shader-bits/localUniformMSDFBit.js');\nvar mSDFBit = require('./shader-bits/mSDFBit.js');\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader.Shader {\n  constructor() {\n    const uniforms = new UniformGroup.UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix.Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = maxRecommendedTextures.getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderToProgram.compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit.colorBit,\n        generateTextureBatchBit.generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit.localUniformMSDFBit,\n        mSDFBit.mSDFBit,\n        roundPixelsBit.roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderToProgram.compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit.colorBitGl,\n        generateTextureBatchBit.generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBit.localUniformMSDFBitGl,\n        mSDFBit.mSDFBitGl,\n        roundPixelsBit.roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup.getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexports.SdfShader = SdfShader;\n//# sourceMappingURL=SdfShader.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matrix","maxRecommendedTextures","compileHighShaderToProgram","colorBit","generateTextureBatchBit","roundPixelsBit","getBatchSamplersUniformGroup","Shader","UniformGroup","localUniformMSDFBit","mSDFBit","gpuProgram","glProgram","SdfShader","constructor","uniforms","uColor","value","Float32Array","type","uTransformMatrix","uDistance","uRound","maxTextures","getMaxTexturesPerBatch","compileHighShaderGpuProgram","name","bits","compileHighShaderGlProgram","colorBitGl","generateTextureBatchBitGl","localUniformMSDFBitGl","mSDFBitGl","roundPixelsBitGl","resources","localUniforms","batchSamplers"]
}
