{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$CanvasSource.js",
"lineCount":37,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/sources/CanvasSource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$CanvasSource\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../../../environment/adapter.js');\nvar Extensions = require('../../../../../extensions/Extensions.js');\nvar TextureSource = require('./TextureSource.js');\n\n\"use strict\";\nclass CanvasSource extends TextureSource.TextureSource {\n  constructor(options) {\n    if (!options.resource) {\n      options.resource = adapter.DOMAdapter.get().createCanvas();\n    }\n    if (!options.width) {\n      options.width = options.resource.width;\n      if (!options.autoDensity) {\n        options.width /= options.resolution;\n      }\n    }\n    if (!options.height) {\n      options.height = options.resource.height;\n      if (!options.autoDensity) {\n        options.height /= options.resolution;\n      }\n    }\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoDensity = options.autoDensity;\n    this.resizeCanvas();\n    this.transparent = !!options.transparent;\n  }\n  resizeCanvas() {\n    if (this.autoDensity && \"style\" in this.resource) {\n      this.resource.style.width = `${this.width}px`;\n      this.resource.style.height = `${this.height}px`;\n    }\n    if (this.resource.width !== this.pixelWidth || this.resource.height !== this.pixelHeight) {\n      this.resource.width = this.pixelWidth;\n      this.resource.height = this.pixelHeight;\n    }\n  }\n  resize(width = this.width, height = this.height, resolution = this._resolution) {\n    const didResize = super.resize(width, height, resolution);\n    if (didResize) {\n      this.resizeCanvas();\n    }\n    return didResize;\n  }\n  static test(resource) {\n    return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement || globalThis.OffscreenCanvas && resource instanceof OffscreenCanvas;\n  }\n  /**\n   * Returns the 2D rendering context for the canvas.\n   * Caches the context after creating it.\n   * @returns The 2D rendering context of the canvas.\n   */\n  get context2D() {\n    return this._context2D || (this._context2D = this.resource.getContext(\"2d\"));\n  }\n}\nCanvasSource.extension = Extensions.ExtensionType.TextureSource;\n\nexports.CanvasSource = CanvasSource;\n//# sourceMappingURL=CanvasSource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","adapter","Extensions","TextureSource","CanvasSource","constructor","options","resource","DOMAdapter","get","createCanvas","width","autoDensity","resolution","height","uploadMethodId","resizeCanvas","transparent","style","pixelWidth","pixelHeight","resize","_resolution","didResize","test","globalThis","HTMLCanvasElement","OffscreenCanvas","_context2D","getContext","extension","ExtensionType"]
}
