shadow$provide.module$node_modules$$pixi$particle_container$lib$ParticleContainer = function(global, require, module, exports) {
  var core = require("module$node_modules$$pixi$core$lib$index");
  global = require("module$node_modules$$pixi$display$lib$index");
  class ParticleContainer extends global.Container {
    constructor(maxSize = 1500, properties, batchSize = 16384, autoResize = !1) {
      super();
      16384 < batchSize && (batchSize = 16384);
      this._properties = [!1, !0, !1, !1, !1];
      this._maxSize = maxSize;
      this._batchSize = batchSize;
      this._buffers = null;
      this._bufferUpdateIDs = [];
      this._updateID = 0;
      this.interactiveChildren = !1;
      this.blendMode = core.BLEND_MODES.NORMAL;
      this.autoResize = autoResize;
      this.roundPixels = !0;
      this.baseTexture = null;
      this.setProperties(properties);
      this._tintColor = new core.Color(0);
      this.tintRgb = new Float32Array(3);
      this.tint = 16777215;
    }
    setProperties(properties) {
      properties && (this._properties[0] = "vertices" in properties || "scale" in properties ? !!properties.vertices || !!properties.scale : this._properties[0], this._properties[1] = "position" in properties ? !!properties.position : this._properties[1], this._properties[2] = "rotation" in properties ? !!properties.rotation : this._properties[2], this._properties[3] = "uvs" in properties ? !!properties.uvs : this._properties[3], this._properties[4] = "tint" in properties || "alpha" in properties ? 
      !!properties.tint || !!properties.alpha : this._properties[4]);
    }
    updateTransform() {
      this.displayObjectUpdateTransform();
    }
    get tint() {
      return this._tintColor.value;
    }
    set tint(value) {
      this._tintColor.setValue(value);
      this._tintColor.toRgbArray(this.tintRgb);
    }
    render(renderer) {
      !this.visible || 0 >= this.worldAlpha || !this.children.length || !this.renderable || (this.baseTexture || (this.baseTexture = this.children[0]._texture.baseTexture, this.baseTexture.valid || this.baseTexture.once("update", () => this.onChildrenChange(0))), renderer.batch.setObjectRenderer(renderer.plugins.particle), renderer.plugins.particle.render(this));
    }
    onChildrenChange(smallestChildIndex) {
      for (smallestChildIndex = Math.floor(smallestChildIndex / this._batchSize); this._bufferUpdateIDs.length < smallestChildIndex;) {
        this._bufferUpdateIDs.push(0);
      }
      this._bufferUpdateIDs[smallestChildIndex] = ++this._updateID;
    }
    dispose() {
      if (this._buffers) {
        for (let i = 0; i < this._buffers.length; ++i) {
          this._buffers[i].destroy();
        }
        this._buffers = null;
      }
    }
    destroy(options) {
      super.destroy(options);
      this.dispose();
      this._bufferUpdateIDs = this._buffers = this._properties = null;
    }
  }
  exports.ParticleContainer = ParticleContainer;
};

//# sourceMappingURL=module$node_modules$$pixi$particle_container$lib$ParticleContainer.js.map
