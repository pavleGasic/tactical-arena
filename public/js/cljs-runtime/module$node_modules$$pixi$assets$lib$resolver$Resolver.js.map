{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$resolver$Resolver.js",
"lineCount":214,
"mappings":"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",
"sources":["node_modules/@pixi/assets/lib/resolver/Resolver.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$resolver$Resolver\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), convertToList = require(\"../utils/convertToList.js\"), createStringVariations = require(\"../utils/createStringVariations.js\"), isSingleItem = require(\"../utils/isSingleItem.js\");\nclass Resolver {\n  constructor() {\n    this._defaultBundleIdentifierOptions = {\n      connector: \"-\",\n      createBundleAssetId: (bundleId, assetId) => `${bundleId}${this._bundleIdConnector}${assetId}`,\n      extractAssetIdFromBundle: (bundleId, assetBundleId) => assetBundleId.replace(`${bundleId}${this._bundleIdConnector}`, \"\")\n    }, this._bundleIdConnector = this._defaultBundleIdentifierOptions.connector, this._createBundleAssetId = this._defaultBundleIdentifierOptions.createBundleAssetId, this._extractAssetIdFromBundle = this._defaultBundleIdentifierOptions.extractAssetIdFromBundle, this._assetMap = {}, this._preferredOrder = [], this._parsers = [], this._resolverHash = {}, this._bundles = {};\n  }\n  /**\n   * Override how the resolver deals with generating bundle ids.\n   * must be called before any bundles are added\n   * @param bundleIdentifier - the bundle identifier options\n   */\n  setBundleIdentifier(bundleIdentifier) {\n    if (this._bundleIdConnector = bundleIdentifier.connector ?? this._bundleIdConnector, this._createBundleAssetId = bundleIdentifier.createBundleAssetId ?? this._createBundleAssetId, this._extractAssetIdFromBundle = bundleIdentifier.extractAssetIdFromBundle ?? this._extractAssetIdFromBundle, this._extractAssetIdFromBundle(\"foo\", this._createBundleAssetId(\"foo\", \"bar\")) !== \"bar\")\n      throw new Error(\"[Resolver] GenerateBundleAssetId are not working correctly\");\n  }\n  /**\n   * Let the resolver know which assets you prefer to use when resolving assets.\n   * Multiple prefer user defined rules can be added.\n   * @example\n   * resolver.prefer({\n   *     // first look for something with the correct format, and then then correct resolution\n   *     priority: ['format', 'resolution'],\n   *     params:{\n   *         format:'webp', // prefer webp images\n   *         resolution: 2, // prefer a resolution of 2\n   *     }\n   * })\n   * resolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\n   * resolver.resolveUrl('foo') // => 'bar@2x.webp'\n   * @param preferOrders - the prefer options\n   */\n  prefer(...preferOrders) {\n    preferOrders.forEach((prefer) => {\n      this._preferredOrder.push(prefer), prefer.priority || (prefer.priority = Object.keys(prefer.params));\n    }), this._resolverHash = {};\n  }\n  /**\n   * Set the base path to prepend to all urls when resolving\n   * @example\n   * resolver.basePath = 'https://home.com/';\n   * resolver.add('foo', 'bar.ong');\n   * resolver.resolveUrl('foo', 'bar.png'); // => 'https://home.com/bar.png'\n   * @param basePath - the base path to use\n   */\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  /**\n   * Set the root path for root-relative URLs. By default the `basePath`'s root is used. If no `basePath` is set, then the\n   * default value for browsers is `window.location.origin`\n   * @example\n   * // Application hosted on https://home.com/some-path/index.html\n   * resolver.basePath = 'https://home.com/some-path/';\n   * resolver.rootPath = 'https://home.com/';\n   * resolver.add('foo', '/bar.png');\n   * resolver.resolveUrl('foo', '/bar.png'); // => 'https://home.com/bar.png'\n   * @param rootPath - the root path to use\n   */\n  set rootPath(rootPath) {\n    this._rootPath = rootPath;\n  }\n  get rootPath() {\n    return this._rootPath;\n  }\n  /**\n   * All the active URL parsers that help the parser to extract information and create\n   * an asset object-based on parsing the URL itself.\n   *\n   * Can be added using the extensions API\n   * @example\n   * resolver.add('foo', [\n   *     {\n   *         resolution: 2,\n   *         format: 'png',\n   *         src: 'image@2x.png',\n   *     },\n   *     {\n   *         resolution:1,\n   *         format:'png',\n   *         src: 'image.png',\n   *     },\n   * ]);\n   *\n   * // With a url parser the information such as resolution and file format could extracted from the url itself:\n   * extensions.add({\n   *     extension: ExtensionType.ResolveParser,\n   *     test: loadTextures.test, // test if url ends in an image\n   *     parse: (value: string) =>\n   *     ({\n   *         resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n   *         format: value.split('.').pop(),\n   *         src: value,\n   *     }),\n   * });\n   *\n   * // Now resolution and format can be extracted from the url\n   * resolver.add('foo', [\n   *     'image@2x.png',\n   *     'image.png',\n   * ]);\n   */\n  get parsers() {\n    return this._parsers;\n  }\n  /** Used for testing, this resets the resolver to its initial state */\n  reset() {\n    this.setBundleIdentifier(this._defaultBundleIdentifierOptions), this._assetMap = {}, this._preferredOrder = [], this._resolverHash = {}, this._rootPath = null, this._basePath = null, this._manifest = null, this._bundles = {}, this._defaultSearchParams = null;\n  }\n  /**\n   * Sets the default URL search parameters for the URL resolver. The urls can be specified as a string or an object.\n   * @param searchParams - the default url parameters to append when resolving urls\n   */\n  setDefaultSearchParams(searchParams) {\n    if (typeof searchParams == \"string\")\n      this._defaultSearchParams = searchParams;\n    else {\n      const queryValues = searchParams;\n      this._defaultSearchParams = Object.keys(queryValues).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(queryValues[key])}`).join(\"&\");\n    }\n  }\n  /**\n   * Returns the aliases for a given asset\n   * @param asset - the asset to get the aliases for\n   */\n  getAlias(asset) {\n    const { alias, name, src, srcs } = asset;\n    return convertToList.convertToList(\n      alias || name || src || srcs,\n      (value) => typeof value == \"string\" ? value : Array.isArray(value) ? value.map((v) => v?.src ?? v?.srcs ?? v) : value?.src || value?.srcs ? value.src ?? value.srcs : value,\n      !0\n    );\n  }\n  /**\n   * Add a manifest to the asset resolver. This is a nice way to add all the asset information in one go.\n   * generally a manifest would be built using a tool.\n   * @param manifest - the manifest to add to the resolver\n   */\n  addManifest(manifest) {\n    this._manifest && console.warn(\"[Resolver] Manifest already exists, this will be overwritten\"), this._manifest = manifest, manifest.bundles.forEach((bundle) => {\n      this.addBundle(bundle.name, bundle.assets);\n    });\n  }\n  /**\n   * This adds a bundle of assets in one go so that you can resolve them as a group.\n   * For example you could add a bundle for each screen in you pixi app\n   * @example\n   * resolver.addBundle('animals', {\n   *     bunny: 'bunny.png',\n   *     chicken: 'chicken.png',\n   *     thumper: 'thumper.png',\n   * });\n   *\n   * const resolvedAssets = await resolver.resolveBundle('animals');\n   * @param bundleId - The id of the bundle to add\n   * @param assets - A record of the asset or assets that will be chosen from when loading via the specified key\n   */\n  addBundle(bundleId, assets) {\n    const assetNames = [];\n    Array.isArray(assets) ? assets.forEach((asset) => {\n      const srcs = asset.src ?? asset.srcs, aliases = asset.alias ?? asset.name;\n      let ids;\n      if (typeof aliases == \"string\") {\n        const bundleAssetId = this._createBundleAssetId(bundleId, aliases);\n        assetNames.push(bundleAssetId), ids = [aliases, bundleAssetId];\n      } else {\n        const bundleIds = aliases.map((name) => this._createBundleAssetId(bundleId, name));\n        assetNames.push(...bundleIds), ids = [...aliases, ...bundleIds];\n      }\n      this.add({\n        ...asset,\n        alias: ids,\n        src: srcs\n      });\n    }) : Object.keys(assets).forEach((key) => {\n      const aliases = [key, this._createBundleAssetId(bundleId, key)];\n      if (typeof assets[key] == \"string\")\n        this.add({\n          alias: aliases,\n          src: assets[key]\n        });\n      else if (Array.isArray(assets[key]))\n        this.add({\n          alias: aliases,\n          src: assets[key]\n        });\n      else {\n        const asset = assets[key], assetSrc = asset.src ?? asset.srcs;\n        this.add({\n          ...asset,\n          alias: aliases,\n          src: Array.isArray(assetSrc) ? assetSrc : [assetSrc]\n        });\n      }\n      assetNames.push(...aliases);\n    }), this._bundles[bundleId] = assetNames;\n  }\n  add(aliases, srcs, data, format, loadParser) {\n    const assets = [];\n    typeof aliases == \"string\" || Array.isArray(aliases) && typeof aliases[0] == \"string\" ? (core.utils.deprecation(\"7.2.0\", `Assets.add now uses an object instead of individual parameters.\nPlease use Assets.add({ alias, src, data, format, loadParser }) instead.`), assets.push({ alias: aliases, src: srcs, data, format, loadParser })) : Array.isArray(aliases) ? assets.push(...aliases) : assets.push(aliases);\n    let keyCheck;\n    keyCheck = (key) => {\n      this.hasKey(key) && console.warn(`[Resolver] already has key: ${key} overwriting`);\n    }, convertToList.convertToList(assets).forEach((asset) => {\n      const { src, srcs: srcs2 } = asset;\n      let { data: data2, format: format2, loadParser: loadParser2 } = asset;\n      const srcsToUse = convertToList.convertToList(src || srcs2).map((src2) => typeof src2 == \"string\" ? createStringVariations.createStringVariations(src2) : Array.isArray(src2) ? src2 : [src2]), aliasesToUse = this.getAlias(asset);\n      Array.isArray(aliasesToUse) ? aliasesToUse.forEach(keyCheck) : keyCheck(aliasesToUse);\n      const resolvedAssets = [];\n      srcsToUse.forEach((srcs3) => {\n        srcs3.forEach((src2) => {\n          let formattedAsset = {};\n          if (typeof src2 != \"object\") {\n            formattedAsset.src = src2;\n            for (let i = 0; i < this._parsers.length; i++) {\n              const parser = this._parsers[i];\n              if (parser.test(src2)) {\n                formattedAsset = parser.parse(src2);\n                break;\n              }\n            }\n          } else\n            data2 = src2.data ?? data2, format2 = src2.format ?? format2, loadParser2 = src2.loadParser ?? loadParser2, formattedAsset = {\n              ...formattedAsset,\n              ...src2\n            };\n          if (!aliasesToUse)\n            throw new Error(`[Resolver] alias is undefined for this asset: ${formattedAsset.src}`);\n          formattedAsset = this.buildResolvedAsset(formattedAsset, {\n            aliases: aliasesToUse,\n            data: data2,\n            format: format2,\n            loadParser: loadParser2\n          }), resolvedAssets.push(formattedAsset);\n        });\n      }), aliasesToUse.forEach((alias) => {\n        this._assetMap[alias] = resolvedAssets;\n      });\n    });\n  }\n  // TODO: this needs an overload like load did in Assets\n  /**\n   * If the resolver has had a manifest set via setManifest, this will return the assets urls for\n   * a given bundleId or bundleIds.\n   * @example\n   * // Manifest Example\n   * const manifest = {\n   *     bundles: [\n   *         {\n   *             name: 'load-screen',\n   *             assets: [\n   *                 {\n   *                     alias: 'background',\n   *                     src: 'sunset.png',\n   *                 },\n   *                 {\n   *                     alias: 'bar',\n   *                     src: 'load-bar.{png,webp}',\n   *                 },\n   *             ],\n   *         },\n   *         {\n   *             name: 'game-screen',\n   *             assets: [\n   *                 {\n   *                     alias: 'character',\n   *                     src: 'robot.png',\n   *                 },\n   *                 {\n   *                     alias: 'enemy',\n   *                     src: 'bad-guy.png',\n   *                 },\n   *             ],\n   *         },\n   *     ]\n   * };\n   *\n   * resolver.setManifest(manifest);\n   * const resolved = resolver.resolveBundle('load-screen');\n   * @param bundleIds - The bundle ids to resolve\n   * @returns All the bundles assets or a hash of assets for each bundle specified\n   */\n  resolveBundle(bundleIds) {\n    const singleAsset = isSingleItem.isSingleItem(bundleIds);\n    bundleIds = convertToList.convertToList(bundleIds);\n    const out = {};\n    return bundleIds.forEach((bundleId) => {\n      const assetNames = this._bundles[bundleId];\n      if (assetNames) {\n        const results = this.resolve(assetNames), assets = {};\n        for (const key in results) {\n          const asset = results[key];\n          assets[this._extractAssetIdFromBundle(bundleId, key)] = asset;\n        }\n        out[bundleId] = assets;\n      }\n    }), singleAsset ? out[bundleIds[0]] : out;\n  }\n  /**\n   * Does exactly what resolve does, but returns just the URL rather than the whole asset object\n   * @param key - The key or keys to resolve\n   * @returns - The URLs associated with the key(s)\n   */\n  resolveUrl(key) {\n    const result = this.resolve(key);\n    if (typeof key != \"string\") {\n      const out = {};\n      for (const i in result)\n        out[i] = result[i].src;\n      return out;\n    }\n    return result.src;\n  }\n  resolve(keys) {\n    const singleAsset = isSingleItem.isSingleItem(keys);\n    keys = convertToList.convertToList(keys);\n    const result = {};\n    return keys.forEach((key) => {\n      if (!this._resolverHash[key])\n        if (this._assetMap[key]) {\n          let assets = this._assetMap[key];\n          const bestAsset = assets[0], preferredOrder = this._getPreferredOrder(assets);\n          preferredOrder?.priority.forEach((priorityKey) => {\n            preferredOrder.params[priorityKey].forEach((value) => {\n              const filteredAssets = assets.filter((asset) => asset[priorityKey] ? asset[priorityKey] === value : !1);\n              filteredAssets.length && (assets = filteredAssets);\n            });\n          }), this._resolverHash[key] = assets[0] ?? bestAsset;\n        } else\n          this._resolverHash[key] = this.buildResolvedAsset({\n            alias: [key],\n            src: key\n          }, {});\n      result[key] = this._resolverHash[key];\n    }), singleAsset ? result[keys[0]] : result;\n  }\n  /**\n   * Checks if an asset with a given key exists in the resolver\n   * @param key - The key of the asset\n   */\n  hasKey(key) {\n    return !!this._assetMap[key];\n  }\n  /**\n   * Checks if a bundle with the given key exists in the resolver\n   * @param key - The key of the bundle\n   */\n  hasBundle(key) {\n    return !!this._bundles[key];\n  }\n  /**\n   * Internal function for figuring out what prefer criteria an asset should use.\n   * @param assets\n   */\n  _getPreferredOrder(assets) {\n    for (let i = 0; i < assets.length; i++) {\n      const asset = assets[0], preferred = this._preferredOrder.find((preference) => preference.params.format.includes(asset.format));\n      if (preferred)\n        return preferred;\n    }\n    return this._preferredOrder[0];\n  }\n  /**\n   * Appends the default url parameters to the url\n   * @param url - The url to append the default parameters to\n   * @returns - The url with the default parameters appended\n   */\n  _appendDefaultSearchParams(url) {\n    if (!this._defaultSearchParams)\n      return url;\n    const paramConnector = /\\?/.test(url) ? \"&\" : \"?\";\n    return `${url}${paramConnector}${this._defaultSearchParams}`;\n  }\n  buildResolvedAsset(formattedAsset, data) {\n    const { aliases, data: assetData, loadParser, format } = data;\n    return (this._basePath || this._rootPath) && (formattedAsset.src = core.utils.path.toAbsolute(formattedAsset.src, this._basePath, this._rootPath)), formattedAsset.alias = aliases ?? formattedAsset.alias ?? [formattedAsset.src], formattedAsset.src = this._appendDefaultSearchParams(formattedAsset.src), formattedAsset.data = { ...assetData || {}, ...formattedAsset.data }, formattedAsset.loadParser = loadParser ?? formattedAsset.loadParser, formattedAsset.format = format ?? formattedAsset.format ?? core.utils.path.extname(formattedAsset.src).slice(1), formattedAsset.srcs = formattedAsset.src, formattedAsset.name = formattedAsset.alias, formattedAsset;\n  }\n}\nexports.Resolver = Resolver;\n//# sourceMappingURL=Resolver.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","convertToList","createStringVariations","isSingleItem","Resolver","constructor","_defaultBundleIdentifierOptions","connector","createBundleAssetId","bundleId","assetId","_bundleIdConnector","extractAssetIdFromBundle","assetBundleId","replace","_createBundleAssetId","_extractAssetIdFromBundle","_assetMap","_preferredOrder","_parsers","_resolverHash","_bundles","setBundleIdentifier","bundleIdentifier","Error","prefer","preferOrders","forEach","push","priority","Object","keys","params","basePath","_basePath","rootPath","_rootPath","reset","_manifest","_defaultSearchParams","setDefaultSearchParams","searchParams","map","key","encodeURIComponent","join","getAlias","asset","alias","name","src","srcs","value","Array","isArray","v","addManifest","manifest","console","warn","bundles","bundle","addBundle","assets","assetNames","aliases","bundleAssetId","ids","bundleIds","add","assetSrc","data","format","loadParser","utils","deprecation","keyCheck","hasKey","srcs2","data2","format2","loadParser2","srcsToUse","src2","aliasesToUse","resolvedAssets","srcs3","formattedAsset","i","length","parser","test","parse","buildResolvedAsset","resolveBundle","singleAsset","out","results","resolve","resolveUrl","result","bestAsset","preferredOrder","_getPreferredOrder","priorityKey","filteredAssets","filter","hasBundle","preferred","find","preference","includes","_appendDefaultSearchParams","url","paramConnector","assetData","path","toAbsolute","extname","slice"]
}
