{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$loadSVG.js",
"lineCount":39,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/assets/loader/parsers/textures/loadSVG.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$assets$loader$parsers$textures$loadSVG\"] = function(global,require,module,exports) {\n'use strict';\n\nvar adapter = require('../../../../environment/adapter.js');\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar ImageSource = require('../../../../rendering/renderers/shared/texture/sources/ImageSource.js');\nvar GraphicsContext = require('../../../../scene/graphics/shared/GraphicsContext.js');\nvar getResolutionOfUrl = require('../../../../utils/network/getResolutionOfUrl.js');\nvar checkDataUrl = require('../../../utils/checkDataUrl.js');\nvar checkExtension = require('../../../utils/checkExtension.js');\nvar LoaderParser = require('../LoaderParser.js');\nvar createTexture = require('./utils/createTexture.js');\n\n\"use strict\";\nconst validSVGExtension = \".svg\";\nconst validSVGMIME = \"image/svg+xml\";\nconst loadSvg = {\n  extension: {\n    type: Extensions.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.Low,\n    name: \"loadSVG\"\n  },\n  name: \"loadSVG\",\n  config: {\n    crossOrigin: \"anonymous\",\n    parseAsGraphicsContext: false\n  },\n  test(url) {\n    return checkDataUrl.checkDataUrl(url, validSVGMIME) || checkExtension.checkExtension(url, validSVGExtension);\n  },\n  async load(url, asset, loader) {\n    if (asset.data?.parseAsGraphicsContext ?? this.config.parseAsGraphicsContext) {\n      return loadAsGraphics(url);\n    }\n    return loadAsTexture(url, asset, loader, this.config.crossOrigin);\n  },\n  unload(asset) {\n    asset.destroy(true);\n  }\n};\nasync function loadAsTexture(url, asset, loader, crossOrigin) {\n  const response = await adapter.DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const blobUrl = URL.createObjectURL(blob);\n  const image = new Image();\n  image.src = blobUrl;\n  image.crossOrigin = crossOrigin;\n  await image.decode();\n  URL.revokeObjectURL(blobUrl);\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  const resolution = asset.data?.resolution || getResolutionOfUrl.getResolutionOfUrl(url);\n  const width = asset.data?.width ?? image.width;\n  const height = asset.data?.height ?? image.height;\n  canvas.width = width * resolution;\n  canvas.height = height * resolution;\n  context.drawImage(image, 0, 0, width * resolution, height * resolution);\n  const { parseAsGraphicsContext: _p, ...rest } = asset.data ?? {};\n  const base = new ImageSource.ImageSource({\n    resource: canvas,\n    alphaMode: \"premultiply-alpha-on-upload\",\n    resolution,\n    ...rest\n  });\n  return createTexture.createTexture(base, loader, url);\n}\nasync function loadAsGraphics(url) {\n  const response = await adapter.DOMAdapter.get().fetch(url);\n  const svgSource = await response.text();\n  const context = new GraphicsContext.GraphicsContext();\n  context.svg(svgSource);\n  return context;\n}\n\nexports.loadSvg = loadSvg;\n//# sourceMappingURL=loadSVG.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","loadAsTexture","url","asset","loader","crossOrigin","blob","response","adapter","DOMAdapter","get","fetch","blobUrl","URL","createObjectURL","image","Image","src","decode","revokeObjectURL","canvas","document","createElement","context","getContext","resolution","data","getResolutionOfUrl","width","height","drawImage","_p","rest","base","ImageSource","resource","alphaMode","createTexture","loadAsGraphics","svgSource","text","GraphicsContext","svg","Extensions","checkDataUrl","checkExtension","LoaderParser","loadSvg","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","Low","name","config","parseAsGraphicsContext","test","validSVGMIME","validSVGExtension","load","unload","destroy"]
}
