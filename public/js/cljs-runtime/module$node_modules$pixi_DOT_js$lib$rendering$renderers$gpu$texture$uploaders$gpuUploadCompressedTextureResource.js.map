{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$uploaders$gpuUploadCompressedTextureResource.js",
"lineCount":13,
"mappings":"AAAAA,cAAA,CAAA,gHAAA,GAAqI,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAI7K,QAAMC,eAAe,CACnB,iBAAkB,CAAEC,WAAY,CAAd,EAAiBC,WAAY,CAA7B,EAAgCC,YAAa,CAA7C,CADC,EAEnB,iBAAkB,CAAEF,WAAY,EAAd,EAAkBC,WAAY,CAA9B,EAAiCC,YAAa,CAA9C,CAFC,EAGnB,iBAAkB,CAAEF,WAAY,EAAd,EAAkBC,WAAY,CAA9B,EAAiCC,YAAa,CAA9C,CAHC,EAInB,iBAAkB,CAAEF,WAAY,EAAd,EAAkBC,WAAY,CAA9B,EAAiCC,YAAa,CAA9C,CAJC,EAKnB,iBAAkB,CAAEF,WAAY,CAAd,EAAiBC,WAAY,CAA7B,EAAgCC,YAAa,CAA7C,CALC,EAMnB,kBAAmB,CAAEF,WAAY,EAAd,EAAkBC,WAAY,CAA9B,EAAiCC,YAAa,CAA9C,CANA,EAOnB,iBAAkB,CAAEF,WAAY,EAAd,EAAkBC,WAAY,CAA9B,EAAiCC,YAAa,CAA9C,CAPC,CAArB,EASMC,mBAAmB,CAAEH,WAAY,CAAd,EAAiBC,WAAY,CAA7B;AAAgCC,cAAa,CAA7C,CATzB;AAyCAJ,SAAQC,CAAAA,YAAR,GAAuBA,YAAvB;AACAD,SAAQM,CAAAA,kCAAR,GAhC2CA,CACzCC,KAAM,YADmCD,EAEzCE,MAAM,CAACC,MAAD,EAASC,UAAT,EAAqBC,GAArB,CAA0B;AAC9B,QAAIC,WAAWH,MAAOI,CAAAA,UAAtB,EACIC,YAAYL,MAAOM,CAAAA,WADvB;AAEA,UAAMC,YAAYf,YAAA,CAAaQ,MAAOQ,CAAAA,MAApB,CAAZD,IAA2CX,gBAAjD;AACA,SAAK,IAAIa,IAAI,CAAb,EAAgBA,CAAhB,GAAoBT,MAAOU,CAAAA,QAASC,CAAAA,MAApC,EAA4CF,CAAA,EAA5C;AAGEP,SAAIU,CAAAA,MAAOC,CAAAA,KAAMC,CAAAA,YAAjB,CACE,CACEC,QAASd,UADX,EAEEe,SAAUP,CAFZ,CADF,EAFoBT,MAAOU,CAAAA,QAAPO,CAAgBR,CAAhBQ,CAEpB,EAME,CACEC,OAAQ,CADV,EAEEC,YATgBC,IAAKC,CAAAA,IAAL,CAAUlB,QAAV,GAAqBI,SAAUb,CAAAA,UAA/B,CAShByB,GAT6DZ,SAAUd,CAAAA,UAOzE,CANF,EAUE,CACE6B,MAAOF,IAAKC,CAAAA,IAAL,CAAUlB,QAAV,GAAqBI,SAAUb,CAAAA,UAA/B,CAAP4B,GAAoDf,SAAUb,CAAAA,UADhE,EAEE6B,OAAQH,IAAKC,CAAAA,IAAL,CAAUhB,SAAV,GAAsBE,SAAUZ,CAAAA,WAAhC,CAAR4B,GAAuDhB,SAAUZ,CAAAA,WAFnE,EAGE6B,mBAAoB,CAHtB,CAVF,CAiBA,EADArB,QACA,GADWiB,IAAKK,CAAAA,GAAL,CAAStB,QAAT,IAAqB,CAArB,EAAwB,CAAxB,CACX,EAAAE,SAAA,GAAYe,IAAKK,CAAAA,GAAL,CAASpB,SAAT,IAAsB,CAAtB,EAAyB,CAAzB,CAAZ;AApBF;AAJ8B,GAFSR,CAgC3C;AA9C6K,CAA7K;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadCompressedTextureResource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$texture$uploaders$gpuUploadCompressedTextureResource\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst blockDataMap = {\n  \"bc1-rgba-unorm\": { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n  \"bc2-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"bc3-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"bc7-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"etc1-rgb-unorm\": { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n  \"etc2-rgba8unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"astc-4x4-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 }\n};\nconst defaultBlockData = { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\nconst gpuUploadCompressedTextureResource = {\n  type: \"compressed\",\n  upload(source, gpuTexture, gpu) {\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const blockData = blockDataMap[source.format] || defaultBlockData;\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n      gpu.device.queue.writeTexture(\n        {\n          texture: gpuTexture,\n          mipLevel: i\n        },\n        levelBuffer,\n        {\n          offset: 0,\n          bytesPerRow\n        },\n        {\n          width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n          height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n          depthOrArrayLayers: 1\n        }\n      );\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\n\nexports.blockDataMap = blockDataMap;\nexports.gpuUploadCompressedTextureResource = gpuUploadCompressedTextureResource;\n//# sourceMappingURL=gpuUploadCompressedTextureResource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","blockDataMap","blockBytes","blockWidth","blockHeight","defaultBlockData","gpuUploadCompressedTextureResource","type","upload","source","gpuTexture","gpu","mipWidth","pixelWidth","mipHeight","pixelHeight","blockData","format","i","resource","length","device","queue","writeTexture","texture","mipLevel","levelBuffer","offset","bytesPerRow","Math","ceil","width","height","depthOrArrayLayers","max"]
}
