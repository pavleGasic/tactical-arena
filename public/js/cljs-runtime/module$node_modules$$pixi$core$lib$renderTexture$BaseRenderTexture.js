shadow$provide.module$node_modules$$pixi$core$lib$renderTexture$BaseRenderTexture = function(global, require, module, exports) {
  var color = require("module$node_modules$$pixi$color$lib$index"), constants = require("module$node_modules$$pixi$constants$lib$index"), Framebuffer = require("module$node_modules$$pixi$core$lib$framebuffer$Framebuffer");
  global = require("module$node_modules$$pixi$core$lib$textures$BaseTexture");
  class BaseRenderTexture extends global.BaseTexture {
    constructor(options = {}, JSCompiler_OptimizeArgumentsArray_p0, JSCompiler_OptimizeArgumentsArray_p1, JSCompiler_OptimizeArgumentsArray_p2) {
      "number" == typeof options && (options = {width:arguments[0], height:JSCompiler_OptimizeArgumentsArray_p0, scaleMode:JSCompiler_OptimizeArgumentsArray_p1, resolution:JSCompiler_OptimizeArgumentsArray_p2});
      options.width = options.width ?? 100;
      options.height = options.height ?? 100;
      options.multisample ?? (options.multisample = constants.MSAA_QUALITY.NONE);
      super(null, options);
      this.mipmap = constants.MIPMAP_MODES.OFF;
      this.valid = !0;
      this._clear = new color.Color([0, 0, 0, 0]);
      this.framebuffer = (new Framebuffer.Framebuffer(this.realWidth, this.realHeight)).addColorTexture(0, this);
      this.framebuffer.multisample = options.multisample;
      this.maskStack = [];
      this.filterStack = [{}];
    }
    set clearColor(value) {
      this._clear.setValue(value);
    }
    get clearColor() {
      return this._clear.value;
    }
    get clear() {
      return this._clear;
    }
    get multisample() {
      return this.framebuffer.multisample;
    }
    set multisample(value) {
      this.framebuffer.multisample = value;
    }
    resize(desiredWidth, desiredHeight) {
      this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);
      this.setRealSize(this.framebuffer.width, this.framebuffer.height);
    }
    dispose() {
      this.framebuffer.dispose();
      super.dispose();
    }
    destroy() {
      super.destroy();
      this.framebuffer.destroyDepthTexture();
      this.framebuffer = null;
    }
  }
  exports.BaseRenderTexture = BaseRenderTexture;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$renderTexture$BaseRenderTexture.js.map
