shadow$provide.module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$utils$uniformParsers = function(global, require, module, exports) {
  exports.uniformParsers = [{type:"mat3x3\x3cf32\x3e", test:data => void 0 !== data.value.a, ubo:"\n            var matrix \x3d uv[name].toArray(true);\n            data[offset] \x3d matrix[0];\n            data[offset + 1] \x3d matrix[1];\n            data[offset + 2] \x3d matrix[2];\n            data[offset + 4] \x3d matrix[3];\n            data[offset + 5] \x3d matrix[4];\n            data[offset + 6] \x3d matrix[5];\n            data[offset + 8] \x3d matrix[6];\n            data[offset + 9] \x3d matrix[7];\n            data[offset + 10] \x3d matrix[8];\n        ", 
  uniform:"\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        "}, {type:"vec4\x3cf32\x3e", test:data => "vec4\x3cf32\x3e" === data.type && 1 === data.size && void 0 !== data.value.width, ubo:"\n            v \x3d uv[name];\n            data[offset] \x3d v.x;\n            data[offset + 1] \x3d v.y;\n            data[offset + 2] \x3d v.width;\n            data[offset + 3] \x3d v.height;\n        ", uniform:"\n            cv \x3d ud[name].value;\n            v \x3d uv[name];\n            if (cv[0] !\x3d\x3d v.x || cv[1] !\x3d\x3d v.y || cv[2] !\x3d\x3d v.width || cv[3] !\x3d\x3d v.height) {\n                cv[0] \x3d v.x;\n                cv[1] \x3d v.y;\n                cv[2] \x3d v.width;\n                cv[3] \x3d v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        "}, 
  {type:"vec2\x3cf32\x3e", test:data => "vec2\x3cf32\x3e" === data.type && 1 === data.size && void 0 !== data.value.x, ubo:"\n            v \x3d uv[name];\n            data[offset] \x3d v.x;\n            data[offset + 1] \x3d v.y;\n        ", uniform:"\n            cv \x3d ud[name].value;\n            v \x3d uv[name];\n            if (cv[0] !\x3d\x3d v.x || cv[1] !\x3d\x3d v.y) {\n                cv[0] \x3d v.x;\n                cv[1] \x3d v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        "}, 
  {type:"vec4\x3cf32\x3e", test:data => "vec4\x3cf32\x3e" === data.type && 1 === data.size && void 0 !== data.value.red, ubo:"\n            v \x3d uv[name];\n            data[offset] \x3d v.red;\n            data[offset + 1] \x3d v.green;\n            data[offset + 2] \x3d v.blue;\n            data[offset + 3] \x3d v.alpha;\n        ", uniform:"\n            cv \x3d ud[name].value;\n            v \x3d uv[name];\n            if (cv[0] !\x3d\x3d v.red || cv[1] !\x3d\x3d v.green || cv[2] !\x3d\x3d v.blue || cv[3] !\x3d\x3d v.alpha) {\n                cv[0] \x3d v.red;\n                cv[1] \x3d v.green;\n                cv[2] \x3d v.blue;\n                cv[3] \x3d v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        "}, 
  {type:"vec3\x3cf32\x3e", test:data => "vec3\x3cf32\x3e" === data.type && 1 === data.size && void 0 !== data.value.red, ubo:"\n            v \x3d uv[name];\n            data[offset] \x3d v.red;\n            data[offset + 1] \x3d v.green;\n            data[offset + 2] \x3d v.blue;\n        ", uniform:"\n            cv \x3d ud[name].value;\n            v \x3d uv[name];\n            if (cv[0] !\x3d\x3d v.red || cv[1] !\x3d\x3d v.green || cv[2] !\x3d\x3d v.blue) {\n                cv[0] \x3d v.red;\n                cv[1] \x3d v.green;\n                cv[2] \x3d v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        "}];
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$shader$utils$uniformParsers.js.map
