{
"version":3,
"file":"module$node_modules$$pixi$filter_displacement$lib$DisplacementFilter.js",
"lineCount":30,
"mappings":"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",
"sources":["node_modules/@pixi/filter-displacement/lib/DisplacementFilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$filter_displacement$lib$DisplacementFilter\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), displacement$1 = require(\"./displacement.frag.js\"), displacement = require(\"./displacement.vert.js\");\nclass DisplacementFilter extends core.Filter {\n  /**\n   * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n   * @param scale - The scale of the displacement\n   */\n  constructor(sprite, scale) {\n    const maskMatrix = new core.Matrix();\n    sprite.renderable = !1, super(displacement.default, displacement$1.default, {\n      mapSampler: sprite._texture,\n      filterMatrix: maskMatrix,\n      scale: { x: 1, y: 1 },\n      rotation: new Float32Array([1, 0, 0, 1])\n    }), this.maskSprite = sprite, this.maskMatrix = maskMatrix, scale == null && (scale = 20), this.scale = new core.Point(scale, scale);\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - clearMode.\n   */\n  apply(filterManager, input, output, clearMode) {\n    this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite), this.uniforms.scale.x = this.scale.x, this.uniforms.scale.y = this.scale.y;\n    const wt = this.maskSprite.worldTransform, lenX = Math.sqrt(wt.a * wt.a + wt.b * wt.b), lenY = Math.sqrt(wt.c * wt.c + wt.d * wt.d);\n    lenX !== 0 && lenY !== 0 && (this.uniforms.rotation[0] = wt.a / lenX, this.uniforms.rotation[1] = wt.b / lenX, this.uniforms.rotation[2] = wt.c / lenY, this.uniforms.rotation[3] = wt.d / lenY), filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /** The texture used for the displacement map. Must be power of 2 sized texture. */\n  get map() {\n    return this.uniforms.mapSampler;\n  }\n  set map(value) {\n    this.uniforms.mapSampler = value;\n  }\n}\nexports.DisplacementFilter = DisplacementFilter;\n//# sourceMappingURL=DisplacementFilter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","displacement$1","displacement","DisplacementFilter","Filter","constructor","sprite","scale","maskMatrix","Matrix","renderable","default","mapSampler","_texture","filterMatrix","x","y","rotation","Float32Array","maskSprite","Point","apply","filterManager","input","output","clearMode","uniforms","calculateSpriteMatrix","wt","worldTransform","lenX","Math","sqrt","a","b","lenY","c","d","applyFilter","value"]
}
