shadow$provide.module$node_modules$$pixi$compressed_textures$lib$parsers$parseDDS = function(global, require, module, exports) {
  var _const = require("module$node_modules$$pixi$compressed_textures$lib$const");
  require("module$node_modules$$pixi$compressed_textures$lib$resources$index");
  var CompressedTextureResource = require("module$node_modules$$pixi$compressed_textures$lib$resources$CompressedTextureResource");
  const FOURCC_TO_FORMAT = {[827611204]:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, [861165636]:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, [894720068]:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT}, DXGI_TO_FORMAT = {70:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, 71:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, 73:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, 74:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, 76:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT, 
  77:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT, 72:_const.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT, 75:_const.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, 78:_const.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, 96:_const.INTERNAL_FORMATS.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT, 95:_const.INTERNAL_FORMATS.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT, 98:_const.INTERNAL_FORMATS.COMPRESSED_RGBA_BPTC_UNORM_EXT, 99:_const.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT};
  exports.parseDDS = function(arrayBuffer) {
    var data = new Uint32Array(arrayBuffer);
    if (542327876 !== data[0]) {
      throw Error("Invalid DDS file magic word");
    }
    var header = new Uint32Array(arrayBuffer, 0, 124 / Uint32Array.BYTES_PER_ELEMENT);
    const height = header[3], width = header[4], mipmapCount = header[7];
    header = new Uint32Array(arrayBuffer, 19 * Uint32Array.BYTES_PER_ELEMENT, 32 / Uint32Array.BYTES_PER_ELEMENT);
    var formatFlags = header[1];
    if (formatFlags & 4) {
      header = header[2];
      if (808540228 !== header) {
        return data = FOURCC_TO_FORMAT[header], arrayBuffer = new Uint8Array(arrayBuffer, 128), [new CompressedTextureResource.CompressedTextureResource(arrayBuffer, {format:data, width, height, levels:mipmapCount})];
      }
      data = new Uint32Array(data.buffer, 128, 20 / Uint32Array.BYTES_PER_ELEMENT);
      header = data[0];
      formatFlags = data[1];
      var miscFlag = data[2];
      data = data[3];
      const internalFormat = DXGI_TO_FORMAT[header];
      if (void 0 === internalFormat) {
        throw Error(`DDSParser cannot parse texture data with DXGI format ${header}`);
      }
      if (4 === miscFlag) {
        throw Error("DDSParser does not support cubemap textures");
      }
      if (6 === formatFlags) {
        throw Error("DDSParser does not supported 3D texture data");
      }
      header = [];
      if (1 === data) {
        header.push(new Uint8Array(arrayBuffer, 148));
      } else {
        miscFlag = _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];
        formatFlags = 0;
        var levelWidth = width;
        let levelHeight = height;
        for (let i = 0; i < mipmapCount; i++) {
          formatFlags += Math.max(1, levelWidth + 3 & -4) * Math.max(1, levelHeight + 3 & -4) * miscFlag, levelWidth >>>= 1, levelHeight >>>= 1;
        }
        miscFlag = 148;
        for (levelWidth = 0; levelWidth < data; levelWidth++) {
          header.push(new Uint8Array(arrayBuffer, miscFlag, formatFlags)), miscFlag += formatFlags;
        }
      }
      return header.map(buffer => new CompressedTextureResource.CompressedTextureResource(buffer, {format:internalFormat, width, height, levels:mipmapCount}));
    }
    throw formatFlags & 64 ? Error("DDSParser does not support uncompressed texture data.") : formatFlags & 512 ? Error("DDSParser does not supported YUV uncompressed texture data.") : formatFlags & 131072 ? Error("DDSParser does not support single-channel (lumninance) texture data!") : formatFlags & 2 ? Error("DDSParser does not support single-channel (alpha) texture data!") : Error("DDSParser failed to load a texture file due to an unknown reason!");
  };
};

//# sourceMappingURL=module$node_modules$$pixi$compressed_textures$lib$parsers$parseDDS.js.map
