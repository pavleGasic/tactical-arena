{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$pipeline$PipelineSystem.js",
"lineCount":143,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/pipeline/PipelineSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$pipeline$PipelineSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../extensions/Extensions.js');\nvar warn = require('../../../../utils/logging/warn.js');\nvar ensureAttributes = require('../../gl/shader/program/ensureAttributes.js');\nvar _const = require('../../shared/state/const.js');\nvar createIdFromString = require('../../shared/utils/createIdFromString.js');\nvar GpuStencilModesToPixi = require('../state/GpuStencilModesToPixi.js');\n\n\"use strict\";\nconst topologyStringToId = {\n  \"point-list\": 0,\n  \"line-list\": 1,\n  \"line-strip\": 2,\n  \"triangle-list\": 3,\n  \"triangle-strip\": 4\n};\nfunction getGraphicsStateKey(geometryLayout, shaderKey, state, blendMode, topology) {\n  return geometryLayout << 24 | shaderKey << 16 | state << 10 | blendMode << 5 | topology;\n}\nfunction getGlobalStateKey(stencilStateId, multiSampleCount, colorMask, renderTarget) {\n  return colorMask << 6 | stencilStateId << 3 | renderTarget << 1 | multiSampleCount;\n}\nclass PipelineSystem {\n  constructor(renderer) {\n    this._moduleCache = /* @__PURE__ */ Object.create(null);\n    this._bufferLayoutsCache = /* @__PURE__ */ Object.create(null);\n    this._bindingNamesCache = /* @__PURE__ */ Object.create(null);\n    this._pipeCache = /* @__PURE__ */ Object.create(null);\n    this._pipeStateCaches = /* @__PURE__ */ Object.create(null);\n    this._colorMask = 15;\n    this._multisampleCount = 1;\n    this._renderer = renderer;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n    this.setStencilMode(_const.STENCIL_MODES.DISABLED);\n    this._updatePipeHash();\n  }\n  setMultisampleCount(multisampleCount) {\n    if (this._multisampleCount === multisampleCount)\n      return;\n    this._multisampleCount = multisampleCount;\n    this._updatePipeHash();\n  }\n  setRenderTarget(renderTarget) {\n    this._multisampleCount = renderTarget.msaaSamples;\n    this._depthStencilAttachment = renderTarget.descriptor.depthStencilAttachment ? 1 : 0;\n    this._updatePipeHash();\n  }\n  setColorMask(colorMask) {\n    if (this._colorMask === colorMask)\n      return;\n    this._colorMask = colorMask;\n    this._updatePipeHash();\n  }\n  setStencilMode(stencilMode) {\n    if (this._stencilMode === stencilMode)\n      return;\n    this._stencilMode = stencilMode;\n    this._stencilState = GpuStencilModesToPixi.GpuStencilModesToPixi[stencilMode];\n    this._updatePipeHash();\n  }\n  setPipeline(geometry, program, state, passEncoder) {\n    const pipeline = this.getPipeline(geometry, program, state);\n    passEncoder.setPipeline(pipeline);\n  }\n  getPipeline(geometry, program, state, topology) {\n    if (!geometry._layoutKey) {\n      ensureAttributes.ensureAttributes(geometry, program.attributeData);\n      this._generateBufferKey(geometry);\n    }\n    topology || (topology = geometry.topology);\n    const key = getGraphicsStateKey(\n      geometry._layoutKey,\n      program._layoutKey,\n      state.data,\n      state._blendModeId,\n      topologyStringToId[topology]\n    );\n    if (this._pipeCache[key])\n      return this._pipeCache[key];\n    this._pipeCache[key] = this._createPipeline(geometry, program, state, topology);\n    return this._pipeCache[key];\n  }\n  _createPipeline(geometry, program, state, topology) {\n    const device = this._gpu.device;\n    const buffers = this._createVertexBufferLayouts(geometry, program);\n    const blendModes = this._renderer.state.getColorTargets(state);\n    blendModes[0].writeMask = this._stencilMode === _const.STENCIL_MODES.RENDERING_MASK_ADD ? 0 : this._colorMask;\n    const layout = this._renderer.shader.getProgramData(program).pipeline;\n    const descriptor = {\n      // TODO later check if its helpful to create..\n      // layout,\n      vertex: {\n        module: this._getModule(program.vertex.source),\n        entryPoint: program.vertex.entryPoint,\n        // geometry..\n        buffers\n      },\n      fragment: {\n        module: this._getModule(program.fragment.source),\n        entryPoint: program.fragment.entryPoint,\n        targets: blendModes\n      },\n      primitive: {\n        topology,\n        cullMode: state.cullMode\n      },\n      layout,\n      multisample: {\n        count: this._multisampleCount\n      },\n      // depthStencil,\n      label: `PIXI Pipeline`\n    };\n    if (this._depthStencilAttachment) {\n      descriptor.depthStencil = {\n        ...this._stencilState,\n        format: \"depth24plus-stencil8\",\n        depthWriteEnabled: state.depthTest,\n        depthCompare: state.depthTest ? \"less\" : \"always\"\n      };\n    }\n    const pipeline = device.createRenderPipeline(descriptor);\n    return pipeline;\n  }\n  _getModule(code) {\n    return this._moduleCache[code] || this._createModule(code);\n  }\n  _createModule(code) {\n    const device = this._gpu.device;\n    this._moduleCache[code] = device.createShaderModule({\n      code\n    });\n    return this._moduleCache[code];\n  }\n  _generateBufferKey(geometry) {\n    const keyGen = [];\n    let index = 0;\n    const attributeKeys = Object.keys(geometry.attributes).sort();\n    for (let i = 0; i < attributeKeys.length; i++) {\n      const attribute = geometry.attributes[attributeKeys[i]];\n      keyGen[index++] = attribute.offset;\n      keyGen[index++] = attribute.format;\n      keyGen[index++] = attribute.stride;\n      keyGen[index++] = attribute.instance;\n    }\n    const stringKey = keyGen.join(\"|\");\n    geometry._layoutKey = createIdFromString.createIdFromString(stringKey, \"geometry\");\n    return geometry._layoutKey;\n  }\n  _generateAttributeLocationsKey(program) {\n    const keyGen = [];\n    let index = 0;\n    const attributeKeys = Object.keys(program.attributeData).sort();\n    for (let i = 0; i < attributeKeys.length; i++) {\n      const attribute = program.attributeData[attributeKeys[i]];\n      keyGen[index++] = attribute.location;\n    }\n    const stringKey = keyGen.join(\"|\");\n    program._attributeLocationsKey = createIdFromString.createIdFromString(stringKey, \"programAttributes\");\n    return program._attributeLocationsKey;\n  }\n  /**\n   * Returns a hash of buffer names mapped to bind locations.\n   * This is used to bind the correct buffer to the correct location in the shader.\n   * @param geometry - The geometry where to get the buffer names\n   * @param program - The program where to get the buffer names\n   * @returns An object of buffer names mapped to the bind location.\n   */\n  getBufferNamesToBind(geometry, program) {\n    const key = geometry._layoutKey << 16 | program._attributeLocationsKey;\n    if (this._bindingNamesCache[key])\n      return this._bindingNamesCache[key];\n    const data = this._createVertexBufferLayouts(geometry, program);\n    const bufferNamesToBind = /* @__PURE__ */ Object.create(null);\n    const attributeData = program.attributeData;\n    for (let i = 0; i < data.length; i++) {\n      const attributes = Object.values(data[i].attributes);\n      const shaderLocation = attributes[0].shaderLocation;\n      for (const j in attributeData) {\n        if (attributeData[j].location === shaderLocation) {\n          bufferNamesToBind[i] = j;\n          break;\n        }\n      }\n    }\n    this._bindingNamesCache[key] = bufferNamesToBind;\n    return bufferNamesToBind;\n  }\n  _createVertexBufferLayouts(geometry, program) {\n    if (!program._attributeLocationsKey)\n      this._generateAttributeLocationsKey(program);\n    const key = geometry._layoutKey << 16 | program._attributeLocationsKey;\n    if (this._bufferLayoutsCache[key]) {\n      return this._bufferLayoutsCache[key];\n    }\n    const vertexBuffersLayout = [];\n    geometry.buffers.forEach((buffer) => {\n      const bufferEntry = {\n        arrayStride: 0,\n        stepMode: \"vertex\",\n        attributes: []\n      };\n      const bufferEntryAttributes = bufferEntry.attributes;\n      for (const i in program.attributeData) {\n        const attribute = geometry.attributes[i];\n        if ((attribute.divisor ?? 1) !== 1) {\n          warn.warn(`Attribute ${i} has an invalid divisor value of '${attribute.divisor}'. WebGPU only supports a divisor value of 1`);\n        }\n        if (attribute.buffer === buffer) {\n          bufferEntry.arrayStride = attribute.stride;\n          bufferEntry.stepMode = attribute.instance ? \"instance\" : \"vertex\";\n          bufferEntryAttributes.push({\n            shaderLocation: program.attributeData[i].location,\n            offset: attribute.offset,\n            format: attribute.format\n          });\n        }\n      }\n      if (bufferEntryAttributes.length) {\n        vertexBuffersLayout.push(bufferEntry);\n      }\n    });\n    this._bufferLayoutsCache[key] = vertexBuffersLayout;\n    return vertexBuffersLayout;\n  }\n  _updatePipeHash() {\n    const key = getGlobalStateKey(\n      this._stencilMode,\n      this._multisampleCount,\n      this._colorMask,\n      this._depthStencilAttachment\n    );\n    if (!this._pipeStateCaches[key]) {\n      this._pipeStateCaches[key] = /* @__PURE__ */ Object.create(null);\n    }\n    this._pipeCache = this._pipeStateCaches[key];\n  }\n  destroy() {\n    this._renderer = null;\n    this._bufferLayoutsCache = null;\n  }\n}\n/** @ignore */\nPipelineSystem.extension = {\n  type: [Extensions.ExtensionType.WebGPUSystem],\n  name: \"pipeline\"\n};\n\nexports.PipelineSystem = PipelineSystem;\n//# sourceMappingURL=PipelineSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","warn","ensureAttributes","_const","createIdFromString","GpuStencilModesToPixi","topologyStringToId","PipelineSystem","constructor","renderer","_moduleCache","Object","create","_bufferLayoutsCache","_bindingNamesCache","_pipeCache","_pipeStateCaches","_colorMask","_multisampleCount","_renderer","contextChange","gpu","_gpu","setStencilMode","STENCIL_MODES","DISABLED","_updatePipeHash","setMultisampleCount","multisampleCount","setRenderTarget","renderTarget","msaaSamples","_depthStencilAttachment","descriptor","depthStencilAttachment","setColorMask","colorMask","stencilMode","_stencilMode","_stencilState","setPipeline","geometry","program","state","passEncoder","pipeline","getPipeline","topology","_layoutKey","attributeData","_generateBufferKey","key","data","_blendModeId","_createPipeline","device","buffers","_createVertexBufferLayouts","blendModes","getColorTargets","writeMask","RENDERING_MASK_ADD","layout","shader","getProgramData","vertex","_getModule","source","entryPoint","fragment","targets","primitive","cullMode","multisample","count","label","depthStencil","format","depthWriteEnabled","depthTest","depthCompare","createRenderPipeline","code","_createModule","createShaderModule","keyGen","index","attributeKeys","keys","attributes","sort","i","length","attribute","offset","stride","instance","stringKey","join","_generateAttributeLocationsKey","location","_attributeLocationsKey","getBufferNamesToBind","bufferNamesToBind","shaderLocation","values","j","vertexBuffersLayout","forEach","buffer","bufferEntry","arrayStride","stepMode","bufferEntryAttributes","divisor","push","destroy","extension","type","ExtensionType","WebGPUSystem","name"]
}
