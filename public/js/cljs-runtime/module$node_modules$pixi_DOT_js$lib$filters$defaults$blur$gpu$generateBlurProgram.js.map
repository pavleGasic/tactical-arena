{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$filters$defaults$blur$gpu$generateBlurProgram.js",
"lineCount":17,
"mappings":"AAAAA,cAAA,CAAA,iFAAA,GAAsG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG9I,MAAIC,aAAaH,OAAA,CAAQ,+EAAR,CAAjB,EACII,SAASJ,OAAA,CAAQ,iEAAR,CADb,EAEIK,eAAeL,OAAA,CAAQ,kFAAR,CAFnB;AAIA,cAAA;AAkCAE,SAAQI,CAAAA,mBAAR,GAjCAA,QAA4B,CAACC,UAAD,EAAaC,UAAb,CAAyB;AACnD,UAAMC,SAASL,MAAOM,CAAAA,eAAP,CAAuBF,UAAvB,CAAf,EACMG,aAAaF,MAAOG,CAAAA,MAD1B,EAEMC,mBAAmB,EAFzB;AAGA,QAAMC,gBAAgB,EAAtB,EACMC,qBAAqB,EAD3B;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBR,UAApB,EAAgCQ,CAAA,EAAhC;AACEH,sBAAA,CAAiBG,CAAjB,CAQA,GARuB,aAAYA,CAAZ,WAAwBA,CAAxB,cAQvB,EANEF,aAAA,CAAcE,CAAd,CAMF,GAPIT,UAAJ,GACsB,uBAAsBS,CAAtB,GAA0BL,UAA1B,GAAuC,CAAvC,yBADtB,GAGsB,4BAA2BK,CAA3B,GAA+BL,UAA/B,GAA4C,CAA5C,oBAItB,EAAAI,kBAAA,CAAmBC,CAAnB,CAAA,GAAyB,yDAAwDA,CAAxD,OADLP,MAAA,CADAO,CAAAC,GAAIN,UAAJM,GAAiBD,CAAjBC,GAAqBT,UAArBS,GAAkCD,CAAlCC,GAAsC,CACtC,CAAoBC,CAAAA,QAApBC,EACK,GAAzB;AATF;AAWMC,cAAAA,GAAaP,gBAAiBQ,CAAAA,IAAjB,CAAsB,IAAtB,CAAbD;AACAE,iBAAAA,GAAUR,aAAcO,CAAAA,IAAd,CAAmB,IAAnB,CAAVC;AACAC,sBAAAA,GAAeR,kBAAmBM,CAAAA,IAAnB,CAAwB,IAAxB,CAAfE;AACAC,cAAAA,GAAcnB,YAAaoB,CAAAA,OAAQC,CAAAA,OAArB,CAA6B,eAA7B,EAA8CN,UAA9C,CAA0DM,CAAAA,OAA1D,CAAkE,mBAAlE,EAAuFJ,aAAvF,CAAgGI,CAAAA,OAAhG,CAAwG,oBAAxG,EAA8HN,UAA9H,CAA0IM,CAAAA,OAA1I,CAAkJ,iBAAlJ,EAAqKH,kBAArK,CAAmLG,CAAAA,OAAnL,CAA2L,aAA3L,EAA0MnB,UAAA,GAAa,GAAb,GAAmB,GAA7N,CAAdiB;AACN,WAAOrB,UAAWA,CAAAA,UAAWwB,CAAAA,IAAtB,CAA2B,CAChCC,OAAQ,CACNC,OAAQL,UADF,EAENM,WAAY,YAFN,CADwB,EAKhCC,SAAU,CACRF,OAAQL,UADA,EAERM,WAAY,cAFJ,CALsB,CAA3B,CAAP;AArBmD,GAiCrD;AAzC8I,CAA9I;;",
"sources":["node_modules/pixi_DOT_js/lib/filters/defaults/blur/gpu/generateBlurProgram.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$filters$defaults$blur$gpu$generateBlurProgram\"] = function(global,require,module,exports) {\n'use strict';\n\nvar GpuProgram = require('../../../../rendering/renderers/gpu/shader/GpuProgram.js');\nvar _const = require('../const.js');\nvar blurTemplate = require('./blur-template.wgsl.js');\n\n\"use strict\";\nfunction generateBlurProgram(horizontal, kernelSize) {\n  const kernel = _const.GAUSSIAN_VALUES[kernelSize];\n  const halfLength = kernel.length;\n  const blurStructSource = [];\n  const blurOutSource = [];\n  const blurSamplingSource = [];\n  for (let i = 0; i < kernelSize; i++) {\n    blurStructSource[i] = `@location(${i}) offset${i}: vec2<f32>,`;\n    if (horizontal) {\n      blurOutSource[i] = `filteredCord + vec2(${i - halfLength + 1} * pixelStrength, 0.0),`;\n    } else {\n      blurOutSource[i] = `filteredCord + vec2(0.0, ${i - halfLength + 1} * pixelStrength),`;\n    }\n    const kernelIndex = i < halfLength ? i : kernelSize - i - 1;\n    const kernelValue = kernel[kernelIndex].toString();\n    blurSamplingSource[i] = `finalColor += textureSample(uTexture, uSampler, offset${i}) * ${kernelValue};`;\n  }\n  const blurStruct = blurStructSource.join(\"\\n\");\n  const blurOut = blurOutSource.join(\"\\n\");\n  const blurSampling = blurSamplingSource.join(\"\\n\");\n  const finalSource = blurTemplate.default.replace(\"%blur-struct%\", blurStruct).replace(\"%blur-vertex-out%\", blurOut).replace(\"%blur-fragment-in%\", blurStruct).replace(\"%blur-sampling%\", blurSampling).replace(\"%dimension%\", horizontal ? \"z\" : \"w\");\n  return GpuProgram.GpuProgram.from({\n    vertex: {\n      source: finalSource,\n      entryPoint: \"mainVertex\"\n    },\n    fragment: {\n      source: finalSource,\n      entryPoint: \"mainFragment\"\n    }\n  });\n}\n\nexports.generateBlurProgram = generateBlurProgram;\n//# sourceMappingURL=generateBlurProgram.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","GpuProgram","_const","blurTemplate","generateBlurProgram","horizontal","kernelSize","kernel","GAUSSIAN_VALUES","halfLength","length","blurStructSource","blurOutSource","blurSamplingSource","i","kernelIndex","toString","kernelValue","blurStruct","join","blurOut","blurSampling","finalSource","default","replace","from","vertex","source","entryPoint","fragment"]
}
