{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$MeshRope.js",
"lineCount":26,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,GAAmF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG3H,MAAIC,eAAeH,OAAA,CAAQ,wEAAR,CAAnB;AACII,QAAAA,GAAOJ,OAAA,CAAQ,4DAAR,CAAPI;AACJ,MAAIC,eAAeL,OAAA,CAAQ,oEAAR,CAAnB;AAEA,cAAA;AACkB,QAAA,0EAAA,aAAwBI,OAAKA,CAAAA,IAA7B;AAUhBE,eAAW,CAACC,OAAD,CAAU;AACnB,YAAM,CAAEC,OAAF,EAAWC,MAAX,EAAmBC,YAAnB,EAAiC,GAAGC,IAApC,CAAA,GAA6C,CAAE,GAAGC,uEAAUC,CAAAA,cAAf,EAA+B,GAAGN,OAAlC,CAAnD;AACMO,aAAAA,GAAe,IAAIT,YAAaA,CAAAA,YAAjB,CAA8BF,YAAaA,CAAAA,YAAb,CAA0B,CAAEY,MAAOP,OAAQQ,CAAAA,MAAjB,EAAyBP,MAAzB,EAAiCC,YAAjC,CAA1B,CAA9B,CAAfI;AACa,OAAnB,GAAIJ,YAAJ,KACEF,OAAQS,CAAAA,MAAOC,CAAAA,KAAMC,CAAAA,WADvB,GACqC,QADrC;AAGA,WAAA,CAAMhB,YAAaA,CAAAA,YAAb,CAA0B,CAC9B,GAAGQ,IAD2B,EAE9BH,OAF8B,EAG9BY,SAAUN,OAHoB,CAA1B,CAAN,CAAA;AAKA,UAAKO,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AACA,UAAKC,CAAAA,QAAL,GAAgB,IAAKC,CAAAA,OAArB;AAZmB;AAcrBA,WAAO,EAAG;AACR,YAAMH,WAAW,IAAKA,CAAAA,QAAtB;AACA,UAAI,IAAKC,CAAAA,UAAT,IAAuBD,QAASI,CAAAA,MAAhC,KAA2C,IAAKhB,CAAAA,OAAQQ,CAAAA,MAAxD;AACEI,gBAASI,CAAAA,MACT,GADkB,IAAKhB,CAAAA,OAAQQ,CAAAA,MAC/B,EAAAI,QAASK,CAAAA,MAAT,EAAA;AAFF;AAFQ;AAxBM,GAAA;AAAZb,SAAAA,GAAY,uEAAZA;AAgCNA,SAAUC,CAAAA,cAAV,GAA2B,CACzBH,aAAc,CADW,CAA3B;AAKAR,SAAQwB,CAAAA,QAAR,GAFed,OAEf;AA7C2H,CAA3H;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh-simple/MeshRope.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$MeshRope\"] = function(global,require,module,exports) {\n'use strict';\n\nvar definedProps = require('../container/utils/definedProps.js');\nvar Mesh = require('../mesh/shared/Mesh.js');\nvar RopeGeometry = require('./RopeGeometry.js');\n\n\"use strict\";\nconst _MeshRope = class _MeshRope extends Mesh.Mesh {\n  /**\n   * Note: The wrap mode of the texture is set to REPEAT if `textureScale` is positive.\n   * @param options\n   * @param options.texture - The texture to use on the rope.\n   * @param options.points - An array of {@link math.Point} objects to construct this rope.\n   * @param {number} options.textureScale - Optional. Positive values scale rope texture\n   * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n   * and downsampling here. If set to zero, texture will be stretched instead.\n   */\n  constructor(options) {\n    const { texture, points, textureScale, ...rest } = { ..._MeshRope.defaultOptions, ...options };\n    const ropeGeometry = new RopeGeometry.RopeGeometry(definedProps.definedProps({ width: texture.height, points, textureScale }));\n    if (textureScale > 0) {\n      texture.source.style.addressMode = \"repeat\";\n    }\n    super(definedProps.definedProps({\n      ...rest,\n      texture,\n      geometry: ropeGeometry\n    }));\n    this.autoUpdate = true;\n    this.onRender = this._render;\n  }\n  _render() {\n    const geometry = this.geometry;\n    if (this.autoUpdate || geometry._width !== this.texture.height) {\n      geometry._width = this.texture.height;\n      geometry.update();\n    }\n  }\n};\n_MeshRope.defaultOptions = {\n  textureScale: 0\n};\nlet MeshRope = _MeshRope;\n\nexports.MeshRope = MeshRope;\n//# sourceMappingURL=MeshRope.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","definedProps","Mesh","RopeGeometry","constructor","options","texture","points","textureScale","rest","_MeshRope","defaultOptions","ropeGeometry","width","height","source","style","addressMode","geometry","autoUpdate","onRender","_render","_width","update","MeshRope"]
}
