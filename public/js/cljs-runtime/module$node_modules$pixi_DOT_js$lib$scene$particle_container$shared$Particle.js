shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle = function(global, require, module, exports) {
  var Color = require("module$node_modules$pixi_DOT_js$lib$color$Color"), Texture = require("module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$Texture"), getGlobalMixin = require("module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$getGlobalMixin"), assignWithIgnore = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$assignWithIgnore");
  "use strict";
  const node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle$classdecl$var45 = class {
    constructor(options) {
      options instanceof Texture.Texture ? (this.texture = options, assignWithIgnore.assignWithIgnore(this, node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle$classdecl$var45.defaultOptions, {})) : assignWithIgnore.assignWithIgnore(this, {...node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle$classdecl$var45.defaultOptions, ...options}, {});
    }
    get alpha() {
      return this._alpha;
    }
    set alpha(value) {
      this._alpha = Math.min(Math.max(value, 0), 1);
      this._updateColor();
    }
    get tint() {
      return getGlobalMixin.bgr2rgb(this._tint);
    }
    set tint(value) {
      this._tint = "number" === typeof value ? value : Color.Color.shared.setValue(value ?? 16777215).toBgrNumber();
      this._updateColor();
    }
    _updateColor() {
      this.color = this._tint + ((255 * this._alpha | 0) << 24);
    }
  };
  global = node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle$classdecl$var45;
  global.defaultOptions = {anchorX:0, anchorY:0, x:0, y:0, scaleX:1, scaleY:1, rotation:0, tint:16777215, alpha:1};
  exports.Particle = global;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle.js.map
