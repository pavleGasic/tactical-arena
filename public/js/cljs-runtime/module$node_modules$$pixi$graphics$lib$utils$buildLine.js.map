{
"version":3,
"file":"module$node_modules$$pixi$graphics$lib$utils$buildLine.js",
"lineCount":144,
"mappings":"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",
"sources":["node_modules/@pixi/graphics/lib/utils/buildLine.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$graphics$lib$utils$buildLine\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), _const = require(\"../const.js\");\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise, verts) {\n  const ix = x - nx * innerWeight, iy = y - ny * innerWeight, ox = x + nx * outerWeight, oy = y + ny * outerWeight;\n  let exx, eyy;\n  clockwise ? (exx = ny, eyy = -nx) : (exx = -ny, eyy = nx);\n  const eix = ix + exx, eiy = iy + eyy, eox = ox + exx, eoy = oy + eyy;\n  return verts.push(\n    eix,\n    eiy,\n    eox,\n    eoy\n  ), 2;\n}\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n  const cx2p0x = sx - cx, cy2p0y = sy - cy;\n  let angle0 = Math.atan2(cx2p0x, cy2p0y), angle1 = Math.atan2(ex - cx, ey - cy);\n  clockwise && angle0 < angle1 ? angle0 += Math.PI * 2 : !clockwise && angle0 > angle1 && (angle1 += Math.PI * 2);\n  let startAngle = angle0;\n  const angleDiff = angle1 - angle0, absAngleDiff = Math.abs(angleDiff), radius = Math.sqrt(cx2p0x * cx2p0x + cy2p0y * cy2p0y), segCount = (15 * absAngleDiff * Math.sqrt(radius) / Math.PI >> 0) + 1, angleInc = angleDiff / segCount;\n  if (startAngle += angleInc, clockwise) {\n    verts.push(\n      cx,\n      cy,\n      sx,\n      sy\n    );\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n      verts.push(\n        cx,\n        cy,\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n    verts.push(\n      cx,\n      cy,\n      ex,\n      ey\n    );\n  } else {\n    verts.push(\n      sx,\n      sy,\n      cx,\n      cy\n    );\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius,\n        cx,\n        cy\n      );\n    verts.push(\n      ex,\n      ey,\n      cx,\n      cy\n    );\n  }\n  return segCount * 2;\n}\nfunction buildNonNativeLine(graphicsData, graphicsGeometry) {\n  const shape = graphicsData.shape;\n  let points = graphicsData.points || shape.points.slice();\n  const eps = graphicsGeometry.closePointEps;\n  if (points.length === 0)\n    return;\n  const style = graphicsData.lineStyle, firstPoint = new core.Point(points[0], points[1]), lastPoint = new core.Point(points[points.length - 2], points[points.length - 1]), closedShape = shape.type !== core.SHAPES.POLY || shape.closeStroke, closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps && Math.abs(firstPoint.y - lastPoint.y) < eps;\n  if (closedShape) {\n    points = points.slice(), closedPath && (points.pop(), points.pop(), lastPoint.set(points[points.length - 2], points[points.length - 1]));\n    const midPointX = (firstPoint.x + lastPoint.x) * 0.5, midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY), points.push(midPointX, midPointY);\n  }\n  const verts = graphicsGeometry.points, length = points.length / 2;\n  let indexCount = points.length;\n  const indexStart = verts.length / 2, width = style.width / 2, widthSquared = width * width, miterLimitSquared = style.miterLimit * style.miterLimit;\n  let x0 = points[0], y0 = points[1], x1 = points[2], y1 = points[3], x2 = 0, y2 = 0, perpx = -(y0 - y1), perpy = x0 - x1, perp1x = 0, perp1y = 0, dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist, perpy /= dist, perpx *= width, perpy *= width;\n  const ratio = style.alignment, innerWeight = (1 - ratio) * 2, outerWeight = ratio * 2;\n  closedShape || (style.cap === _const.LINE_CAP.ROUND ? indexCount += round(\n    x0 - perpx * (innerWeight - outerWeight) * 0.5,\n    y0 - perpy * (innerWeight - outerWeight) * 0.5,\n    x0 - perpx * innerWeight,\n    y0 - perpy * innerWeight,\n    x0 + perpx * outerWeight,\n    y0 + perpy * outerWeight,\n    verts,\n    !0\n  ) + 2 : style.cap === _const.LINE_CAP.SQUARE && (indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, !0, verts))), verts.push(\n    x0 - perpx * innerWeight,\n    y0 - perpy * innerWeight,\n    x0 + perpx * outerWeight,\n    y0 + perpy * outerWeight\n  );\n  for (let i = 1; i < length - 1; ++i) {\n    x0 = points[(i - 1) * 2], y0 = points[(i - 1) * 2 + 1], x1 = points[i * 2], y1 = points[i * 2 + 1], x2 = points[(i + 1) * 2], y2 = points[(i + 1) * 2 + 1], perpx = -(y0 - y1), perpy = x0 - x1, dist = Math.sqrt(perpx * perpx + perpy * perpy), perpx /= dist, perpy /= dist, perpx *= width, perpy *= width, perp1x = -(y1 - y2), perp1y = x1 - x2, dist = Math.sqrt(perp1x * perp1x + perp1y * perp1y), perp1x /= dist, perp1y /= dist, perp1x *= width, perp1y *= width;\n    const dx0 = x1 - x0, dy0 = y0 - y1, dx1 = x1 - x2, dy1 = y2 - y1, dot = dx0 * dx1 + dy0 * dy1, cross = dy0 * dx1 - dy1 * dx0, clockwise = cross < 0;\n    if (Math.abs(cross) < 1e-3 * Math.abs(dot)) {\n      verts.push(\n        x1 - perpx * innerWeight,\n        y1 - perpy * innerWeight,\n        x1 + perpx * outerWeight,\n        y1 + perpy * outerWeight\n      ), dot >= 0 && (style.join === _const.LINE_JOIN.ROUND ? indexCount += round(\n        x1,\n        y1,\n        x1 - perpx * innerWeight,\n        y1 - perpy * innerWeight,\n        x1 - perp1x * innerWeight,\n        y1 - perp1y * innerWeight,\n        verts,\n        !1\n      ) + 4 : indexCount += 2, verts.push(\n        x1 - perp1x * outerWeight,\n        y1 - perp1y * outerWeight,\n        x1 + perp1x * innerWeight,\n        y1 + perp1y * innerWeight\n      ));\n      continue;\n    }\n    const c1 = (-perpx + x0) * (-perpy + y1) - (-perpx + x1) * (-perpy + y0), c2 = (-perp1x + x2) * (-perp1y + y1) - (-perp1x + x1) * (-perp1y + y2), px = (dx0 * c2 - dx1 * c1) / cross, py = (dy1 * c1 - dy0 * c2) / cross, pdist = (px - x1) * (px - x1) + (py - y1) * (py - y1), imx = x1 + (px - x1) * innerWeight, imy = y1 + (py - y1) * innerWeight, omx = x1 - (px - x1) * outerWeight, omy = y1 - (py - y1) * outerWeight, smallerInsideSegmentSq = Math.min(dx0 * dx0 + dy0 * dy0, dx1 * dx1 + dy1 * dy1), insideWeight = clockwise ? innerWeight : outerWeight, smallerInsideDiagonalSq = smallerInsideSegmentSq + insideWeight * insideWeight * widthSquared, insideMiterOk = pdist <= smallerInsideDiagonalSq;\n    let join = style.join;\n    if (join === _const.LINE_JOIN.MITER && pdist / widthSquared > miterLimitSquared && (join = _const.LINE_JOIN.BEVEL), insideMiterOk)\n      switch (join) {\n        case _const.LINE_JOIN.MITER: {\n          verts.push(\n            imx,\n            imy,\n            omx,\n            omy\n          );\n          break;\n        }\n        case _const.LINE_JOIN.BEVEL: {\n          clockwise ? verts.push(\n            imx,\n            imy,\n            // inner miter point\n            x1 + perpx * outerWeight,\n            y1 + perpy * outerWeight,\n            // first segment's outer vertex\n            imx,\n            imy,\n            // inner miter point\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight\n          ) : verts.push(\n            x1 - perpx * innerWeight,\n            y1 - perpy * innerWeight,\n            // first segment's inner vertex\n            omx,\n            omy,\n            // outer miter point\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            // second segment's outer vertex\n            omx,\n            omy\n          ), indexCount += 2;\n          break;\n        }\n        case _const.LINE_JOIN.ROUND: {\n          clockwise ? (verts.push(\n            imx,\n            imy,\n            x1 + perpx * outerWeight,\n            y1 + perpy * outerWeight\n          ), indexCount += round(\n            x1,\n            y1,\n            x1 + perpx * outerWeight,\n            y1 + perpy * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            !0\n          ) + 4, verts.push(\n            imx,\n            imy,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight\n          )) : (verts.push(\n            x1 - perpx * innerWeight,\n            y1 - perpy * innerWeight,\n            omx,\n            omy\n          ), indexCount += round(\n            x1,\n            y1,\n            x1 - perpx * innerWeight,\n            y1 - perpy * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            !1\n          ) + 4, verts.push(\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            omx,\n            omy\n          ));\n          break;\n        }\n      }\n    else {\n      switch (verts.push(\n        x1 - perpx * innerWeight,\n        y1 - perpy * innerWeight,\n        // first segment's inner vertex\n        x1 + perpx * outerWeight,\n        y1 + perpy * outerWeight\n      ), join) {\n        case _const.LINE_JOIN.MITER: {\n          clockwise ? verts.push(\n            omx,\n            omy,\n            // inner miter point\n            omx,\n            omy\n          ) : verts.push(\n            imx,\n            imy,\n            // outer miter point\n            imx,\n            imy\n          ), indexCount += 2;\n          break;\n        }\n        case _const.LINE_JOIN.ROUND: {\n          clockwise ? indexCount += round(\n            x1,\n            y1,\n            x1 + perpx * outerWeight,\n            y1 + perpy * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            !0\n          ) + 2 : indexCount += round(\n            x1,\n            y1,\n            x1 - perpx * innerWeight,\n            y1 - perpy * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            !1\n          ) + 2;\n          break;\n        }\n      }\n      verts.push(\n        x1 - perp1x * innerWeight,\n        y1 - perp1y * innerWeight,\n        // second segment's inner vertex\n        x1 + perp1x * outerWeight,\n        y1 + perp1y * outerWeight\n      ), indexCount += 2;\n    }\n  }\n  x0 = points[(length - 2) * 2], y0 = points[(length - 2) * 2 + 1], x1 = points[(length - 1) * 2], y1 = points[(length - 1) * 2 + 1], perpx = -(y0 - y1), perpy = x0 - x1, dist = Math.sqrt(perpx * perpx + perpy * perpy), perpx /= dist, perpy /= dist, perpx *= width, perpy *= width, verts.push(\n    x1 - perpx * innerWeight,\n    y1 - perpy * innerWeight,\n    x1 + perpx * outerWeight,\n    y1 + perpy * outerWeight\n  ), closedShape || (style.cap === _const.LINE_CAP.ROUND ? indexCount += round(\n    x1 - perpx * (innerWeight - outerWeight) * 0.5,\n    y1 - perpy * (innerWeight - outerWeight) * 0.5,\n    x1 - perpx * innerWeight,\n    y1 - perpy * innerWeight,\n    x1 + perpx * outerWeight,\n    y1 + perpy * outerWeight,\n    verts,\n    !1\n  ) + 2 : style.cap === _const.LINE_CAP.SQUARE && (indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, !1, verts)));\n  const indices = graphicsGeometry.indices, eps2 = _const.curves.epsilon * _const.curves.epsilon;\n  for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    x0 = verts[i * 2], y0 = verts[i * 2 + 1], x1 = verts[(i + 1) * 2], y1 = verts[(i + 1) * 2 + 1], x2 = verts[(i + 2) * 2], y2 = verts[(i + 2) * 2 + 1], !(Math.abs(x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) < eps2) && indices.push(i, i + 1, i + 2);\n}\nfunction buildNativeLine(graphicsData, graphicsGeometry) {\n  let i = 0;\n  const shape = graphicsData.shape, points = graphicsData.points || shape.points, closedShape = shape.type !== core.SHAPES.POLY || shape.closeStroke;\n  if (points.length === 0)\n    return;\n  const verts = graphicsGeometry.points, indices = graphicsGeometry.indices, length = points.length / 2, startIndex = verts.length / 2;\n  let currentIndex = startIndex;\n  for (verts.push(points[0], points[1]), i = 1; i < length; i++)\n    verts.push(points[i * 2], points[i * 2 + 1]), indices.push(currentIndex, currentIndex + 1), currentIndex++;\n  closedShape && indices.push(currentIndex, startIndex);\n}\nfunction buildLine(graphicsData, graphicsGeometry) {\n  graphicsData.lineStyle.native ? buildNativeLine(graphicsData, graphicsGeometry) : buildNonNativeLine(graphicsData, graphicsGeometry);\n}\nexports.buildLine = buildLine;\n//# sourceMappingURL=buildLine.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","square","x","y","nx","ny","innerWeight","outerWeight","clockwise","verts","exx","eyy","push","round","cx","cy","sx","sy","ex","ey","cx2p0x","cy2p0y","angle0","Math","atan2","angle1","PI","startAngle","angleDiff","radius","sqrt","segCount","abs","absAngleDiff","angleInc","i","angle","sin","cos","core","_const","buildLine","graphicsData","graphicsGeometry","lineStyle","native","shape","points","closedShape","type","SHAPES","POLY","closeStroke","length","indices","startIndex","currentIndex","slice","eps","closePointEps","style","firstPoint","Point","lastPoint","closedPath","pop","set","midPointX","midPointY","unshift","indexCount","indexStart","width","widthSquared","miterLimitSquared","miterLimit","x0","y0","x1","y1","perpx","perpy","dist","ratio","alignment","cap","LINE_CAP","ROUND","SQUARE","x2","y2","perp1x","perp1y","dx0","dy0","dx1","dy1","dot","cross","join","LINE_JOIN","c1","c2","px","py","pdist","imx","imy","omx","omy","insideWeight","insideMiterOk","min","smallerInsideSegmentSq","MITER","BEVEL","eps2","curves","epsilon"]
}
