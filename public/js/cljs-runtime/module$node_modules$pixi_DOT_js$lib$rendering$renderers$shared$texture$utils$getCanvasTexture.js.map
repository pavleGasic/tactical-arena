{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getCanvasTexture.js",
"lineCount":21,
"mappings":"AAAAA,cAAA,CAAA,6FAAA,GAAkH,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG1J,MAAIC,eAAeH,OAAA,CAAQ,6FAAR,CAAnB,EACII,UAAUJ,OAAA,CAAQ,gFAAR,CADd;AAGA,cAAA;AACA,QAAMK,cAA8B,IAAIC,GAAJ,EAApC;AAwBAJ,SAAQK,CAAAA,gBAAR,GAvBAA,QAAyB,CAACC,MAAD,EAASC,OAAT,CAAkB;AACzC,QAAI,CAACJ,WAAYK,CAAAA,GAAZ,CAAgBF,MAAhB,CAAL,CAA8B;AAC5B,YAAMG,UAAU,IAAIP,OAAQA,CAAAA,OAAZ,CAAoB,CAClCQ,OAAQ,IAAIT,YAAaA,CAAAA,YAAjB,CAA8B,CACpCU,SAAUL,MAD0B,EAEpC,GAAGC,OAFiC,CAA9B,CAD0B,CAApB,CAAhB;AAMMK,aAAAA,GAAY,EAAAA,IAAM;AAClBT,mBAAYU,CAAAA,GAAZ,CAAgBP,MAAhB,CAAJ,KAAgCG,OAAhC,IACEN,WAAYW,CAAAA,MAAZ,CAAmBR,MAAnB,CADF;AADsB,OAAlBM;AAKNH,aAAQM,CAAAA,IAAR,CAAa,SAAb,EAAwBH,OAAxB,CAAA;AACAH,aAAQC,CAAAA,MAAOK,CAAAA,IAAf,CAAoB,SAApB,EAA+BH,OAA/B,CAAA;AACAT,iBAAYa,CAAAA,GAAZ,CAAgBV,MAAhB,EAAwBG,OAAxB,CAAA;AAd4B;AAgB9B,WAAON,WAAYU,CAAAA,GAAZ,CAAgBP,MAAhB,CAAP;AAjByC,GAuB3C;AACAN,SAAQiB,CAAAA,sBAAR,GALAA,QAA+B,CAACX,MAAD,CAAS;AACtC,WAAOH,WAAYK,CAAAA,GAAZ,CAAgBF,MAAhB,CAAP;AADsC,GAKxC;AAhC0J,CAA1J;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$utils$getCanvasTexture\"] = function(global,require,module,exports) {\n'use strict';\n\nvar CanvasSource = require('../sources/CanvasSource.js');\nvar Texture = require('../Texture.js');\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture.Texture({\n      source: new CanvasSource.CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexports.getCanvasTexture = getCanvasTexture;\nexports.hasCachedCanvasTexture = hasCachedCanvasTexture;\n//# sourceMappingURL=getCanvasTexture.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","CanvasSource","Texture","canvasCache","Map","getCanvasTexture","canvas","options","has","texture","source","resource","onDestroy","get","delete","once","set","hasCachedCanvasTexture"]
}
