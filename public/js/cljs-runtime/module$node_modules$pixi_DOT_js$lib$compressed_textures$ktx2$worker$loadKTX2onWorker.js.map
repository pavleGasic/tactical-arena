{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx2$worker$loadKTX2onWorker.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,CAAA,oFAAA,GAAyG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AASjJC,UAASA,cAAa,CAACC,iBAAD,CAAoB;AACnCC,aAAL,KACEA,SAQA,GARqCC,CAAzB,IAAIC,UAAWC,CAAAA,OAAf,EAAyBF,EAAAA,MAQrC,EAPAD,SAAUI,CAAAA,SAOV,GAPuBC,YAADC,IAAkB;AACtC,YAAM,CAAEC,OAAF,EAAWC,GAAX,EAAgBC,cAAhB,CAAA,GAAmCJ,YAAaK,CAAAA,IAAtD;AACKH,aAAL,IACEI,OAAQC,CAAAA,IAAR,CAAa,4BAAb,EAA2CJ,GAA3C,CADF;AAGAK,aAAA,CAAQL,GAAR,CAAA,CAAaC,cAAb,CAAA;AALsC,KAOxC,EAAAT,SAAUc,CAAAA,WAAV,CAAsB,CACpBC,KAAM,MADc,EAEpBC,MAAOC,oBAAqBC,CAAAA,iBAAkBF,CAAAA,KAF1B,EAGpBG,QAASF,oBAAqBC,CAAAA,iBAAkBC,CAAAA,OAH5B,EAIpBpB,iBAJoB,CAAtB,CATF;AAgBA,WAAOC,SAAP;AAjBwC;AAN1C,MAAIE,aAAaP,OAAA,CAAQ,yDAAR,CAAjB,EACIsB,uBAAuBtB,OAAA,CAAQ,yFAAR,CAD3B;AAGA,cAAA;AACA,MAAIK,SAAJ;AACA,QAAMa,UAAU,EAAhB;AA4BAhB,SAAQuB,CAAAA,gBAAR,GARAA,QAAyB,CAACZ,GAAD,EAAMT,iBAAN,CAAyB;AAChD,UAAMsB,aAAavB,aAAA,CAAcC,iBAAd,CAAnB;AACA,WAAO,IAAIuB,OAAJ,CAAaC,OAAD,IAAa;AAC9BV,aAAA,CAAQL,GAAR,CAAA,GAAee,OAAf;AACAF,gBAAWP,CAAAA,WAAX,CAAuB,CAAEC,KAAM,MAAR,EAAgBP,GAAhB,CAAvB,CAAA;AAF8B,KAAzB,CAAP;AAFgD,GAQlD;AApCiJ,CAAjJ;;",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/ktx2/worker/loadKTX2onWorker.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx2$worker$loadKTX2onWorker\"] = function(global,require,module,exports) {\n'use strict';\n\nvar ktx_worker = require('../../../_virtual/ktx.worker.js');\nvar setKTXTranscoderPath = require('../utils/setKTXTranscoderPath.js');\n\n\"use strict\";\nlet ktxWorker;\nconst urlHash = {};\nfunction getKTX2Worker(supportedTextures) {\n  if (!ktxWorker) {\n    ktxWorker = new ktx_worker.default().worker;\n    ktxWorker.onmessage = (messageEvent) => {\n      const { success, url, textureOptions } = messageEvent.data;\n      if (!success) {\n        console.warn(\"Failed to load KTX texture\", url);\n      }\n      urlHash[url](textureOptions);\n    };\n    ktxWorker.postMessage({\n      type: \"init\",\n      jsUrl: setKTXTranscoderPath.ktxTranscoderUrls.jsUrl,\n      wasmUrl: setKTXTranscoderPath.ktxTranscoderUrls.wasmUrl,\n      supportedTextures\n    });\n  }\n  return ktxWorker;\n}\nfunction loadKTX2onWorker(url, supportedTextures) {\n  const ktxWorker2 = getKTX2Worker(supportedTextures);\n  return new Promise((resolve) => {\n    urlHash[url] = resolve;\n    ktxWorker2.postMessage({ type: \"load\", url });\n  });\n}\n\nexports.loadKTX2onWorker = loadKTX2onWorker;\n//# sourceMappingURL=loadKTX2onWorker.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getKTX2Worker","supportedTextures","ktxWorker","worker","ktx_worker","default","onmessage","messageEvent","ktxWorker.onmessage","success","url","textureOptions","data","console","warn","urlHash","postMessage","type","jsUrl","setKTXTranscoderPath","ktxTranscoderUrls","wasmUrl","loadKTX2onWorker","ktxWorker2","Promise","resolve"]
}
