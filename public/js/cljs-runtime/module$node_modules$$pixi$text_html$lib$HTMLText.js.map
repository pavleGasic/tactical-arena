{
"version":3,
"file":"module$node_modules$$pixi$text_html$lib$HTMLText.js",
"lineCount":176,
"mappings":"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",
"sources":["node_modules/@pixi/text-html/lib/HTMLText.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text_html$lib$HTMLText\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), sprite = require(\"@pixi/sprite\"), text = require(\"@pixi/text\"), HTMLTextStyle = require(\"./HTMLTextStyle.js\");\nconst _HTMLText = class _HTMLText2 extends sprite.Sprite {\n  /**\n   * @param {string} [text] - Text contents\n   * @param {PIXI.HTMLTextStyle|PIXI.TextStyle|PIXI.ITextStyle} [style] - Style setting to use.\n   *        Strongly recommend using an HTMLTextStyle object. Providing a PIXI.TextStyle\n   *        will convert the TextStyle to an HTMLTextStyle and will no longer be linked.\n   */\n  constructor(text2 = \"\", style = {}) {\n    super(core.Texture.EMPTY), this._text = null, this._style = null, this._autoResolution = !0, this.localStyleID = -1, this.dirty = !1, this._updateID = 0, this.ownsStyle = !1;\n    const image = new Image(), texture = core.Texture.from(image, {\n      scaleMode: core.settings.SCALE_MODE,\n      resourceOptions: {\n        autoLoad: !1\n      }\n    });\n    texture.orig = new core.Rectangle(), texture.trim = new core.Rectangle(), this.texture = texture;\n    const nssvg = \"http://www.w3.org/2000/svg\", nsxhtml = \"http://www.w3.org/1999/xhtml\", svgRoot = document.createElementNS(nssvg, \"svg\"), foreignObject = document.createElementNS(nssvg, \"foreignObject\"), domElement = document.createElementNS(nsxhtml, \"div\"), styleElement = document.createElementNS(nsxhtml, \"style\");\n    foreignObject.setAttribute(\"width\", \"10000\"), foreignObject.setAttribute(\"height\", \"10000\"), foreignObject.style.overflow = \"hidden\", svgRoot.appendChild(foreignObject), this.maxWidth = _HTMLText2.defaultMaxWidth, this.maxHeight = _HTMLText2.defaultMaxHeight, this._domElement = domElement, this._styleElement = styleElement, this._svgRoot = svgRoot, this._foreignObject = foreignObject, this._foreignObject.appendChild(styleElement), this._foreignObject.appendChild(domElement), this._image = image, this._loadImage = new Image(), this._autoResolution = _HTMLText2.defaultAutoResolution, this._resolution = _HTMLText2.defaultResolution ?? core.settings.RESOLUTION, this.text = text2, this.style = style;\n  }\n  /**\n   * Calculate the size of the output text without actually drawing it.\n   * This includes the `padding` in the `style` object.\n   * This can be used as a fast-pass to do things like text-fitting.\n   * @param {object} [overrides] - Overrides for the text, style, and resolution.\n   * @param {string} [overrides.text] - The text to measure, if not specified, the current text is used.\n   * @param {PIXI.HTMLTextStyle} [overrides.style] - The style to measure, if not specified, the current style is used.\n   * @param {number} [overrides.resolution] - The resolution to measure, if not specified, the current resolution is used.\n   * @returns {PIXI.ISize} Width and height of the measured text.\n   */\n  measureText(overrides) {\n    const { text: text2, style, resolution } = Object.assign({\n      text: this._text,\n      style: this._style,\n      resolution: this._resolution\n    }, overrides);\n    Object.assign(this._domElement, {\n      innerHTML: text2,\n      style: style.toCSS(resolution)\n    }), this._styleElement.textContent = style.toGlobalCSS(), document.body.appendChild(this._svgRoot);\n    const contentBounds = this._domElement.getBoundingClientRect();\n    this._svgRoot.remove();\n    const { width, height } = contentBounds;\n    (width > this.maxWidth || height > this.maxHeight) && console.warn(\"[HTMLText] Large expanse of text, increase HTMLText.maxWidth or HTMLText.maxHeight property.\");\n    const contentWidth = Math.min(this.maxWidth, Math.ceil(width)), contentHeight = Math.min(this.maxHeight, Math.ceil(height));\n    return this._svgRoot.setAttribute(\"width\", contentWidth.toString()), this._svgRoot.setAttribute(\"height\", contentHeight.toString()), text2 !== this._text && (this._domElement.innerHTML = this._text), style !== this._style && (Object.assign(this._domElement, { style: this._style?.toCSS(resolution) }), this._styleElement.textContent = this._style?.toGlobalCSS()), {\n      width: contentWidth + style.padding * 2,\n      height: contentHeight + style.padding * 2\n    };\n  }\n  /**\n   * Manually refresh the text.\n   * @public\n   * @param {boolean} respectDirty - Whether to abort updating the\n   *        text if the Text isn't dirty and the function is called.\n   */\n  async updateText(respectDirty = !0) {\n    const { style, _image: image, _loadImage: loadImage } = this;\n    if (this.localStyleID !== style.styleID && (this.dirty = !0, this.localStyleID = style.styleID), !this.dirty && respectDirty)\n      return;\n    const { width, height } = this.measureText();\n    image.width = loadImage.width = Math.ceil(Math.max(1, width)), image.height = loadImage.height = Math.ceil(Math.max(1, height)), this._updateID++;\n    const updateID = this._updateID;\n    await new Promise((resolve) => {\n      loadImage.onload = async () => {\n        if (updateID < this._updateID) {\n          resolve();\n          return;\n        }\n        await style.onBeforeDraw(), image.src = loadImage.src, loadImage.onload = null, loadImage.src = \"\", this.updateTexture(), resolve();\n      };\n      const svgURL = new XMLSerializer().serializeToString(this._svgRoot);\n      loadImage.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(svgURL)}`;\n    });\n  }\n  /** The raw image element that is rendered under-the-hood. */\n  get source() {\n    return this._image;\n  }\n  /**\n   * Update the texture resource.\n   * @private\n   */\n  updateTexture() {\n    const { style, texture, _image: image, resolution } = this, { padding } = style, { baseTexture } = texture;\n    texture.trim.width = texture._frame.width = image.width / resolution, texture.trim.height = texture._frame.height = image.height / resolution, texture.trim.x = -padding, texture.trim.y = -padding, texture.orig.width = texture._frame.width - padding * 2, texture.orig.height = texture._frame.height - padding * 2, this._onTextureUpdate(), baseTexture.setRealSize(image.width, image.height, resolution), this.dirty = !1;\n  }\n  /**\n   * Renders the object using the WebGL renderer\n   * @param {PIXI.Renderer} renderer - The renderer\n   * @private\n   */\n  _render(renderer) {\n    this._autoResolution && this._resolution !== renderer.resolution && (this._resolution = renderer.resolution, this.dirty = !0), this.updateText(!0), super._render(renderer);\n  }\n  /**\n   * Renders the object using the Canvas Renderer.\n   * @private\n   * @param {PIXI.CanvasRenderer} renderer - The renderer\n   */\n  _renderCanvas(renderer) {\n    this._autoResolution && this._resolution !== renderer.resolution && (this._resolution = renderer.resolution, this.dirty = !0), this.updateText(!0), super._renderCanvas(renderer);\n  }\n  /**\n   * Get the local bounds.\n   * @param {PIXI.Rectangle} rect - Input rectangle.\n   * @returns {PIXI.Rectangle} Local bounds\n   */\n  getLocalBounds(rect) {\n    return this.updateText(!0), super.getLocalBounds(rect);\n  }\n  _calculateBounds() {\n    this.updateText(!0), this.calculateVertices(), this._bounds.addQuad(this.vertexData);\n  }\n  /**\n   * Handle dirty style changes\n   * @private\n   */\n  _onStyleChange() {\n    this.dirty = !0;\n  }\n  /**\n   * Destroy this Text object. Don't use after calling.\n   * @param {boolean|object} options - Same as Sprite destroy options.\n   */\n  destroy(options) {\n    typeof options == \"boolean\" && (options = { children: options }), options = Object.assign({}, _HTMLText2.defaultDestroyOptions, options), super.destroy(options);\n    const forceClear = null;\n    this.ownsStyle && this._style?.cleanFonts(), this._style = forceClear, this._svgRoot?.remove(), this._svgRoot = forceClear, this._domElement?.remove(), this._domElement = forceClear, this._foreignObject?.remove(), this._foreignObject = forceClear, this._styleElement?.remove(), this._styleElement = forceClear, this._loadImage.src = \"\", this._loadImage.onload = null, this._loadImage = forceClear, this._image.src = \"\", this._image = forceClear;\n  }\n  /**\n   * Get the width in pixels.\n   * @member {number}\n   */\n  get width() {\n    return this.updateText(!0), Math.abs(this.scale.x) * this._image.width / this.resolution;\n  }\n  set width(value) {\n    this.updateText(!0);\n    const s = core.utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._image.width / this.resolution, this._width = value;\n  }\n  /**\n   * Get the height in pixels.\n   * @member {number}\n   */\n  get height() {\n    return this.updateText(!0), Math.abs(this.scale.y) * this._image.height / this.resolution;\n  }\n  set height(value) {\n    this.updateText(!0);\n    const s = core.utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._image.height / this.resolution, this._height = value;\n  }\n  /** The base style to render with text. */\n  get style() {\n    return this._style;\n  }\n  set style(style) {\n    this._style !== style && (style = style || {}, style instanceof HTMLTextStyle.HTMLTextStyle ? (this.ownsStyle = !1, this._style = style) : style instanceof text.TextStyle ? (console.warn(\"[HTMLText] Cloning TextStyle, if this is not what you want, use HTMLTextStyle\"), this.ownsStyle = !0, this._style = HTMLTextStyle.HTMLTextStyle.from(style)) : (this.ownsStyle = !0, this._style = new HTMLTextStyle.HTMLTextStyle(style)), this.localStyleID = -1, this.dirty = !0);\n  }\n  /**\n   * Contents of text. This can be HTML text and include tags.\n   * @example\n   * const text = new HTMLText('This is a <em>styled</em> text!');\n   * @member {string}\n   */\n  get text() {\n    return this._text;\n  }\n  set text(text2) {\n    text2 = String(text2 === \"\" || text2 === null || text2 === void 0 ? \" \" : text2), text2 = this.sanitiseText(text2), this._text !== text2 && (this._text = text2, this.dirty = !0);\n  }\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n   * @member {number}\n   * @default 1\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._autoResolution = !1, this._resolution !== value && (this._resolution = value, this.dirty = !0);\n  }\n  /**\n   * Sanitise text - replace `<br>` with `<br/>`, `&nbsp;` with `&#160;`\n   * @param text\n   * @see https://www.sitepoint.com/community/t/xhtml-1-0-transitional-xml-parsing-error-entity-nbsp-not-defined/3392/3\n   */\n  sanitiseText(text2) {\n    return text2.replace(/<br>/gi, \"<br/>\").replace(/<hr>/gi, \"<hr/>\").replace(/&nbsp;/gi, \"&#160;\");\n  }\n};\n_HTMLText.defaultDestroyOptions = {\n  texture: !0,\n  children: !1,\n  baseTexture: !0\n}, /** Default maxWidth, set at construction */\n_HTMLText.defaultMaxWidth = 2024, /** Default maxHeight, set at construction */\n_HTMLText.defaultMaxHeight = 2024, /** Default autoResolution for all HTMLText objects */\n_HTMLText.defaultAutoResolution = !0;\nlet HTMLText = _HTMLText;\nexports.HTMLText = HTMLText;\n//# sourceMappingURL=HTMLText.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","sprite","text","HTMLTextStyle","Sprite","constructor","text2","style","Texture","EMPTY","_style","_text","_autoResolution","localStyleID","dirty","_updateID","ownsStyle","image","Image","texture","from","scaleMode","settings","SCALE_MODE","resourceOptions","autoLoad","orig","Rectangle","trim","svgRoot","document","createElementNS","nssvg","foreignObject","domElement","nsxhtml","styleElement","setAttribute","overflow","appendChild","maxWidth","_HTMLText2","defaultMaxWidth","maxHeight","defaultMaxHeight","_domElement","_styleElement","_svgRoot","_foreignObject","_image","_loadImage","defaultAutoResolution","_resolution","defaultResolution","RESOLUTION","measureText","overrides","resolution","Object","assign","innerHTML","toCSS","textContent","toGlobalCSS","body","contentBounds","getBoundingClientRect","remove","width","height","console","warn","contentWidth","Math","min","ceil","contentHeight","toString","padding","updateText","respectDirty","loadImage","styleID","max","updateID","Promise","resolve","onload","loadImage.onload","onBeforeDraw","src","updateTexture","svgURL","serializeToString","XMLSerializer","encodeURIComponent","baseTexture","_frame","x","y","_onTextureUpdate","setRealSize","_render","renderer","_renderCanvas","getLocalBounds","rect","_calculateBounds","calculateVertices","_bounds","addQuad","vertexData","_onStyleChange","destroy","options","children","defaultDestroyOptions","cleanFonts","forceClear","abs","scale","value","s","utils","sign","_width","_height","TextStyle","String","sanitiseText","replace","_HTMLText","HTMLText"]
}
