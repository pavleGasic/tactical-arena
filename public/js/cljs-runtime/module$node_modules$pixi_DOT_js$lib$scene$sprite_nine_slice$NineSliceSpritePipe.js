shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSpritePipe = function(global, require, module, exports) {
  global = require("module$node_modules$pixi_DOT_js$lib$extensions$Extensions");
  var PoolGroup = require("module$node_modules$pixi_DOT_js$lib$utils$pool$PoolGroup"), BatchableMesh = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$BatchableMesh"), NineSliceGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceGeometry");
  "use strict";
  class NineSliceSpritePipe {
    constructor(renderer) {
      this._gpuSpriteHash = Object.create(null);
      this._destroyRenderableBound = this.destroyRenderable.bind(this);
      this._renderer = renderer;
      this._renderer.renderableGC.addManagedHash(this, "_gpuSpriteHash");
    }
    addRenderable(sprite, instructionSet) {
      const gpuSprite = this._getGpuSprite(sprite);
      sprite.didViewUpdate && this._updateBatchableSprite(sprite, gpuSprite);
      this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);
    }
    updateRenderable(sprite) {
      const gpuSprite = this._gpuSpriteHash[sprite.uid];
      sprite.didViewUpdate && this._updateBatchableSprite(sprite, gpuSprite);
      gpuSprite._batcher.updateElement(gpuSprite);
    }
    validateRenderable(sprite) {
      const gpuSprite = this._getGpuSprite(sprite);
      return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, sprite._texture);
    }
    destroyRenderable(sprite) {
      const batchableMesh = this._gpuSpriteHash[sprite.uid];
      PoolGroup.BigPool.return(batchableMesh.geometry);
      PoolGroup.BigPool.return(batchableMesh);
      this._gpuSpriteHash[sprite.uid] = null;
      sprite.off("destroyed", this._destroyRenderableBound);
    }
    _updateBatchableSprite(sprite, batchableSprite) {
      batchableSprite.geometry.update(sprite);
      batchableSprite.setTexture(sprite._texture);
    }
    _getGpuSprite(sprite) {
      return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);
    }
    _initGPUSprite(sprite) {
      const batchableMesh = PoolGroup.BigPool.get(BatchableMesh.BatchableMesh);
      batchableMesh.geometry = PoolGroup.BigPool.get(NineSliceGeometry.NineSliceGeometry);
      batchableMesh.renderable = sprite;
      batchableMesh.transform = sprite.groupTransform;
      batchableMesh.texture = sprite._texture;
      batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;
      this._gpuSpriteHash[sprite.uid] = batchableMesh;
      sprite.didViewUpdate || this._updateBatchableSprite(sprite, batchableMesh);
      sprite.on("destroyed", this._destroyRenderableBound);
      return batchableMesh;
    }
    destroy() {
      for (const i in this._gpuSpriteHash) {
        this._gpuSpriteHash[i].geometry.destroy();
      }
      this._renderer = this._gpuSpriteHash = null;
    }
  }
  NineSliceSpritePipe.extension = {type:[global.ExtensionType.WebGLPipes, global.ExtensionType.WebGPUPipes, global.ExtensionType.CanvasPipes], name:"nineSliceSprite"};
  exports.NineSliceSpritePipe = NineSliceSpritePipe;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$sprite_nine_slice$NineSliceSpritePipe.js.map
