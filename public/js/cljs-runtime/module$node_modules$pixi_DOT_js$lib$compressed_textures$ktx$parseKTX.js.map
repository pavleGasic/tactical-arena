{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx$parseKTX.js",
"lineCount":59,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/compressed-textures/ktx/parseKTX.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$compressed_textures$ktx$parseKTX\"] = function(global,require,module,exports) {\n'use strict';\n\nvar _const = require('../ktx2/const.js');\n\n\"use strict\";\nfunction parseKTX(arrayBuffer, supportedFormats) {\n  const dataView = new DataView(arrayBuffer);\n  if (!validate(dataView)) {\n    throw new Error(\"Invalid KTX identifier in header\");\n  }\n  const {\n    littleEndian,\n    glType,\n    glFormat,\n    glInternalFormat,\n    pixelWidth,\n    pixelHeight,\n    numberOfMipmapLevels,\n    offset\n  } = parseKTXHeader(dataView);\n  const textureFormat = _const.KTX.INTERNAL_FORMAT_TO_TEXTURE_FORMATS[glInternalFormat];\n  if (!textureFormat) {\n    throw new Error(`Unknown texture format ${glInternalFormat}`);\n  }\n  if (!supportedFormats.includes(textureFormat)) {\n    throw new Error(`Unsupported texture format: ${textureFormat}, supportedFormats: ${supportedFormats}`);\n  }\n  const imagePixelByteSize = getImagePixelByteSize(glType, glFormat, glInternalFormat);\n  const imageBuffers = getImageBuffers(\n    dataView,\n    glType,\n    imagePixelByteSize,\n    pixelWidth,\n    pixelHeight,\n    offset,\n    numberOfMipmapLevels,\n    littleEndian\n  );\n  return {\n    format: textureFormat,\n    width: pixelWidth,\n    height: pixelHeight,\n    resource: imageBuffers,\n    alphaMode: \"no-premultiply-alpha\"\n  };\n}\nfunction getImageBuffers(dataView, glType, imagePixelByteSize, pixelWidth, pixelHeight, offset, numberOfMipmapLevels, littleEndian) {\n  const alignedWidth = pixelWidth + 3 & ~3;\n  const alignedHeight = pixelHeight + 3 & ~3;\n  let imagePixels = pixelWidth * pixelHeight;\n  if (glType === 0) {\n    imagePixels = alignedWidth * alignedHeight;\n  }\n  let mipByteSize = imagePixels * imagePixelByteSize;\n  let mipWidth = pixelWidth;\n  let mipHeight = pixelHeight;\n  let alignedMipWidth = alignedWidth;\n  let alignedMipHeight = alignedHeight;\n  let imageOffset = offset;\n  const imageBuffers = new Array(numberOfMipmapLevels);\n  for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n    const imageSize = dataView.getUint32(imageOffset, littleEndian);\n    let elementOffset = imageOffset + 4;\n    imageBuffers[mipmapLevel] = new Uint8Array(dataView.buffer, elementOffset, mipByteSize);\n    elementOffset += mipByteSize;\n    imageOffset += imageSize + 4;\n    imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - imageOffset % 4 : imageOffset;\n    mipWidth = mipWidth >> 1 || 1;\n    mipHeight = mipHeight >> 1 || 1;\n    alignedMipWidth = mipWidth + 4 - 1 & ~(4 - 1);\n    alignedMipHeight = mipHeight + 4 - 1 & ~(4 - 1);\n    mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n  }\n  return imageBuffers;\n}\nfunction getImagePixelByteSize(glType, glFormat, glInternalFormat) {\n  let imagePixelByteSize = _const.KTX.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n  if (glType !== 0) {\n    if (_const.KTX.TYPES_TO_BYTES_PER_COMPONENT[glType]) {\n      imagePixelByteSize = _const.KTX.TYPES_TO_BYTES_PER_COMPONENT[glType] * _const.KTX.FORMATS_TO_COMPONENTS[glFormat];\n    } else {\n      imagePixelByteSize = _const.KTX.TYPES_TO_BYTES_PER_PIXEL[glType];\n    }\n  }\n  if (imagePixelByteSize === void 0) {\n    throw new Error(\"Unable to resolve the pixel format stored in the *.ktx file!\");\n  }\n  return imagePixelByteSize;\n}\nfunction parseKTXHeader(dataView) {\n  const littleEndian = dataView.getUint32(_const.KTX.FIELDS.ENDIANNESS, true) === _const.KTX.ENDIANNESS;\n  const glType = dataView.getUint32(_const.KTX.FIELDS.GL_TYPE, littleEndian);\n  const glFormat = dataView.getUint32(_const.KTX.FIELDS.GL_FORMAT, littleEndian);\n  const glInternalFormat = dataView.getUint32(_const.KTX.FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n  const pixelWidth = dataView.getUint32(_const.KTX.FIELDS.PIXEL_WIDTH, littleEndian);\n  const pixelHeight = dataView.getUint32(_const.KTX.FIELDS.PIXEL_HEIGHT, littleEndian) || 1;\n  const pixelDepth = dataView.getUint32(_const.KTX.FIELDS.PIXEL_DEPTH, littleEndian) || 1;\n  const numberOfArrayElements = dataView.getUint32(_const.KTX.FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;\n  const numberOfFaces = dataView.getUint32(_const.KTX.FIELDS.NUMBER_OF_FACES, littleEndian);\n  const numberOfMipmapLevels = dataView.getUint32(_const.KTX.FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n  const bytesOfKeyValueData = dataView.getUint32(_const.KTX.FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n  if (pixelHeight === 0 || pixelDepth !== 1) {\n    throw new Error(\"Only 2D textures are supported\");\n  }\n  if (numberOfFaces !== 1) {\n    throw new Error(\"CubeTextures are not supported by KTXLoader yet!\");\n  }\n  if (numberOfArrayElements !== 1) {\n    throw new Error(\"WebGL does not support array textures\");\n  }\n  return {\n    littleEndian,\n    glType,\n    glFormat,\n    glInternalFormat,\n    pixelWidth,\n    pixelHeight,\n    numberOfMipmapLevels,\n    offset: _const.KTX.FILE_HEADER_SIZE + bytesOfKeyValueData\n  };\n}\nfunction validate(dataView) {\n  for (let i = 0; i < _const.KTX.FILE_IDENTIFIER.length; i++) {\n    if (dataView.getUint8(i) !== _const.KTX.FILE_IDENTIFIER[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexports.parseKTX = parseKTX;\n//# sourceMappingURL=parseKTX.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","parseKTX","arrayBuffer","supportedFormats","dataView","DataView","i","KTX","FILE_IDENTIFIER","length","getUint8","Error","littleEndian","getUint32","FIELDS","ENDIANNESS","glType","GL_TYPE","glFormat","GL_FORMAT","glInternalFormat","GL_INTERNAL_FORMAT","pixelWidth","PIXEL_WIDTH","pixelHeight","PIXEL_HEIGHT","pixelDepth","PIXEL_DEPTH","numberOfArrayElements","NUMBER_OF_ARRAY_ELEMENTS","numberOfFaces","NUMBER_OF_FACES","numberOfMipmapLevels","NUMBER_OF_MIPMAP_LEVELS","bytesOfKeyValueData","BYTES_OF_KEY_VALUE_DATA","offset","FILE_HEADER_SIZE","textureFormat","INTERNAL_FORMAT_TO_TEXTURE_FORMATS","includes","imagePixelByteSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL","TYPES_TO_BYTES_PER_COMPONENT","FORMATS_TO_COMPONENTS","TYPES_TO_BYTES_PER_PIXEL","imagePixels","mipByteSize","mipWidth","mipHeight","imageOffset","imageBuffers","Array","mipmapLevel","imageSize","Uint8Array","buffer","alignedMipWidth","alignedMipHeight","format","width","height","resource","alphaMode"]
}
