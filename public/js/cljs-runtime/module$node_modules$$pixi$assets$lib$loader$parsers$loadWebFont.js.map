{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$loader$parsers$loadWebFont.js",
"lineCount":45,
"mappings":"AAAAA,cAAA,CAAA,+DAAA,GAAoF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAqB5HC,UAASA,kBAAiB,CAACC,GAAD,CAAM;AAAA,QACxBC,MAAMC,IAAKC,CAAAA,KAAMC,CAAAA,IAAKC,CAAAA,OAAhB,CAAwBL,GAAxB,CADkB;AACYM,OAAAA,GAAaJ,IAAKC,CAAAA,KAAMC,CAAAA,IAAKG,CAAAA,QAAhB,CAAyBP,GAAzB,EAA8BC,GAA9B,CAAmCO,CAAAA,OAAnC,CAA2C,QAA3C,EAAqD,GAArD,CAA0DC,CAAAA,WAA1D,EAAwEC,CAAAA,KAAxE,CAA8E,GAA9E,CAAmFC,CAAAA,GAAnF,CAAwFC,IAAD,IAAUA,IAAKC,CAAAA,MAAL,CAAY,CAAZ,CAAeC,CAAAA,WAAf,EAAV,GAAyCF,IAAKG,CAAAA,KAAL,CAAW,CAAX,CAAhI,CAAbT;AACtCU,OAAAA,GAA4B,CAA5BA,GAAQV,GAAWW,CAAAA,MAAnBD;AACJ,SAAK,IAAME,KAAX,IAAoBZ,GAApB;AACE,UAAI,CAACY,KAAMC,CAAAA,KAAN,CAAYC,qBAAZ,CAAL,CAAyC;AACvCJ,WAAA,GAAQ,CAAA,CAAR;AACA;AAFuC;AAD3C;AAKIK,SAAAA,GAAiBf,GAAWgB,CAAAA,IAAX,CAAgB,GAAhB,CAAjBD;AACJ,WAAOL,GAAA,KAAUK,KAAV,GAA4B,IAAGA,KAAeb,CAAAA,OAAf,CAAuB,QAAvB,EAAiC,SAAjC,CAAH,GAA5B,GAA6Ea,KAApF;AAT8B;AAYhCE,UAASA,oBAAmB,CAACC,GAAD,CAAM;AAChC,WAAOC,uBAAwBC,CAAAA,IAAxB,CAA6BF,GAA7B,CAAA,GAAoCA,GAApC,GAA0CG,SAAA,CAAUH,GAAV,CAAjD;AADgC;AAjC0F,MAExHtB,OAAON,OAAA,CAAQ,0CAAR,CAFiH,EAE1FgC,eAAehC,OAAA,CAAQ,yDAAR,CAF2E,EAEnCiC,iBAAiBjC,OAAA,CAAQ,2DAAR,CAFkB;AAEwBkC,QAAAA,GAAelC,OAAA,CAAQ,kEAAR,CAAfkC;AAFxB,QAGtHC,eAAe,iDAAA,CAAA,KAAA,CAAA,GAAA,CAHuG,EAezHC,sBAAsB,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,QAA1B,CAfmG,EAe9DC,iBAAiB,CAC7E,UAD6E,EAE7E,UAF6E,EAG7E,WAH6E,EAI7E,YAJ6E,CAf6C,EAoBzHb,wBAAwB,6BApBiG,EAgCtHK,0BAA0B,6CAhC4F;AAoCtHS,QAAAA,GAAc,CAClBC,UAAW,CACTC,KAAMlC,IAAKmC,CAAAA,aAAcC,CAAAA,UADhB,EAETC,SAAUT,MAAaU,CAAAA,oBAAqBC,CAAAA,GAFnC,CADO,EAKlBC,KAAM,aALY,EAMlBhB,IAAI,CAAC1B,GAAD,CAAM;AACR,WAAO4B,YAAaA,CAAAA,YAAb,CAA0B5B,GAA1B,EAA+BiC,cAA/B,CAAP,IAAyDJ,cAAeA,CAAAA,cAAf,CAA8B7B,GAA9B,EAAmCgC,mBAAnC,CAAzD;AADQ,GANQ,EASZW,UAAI,CAAC3C,GAAD,EAAM4C,OAAN,CAAe;AACvB,UAAMC,QAAQ3C,IAAK4C,CAAAA,QAASC,CAAAA,OAAQC,CAAAA,cAAtB,EAAd;AACA,QAAIH,KAAJ,CAAW;AAAA,YACHI,YAAY,EADT,EACaP,OAAOE,OAAQM,CAAAA,IAAMC,EAAAA,MAArBT,IAA+B3C,iBAAA,CAAkBC,GAAlB,CAD5C,EACoEoD,UAAUR,OAAQM,CAAAA,IAAME,EAAAA,OAASC,EAAAA,MAAvB,CAA+BC,MAAD,IAAYvB,YAAawB,CAAAA,QAAb,CAAsBD,MAAtB,CAA1C,CAAVF,IAAsF,CAAC,QAAD,CAD1J;AACsKF,aAAAA,GAAON,OAAQM,CAAAA,IAAfA,IAAuB,EAAvBA;AAC/K,WAAK,IAAIM,IAAI,CAAb,EAAgBA,CAAhB,GAAoBJ,OAAQnC,CAAAA,MAA5B,EAAoCuC,CAAA,EAApC,CAAyC;AAAA,YACjCF,SAASF,OAAA,CAAQI,CAAR,CADwB;AACZC,cAAAA,GAAO,IAAIC,QAAJ,CAAahB,IAAb,EAAoB,OAAMnB,mBAAA,CAAoBvB,GAApB,CAAN,GAApB,EAAuD,CACvF,GAAGkD,OADoF,EAEvFI,MAFuF,CAAvD,CAAPG;AAI3B,cAAMA,MAAKd,CAAAA,IAAL,EAAN;AAAmBE,aAAMc,CAAAA,GAAN,CAAUF,MAAV,CAAA;AAAiBR,iBAAUW,CAAAA,IAAV,CAAeH,MAAf,CAAA;AALG;AAOzC,aAA4B,CAArB,KAAAR,SAAUhC,CAAAA,MAAV,GAAyBgC,SAAA,CAAU,CAAV,CAAzB,GAAwCA,SAA/C;AATS;AAWX,WAAOY,OAAQC,CAAAA,IAAR,CAAa,oEAAb,CAAA,EAAoF,IAA3F;AAbuB,GATP,EAwBlBC,MAAM,CAACN,IAAD,CAAO;AAC2BO,KAArCC,KAAMC,CAAAA,OAAN,CAAcT,IAAd,CAAA,GAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAAQO,EAAAA,OAAtC,CAA+CG,CAAD,IAAOjE,IAAK4C,CAAAA,QAASC,CAAAA,OAAQC,CAAAA,cAAtB,EAAuCoB,CAAAA,MAAvC,CAA8CD,CAA9C,CAArD,CAAA;AADW,GAxBK,CAAdjC;AA4BNhC,MAAKmE,CAAAA,UAAWV,CAAAA,GAAhB,CAAoBzB,MAApB,CAAA;AACApC,SAAQC,CAAAA,iBAAR,GAA4BA,iBAA5B;AACAD,SAAQoC,CAAAA,WAAR,GAAsBA,MAAtB;AAlE4H,CAA5H;;",
"sources":["node_modules/@pixi/assets/lib/loader/parsers/loadWebFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$loader$parsers$loadWebFont\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), checkDataUrl = require(\"../../utils/checkDataUrl.js\"), checkExtension = require(\"../../utils/checkExtension.js\"), LoaderParser = require(\"./LoaderParser.js\");\nconst validWeights = [\n  \"normal\",\n  \"bold\",\n  \"100\",\n  \"200\",\n  \"300\",\n  \"400\",\n  \"500\",\n  \"600\",\n  \"700\",\n  \"800\",\n  \"900\"\n], validFontExtensions = [\".ttf\", \".otf\", \".woff\", \".woff2\"], validFontMIMEs = [\n  \"font/ttf\",\n  \"font/otf\",\n  \"font/woff\",\n  \"font/woff2\"\n], CSS_IDENT_TOKEN_REGEX = /^(--|-?[A-Z_])[0-9A-Z_-]*$/i;\nfunction getFontFamilyName(url) {\n  const ext = core.utils.path.extname(url), nameTokens = core.utils.path.basename(url, ext).replace(/(-|_)/g, \" \").toLowerCase().split(\" \").map((word) => word.charAt(0).toUpperCase() + word.slice(1));\n  let valid = nameTokens.length > 0;\n  for (const token of nameTokens)\n    if (!token.match(CSS_IDENT_TOKEN_REGEX)) {\n      valid = !1;\n      break;\n    }\n  let fontFamilyName = nameTokens.join(\" \");\n  return valid || (fontFamilyName = `\"${fontFamilyName.replace(/[\\\\\"]/g, \"\\\\$&\")}\"`), fontFamilyName;\n}\nconst validURICharactersRegex = /^[0-9A-Za-z%:/?#\\[\\]@!\\$&'()\\*\\+,;=\\-._~]*$/;\nfunction encodeURIWhenNeeded(uri) {\n  return validURICharactersRegex.test(uri) ? uri : encodeURI(uri);\n}\nconst loadWebFont = {\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.Low\n  },\n  name: \"loadWebFont\",\n  test(url) {\n    return checkDataUrl.checkDataUrl(url, validFontMIMEs) || checkExtension.checkExtension(url, validFontExtensions);\n  },\n  async load(url, options) {\n    const fonts = core.settings.ADAPTER.getFontFaceSet();\n    if (fonts) {\n      const fontFaces = [], name = options.data?.family ?? getFontFamilyName(url), weights = options.data?.weights?.filter((weight) => validWeights.includes(weight)) ?? [\"normal\"], data = options.data ?? {};\n      for (let i = 0; i < weights.length; i++) {\n        const weight = weights[i], font = new FontFace(name, `url(${encodeURIWhenNeeded(url)})`, {\n          ...data,\n          weight\n        });\n        await font.load(), fonts.add(font), fontFaces.push(font);\n      }\n      return fontFaces.length === 1 ? fontFaces[0] : fontFaces;\n    }\n    return console.warn(\"[loadWebFont] FontFace API is not supported. Skipping loading font\"), null;\n  },\n  unload(font) {\n    (Array.isArray(font) ? font : [font]).forEach((t) => core.settings.ADAPTER.getFontFaceSet().delete(t));\n  }\n};\ncore.extensions.add(loadWebFont);\nexports.getFontFamilyName = getFontFamilyName;\nexports.loadWebFont = loadWebFont;\n//# sourceMappingURL=loadWebFont.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","getFontFamilyName","url","ext","core","utils","path","extname","nameTokens","basename","replace","toLowerCase","split","map","word","charAt","toUpperCase","slice","valid","length","token","match","CSS_IDENT_TOKEN_REGEX","fontFamilyName","join","encodeURIWhenNeeded","uri","validURICharactersRegex","test","encodeURI","checkDataUrl","checkExtension","LoaderParser","validWeights","validFontExtensions","validFontMIMEs","loadWebFont","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","Low","name","load","options","fonts","settings","ADAPTER","getFontFaceSet","fontFaces","data","family","weights","filter","weight","includes","i","font","FontFace","add","push","console","warn","unload","forEach","Array","isArray","t","delete","extensions"]
}
