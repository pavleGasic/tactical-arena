{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$loader$parsers$textures$loadVideo.js",
"lineCount":30,
"mappings":"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",
"sources":["node_modules/@pixi/assets/lib/loader/parsers/textures/loadVideo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$loader$parsers$textures$loadVideo\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), checkDataUrl = require(\"../../../utils/checkDataUrl.js\"), checkExtension = require(\"../../../utils/checkExtension.js\"), LoaderParser = require(\"../LoaderParser.js\"), createTexture = require(\"./utils/createTexture.js\");\nconst validVideoExtensions = [\".mp4\", \".m4v\", \".webm\", \".ogv\"], validVideoMIMEs = [\n  \"video/mp4\",\n  \"video/webm\",\n  \"video/ogg\"\n], loadVideo = {\n  name: \"loadVideo\",\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.High\n  },\n  config: {\n    defaultAutoPlay: !0,\n    defaultUpdateFPS: 0,\n    defaultLoop: !1,\n    defaultMuted: !1,\n    defaultPlaysinline: !0\n  },\n  test(url) {\n    return checkDataUrl.checkDataUrl(url, validVideoMIMEs) || checkExtension.checkExtension(url, validVideoExtensions);\n  },\n  async load(url, loadAsset, loader) {\n    let texture;\n    const blob = await (await core.settings.ADAPTER.fetch(url)).blob(), blobURL = URL.createObjectURL(blob);\n    try {\n      const options = {\n        autoPlay: this.config.defaultAutoPlay,\n        updateFPS: this.config.defaultUpdateFPS,\n        loop: this.config.defaultLoop,\n        muted: this.config.defaultMuted,\n        playsinline: this.config.defaultPlaysinline,\n        ...loadAsset?.data?.resourceOptions,\n        autoLoad: !0\n      }, src = new core.VideoResource(blobURL, options);\n      await src.load();\n      const base = new core.BaseTexture(src, {\n        alphaMode: await core.utils.detectVideoAlphaMode(),\n        resolution: core.utils.getResolutionOfUrl(url),\n        ...loadAsset?.data\n      });\n      base.resource.src = url, texture = createTexture.createTexture(base, loader, url), texture.baseTexture.once(\"destroyed\", () => {\n        URL.revokeObjectURL(blobURL);\n      });\n    } catch (e) {\n      throw URL.revokeObjectURL(blobURL), e;\n    }\n    return texture;\n  },\n  unload(texture) {\n    texture.destroy(!0);\n  }\n};\ncore.extensions.add(loadVideo);\nexports.loadVideo = loadVideo;\n//# sourceMappingURL=loadVideo.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","checkDataUrl","checkExtension","LoaderParser","createTexture","validVideoExtensions","validVideoMIMEs","loadVideo","name","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","config","defaultAutoPlay","defaultUpdateFPS","defaultLoop","defaultMuted","defaultPlaysinline","test","url","load","loadAsset","loader","texture","blob","settings","ADAPTER","fetch","blobURL","URL","createObjectURL","src","VideoResource","options","autoPlay","updateFPS","loop","muted","playsinline","data","resourceOptions","autoLoad","base","BaseTexture","alphaMode","utils","detectVideoAlphaMode","resolution","getResolutionOfUrl","resource","baseTexture","once","revokeObjectURL","e","unload","destroy","extensions","add"]
}
