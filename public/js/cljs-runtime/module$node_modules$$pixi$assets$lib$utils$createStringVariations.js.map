{
"version":3,
"file":"module$node_modules$$pixi$assets$lib$utils$createStringVariations.js",
"lineCount":24,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,GAAsF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAE9HC,UAASA,SAAQ,CAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,IAA3B,CAAiC;AAChD,UAAMC,KAAKJ,GAAA,CAAIC,KAAJ,CAAX;AACA,SAAK,IAAII,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,EAAGE,CAAAA,MAAvB,EAA+BD,CAAA,EAA/B,CAAoC;AAClC,YAAME,QAAQH,EAAA,CAAGC,CAAH,CAAd;AACAJ,WAAA,GAAQD,GAAIM,CAAAA,MAAZ,GAAqB,CAArB,GAAyBR,QAAA,CAASC,IAAKS,CAAAA,OAAL,CAAaN,MAAA,CAAOD,KAAP,CAAb,EAA4BM,KAA5B,CAAT,EAA6CP,GAA7C,EAAkDC,KAAlD,GAA0D,CAA1D,EAA6DC,MAA7D,EAAqEC,IAArE,CAAzB,GAAsGA,IAAKM,CAAAA,IAAL,CAAUV,IAAKS,CAAAA,OAAL,CAAaN,MAAA,CAAOD,KAAP,CAAb,EAA4BM,KAA5B,CAAV,CAAtG;AAFkC;AAFY;AAmBlDV,SAAQa,CAAAA,sBAAR,GAZAA,QAA+B,CAACC,MAAD,CAAS;AAAA,UACVT,SAASS,MAAOC,CAAAA,KAAP,CAAvBC,YAAuB,CADC,EACoBV,OAAO,EAD3B;AAEtC,QAAID,MAAJ,CAAY;AACV,YAAMF,MAAM,EAAZ;AACAE,YAAOY,CAAAA,OAAP,CAAgBC,IAAD,IAAU;AACjBC,YAAAA,GAAQD,IAAKE,CAAAA,SAAL,CAAe,CAAf,EAAkBF,IAAKT,CAAAA,MAAvB,GAAgC,CAAhC,CAAmCU,CAAAA,KAAnC,CAAyC,GAAzC,CAARA;AACNhB,WAAIS,CAAAA,IAAJ,CAASO,IAAT,CAAA;AAFuB,OAAzB,CAAA;AAGIlB,cAAA,CAASa,MAAT,EAAiBX,GAAjB,EAAsB,CAAtB,EAAyBE,MAAzB,EAAiCC,IAAjC,CAAA;AALM,KAAZ;AAOEA,UAAKM,CAAAA,IAAL,CAAUE,MAAV,CAAA;AAPF;AAQA,WAAOR,IAAP;AAVsC,GAYxC;AArB8H,CAA9H;;",
"sources":["node_modules/@pixi/assets/lib/utils/createStringVariations.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$assets$lib$utils$createStringVariations\"] = function(global,require,module,exports) {\n\"use strict\";\nfunction processX(base, ids, depth, result, tags) {\n  const id = ids[depth];\n  for (let i = 0; i < id.length; i++) {\n    const value = id[i];\n    depth < ids.length - 1 ? processX(base.replace(result[depth], value), ids, depth + 1, result, tags) : tags.push(base.replace(result[depth], value));\n  }\n}\nfunction createStringVariations(string) {\n  const regex = /\\{(.*?)\\}/g, result = string.match(regex), tags = [];\n  if (result) {\n    const ids = [];\n    result.forEach((vars) => {\n      const split = vars.substring(1, vars.length - 1).split(\",\");\n      ids.push(split);\n    }), processX(string, ids, 0, result, tags);\n  } else\n    tags.push(string);\n  return tags;\n}\nexports.createStringVariations = createStringVariations;\n//# sourceMappingURL=createStringVariations.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","processX","base","ids","depth","result","tags","id","i","length","value","replace","push","createStringVariations","string","match","regex","forEach","vars","split","substring"]
}
