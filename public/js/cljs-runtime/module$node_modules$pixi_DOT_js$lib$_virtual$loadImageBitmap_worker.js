shadow$provide.module$node_modules$pixi_DOT_js$lib$_virtual$loadImageBitmap_worker = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  let WORKER_URL = null;
  class WorkerInstance {
    constructor() {
      WORKER_URL || (WORKER_URL = URL.createObjectURL(new Blob(['(function () {\n    \'use strict\';\n\n    async function loadImageBitmap(url, alphaMode) {\n      const response \x3d await fetch(url);\n      if (!response.ok) {\n        throw new Error(`[WorkerManager.loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);\n      }\n      const imageBlob \x3d await response.blob();\n      return alphaMode \x3d\x3d\x3d "premultiplied-alpha" ? createImageBitmap(imageBlob, { premultiplyAlpha: "none" }) : createImageBitmap(imageBlob);\n    }\n    self.onmessage \x3d async (event) \x3d\x3e {\n      try {\n        const imageBitmap \x3d await loadImageBitmap(event.data.data[0], event.data.data[1]);\n        self.postMessage({\n          data: imageBitmap,\n          uuid: event.data.uuid,\n          id: event.data.id\n        }, [imageBitmap]);\n      } catch (e) {\n        self.postMessage({\n          error: e,\n          uuid: event.data.uuid,\n          id: event.data.id\n        });\n      }\n    };\n\n})();\n'], 
      {type:"application/javascript"})));
      this.worker = new Worker(WORKER_URL);
    }
  }
  WorkerInstance.revokeObjectURL = function() {
    WORKER_URL && (URL.revokeObjectURL(WORKER_URL), WORKER_URL = null);
  };
  exports.default = WorkerInstance;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$_virtual$loadImageBitmap_worker.js.map
