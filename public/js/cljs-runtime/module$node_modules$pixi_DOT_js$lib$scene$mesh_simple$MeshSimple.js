shadow$provide.module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$MeshSimple = function(global, require, module, exports) {
  var definedProps = require("module$node_modules$pixi_DOT_js$lib$scene$container$utils$definedProps");
  global = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$Mesh");
  var MeshGeometry = require("module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$MeshGeometry");
  "use strict";
  class MeshSimple extends global.Mesh {
    constructor(options) {
      const {texture, vertices, uvs, indices, topology, ...rest} = options;
      options = new MeshGeometry.MeshGeometry(definedProps.definedProps({positions:vertices, uvs, indices, topology}));
      super(definedProps.definedProps({...rest, texture, geometry:options}));
      this.autoUpdate = !0;
      this.onRender = this._render;
    }
    get vertices() {
      return this.geometry.getBuffer("aPosition").data;
    }
    set vertices(value) {
      this.geometry.getBuffer("aPosition").data = value;
    }
    _render() {
      this.autoUpdate && this.geometry.getBuffer("aPosition").update();
    }
  }
  exports.MeshSimple = MeshSimple;
};

//# sourceMappingURL=module$node_modules$pixi_DOT_js$lib$scene$mesh_simple$MeshSimple.js.map
