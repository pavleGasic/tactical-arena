{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextPipe.js",
"lineCount":94,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-html/HTMLTextPipe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_html$HTMLTextPipe\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../extensions/Extensions.js');\nvar Texture = require('../../rendering/renderers/shared/texture/Texture.js');\nvar PoolGroup = require('../../utils/pool/PoolGroup.js');\nvar BatchableSprite = require('../sprite/BatchableSprite.js');\nvar updateTextBounds = require('../text/utils/updateTextBounds.js');\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    PoolGroup.BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    updateTextBounds.updateTextBounds(batchableSprite, htmlText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    updateTextBounds.updateTextBounds(batchableSprite, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: PoolGroup.BigPool.get(BatchableSprite.BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLPipes,\n    Extensions.ExtensionType.WebGPUPipes,\n    Extensions.ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexports.HTMLTextPipe = HTMLTextPipe;\n//# sourceMappingURL=HTMLTextPipe.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Texture","PoolGroup","BatchableSprite","updateTextBounds","HTMLTextPipe","constructor","renderer","_gpuText","Object","create","_destroyRenderableBound","destroyRenderable","bind","_renderer","runners","resolutionChange","add","renderableGC","addManagedHash","i","gpuText","text","batchableSprite","renderable","_autoResolution","_resolution","resolution","onViewUpdate","validateRenderable","htmlText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","addRenderable","instructionSet","_didTextUpdate","_updateText","renderPipes","batch","addToBatch","updateRenderable","_batcher","updateElement","off","_destroyRenderableById","uid","htmlTextUid","decreaseReferenceCount","BigPool","return","_updateGpuText","catch","e","console","error","generatingTexture","texture","getManagedTexture","_style","initGpuText","gpuTextData","EMPTY","get","transform","groupTransform","bounds","minX","maxX","minY","maxY","roundPixels","_roundPixels","on","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"]
}
