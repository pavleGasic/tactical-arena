shadow$provide.module$node_modules$$pixi$core$lib$state$State = function(global, require, module, exports) {
  var constants = require("module$node_modules$$pixi$constants$lib$index");
  class State {
    constructor() {
      this.data = 0;
      this.blendMode = constants.BLEND_MODES.NORMAL;
      this.polygonOffset = 0;
      this.depthMask = this.blend = !0;
    }
    get blend() {
      return !!(this.data & 1);
    }
    set blend(value) {
      !!(this.data & 1) !== value && (this.data ^= 1);
    }
    get offsets() {
      return !!(this.data & 2);
    }
    set offsets(value) {
      !!(this.data & 2) !== value && (this.data ^= 2);
    }
    get culling() {
      return !!(this.data & 4);
    }
    set culling(value) {
      !!(this.data & 4) !== value && (this.data ^= 4);
    }
    get depthTest() {
      return !!(this.data & 8);
    }
    set depthTest(value) {
      !!(this.data & 8) !== value && (this.data ^= 8);
    }
    get depthMask() {
      return !!(this.data & 32);
    }
    set depthMask(value) {
      !!(this.data & 32) !== value && (this.data ^= 32);
    }
    get clockwiseFrontFace() {
      return !!(this.data & 16);
    }
    set clockwiseFrontFace(value) {
      !!(this.data & 16) !== value && (this.data ^= 16);
    }
    get blendMode() {
      return this._blendMode;
    }
    set blendMode(value) {
      this.blend = value !== constants.BLEND_MODES.NONE;
      this._blendMode = value;
    }
    get polygonOffset() {
      return this._polygonOffset;
    }
    set polygonOffset(value) {
      this.offsets = !!value;
      this._polygonOffset = value;
    }
    static for2d() {
      const state = new State();
      return state.depthTest = !1, state.blend = !0, state;
    }
  }
  State.prototype.toString = function() {
    return `[@pixi/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;
  };
  exports.State = State;
};

//# sourceMappingURL=module$node_modules$$pixi$core$lib$state$State.js.map
