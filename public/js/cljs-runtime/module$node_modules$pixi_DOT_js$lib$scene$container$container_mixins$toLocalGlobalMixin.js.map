{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$toLocalGlobalMixin.js",
"lineCount":20,
"mappings":"AAAAA,cAAA,CAAA,uFAAA,GAA4G,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGpJ,MAAIC,QAAQH,OAAA,CAAQ,uDAAR,CAAZ,EACII,sBAAsBJ,OAAA,CAAQ,sFAAR,CAD1B;AAGA,cAAA;AAsDAE,SAAQG,CAAAA,kBAAR,GArD2BA,CAQzBC,iBAAiB,CAACC,KAAA,GAAQ,IAAIJ,KAAMA,CAAAA,KAAV,EAAT,EAA4BK,UAAA,GAAa,CAAA,CAAzC,CAAgD;AAC3D,QAAKC,CAAAA,MAAT,GACE,IAAKA,CAAAA,MAAOC,CAAAA,QAAZ,CAAqB,IAAKC,CAAAA,SAA1B,EAAqCJ,KAArC,EAA4CC,UAA5C,CADF,IAGED,KAAMK,CAAAA,CACN,GADU,IAAKD,CAAAA,SAAUC,CAAAA,CACzB,EAAAL,KAAMM,CAAAA,CAAN,GAAU,IAAKF,CAAAA,SAAUE,CAAAA,CAJ3B,CAAA;AAMA,WAAON,KAAP;AAP+D,GARxCF,EA0BzBK,QAAQ,CAACI,QAAD,EAAWP,KAAX,EAAkBC,UAAA,GAAa,CAAA,CAA/B,CAAsC;AACtCO,cAAAA,GAAe,IAAKC,CAAAA,kBAAL,CAAwBZ,mBAAoBa,CAAAA,UAAWC,CAAAA,GAA/B,EAAxB,EAA8DV,UAA9D,CAAfO;AACNR,SAAA,GAAQQ,UAAaI,CAAAA,KAAb,CAAmBL,QAAnB,EAA6BP,KAA7B,CAAR;AACAH,uBAAoBa,CAAAA,UAAWG,CAAAA,MAA/B,CAAsCL,UAAtC,CAAA;AACA,WAAOR,KAAP;AAJ4C,GA1BrBF,EA0CzBgB,OAAO,CAACP,QAAD,EAAWQ,IAAX,EAAiBf,KAAjB,EAAwBC,UAAxB,CAAoC;AACrCc,QAAJ,KACER,QADF,GACaQ,IAAKZ,CAAAA,QAAL,CAAcI,QAAd,EAAwBP,KAAxB,EAA+BC,UAA/B,CADb;AAGMO,QAAAA,GAAe,IAAKC,CAAAA,kBAAL,CAAwBZ,mBAAoBa,CAAAA,UAAWC,CAAAA,GAA/B,EAAxB,EAA8DV,UAA9D,CAAfO;AACNR,SAAA,GAAQQ,IAAaQ,CAAAA,YAAb,CAA0BT,QAA1B,EAAoCP,KAApC,CAAR;AACAH,uBAAoBa,CAAAA,UAAWG,CAAAA,MAA/B,CAAsCL,IAAtC,CAAA;AACA,WAAOR,KAAP;AAPyC,GA1ClBF,CAqD3B;AA5DoJ,CAApJ;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/container-mixins/toLocalGlobalMixin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$toLocalGlobalMixin\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Point = require('../../../maths/point/Point.js');\nvar matrixAndBoundsPool = require('../bounds/utils/matrixAndBoundsPool.js');\n\n\"use strict\";\nconst toLocalGlobalMixin = {\n  /**\n   * Returns the global position of the container.\n   * @param point - The optional point to write the global value to.\n   * @param skipUpdate - Should we skip the update transform.\n   * @returns - The updated point.\n   * @memberof scene.Container#\n   */\n  getGlobalPosition(point = new Point.Point(), skipUpdate = false) {\n    if (this.parent) {\n      this.parent.toGlobal(this._position, point, skipUpdate);\n    } else {\n      point.x = this._position.x;\n      point.y = this._position.y;\n    }\n    return point;\n  },\n  /**\n   * Calculates the global position of the container.\n   * @param position - The world origin to calculate from.\n   * @param point - A Point object in which to store the value, optional\n   *  (otherwise will create a new Point).\n   * @param skipUpdate - Should we skip the update transform.\n   * @returns - A point object representing the position of this object.\n   * @memberof scene.Container#\n   */\n  toGlobal(position, point, skipUpdate = false) {\n    const globalMatrix = this.getGlobalTransform(matrixAndBoundsPool.matrixPool.get(), skipUpdate);\n    point = globalMatrix.apply(position, point);\n    matrixAndBoundsPool.matrixPool.return(globalMatrix);\n    return point;\n  },\n  /**\n   * Calculates the local position of the container relative to another point.\n   * @param position - The world origin to calculate from.\n   * @param from - The Container to calculate the global position from.\n   * @param point - A Point object in which to store the value, optional\n   *  (otherwise will create a new Point).\n   * @param skipUpdate - Should we skip the update transform\n   * @returns - A point object representing the position of this object\n   * @memberof scene.Container#\n   */\n  toLocal(position, from, point, skipUpdate) {\n    if (from) {\n      position = from.toGlobal(position, point, skipUpdate);\n    }\n    const globalMatrix = this.getGlobalTransform(matrixAndBoundsPool.matrixPool.get(), skipUpdate);\n    point = globalMatrix.applyInverse(position, point);\n    matrixAndBoundsPool.matrixPool.return(globalMatrix);\n    return point;\n  }\n};\n\nexports.toLocalGlobalMixin = toLocalGlobalMixin;\n//# sourceMappingURL=toLocalGlobalMixin.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Point","matrixAndBoundsPool","toLocalGlobalMixin","getGlobalPosition","point","skipUpdate","parent","toGlobal","_position","x","y","position","globalMatrix","getGlobalTransform","matrixPool","get","apply","return","toLocal","from","applyInverse"]
}
