{
"version":3,
"file":"module$node_modules$$pixi$utils$lib$path.js",
"lineCount":211,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,GAA6D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGrGC,UAASA,WAAU,CAACC,KAAD,CAAQ;AACzB,QAAoB,QAApB,IAAI,MAAOA,MAAX;AACE,YAAM,IAAIC,SAAJ,CAAe,mCAAkCC,IAAKC,CAAAA,SAAL,CAAeH,KAAf,CAAlC,EAAf,CAAN;AADF;AADyB;AAI3BI,UAASA,gBAAe,CAACC,GAAD,CAAM;AAC5B,WAAOA,GAAIC,CAAAA,KAAJ,CAAU,GAAV,CAAA,CAAe,CAAf,CAAkBA,CAAAA,KAAlB,CAAwB,GAAxB,CAAA,CAA6B,CAA7B,CAAP;AAD4B;AAL9B,MAAIC,WAAWX,OAAA,CAAQ,8CAAR,CAAf;AAgDA,QAAMY,OAAO,CAKXC,OAAO,CAACT,KAAD,CAAQ;AACb,WAAkBA,KA1CTU,CAAAA,OAAJ,CAAY,IAAIC,MAAJ,CA0CQC,IA7CbF,CAAAA,OAAP,CAAe,qBAAf,EAAsC,SAAtC,CAGY,EAA+B,GAA/B,CAAZ,EA0C0BA,GA1C1B,CA0CL;AADa,GALJ,EAYXG,KAAK,CAACb,KAAD,CAAQ;AACX,WAAO,UAAWc,CAAAA,IAAX,CAAgB,IAAKL,CAAAA,OAAL,CAAaT,KAAb,CAAhB,CAAP;AADW,GAZF,EAmBXe,SAAS,CAACf,KAAD,CAAQ;AACf,WAAO,wIAAyIc,CAAAA,IAAzI,CAA8Id,KAA9I,CAAP;AADe,GAnBN,EA0BXgB,SAAS,CAAChB,KAAD,CAAQ;AACf,WAAOA,KAAMiB,CAAAA,UAAN,CAAiB,OAAjB,CAAP;AADe,GA1BN,EAkCXC,WAAW,CAAClB,KAAD,CAAQ;AACjB,WAAO,UAAWc,CAAAA,IAAX,CAAgB,IAAKL,CAAAA,OAAL,CAAaT,KAAb,CAAhB,CAAP;AADiB,GAlCR,EAyCXmB,WAAW,CAACnB,KAAD,CAAQ;AACjBD,cAAA,CAAWC,KAAX,CAAA;AAAmBA,SAAA,GAAQ,IAAKS,CAAAA,OAAL,CAAaT,KAAb,CAAR;AACnB,UAAMoB,YAAY,cAAeC,CAAAA,IAAf,CAAoBrB,KAApB,CAAlB;AACA,WAAIoB,SAAJ,GACSA,SAAA,CAAU,CAAV,CADT,GAGO,CADDE,KACC,GADe,iBAAkBD,CAAAA,IAAlB,CAAuBrB,KAAvB,CACf,IAAgBsB,KAAA,CAAc,CAAd,CAAhB,GAAmC,EAH1C;AAHiB,GAzCR,EA0DXC,UAAU,CAAClB,GAAD,EAAMmB,aAAN,EAAqBC,aAArB,CAAoC;AAC5C,QAAI1B,UAAA,CAAWM,GAAX,CAAA,EAAiB,IAAKU,CAAAA,SAAL,CAAeV,GAAf,CAAjB,IAAwC,IAAKW,CAAAA,SAAL,CAAeX,GAAf,CAA5C;AACE,aAAOA,GAAP;AADF;AAEMqB,iBAAAA,GAAUtB,eAAA,CAAgB,IAAKK,CAAAA,OAAL,CAAae,aAAb,IAA8BjB,QAASA,CAAAA,QAASoB,CAAAA,OAAQC,CAAAA,UAA1B,EAA9B,CAAhB,CAAVF;AAAkGG,iBAAAA,GAAUzB,eAAA,CAAgB,IAAKK,CAAAA,OAAL,CAAagB,aAAb,IAA8B,IAAKK,CAAAA,QAAL,CAAcJ,aAAd,CAA9B,CAAhB,CAAVG;AACxG,WAAOxB,GAAA,GAAM,IAAKI,CAAAA,OAAL,CAAaJ,GAAb,CAAN,EAAyBA,GAAIY,CAAAA,UAAJ,CAAe,GAAf,CAAA,GAAsBT,IAAKuB,CAAAA,IAAL,CAAUF,aAAV,EAAmBxB,GAAI2B,CAAAA,KAAJ,CAAU,CAAV,CAAnB,CAAtB,GAAyD,IAAKC,CAAAA,UAAL,CAAgB5B,GAAhB,CAAA,GAAuBA,GAAvB,GAA6B,IAAK0B,CAAAA,IAAL,CAAUL,aAAV,EAAmBrB,GAAnB,CAAtH;AAJ4C,GA1DnC,EAoEX6B,SAAS,CAAClC,cAAD,CAAQ;AACf,QAAID,UAAA,CAAWC,cAAX,CAAA,EAAoC,CAApC,KAAmBA,cAAMmC,CAAAA,MAA7B;AACE,aAAO,GAAP;AADF;AAEA,QAAI,IAAKpB,CAAAA,SAAL,CAAef,cAAf,CAAJ,IAA6B,IAAKgB,CAAAA,SAAL,CAAehB,cAAf,CAA7B;AACE,aAAOA,cAAP;AADF;AAEAA,kBAAA,GAAQ,IAAKS,CAAAA,OAAL,CAAaT,cAAb,CAAR;AACA,QAAIoC,WAAW,EAAf;AACA,UAAMH,aAAajC,cAAMiB,CAAAA,UAAN,CAAiB,GAAjB,CAAnB;AACA,QAAKC,CAAAA,WAAL,CAAiBlB,cAAjB,CAAA,KAA4BoC,QAAA,GAAW,IAAKN,CAAAA,QAAL,CAAc9B,cAAd,CAAX,EAAiCA,cAAjC,GAAyCA,cAAMgC,CAAAA,KAAN,CAAYI,QAASD,CAAAA,MAArB,CAArE;AACA,UAAME,oBAAoBrC,cAAMsC,CAAAA,QAAN,CAAe,GAAf,CAA1B;AACoCtC,QAAAA,QAAAA,cAAAA;AAhHa,QAC/CuC,MAAM,EADyC,EACrCC,oBAAoB,CADiB;AAAA,QACdC,YAAY,CAAC,CADC;AAAA,QACEC,OAAO,CADT,EACYC,OAAO,CAAC,CADpB;AAEnD,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,IAAqB5C,KAAMmC,CAAAA,MAA3B,EAAmC,EAAES,CAArC,CAAwC;AACtC,UAAIA,CAAJ,GAAQ5C,KAAMmC,CAAAA,MAAd;AACEQ,YAAA,GAAO3C,KAAM6C,CAAAA,UAAN,CAAiBD,CAAjB,CAAP;AADF,YAEK;AACH,YAAa,EAAb,KAAID,IAAJ;AACE;AADF;AAEAA,YAAA,GAAO,EAAP;AAHG;AAKL,UAAa,EAAb,KAAIA,IAAJ,CAAiB;AACf,YAAMF,SAAN,KAAoBG,CAApB,GAAwB,CAAxB,IAAsC,CAAtC,KAA6BF,IAA7B;AACE,cAAID,SAAJ,KAAkBG,CAAlB,GAAsB,CAAtB,IAAoC,CAApC,KAA2BF,IAA3B;AACE,gBAAiB,CAAjB,GAAIH,GAAIJ,CAAAA,MAAR,IAA4C,CAA5C,KAAsBK,iBAAtB,IAAoF,EAApF,KAAiDD,GAAIM,CAAAA,UAAJ,CAAeN,GAAIJ,CAAAA,MAAnB,GAA4B,CAA5B,CAAjD,IAA6H,EAA7H,KAA0FI,GAAIM,CAAAA,UAAJ,CAAeN,GAAIJ,CAAAA,MAAnB,GAA4B,CAA5B,CAA1F;AACE,kBAAiB,CAAjB,GAAII,GAAIJ,CAAAA,MAAR;AAEE,oBADMW,SACF,GADmBP,GAAIQ,CAAAA,WAAJ,CAAgB,GAAhB,CACnB,EAAAD,SAAA,KAAmBP,GAAIJ,CAAAA,MAAvB,GAAgC,CAApC,CAAuC;AAClB,mBAAC,CAApB,KAAAW,SAAA,IAAyBP,GAAA,GAAM,EAAN,EAAUC,iBAAV,GAA8B,CAAvD,KAA6DD,GAAA,GAAMA,GAAIP,CAAAA,KAAJ,CAAU,CAAV,EAAac,SAAb,CAAN,EAAoCN,iBAApC,GAAwDD,GAAIJ,CAAAA,MAA5D,GAAqE,CAArE,GAAyEI,GAAIQ,CAAAA,WAAJ,CAAgB,GAAhB,CAAtI,CAAA;AAA6JN,2BAAA,GAAYG,CAAZ;AAAeF,sBAAA,GAAO,CAAP;AAC5K;AAFqC;AAFzC,oBAMO,KAAmB,CAAnB,KAAIH,GAAIJ,CAAAA,MAAR,IAAuC,CAAvC,KAAwBI,GAAIJ,CAAAA,MAA5B,CAA0C;AAC/CI,mBAAA,GAAM,EAAN;AAAUC,iCAAA,GAAoB,CAApB;AAAuBC,yBAAA,GAAYG,CAAZ;AAAeF,oBAAA,GAAO,CAAP;AAChD;AAF+C;AAPnD;AADF;AAee,aAAb,GAAAH,GAAIJ,CAAAA,MAAJ,GAAiBI,GAAjB,IAAyB,IAAGvC,KAAMgC,CAAAA,KAAN,CAAYS,SAAZ,GAAwB,CAAxB,EAA2BG,CAA3B,CAAH,EAAzB,GAA8DL,GAA9D,GAAoEvC,KAAMgC,CAAAA,KAAN,CAAYS,SAAZ,GAAwB,CAAxB,EAA2BG,CAA3B,CAA+B,EAAAJ,iBAAA,GAAoBI,CAApB,GAAwBH,SAAxB,GAAoC,CAApC;AAfrG;AADF;AAiBAA,iBAAA,GAAYG,CAAZ;AAAeF,YAAA,GAAO,CAAP;AAlBA,OAAjB;AAoBW,UAAT,KAAAC,IAAA,IAAwB,CAAC,CAAzB,KAAeD,IAAf,GAA6B,EAAEA,IAA/B,GAAsCA,IAAtC,GAA6C,CAAC,CAA9C;AApBF;AARsC;AA8GtC,WAAO1C,cAAA,GAhFFuC,GAgFE,EAAwD,CAAxD,GAAyCvC,cAAMmC,CAAAA,MAA/C,IAA6DE,iBAA7D,KAAmFrC,cAAnF,IAA4F,GAA5F,GAAkGiC,UAAA,GAAc,IAAGjC,cAAH,EAAd,GAA2BoC,QAA3B,GAAsCpC,cAA/I;AAVe,GApEN,EAqFXiC,UAAU,CAACjC,KAAD,CAAQ;AAChB,WAAOD,UAAA,CAAWC,KAAX,CAAA,EAAmBA,KAAnB,GAA2B,IAAKS,CAAAA,OAAL,CAAaT,KAAb,CAA3B,EAAgD,IAAKkB,CAAAA,WAAL,CAAiBlB,KAAjB,CAAA,GAA0B,CAAA,CAA1B,GAA+BA,KAAMiB,CAAAA,UAAN,CAAiB,GAAjB,CAAtF;AADgB,GArFP,EA6FXc,IAAI,CAAC,GAAGiB,QAAJ,CAAc;AAChB,QAAwB,CAAxB,KAAIA,QAASb,CAAAA,MAAb;AACE,aAAO,GAAP;AADF;AAEA,QAAIc,MAAJ;AACA,SAAK,IAAIL,IAAI,CAAb,EAAgBA,CAAhB,GAAoBI,QAASb,CAAAA,MAA7B,EAAqC,EAAES,CAAvC,CAA0C;AACxC,YAAMM,MAAMF,QAAA,CAASJ,CAAT,CAAZ;AACA,UAAI7C,UAAA,CAAWmD,GAAX,CAAA,EAA8B,CAA9B,GAAiBA,GAAIf,CAAAA,MAAzB;AACiB,YAAK,EAApB,KAAIc,MAAJ,GACEA,MADF,GACWC,GADX,GAIE,IAAKC,CAAAA,cAAeC,CAAAA,QAApB,CAA6B,IAAKC,CAAAA,OAAL,CADbL,QAAA,CAASJ,CAAT,GAAa,CAAb,CACa,IADM,EACN,CAAsBU,CAAAA,WAAtB,EAA7B,CAAA,GAAoEL,MAApE,IAA+E,OAAMC,GAAN,EAA/E,GAA6FD,MAA7F,IAAwG,IAAGC,GAAH,EAJ1G;AADF;AAFwC;AAU1C,WAAkB,IAAK,EAAhB,KAAAD,MAAA,GAAoB,GAApB,GAA0B,IAAKf,CAAAA,SAAL,CAAee,MAAf,CAAjC;AAdgB,GA7FP,EAiHXM,OAAO,CAACvD,KAAD,CAAQ;AACb,QAAID,UAAA,CAAWC,KAAX,CAAA,EAAoC,CAApC,KAAmBA,KAAMmC,CAAAA,MAA7B;AACE,aAAO,GAAP;AADF;AAEAnC,SAAA,GAAQ,IAAKS,CAAAA,OAAL,CAAaT,KAAb,CAAR;AACA,QAAI2C,OAAO3C,KAAM6C,CAAAA,UAAN,CAAiB,CAAjB,CAAX;AACA,UAAMW,UAAmB,EAAnBA,KAAUb,IAAhB;AALa,QAMTc,MAAM,CAAC,CANE,EAMCC,eAAe,CAAA,CANhB;AAAA,UAOPC,QAAQ,IAAKxC,CAAAA,WAAL,CAAiBnB,KAAjB,CAPD,EAO0B4D,WAAW5D,KAPrC;AAQbA,SAAA,GAAQA,KAAMgC,CAAAA,KAAN,CAAY2B,KAAMxB,CAAAA,MAAlB,CAAR;AACA,SAAK,IAAIS,IAAI5C,KAAMmC,CAAAA,MAAVS,GAAmB,CAA5B,EAAoC,CAApC,IAA+BA,CAA/B,EAAuC,EAAEA,CAAzC;AACE,UAAID,IAAA,GAAO3C,KAAM6C,CAAAA,UAAN,CAAiBD,CAAjB,CAAP,EAAqC,EAArC,KAA4BD,IAAhC;AACE,YAAI,CAACe,YAAL,CAAmB;AACjBD,aAAA,GAAMb,CAAN;AACA;AAFiB;AADrB;AAMEc,oBAAA,GAAe,CAAA,CAAf;AANF;AADF;AAQA,WAAe,CAAC,CAAT,KAAAD,GAAA,GAAaD,OAAA,GAAU,GAAV,GAAgB,IAAK3C,CAAAA,KAAL,CAAW+C,QAAX,CAAA,GAAuBD,KAAvB,GAA+B3D,KAA/B,GAAuC2D,KAApE,GAA4EH,OAAA,IAAmB,CAAnB,KAAWC,GAAX,GAAuB,IAAvB,GAA8BE,KAA9B,GAAsC3D,KAAMgC,CAAAA,KAAN,CAAY,CAAZ,EAAeyB,GAAf,CAAzH;AAjBa,GAjHJ,EAwIX3B,QAAQ,CAAC9B,KAAD,CAAQ;AACdD,cAAA,CAAWC,KAAX,CAAA;AAAmBA,SAAA,GAAQ,IAAKS,CAAAA,OAAL,CAAaT,KAAb,CAAR;AACnB,QAAI6D,OAAO,EAAX;AACA,QAAI7D,KAAMiB,CAAAA,UAAN,CAAiB,GAAjB,CAAA,GAAwB4C,IAAxB,GAA+B,GAA/B,GAAqCA,IAArC,GAA4C,IAAK1C,CAAAA,WAAL,CAAiBnB,KAAjB,CAA5C,EAAqE,IAAKa,CAAAA,KAAL,CAAWb,KAAX,CAAzE,CAA4F;AAC1F,YAAM8D,QAAQ9D,KAAM+D,CAAAA,OAAN,CAAc,GAAd,EAAmBF,IAAK1B,CAAAA,MAAxB,CAAd;AACU,OAAC,CAAX,KAAA2B,KAAA,GAAeD,IAAf,GAAsB7D,KAAMgC,CAAAA,KAAN,CAAY,CAAZ,EAAe8B,KAAf,CAAtB,GAA8CD,IAA9C,GAAqD7D,KAArD;AAA4D6D,UAAKvB,CAAAA,QAAL,CAAc,GAAd,CAAA,KAAuBuB,IAAvB,IAA+B,GAA/B;AAF8B;AAI5F,WAAOA,IAAP;AAPc,GAxIL,EAsJXG,QAAQ,CAAChE,KAAD,EAAQiE,GAAR,CAAa;AACnBlE,cAAA,CAAWC,KAAX,CAAA;AAAmBiE,OAAA,IAAOlE,UAAA,CAAWkE,GAAX,CAAP;AAAwBjE,SAAA,GAAQI,eAAA,CAAgB,IAAKK,CAAAA,OAAL,CAAaT,KAAb,CAAhB,CAAR;AADxB,QAEfkE,QAAQ,CAFO,EAEJT,MAAM,CAAC,CAFH,EAEMC,eAAe,CAAA,CAFrB,EAEyBd,CAFzB;AAGnB,QAAY,IAAK,EAAjB,KAAIqB,GAAJ,IAAmC,CAAnC,GAAsBA,GAAI9B,CAAAA,MAA1B,IAAwC8B,GAAI9B,CAAAA,MAA5C,IAAsDnC,KAAMmC,CAAAA,MAA5D,CAAoE;AAClE,UAAI8B,GAAI9B,CAAAA,MAAR,KAAmBnC,KAAMmC,CAAAA,MAAzB,IAAmC8B,GAAnC,KAA2CjE,KAA3C;AACE,eAAO,EAAP;AADF;AADkE,UAG9DmE,SAASF,GAAI9B,CAAAA,MAAbgC,GAAsB,CAHwC,EAGrCC,mBAAmB,CAAC,CAHiB;AAIlE,WAAKxB,CAAL,GAAS5C,KAAMmC,CAAAA,MAAf,GAAwB,CAAxB,EAAgC,CAAhC,IAA2BS,CAA3B,EAAmC,EAAEA,CAArC,CAAwC;AACtC,cAAMD,OAAO3C,KAAM6C,CAAAA,UAAN,CAAiBD,CAAjB,CAAb;AACA,YAAa,EAAb,KAAID,IAAJ;AACE,cAAI,CAACe,YAAL,CAAmB;AACjBQ,iBAAA,GAAQtB,CAAR,GAAY,CAAZ;AACA;AAFiB;AADrB;AAMuB,WAAC,CAAoD,KAA1EwB,gBAA0E,KAA9CV,YAAA,GAAe,CAAA,CAAf,EAAmBU,gBAAnB,GAAsCxB,CAAtC,GAA0C,CAAI,GAAU,CAAV,IAAAuB,MAAA,KAAgBxB,IAAA,KAASsB,GAAIpB,CAAAA,UAAJ,CAAesB,MAAf,CAAT,GAA+C,CAAC,CAAhD,KAAkC,EAAEA,MAApC,KAAsDV,GAAtD,GAA4Db,CAA5D,KAAkEuB,MAAA,GAAS,CAAC,CAAV,EAAaV,GAAb,GAAmBW,gBAArF,CAAhB,CAAA;AAN5E;AAFsC;AAUxC,aAAOF,KAAA,KAAUT,GAAV,GAAgBA,GAAhB,GAAsBW,gBAAtB,GAAiD,CAAC,CAAlD,KAAyCX,GAAzC,KAAwDA,GAAxD,GAA8DzD,KAAMmC,CAAAA,MAApE,CAAA,EAA6EnC,KAAMgC,CAAAA,KAAN,CAAYkC,KAAZ,EAAmBT,GAAnB,CAApF;AAdkE;AAgBpE,SAAKb,CAAL,GAAS5C,KAAMmC,CAAAA,MAAf,GAAwB,CAAxB,EAAgC,CAAhC,IAA2BS,CAA3B,EAAmC,EAAEA,CAArC;AACE,UAA4B,EAA5B,KAAI5C,KAAM6C,CAAAA,UAAN,CAAiBD,CAAjB,CAAJ;AACE,YAAI,CAACc,YAAL,CAAmB;AACjBQ,eAAA,GAAQtB,CAAR,GAAY,CAAZ;AACA;AAFiB;AADrB;AAMU,SAAC,CAAT,KAAAa,GAAA,KAAeC,YAAA,GAAe,CAAA,CAAf,EAAmBD,GAAnB,GAAyBb,CAAzB,GAA6B,CAA5C;AANF;AADF;AAQA,WAAe,CAAC,CAAT,KAAAa,GAAA,GAAa,EAAb,GAAkBzD,KAAMgC,CAAAA,KAAN,CAAYkC,KAAZ,EAAmBT,GAAnB,CAAzB;AA3BmB,GAtJV,EAyLXJ,OAAO,CAACrD,KAAD,CAAQ;AACbD,cAAA,CAAWC,KAAX,CAAA;AAAmBA,SAAA,GAAQI,eAAA,CAAgB,IAAKK,CAAAA,OAAL,CAAaT,KAAb,CAAhB,CAAR;AADN,QAETqE,WAAW,CAAC,CAFH,EAEMC,YAAY,CAFlB,EAEqBb,MAAM,CAAC,CAF5B,EAE+BC,eAAe,CAAA,CAF9C,EAEkDa,cAAc,CAFhE;AAGb,SAAK,IAAI3B,IAAI5C,KAAMmC,CAAAA,MAAVS,GAAmB,CAA5B,EAAoC,CAApC,IAA+BA,CAA/B,EAAuC,EAAEA,CAAzC,CAA4C;AAC1C,YAAMD,OAAO3C,KAAM6C,CAAAA,UAAN,CAAiBD,CAAjB,CAAb;AACA,UAAa,EAAb,KAAID,IAAJ;AACE,YAAI,CAACe,YAAL,CAAmB;AACjBY,mBAAA,GAAY1B,CAAZ,GAAgB,CAAhB;AACA;AAFiB;AADrB;AAOQ,SAAC,CAAuC,KAAhDa,GAAgD,KAAjCC,YAAA,GAAe,CAAA,CAAf,EAAmBD,GAAnB,GAAyBb,CAAzB,GAA6B,CAAI,GAAS,EAAT,KAAAD,IAAA,GAA2B,CAAC,CAAd,KAAA0B,QAAA,GAAkBA,QAAlB,GAA6BzB,CAA7B,GAAiD,CAAjD,KAAiC2B,WAAjC,KAAuDA,WAAvD,GAAqE,CAArE,CAAd,GAAqG,CAAC,CAAtG,KAAwFF,QAAxF,KAA4GE,WAA5G,GAA0H,CAAC,CAA3H,CAAA;AAPhD;AAF0C;AAW5C,WAAoB,CAAC,CAAd,KAAAF,QAAA,IAA2B,CAAC,CAA5B,KAAmBZ,GAAnB,IAAiD,CAAjD,KAAiCc,WAAjC,IAAsE,CAAtE,KAAsDA,WAAtD,IAA2EF,QAA3E,KAAwFZ,GAAxF,GAA8F,CAA9F,IAAmGY,QAAnG,KAAgHC,SAAhH,GAA4H,CAA5H,GAAgI,EAAhI,GAAqItE,KAAMgC,CAAAA,KAAN,CAAYqC,QAAZ,EAAsBZ,GAAtB,CAA5I;AAda,GAzLJ,EA6MXe,KAAK,CAACxE,KAAD,CAAQ;AACXD,cAAA,CAAWC,KAAX,CAAA;AACA,UAAMyE,MAAM,CAAEZ,KAAM,EAAR,EAAYa,IAAK,EAAjB,EAAqBC,KAAM,EAA3B,EAA+BV,IAAK,EAApC,EAAwCW,KAAM,EAA9C,CAAZ;AACA,QAAqB,CAArB,KAAI5E,KAAMmC,CAAAA,MAAV;AACE,aAAOsC,GAAP;AADF;AAEAzE,SAAA,GAAQI,eAAA,CAAgB,IAAKK,CAAAA,OAAL,CAAaT,KAAb,CAAhB,CAAR;AACA,QAAI2C,OAAO3C,KAAM6C,CAAAA,UAAN,CAAiB,CAAjB,CAAX;AACA,UAAMZ,aAAa,IAAKA,CAAAA,UAAL,CAAgBjC,KAAhB,CAAnB;AACA,QAAIkE,KAAJ;AAEAO,OAAIZ,CAAAA,IAAJ,GAAW,IAAK/B,CAAAA,QAAL,CAAc9B,KAAd,CAAX;AAAiCiC,cAAA,IAAc,IAAKf,CAAAA,WAAL,CAAiBlB,KAAjB,CAAd,GAAwCkE,KAAxC,GAAgD,CAAhD,GAAoDA,KAApD,GAA4D,CAA5D;AAVtB,QAWPG,WAAW,CAAC,CAXL,EAWQC,YAAY,CAXpB,EAWuBb,MAAM,CAAC,CAX9B,EAWiCC,eAAe,CAAA,CAXhD,EAWoDd,IAAI5C,KAAMmC,CAAAA,MAAVS,GAAmB,CAXvE,EAW0E2B,cAAc,CAXxF;AAYX,SAAA,EAAO3B,CAAP,IAAYsB,KAAZ,EAAmB,EAAEtB,CAArB;AACE,UAAID,IAAA,GAAO3C,KAAM6C,CAAAA,UAAN,CAAiBD,CAAjB,CAAP,EAAqC,EAArC,KAA4BD,IAAhC;AACE,YAAI,CAACe,YAAL,CAAmB;AACjBY,mBAAA,GAAY1B,CAAZ,GAAgB,CAAhB;AACA;AAFiB;AADrB;AAOQ,SAAC,CAAuC,KAAhDa,GAAgD,KAAjCC,YAAA,GAAe,CAAA,CAAf,EAAmBD,GAAnB,GAAyBb,CAAzB,GAA6B,CAAI,GAAS,EAAT,KAAAD,IAAA,GAA2B,CAAC,CAAd,KAAA0B,QAAA,GAAkBA,QAAlB,GAA6BzB,CAA7B,GAAiD,CAAjD,KAAiC2B,WAAjC,KAAuDA,WAAvD,GAAqE,CAArE,CAAd,GAAqG,CAAC,CAAtG,KAAwFF,QAAxF,KAA4GE,WAA5G,GAA0H,CAAC,CAA3H,CAAA;AAPhD;AADF;AAUA,WAAoB,CAAC,CAAd,KAAAF,QAAA,IAA2B,CAAC,CAA5B,KAAmBZ,GAAnB,IAAiD,CAAjD,KAAiCc,WAAjC,IAAsE,CAAtE,KAAsDA,WAAtD,IAA2EF,QAA3E,KAAwFZ,GAAxF,GAA8F,CAA9F,IAAmGY,QAAnG,KAAgHC,SAAhH,GAA4H,CAA5H,GAAwI,CAAC,CAAzI,KAAgIb,GAAhI,KAA6J,CAAd,KAAAa,SAAA,IAAmBrC,UAAnB,GAAgCwC,GAAIE,CAAAA,IAApC,GAA2CF,GAAIG,CAAAA,IAA/C,GAAsD5E,KAAMgC,CAAAA,KAAN,CAAY,CAAZ,EAAeyB,GAAf,CAAtD,GAA4EgB,GAAIE,CAAAA,IAAhF,GAAuFF,GAAIG,CAAAA,IAA3F,GAAkG5E,KAAMgC,CAAAA,KAAN,CAAYsC,SAAZ,EAAuBb,GAAvB,CAAjP,KAA+R,CAAd,KAAAa,SAAA,IAAmBrC,UAAnB,IAAiCwC,GAAIG,CAAAA,IAAJ,GAAW5E,KAAMgC,CAAAA,KAAN,CAAY,CAAZ,EAAeqC,QAAf,CAAX,EAAqCI,GAAIE,CAAAA,IAAzC,GAAgD3E,KAAMgC,CAAAA,KAAN,CAAY,CAAZ,EAAeyB,GAAf,CAAjF,KAAyGgB,GAAIG,CAAAA,IAAJ,GAAW5E,KAAMgC,CAAAA,KAAN,CAAYsC,SAAZ,EAAuBD,QAAvB,CAAX,EAA6CI,GAAIE,CAAAA,IAAjD,GAAwD3E,KAAMgC,CAAAA,KAAN,CAAYsC,SAAZ,EAAuBb,GAAvB,CAAjK,CAAA,EAA+LgB,GAAIR,CAAAA,GAAnM,GAAyMjE,KAAMgC,CAAAA,KAAN,CAAYqC,QAAZ;AAAsBZ,OAAtB,CAA1d,CAAA,EAAufgB,GAAIC,CAAAA,GAA3f,GAAigB,IAAKnB,CAAAA,OAAL,CAAavD,KAAb,CAAjgB,EAAkkByE,GAAzkB;AAtBW,GA7MF,EAqOXI,IAAK,GArOM,EAsOXC,UAAW,GAtOA,EAuOX3B,eAAgB,CAAC,OAAD,CAvOL,CAAb;AAyOArD,SAAQU,CAAAA,IAAR,GAAeA,IAAf;AA3RqG,CAArG;;",
"sources":["node_modules/@pixi/utils/lib/path.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$utils$lib$path\"] = function(global,require,module,exports) {\n\"use strict\";\nvar settings = require(\"@pixi/settings\");\nfunction assertPath(path2) {\n  if (typeof path2 != \"string\")\n    throw new TypeError(`Path must be a string. Received ${JSON.stringify(path2)}`);\n}\nfunction removeUrlParams(url) {\n  return url.split(\"?\")[0].split(\"#\")[0];\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace);\n}\nfunction normalizeStringPosix(path2, allowAboveRoot) {\n  let res = \"\", lastSegmentLength = 0, lastSlash = -1, dots = 0, code = -1;\n  for (let i = 0; i <= path2.length; ++i) {\n    if (i < path2.length)\n      code = path2.charCodeAt(i);\n    else {\n      if (code === 47)\n        break;\n      code = 47;\n    }\n    if (code === 47) {\n      if (!(lastSlash === i - 1 || dots === 1))\n        if (lastSlash !== i - 1 && dots === 2) {\n          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n            if (res.length > 2) {\n              const lastSlashIndex = res.lastIndexOf(\"/\");\n              if (lastSlashIndex !== res.length - 1) {\n                lastSlashIndex === -1 ? (res = \"\", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\")), lastSlash = i, dots = 0;\n                continue;\n              }\n            } else if (res.length === 2 || res.length === 1) {\n              res = \"\", lastSegmentLength = 0, lastSlash = i, dots = 0;\n              continue;\n            }\n          }\n          allowAboveRoot && (res.length > 0 ? res += \"/..\" : res = \"..\", lastSegmentLength = 2);\n        } else\n          res.length > 0 ? res += `/${path2.slice(lastSlash + 1, i)}` : res = path2.slice(lastSlash + 1, i), lastSegmentLength = i - lastSlash - 1;\n      lastSlash = i, dots = 0;\n    } else\n      code === 46 && dots !== -1 ? ++dots : dots = -1;\n  }\n  return res;\n}\nconst path = {\n  /**\n   * Converts a path to posix format.\n   * @param path - The path to convert to posix\n   */\n  toPosix(path2) {\n    return replaceAll(path2, \"\\\\\", \"/\");\n  },\n  /**\n   * Checks if the path is a URL e.g. http://, https://\n   * @param path - The path to check\n   */\n  isUrl(path2) {\n    return /^https?:/.test(this.toPosix(path2));\n  },\n  /**\n   * Checks if the path is a data URL\n   * @param path - The path to check\n   */\n  isDataUrl(path2) {\n    return /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i.test(path2);\n  },\n  /**\n   * Checks if the path is a blob URL\n   * @param path - The path to check\n   */\n  isBlobUrl(path2) {\n    return path2.startsWith(\"blob:\");\n  },\n  /**\n   * Checks if the path has a protocol e.g. http://, https://, file:///, data:, blob:, C:/\n   * This will return true for windows file paths\n   * @param path - The path to check\n   */\n  hasProtocol(path2) {\n    return /^[^/:]+:/.test(this.toPosix(path2));\n  },\n  /**\n   * Returns the protocol of the path e.g. http://, https://, file:///, data:, blob:, C:/\n   * @param path - The path to get the protocol from\n   */\n  getProtocol(path2) {\n    assertPath(path2), path2 = this.toPosix(path2);\n    const matchFile = /^file:\\/\\/\\//.exec(path2);\n    if (matchFile)\n      return matchFile[0];\n    const matchProtocol = /^[^/:]+:\\/{0,2}/.exec(path2);\n    return matchProtocol ? matchProtocol[0] : \"\";\n  },\n  /**\n   * Converts URL to an absolute path.\n   * When loading from a Web Worker, we must use absolute paths.\n   * If the URL is already absolute we return it as is\n   * If it's not, we convert it\n   * @param url - The URL to test\n   * @param customBaseUrl - The base URL to use\n   * @param customRootUrl - The root URL to use\n   */\n  toAbsolute(url, customBaseUrl, customRootUrl) {\n    if (assertPath(url), this.isDataUrl(url) || this.isBlobUrl(url))\n      return url;\n    const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? settings.settings.ADAPTER.getBaseUrl())), rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n    return url = this.toPosix(url), url.startsWith(\"/\") ? path.join(rootUrl, url.slice(1)) : this.isAbsolute(url) ? url : this.join(baseUrl, url);\n  },\n  /**\n   * Normalizes the given path, resolving '..' and '.' segments\n   * @param path - The path to normalize\n   */\n  normalize(path2) {\n    if (assertPath(path2), path2.length === 0)\n      return \".\";\n    if (this.isDataUrl(path2) || this.isBlobUrl(path2))\n      return path2;\n    path2 = this.toPosix(path2);\n    let protocol = \"\";\n    const isAbsolute = path2.startsWith(\"/\");\n    this.hasProtocol(path2) && (protocol = this.rootname(path2), path2 = path2.slice(protocol.length));\n    const trailingSeparator = path2.endsWith(\"/\");\n    return path2 = normalizeStringPosix(path2, !1), path2.length > 0 && trailingSeparator && (path2 += \"/\"), isAbsolute ? `/${path2}` : protocol + path2;\n  },\n  /**\n   * Determines if path is an absolute path.\n   * Absolute paths can be urls, data urls, or paths on disk\n   * @param path - The path to test\n   */\n  isAbsolute(path2) {\n    return assertPath(path2), path2 = this.toPosix(path2), this.hasProtocol(path2) ? !0 : path2.startsWith(\"/\");\n  },\n  /**\n   * Joins all given path segments together using the platform-specific separator as a delimiter,\n   * then normalizes the resulting path\n   * @param segments - The segments of the path to join\n   */\n  join(...segments) {\n    if (segments.length === 0)\n      return \".\";\n    let joined;\n    for (let i = 0; i < segments.length; ++i) {\n      const arg = segments[i];\n      if (assertPath(arg), arg.length > 0)\n        if (joined === void 0)\n          joined = arg;\n        else {\n          const prevArg = segments[i - 1] ?? \"\";\n          this.joinExtensions.includes(this.extname(prevArg).toLowerCase()) ? joined += `/../${arg}` : joined += `/${arg}`;\n        }\n    }\n    return joined === void 0 ? \".\" : this.normalize(joined);\n  },\n  /**\n   * Returns the directory name of a path\n   * @param path - The path to parse\n   */\n  dirname(path2) {\n    if (assertPath(path2), path2.length === 0)\n      return \".\";\n    path2 = this.toPosix(path2);\n    let code = path2.charCodeAt(0);\n    const hasRoot = code === 47;\n    let end = -1, matchedSlash = !0;\n    const proto = this.getProtocol(path2), origpath = path2;\n    path2 = path2.slice(proto.length);\n    for (let i = path2.length - 1; i >= 1; --i)\n      if (code = path2.charCodeAt(i), code === 47) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else\n        matchedSlash = !1;\n    return end === -1 ? hasRoot ? \"/\" : this.isUrl(origpath) ? proto + path2 : proto : hasRoot && end === 1 ? \"//\" : proto + path2.slice(0, end);\n  },\n  /**\n   * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n   * @param path - The path to parse\n   */\n  rootname(path2) {\n    assertPath(path2), path2 = this.toPosix(path2);\n    let root = \"\";\n    if (path2.startsWith(\"/\") ? root = \"/\" : root = this.getProtocol(path2), this.isUrl(path2)) {\n      const index = path2.indexOf(\"/\", root.length);\n      index !== -1 ? root = path2.slice(0, index) : root = path2, root.endsWith(\"/\") || (root += \"/\");\n    }\n    return root;\n  },\n  /**\n   * Returns the last portion of a path\n   * @param path - The path to test\n   * @param ext - Optional extension to remove\n   */\n  basename(path2, ext) {\n    assertPath(path2), ext && assertPath(ext), path2 = removeUrlParams(this.toPosix(path2));\n    let start = 0, end = -1, matchedSlash = !0, i;\n    if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {\n      if (ext.length === path2.length && ext === path2)\n        return \"\";\n      let extIdx = ext.length - 1, firstNonSlashEnd = -1;\n      for (i = path2.length - 1; i >= 0; --i) {\n        const code = path2.charCodeAt(i);\n        if (code === 47) {\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else\n          firstNonSlashEnd === -1 && (matchedSlash = !1, firstNonSlashEnd = i + 1), extIdx >= 0 && (code === ext.charCodeAt(extIdx) ? --extIdx === -1 && (end = i) : (extIdx = -1, end = firstNonSlashEnd));\n      }\n      return start === end ? end = firstNonSlashEnd : end === -1 && (end = path2.length), path2.slice(start, end);\n    }\n    for (i = path2.length - 1; i >= 0; --i)\n      if (path2.charCodeAt(i) === 47) {\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else\n        end === -1 && (matchedSlash = !1, end = i + 1);\n    return end === -1 ? \"\" : path2.slice(start, end);\n  },\n  /**\n   * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n   * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n   * the first character of the basename of path, an empty string is returned.\n   * @param path - The path to parse\n   */\n  extname(path2) {\n    assertPath(path2), path2 = removeUrlParams(this.toPosix(path2));\n    let startDot = -1, startPart = 0, end = -1, matchedSlash = !0, preDotState = 0;\n    for (let i = path2.length - 1; i >= 0; --i) {\n      const code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      end === -1 && (matchedSlash = !1, end = i + 1), code === 46 ? startDot === -1 ? startDot = i : preDotState !== 1 && (preDotState = 1) : startDot !== -1 && (preDotState = -1);\n    }\n    return startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1 ? \"\" : path2.slice(startDot, end);\n  },\n  /**\n   * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n   * @param path - The path to parse\n   */\n  parse(path2) {\n    assertPath(path2);\n    const ret = { root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\" };\n    if (path2.length === 0)\n      return ret;\n    path2 = removeUrlParams(this.toPosix(path2));\n    let code = path2.charCodeAt(0);\n    const isAbsolute = this.isAbsolute(path2);\n    let start;\n    const protocol = \"\";\n    ret.root = this.rootname(path2), isAbsolute || this.hasProtocol(path2) ? start = 1 : start = 0;\n    let startDot = -1, startPart = 0, end = -1, matchedSlash = !0, i = path2.length - 1, preDotState = 0;\n    for (; i >= start; --i) {\n      if (code = path2.charCodeAt(i), code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      end === -1 && (matchedSlash = !1, end = i + 1), code === 46 ? startDot === -1 ? startDot = i : preDotState !== 1 && (preDotState = 1) : startDot !== -1 && (preDotState = -1);\n    }\n    return startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1 ? end !== -1 && (startPart === 0 && isAbsolute ? ret.base = ret.name = path2.slice(1, end) : ret.base = ret.name = path2.slice(startPart, end)) : (startPart === 0 && isAbsolute ? (ret.name = path2.slice(1, startDot), ret.base = path2.slice(1, end)) : (ret.name = path2.slice(startPart, startDot), ret.base = path2.slice(startPart, end)), ret.ext = path2.slice(startDot, end)), ret.dir = this.dirname(path2), protocol && (ret.dir = protocol + ret.dir), ret;\n  },\n  sep: \"/\",\n  delimiter: \":\",\n  joinExtensions: [\".html\"]\n};\nexports.path = path;\n//# sourceMappingURL=path.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","assertPath","path2","TypeError","JSON","stringify","removeUrlParams","url","split","settings","path","toPosix","replace","RegExp","find","isUrl","test","isDataUrl","isBlobUrl","startsWith","hasProtocol","getProtocol","matchFile","exec","matchProtocol","toAbsolute","customBaseUrl","customRootUrl","baseUrl","ADAPTER","getBaseUrl","rootUrl","rootname","join","slice","isAbsolute","normalize","length","protocol","trailingSeparator","endsWith","res","lastSegmentLength","lastSlash","dots","code","i","charCodeAt","lastSlashIndex","lastIndexOf","segments","joined","arg","joinExtensions","includes","extname","toLowerCase","dirname","hasRoot","end","matchedSlash","proto","origpath","root","index","indexOf","basename","ext","start","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","parse","ret","dir","base","name","sep","delimiter"]
}
