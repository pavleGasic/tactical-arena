{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$Mesh.js",
"lineCount":97,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh/shared/Mesh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh$shared$Mesh\"] = function(global,require,module,exports) {\n'use strict';\n\nvar pointInTriangle = require('../../../maths/point/pointInTriangle.js');\nvar Geometry = require('../../../rendering/renderers/shared/geometry/Geometry.js');\nvar State = require('../../../rendering/renderers/shared/state/State.js');\nvar Texture = require('../../../rendering/renderers/shared/texture/Texture.js');\nvar deprecation = require('../../../utils/logging/deprecation.js');\nvar ViewContainer = require('../../view/ViewContainer.js');\nvar MeshGeometry = require('./MeshGeometry.js');\n\n\"use strict\";\nclass Mesh extends ViewContainer.ViewContainer {\n  constructor(...args) {\n    let options = args[0];\n    if (options instanceof Geometry.Geometry) {\n      deprecation.deprecation(deprecation.v8_0_0, \"Mesh: use new Mesh({ geometry, shader }) instead\");\n      options = {\n        geometry: options,\n        shader: args[1]\n      };\n      if (args[3]) {\n        deprecation.deprecation(deprecation.v8_0_0, \"Mesh: drawMode argument has been removed, use geometry.topology instead\");\n        options.geometry.topology = args[3];\n      }\n    }\n    const { geometry, shader, texture, roundPixels, state, ...rest } = options;\n    super({\n      label: \"Mesh\",\n      ...rest\n    });\n    this.renderPipeId = \"mesh\";\n    /** @ignore */\n    this._shader = null;\n    this.allowChildren = false;\n    this.shader = shader ?? null;\n    this.texture = texture ?? shader?.texture ?? Texture.Texture.WHITE;\n    this.state = state ?? State.State.for2d();\n    this._geometry = geometry;\n    this._geometry.on(\"update\", this.onViewUpdate, this);\n    this.roundPixels = roundPixels ?? false;\n  }\n  /** Alias for {@link scene.Mesh#shader}. */\n  get material() {\n    deprecation.deprecation(deprecation.v8_0_0, \"mesh.material property has been removed, use mesh.shader instead\");\n    return this._shader;\n  }\n  /**\n   * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n   * Can be shared between multiple Mesh objects.\n   */\n  set shader(value) {\n    if (this._shader === value)\n      return;\n    this._shader = value;\n    this.onViewUpdate();\n  }\n  get shader() {\n    return this._shader;\n  }\n  /**\n   * Includes vertex positions, face indices, colors, UVs, and\n   * custom attributes within buffers, reducing the cost of passing all\n   * this data to the GPU. Can be shared between multiple Mesh objects.\n   */\n  set geometry(value) {\n    if (this._geometry === value)\n      return;\n    this._geometry?.off(\"update\", this.onViewUpdate, this);\n    value.on(\"update\", this.onViewUpdate, this);\n    this._geometry = value;\n    this.onViewUpdate();\n  }\n  get geometry() {\n    return this._geometry;\n  }\n  /** The texture that the Mesh uses. Null for non-MeshMaterial shaders */\n  set texture(value) {\n    value || (value = Texture.Texture.EMPTY);\n    const currentTexture = this._texture;\n    if (currentTexture === value)\n      return;\n    if (currentTexture && currentTexture.dynamic)\n      currentTexture.off(\"update\", this.onViewUpdate, this);\n    if (value.dynamic)\n      value.on(\"update\", this.onViewUpdate, this);\n    if (this.shader) {\n      this.shader.texture = value;\n    }\n    this._texture = value;\n    this.onViewUpdate();\n  }\n  get texture() {\n    return this._texture;\n  }\n  get batched() {\n    if (this._shader)\n      return false;\n    if ((this.state.data & 12) !== 0)\n      return false;\n    if (this._geometry instanceof MeshGeometry.MeshGeometry) {\n      if (this._geometry.batchMode === \"auto\") {\n        return this._geometry.positions.length / 2 <= 100;\n      }\n      return this._geometry.batchMode === \"batch\";\n    }\n    return false;\n  }\n  /**\n   * The local bounds of the mesh.\n   * @type {rendering.Bounds}\n   */\n  get bounds() {\n    return this._geometry.bounds;\n  }\n  /**\n   * Update local bounds of the mesh.\n   * @private\n   */\n  updateBounds() {\n    this._bounds = this._geometry.bounds;\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    const { x, y } = point;\n    if (!this.bounds.containsPoint(x, y))\n      return false;\n    const vertices = this.geometry.getBuffer(\"aPosition\").data;\n    const step = this.geometry.topology === \"triangle-strip\" ? 3 : 1;\n    if (this.geometry.getIndex()) {\n      const indices = this.geometry.getIndex().data;\n      const len = indices.length;\n      for (let i = 0; i + 2 < len; i += step) {\n        const ind0 = indices[i] * 2;\n        const ind1 = indices[i + 1] * 2;\n        const ind2 = indices[i + 2] * 2;\n        if (pointInTriangle.pointInTriangle(\n          x,\n          y,\n          vertices[ind0],\n          vertices[ind0 + 1],\n          vertices[ind1],\n          vertices[ind1 + 1],\n          vertices[ind2],\n          vertices[ind2 + 1]\n        )) {\n          return true;\n        }\n      }\n    } else {\n      const len = vertices.length / 2;\n      for (let i = 0; i + 2 < len; i += step) {\n        const ind0 = i * 2;\n        const ind1 = (i + 1) * 2;\n        const ind2 = (i + 2) * 2;\n        if (pointInTriangle.pointInTriangle(\n          x,\n          y,\n          vertices[ind0],\n          vertices[ind0 + 1],\n          vertices[ind1],\n          vertices[ind1 + 1],\n          vertices[ind2],\n          vertices[ind2 + 1]\n        )) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options) {\n    super.destroy(options);\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      this._texture.destroy(destroyTextureSource);\n    }\n    this._geometry?.off(\"update\", this.onViewUpdate, this);\n    this._texture = null;\n    this._geometry = null;\n    this._shader = null;\n  }\n}\n\nexports.Mesh = Mesh;\n//# sourceMappingURL=Mesh.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","pointInTriangle","Geometry","State","Texture","deprecation","ViewContainer","MeshGeometry","Mesh","constructor","args","options","v8_0_0","geometry","shader","topology","texture","roundPixels","state","rest","label","renderPipeId","_shader","allowChildren","WHITE","for2d","_geometry","on","onViewUpdate","value","off","EMPTY","currentTexture","_texture","dynamic","data","batchMode","positions","length","bounds","updateBounds","_bounds","containsPoint","point","x","y","vertices","getBuffer","step","getIndex","indices","len","i","ind0","ind1","ind2","destroy","destroyTexture","destroyTextureSource","textureSource"]
}
