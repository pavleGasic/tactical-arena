{
"version":3,
"file":"module$node_modules$$pixi$core$lib$textures$TextureSystem.js",
"lineCount":137,
"mappings":"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",
"sources":["node_modules/@pixi/core/lib/textures/TextureSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$core$lib$textures$TextureSystem\"] = function(global,require,module,exports) {\n\"use strict\";\nvar constants = require(\"@pixi/constants\"), extensions = require(\"@pixi/extensions\"), utils = require(\"@pixi/utils\"), BaseTexture = require(\"./BaseTexture.js\"), GLTexture = require(\"./GLTexture.js\"), mapInternalFormatToSamplerType = require(\"./utils/mapInternalFormatToSamplerType.js\"), mapTypeAndFormatToInternalFormat = require(\"./utils/mapTypeAndFormatToInternalFormat.js\");\nclass TextureSystem {\n  /**\n   * @param renderer - The renderer this system works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.boundTextures = [], this.currentLocation = -1, this.managedTextures = [], this._unknownBoundTextures = !1, this.unknownTexture = new BaseTexture.BaseTexture(), this.hasIntegerTextures = !1;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    const gl = this.gl = this.renderer.gl;\n    this.CONTEXT_UID = this.renderer.CONTEXT_UID, this.webGLVersion = this.renderer.context.webGLVersion, this.internalFormats = mapTypeAndFormatToInternalFormat.mapTypeAndFormatToInternalFormat(gl), this.samplerTypes = mapInternalFormatToSamplerType.mapInternalFormatToSamplerType(gl);\n    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    this.boundTextures.length = maxTextures;\n    for (let i = 0; i < maxTextures; i++)\n      this.boundTextures[i] = null;\n    this.emptyTextures = {};\n    const emptyTexture2D = new GLTexture.GLTexture(gl.createTexture());\n    gl.bindTexture(gl.TEXTURE_2D, emptyTexture2D.texture), gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4)), this.emptyTextures[gl.TEXTURE_2D] = emptyTexture2D, this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new GLTexture.GLTexture(gl.createTexture()), gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);\n    for (let i = 0; i < 6; i++)\n      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR), gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    for (let i = 0; i < this.boundTextures.length; i++)\n      this.bind(null, i);\n  }\n  /**\n   * Bind a texture to a specific location\n   *\n   * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`\n   * @param texture - Texture to bind\n   * @param [location=0] - Location to bind at\n   */\n  bind(texture, location = 0) {\n    const { gl } = this;\n    if (texture = texture?.castToBaseTexture(), texture?.valid && !texture.parentTextureArray) {\n      texture.touched = this.renderer.textureGC.count;\n      const glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);\n      this.boundTextures[location] !== texture && (this.currentLocation !== location && (this.currentLocation = location, gl.activeTexture(gl.TEXTURE0 + location)), gl.bindTexture(texture.target, glTexture.texture)), glTexture.dirtyId !== texture.dirtyId ? (this.currentLocation !== location && (this.currentLocation = location, gl.activeTexture(gl.TEXTURE0 + location)), this.updateTexture(texture)) : glTexture.dirtyStyleId !== texture.dirtyStyleId && this.updateTextureStyle(texture), this.boundTextures[location] = texture;\n    } else\n      this.currentLocation !== location && (this.currentLocation = location, gl.activeTexture(gl.TEXTURE0 + location)), gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture), this.boundTextures[location] = null;\n  }\n  /** Resets texture location and bound textures Actual `bind(null, i)` calls will be performed at next `unbind()` call */\n  reset() {\n    this._unknownBoundTextures = !0, this.hasIntegerTextures = !1, this.currentLocation = -1;\n    for (let i = 0; i < this.boundTextures.length; i++)\n      this.boundTextures[i] = this.unknownTexture;\n  }\n  /**\n   * Unbind a texture.\n   * @param texture - Texture to bind\n   */\n  unbind(texture) {\n    const { gl, boundTextures } = this;\n    if (this._unknownBoundTextures) {\n      this._unknownBoundTextures = !1;\n      for (let i = 0; i < boundTextures.length; i++)\n        boundTextures[i] === this.unknownTexture && this.bind(null, i);\n    }\n    for (let i = 0; i < boundTextures.length; i++)\n      boundTextures[i] === texture && (this.currentLocation !== i && (gl.activeTexture(gl.TEXTURE0 + i), this.currentLocation = i), gl.bindTexture(texture.target, this.emptyTextures[texture.target].texture), boundTextures[i] = null);\n  }\n  /**\n   * Ensures that current boundTextures all have FLOAT sampler type,\n   * see {@link PIXI.SAMPLER_TYPES} for explanation.\n   * @param maxTextures - number of locations to check\n   */\n  ensureSamplerType(maxTextures) {\n    const { boundTextures, hasIntegerTextures, CONTEXT_UID } = this;\n    if (hasIntegerTextures)\n      for (let i = maxTextures - 1; i >= 0; --i) {\n        const tex = boundTextures[i];\n        tex && tex._glTextures[CONTEXT_UID].samplerType !== constants.SAMPLER_TYPES.FLOAT && this.renderer.texture.unbind(tex);\n      }\n  }\n  /**\n   * Initialize a texture\n   * @private\n   * @param texture - Texture to initialize\n   */\n  initTexture(texture) {\n    const glTexture = new GLTexture.GLTexture(this.gl.createTexture());\n    return glTexture.dirtyId = -1, texture._glTextures[this.CONTEXT_UID] = glTexture, this.managedTextures.push(texture), texture.on(\"dispose\", this.destroyTexture, this), glTexture;\n  }\n  initTextureType(texture, glTexture) {\n    glTexture.internalFormat = this.internalFormats[texture.type]?.[texture.format] ?? texture.format, glTexture.samplerType = this.samplerTypes[glTexture.internalFormat] ?? constants.SAMPLER_TYPES.FLOAT, this.webGLVersion === 2 && texture.type === constants.TYPES.HALF_FLOAT ? glTexture.type = this.gl.HALF_FLOAT : glTexture.type = texture.type;\n  }\n  /**\n   * Update a texture\n   * @private\n   * @param {PIXI.BaseTexture} texture - Texture to initialize\n   */\n  updateTexture(texture) {\n    const glTexture = texture._glTextures[this.CONTEXT_UID];\n    if (!glTexture)\n      return;\n    const renderer = this.renderer;\n    if (this.initTextureType(texture, glTexture), texture.resource?.upload(renderer, texture, glTexture))\n      glTexture.samplerType !== constants.SAMPLER_TYPES.FLOAT && (this.hasIntegerTextures = !0);\n    else {\n      const width = texture.realWidth, height = texture.realHeight, gl = renderer.gl;\n      (glTexture.width !== width || glTexture.height !== height || glTexture.dirtyId < 0) && (glTexture.width = width, glTexture.height = height, gl.texImage2D(\n        texture.target,\n        0,\n        glTexture.internalFormat,\n        width,\n        height,\n        0,\n        texture.format,\n        glTexture.type,\n        null\n      ));\n    }\n    texture.dirtyStyleId !== glTexture.dirtyStyleId && this.updateTextureStyle(texture), glTexture.dirtyId = texture.dirtyId;\n  }\n  /**\n   * Deletes the texture from WebGL\n   * @private\n   * @param texture - the texture to destroy\n   * @param [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n   */\n  destroyTexture(texture, skipRemove) {\n    const { gl } = this;\n    if (texture = texture.castToBaseTexture(), texture._glTextures[this.CONTEXT_UID] && (this.unbind(texture), gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture), texture.off(\"dispose\", this.destroyTexture, this), delete texture._glTextures[this.CONTEXT_UID], !skipRemove)) {\n      const i = this.managedTextures.indexOf(texture);\n      i !== -1 && utils.removeItems(this.managedTextures, i, 1);\n    }\n  }\n  /**\n   * Update texture style such as mipmap flag\n   * @private\n   * @param {PIXI.BaseTexture} texture - Texture to update\n   */\n  updateTextureStyle(texture) {\n    const glTexture = texture._glTextures[this.CONTEXT_UID];\n    glTexture && ((texture.mipmap === constants.MIPMAP_MODES.POW2 || this.webGLVersion !== 2) && !texture.isPowerOfTwo ? glTexture.mipmap = !1 : glTexture.mipmap = texture.mipmap >= 1, this.webGLVersion !== 2 && !texture.isPowerOfTwo ? glTexture.wrapMode = constants.WRAP_MODES.CLAMP : glTexture.wrapMode = texture.wrapMode, texture.resource?.style(this.renderer, texture, glTexture) || this.setStyle(texture, glTexture), glTexture.dirtyStyleId = texture.dirtyStyleId);\n  }\n  /**\n   * Set style for texture\n   * @private\n   * @param texture - Texture to update\n   * @param glTexture\n   */\n  setStyle(texture, glTexture) {\n    const gl = this.gl;\n    if (glTexture.mipmap && texture.mipmap !== constants.MIPMAP_MODES.ON_MANUAL && gl.generateMipmap(texture.target), gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, glTexture.wrapMode), gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, glTexture.wrapMode), glTexture.mipmap) {\n      gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === constants.SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n      const anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;\n      if (anisotropicExt && texture.anisotropicLevel > 0 && texture.scaleMode === constants.SCALE_MODES.LINEAR) {\n        const level = Math.min(texture.anisotropicLevel, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n        gl.texParameterf(texture.target, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n      }\n    } else\n      gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === constants.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode === constants.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nTextureSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"texture\"\n};\nextensions.extensions.add(TextureSystem);\nexports.TextureSystem = TextureSystem;\n//# sourceMappingURL=TextureSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","constants","extensions","utils","BaseTexture","GLTexture","mapInternalFormatToSamplerType","mapTypeAndFormatToInternalFormat","TextureSystem","constructor","renderer","boundTextures","currentLocation","managedTextures","_unknownBoundTextures","unknownTexture","hasIntegerTextures","contextChange","gl","CONTEXT_UID","webGLVersion","context","internalFormats","samplerTypes","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","length","i","emptyTextures","emptyTexture2D","createTexture","bindTexture","TEXTURE_2D","texture","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","bind","location","castToBaseTexture","valid","parentTextureArray","touched","textureGC","count","glTexture","_glTextures","initTexture","activeTexture","TEXTURE0","target","dirtyId","updateTexture","dirtyStyleId","updateTextureStyle","reset","unbind","ensureSamplerType","tex","samplerType","SAMPLER_TYPES","FLOAT","push","on","destroyTexture","initTextureType","internalFormat","type","format","TYPES","HALF_FLOAT","resource","upload","width","realWidth","height","realHeight","skipRemove","deleteTexture","off","indexOf","removeItems","mipmap","MIPMAP_MODES","POW2","isPowerOfTwo","wrapMode","WRAP_MODES","CLAMP","style","setStyle","ON_MANUAL","generateMipmap","TEXTURE_WRAP_S","TEXTURE_WRAP_T","scaleMode","SCALE_MODES","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","anisotropicExt","anisotropicFiltering","anisotropicLevel","level","Math","min","MAX_TEXTURE_MAX_ANISOTROPY_EXT","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","NEAREST","destroy","extension","ExtensionType","RendererSystem","name","add"]
}
