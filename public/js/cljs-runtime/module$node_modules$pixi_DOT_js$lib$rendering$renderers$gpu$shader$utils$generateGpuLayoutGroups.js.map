{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$generateGpuLayoutGroups.js",
"lineCount":14,
"mappings":"AAAAA,cAAA,CAAA,gGAAA,GAAqH,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG7J,MAAIC,SAASH,OAAA,CAAQ,6EAAR,CAAb;AAEA,cAAA;AAuCAE,SAAQE,CAAAA,uBAAR,GAtCAA,QAAgC,CAAC,CAAEC,MAAF,CAAD,CAAa;AAC3C,UAAMC,SAAS,EAAf;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBF,MAAOG,CAAAA,MAA3B,EAAmCD,CAAA,EAAnC,CAAwC;AACtC,YAAME,QAAQJ,MAAA,CAAOE,CAAP,CAAd;AACKD,YAAA,CAAOG,KAAMA,CAAAA,KAAb,CAAL,KACEH,MAAA,CAAOG,KAAMA,CAAAA,KAAb,CADF,GACwB,EADxB;AAGIA,WAAMC,CAAAA,SAAV,GACEJ,MAAA,CAAOG,KAAMA,CAAAA,KAAb,CAAoBE,CAAAA,IAApB,CAAyB,CACvBC,QAASH,KAAMG,CAAAA,OADQ,EAEvBC,WAAYV,MAAOW,CAAAA,WAAYC,CAAAA,MAA/BF,GAAwCV,MAAOW,CAAAA,WAAYE,CAAAA,QAFpC,EAGvBC,OAAQ,CACNC,KAAM,SADA,CAHe,CAAzB,CADF,GAQ0B,SAAnB,KAAIT,KAAMS,CAAAA,IAAV,GACLZ,MAAA,CAAOG,KAAMA,CAAAA,KAAb,CAAoBE,CAAAA,IAApB,CAAyB,CACvBC,QAASH,KAAMG,CAAAA,OADQ,EAEvBC,WAAYV,MAAOW,CAAAA,WAAYE,CAAAA,QAFR,EAGvBG,QAAS,CACPD,KAAM,WADC,CAHc,CAAzB,CADK,GAQmB,YARnB,KAQIT,KAAMS,CAAAA,IARV,IASLZ,MAAA,CAAOG,KAAMA,CAAAA,KAAb,CAAoBE,CAAAA,IAApB,CAAyB,CACvBC,QAASH,KAAMG,CAAAA,OADQ,EAEvBC,WAAYV,MAAOW,CAAAA,WAAYE,CAAAA,QAFR,EAGvBI,QAAS,CACPC,WAAY,OADL,EAEPC,cAAe,IAFR,EAGPC,aAAc,CAAA,CAHP,CAHc,CAAzB,CAjBF;AALsC;AAiCxC,WAAOjB,MAAP;AAnC2C,GAsC7C;AA5C6J,CAA7J;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$gpu$shader$utils$generateGpuLayoutGroups\"] = function(global,require,module,exports) {\n'use strict';\n\nvar _const = require('../../../shared/shader/const.js');\n\n\"use strict\";\nfunction generateGpuLayoutGroups({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = [];\n    }\n    if (group.isUniform) {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: _const.ShaderStage.VERTEX | _const.ShaderStage.FRAGMENT,\n        buffer: {\n          type: \"uniform\"\n        }\n      });\n    } else if (group.type === \"sampler\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: _const.ShaderStage.FRAGMENT,\n        sampler: {\n          type: \"filtering\"\n        }\n      });\n    } else if (group.type === \"texture_2d\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: _const.ShaderStage.FRAGMENT,\n        texture: {\n          sampleType: \"float\",\n          viewDimension: \"2d\",\n          multisampled: false\n        }\n      });\n    }\n  }\n  return layout;\n}\n\nexports.generateGpuLayoutGroups = generateGpuLayoutGroups;\n//# sourceMappingURL=generateGpuLayoutGroups.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_const","generateGpuLayoutGroups","groups","layout","i","length","group","isUniform","push","binding","visibility","ShaderStage","VERTEX","FRAGMENT","buffer","type","sampler","texture","sampleType","viewDimension","multisampled"]
}
