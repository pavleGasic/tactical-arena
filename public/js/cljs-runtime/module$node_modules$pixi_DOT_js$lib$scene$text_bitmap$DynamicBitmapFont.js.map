{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$DynamicBitmapFont.js",
"lineCount":129,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/text-bitmap/DynamicBitmapFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$text_bitmap$DynamicBitmapFont\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Color = require('../../color/Color.js');\nvar Rectangle = require('../../maths/shapes/Rectangle.js');\nvar CanvasPool = require('../../rendering/renderers/shared/texture/CanvasPool.js');\nvar ImageSource = require('../../rendering/renderers/shared/texture/sources/ImageSource.js');\nvar Texture = require('../../rendering/renderers/shared/texture/Texture.js');\nvar deprecation = require('../../utils/logging/deprecation.js');\nvar CanvasTextMetrics = require('../text/canvas/CanvasTextMetrics.js');\nvar fontStringFromTextStyle = require('../text/canvas/utils/fontStringFromTextStyle.js');\nvar getCanvasFillStyle = require('../text/canvas/utils/getCanvasFillStyle.js');\nvar TextStyle = require('../text/TextStyle.js');\nvar AbstractBitmapFont = require('./AbstractBitmapFont.js');\nvar resolveCharacters = require('./utils/resolveCharacters.js');\n\n\"use strict\";\nconst _DynamicBitmapFont = class _DynamicBitmapFont extends AbstractBitmapFont.AbstractBitmapFont {\n  /**\n   * @param options - The options for the dynamic bitmap font.\n   */\n  constructor(options) {\n    super();\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    this.resolution = 1;\n    /** The pages of the font. */\n    this.pages = [];\n    this._padding = 0;\n    this._measureCache = /* @__PURE__ */ Object.create(null);\n    this._currentChars = [];\n    this._currentX = 0;\n    this._currentY = 0;\n    this._currentPageIndex = -1;\n    this._skipKerning = false;\n    const dynamicOptions = { ..._DynamicBitmapFont.defaultOptions, ...options };\n    this._textureSize = dynamicOptions.textureSize;\n    this._mipmap = dynamicOptions.mipmap;\n    const style = dynamicOptions.style.clone();\n    if (dynamicOptions.overrideFill) {\n      style._fill.color = 16777215;\n      style._fill.alpha = 1;\n      style._fill.texture = Texture.Texture.WHITE;\n      style._fill.fill = null;\n    }\n    this.applyFillAsTint = dynamicOptions.overrideFill;\n    const requestedFontSize = style.fontSize;\n    style.fontSize = this.baseMeasurementFontSize;\n    const font = fontStringFromTextStyle.fontStringFromTextStyle(style);\n    if (dynamicOptions.overrideSize) {\n      if (style._stroke) {\n        style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n      }\n    } else {\n      style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n    }\n    this._style = style;\n    this._skipKerning = dynamicOptions.skipKerning ?? false;\n    this.resolution = dynamicOptions.resolution ?? 1;\n    this._padding = dynamicOptions.padding ?? 4;\n    this.fontMetrics = CanvasTextMetrics.CanvasTextMetrics.measureFont(font);\n    this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n  }\n  ensureCharacters(chars) {\n    const charList = resolveCharacters.resolveCharacters(chars).filter((char) => !this._currentChars.includes(char)).filter((char, index, self) => self.indexOf(char) === index);\n    if (!charList.length)\n      return;\n    this._currentChars = [...this._currentChars, ...charList];\n    let pageData;\n    if (this._currentPageIndex === -1) {\n      pageData = this._nextPage();\n    } else {\n      pageData = this.pages[this._currentPageIndex];\n    }\n    let { canvas, context } = pageData.canvasAndContext;\n    let textureSource = pageData.texture.source;\n    const style = this._style;\n    let currentX = this._currentX;\n    let currentY = this._currentY;\n    const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n    const padding = this._padding * fontScale;\n    let maxCharHeight = 0;\n    let skipTexture = false;\n    const maxTextureWidth = canvas.width / this.resolution;\n    const maxTextureHeight = canvas.height / this.resolution;\n    for (let i = 0; i < charList.length; i++) {\n      const char = charList[i];\n      const metrics = CanvasTextMetrics.CanvasTextMetrics.measureText(char, style, canvas, false);\n      metrics.lineHeight = metrics.height;\n      const width = metrics.width * fontScale;\n      const textureGlyphWidth = Math.ceil((style.fontStyle === \"italic\" ? 2 : 1) * width);\n      const height = metrics.height * fontScale;\n      const paddedWidth = textureGlyphWidth + padding * 2;\n      const paddedHeight = height + padding * 2;\n      skipTexture = false;\n      if (char !== \"\\n\" && char !== \"\\r\" && char !== \"\t\" && char !== \" \") {\n        skipTexture = true;\n        maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));\n      }\n      if (currentX + paddedWidth > maxTextureWidth) {\n        currentY += maxCharHeight;\n        maxCharHeight = paddedHeight;\n        currentX = 0;\n        if (currentY + maxCharHeight > maxTextureHeight) {\n          textureSource.update();\n          const pageData2 = this._nextPage();\n          canvas = pageData2.canvasAndContext.canvas;\n          context = pageData2.canvasAndContext.context;\n          textureSource = pageData2.texture.source;\n          currentY = 0;\n        }\n      }\n      const xAdvance = width / fontScale - (style.dropShadow?.distance ?? 0) - (style._stroke?.width ?? 0);\n      this.chars[char] = {\n        id: char.codePointAt(0),\n        xOffset: -this._padding,\n        yOffset: -this._padding,\n        xAdvance,\n        kerning: {}\n      };\n      if (skipTexture) {\n        this._drawGlyph(\n          context,\n          metrics,\n          currentX + padding,\n          currentY + padding,\n          fontScale,\n          style\n        );\n        const px = textureSource.width * fontScale;\n        const py = textureSource.height * fontScale;\n        const frame = new Rectangle.Rectangle(\n          currentX / px * textureSource.width,\n          currentY / py * textureSource.height,\n          paddedWidth / px * textureSource.width,\n          paddedHeight / py * textureSource.height\n        );\n        this.chars[char].texture = new Texture.Texture({\n          source: textureSource,\n          frame\n        });\n        currentX += Math.ceil(paddedWidth);\n      }\n    }\n    textureSource.update();\n    this._currentX = currentX;\n    this._currentY = currentY;\n    this._skipKerning && this._applyKerning(charList, context);\n  }\n  /**\n   * @deprecated since 8.0.0\n   * The map of base page textures (i.e., sheets of glyphs).\n   */\n  get pageTextures() {\n    deprecation.deprecation(deprecation.v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  _applyKerning(newChars, context) {\n    const measureCache = this._measureCache;\n    for (let i = 0; i < newChars.length; i++) {\n      const first = newChars[i];\n      for (let j = 0; j < this._currentChars.length; j++) {\n        const second = this._currentChars[j];\n        let c1 = measureCache[first];\n        if (!c1)\n          c1 = measureCache[first] = context.measureText(first).width;\n        let c2 = measureCache[second];\n        if (!c2)\n          c2 = measureCache[second] = context.measureText(second).width;\n        let total = context.measureText(first + second).width;\n        let amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[first].kerning[second] = amount;\n        }\n        total = context.measureText(first + second).width;\n        amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[second].kerning[first] = amount;\n        }\n      }\n    }\n  }\n  _nextPage() {\n    this._currentPageIndex++;\n    const textureResolution = this.resolution;\n    const canvasAndContext = CanvasPool.CanvasPool.getOptimalCanvasAndContext(\n      this._textureSize,\n      this._textureSize,\n      textureResolution\n    );\n    this._setupContext(canvasAndContext.context, this._style, textureResolution);\n    const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n    const texture = new Texture.Texture({\n      source: new ImageSource.ImageSource({\n        resource: canvasAndContext.canvas,\n        resolution,\n        alphaMode: \"premultiply-alpha-on-upload\",\n        autoGenerateMipmaps: this._mipmap\n      })\n    });\n    const pageData = {\n      canvasAndContext,\n      texture\n    };\n    this.pages[this._currentPageIndex] = pageData;\n    return pageData;\n  }\n  // canvas style!\n  _setupContext(context, style, resolution) {\n    style.fontSize = this.baseRenderedFontSize;\n    context.scale(resolution, resolution);\n    context.font = fontStringFromTextStyle.fontStringFromTextStyle(style);\n    style.fontSize = this.baseMeasurementFontSize;\n    context.textBaseline = style.textBaseline;\n    const stroke = style._stroke;\n    const strokeThickness = stroke?.width ?? 0;\n    if (stroke) {\n      context.lineWidth = strokeThickness;\n      context.lineJoin = stroke.join;\n      context.miterLimit = stroke.miterLimit;\n      context.strokeStyle = getCanvasFillStyle.getCanvasFillStyle(stroke, context);\n    }\n    if (style._fill) {\n      context.fillStyle = getCanvasFillStyle.getCanvasFillStyle(style._fill, context);\n    }\n    if (style.dropShadow) {\n      const shadowOptions = style.dropShadow;\n      const rgb = Color.Color.shared.setValue(shadowOptions.color).toArray();\n      const dropShadowBlur = shadowOptions.blur * resolution;\n      const dropShadowDistance = shadowOptions.distance * resolution;\n      context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n      context.shadowBlur = dropShadowBlur;\n      context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n      context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n    } else {\n      context.shadowColor = \"black\";\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n  }\n  _drawGlyph(context, metrics, x, y, fontScale, style) {\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n    const stroke = style._stroke;\n    const strokeThickness = (stroke?.width ?? 0) * fontScale;\n    const tx = x + strokeThickness / 2;\n    const ty = y - strokeThickness / 2;\n    const descent = fontProperties.descent * fontScale;\n    const lineHeight = metrics.lineHeight * fontScale;\n    if (style.stroke && strokeThickness) {\n      context.strokeText(char, tx, ty + lineHeight - descent);\n    }\n    if (style._fill) {\n      context.fillText(char, tx, ty + lineHeight - descent);\n    }\n  }\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { canvasAndContext, texture } = this.pages[i];\n      CanvasPool.CanvasPool.returnCanvasAndContext(canvasAndContext);\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n};\n_DynamicBitmapFont.defaultOptions = {\n  textureSize: 512,\n  style: new TextStyle.TextStyle(),\n  mipmap: true\n};\nlet DynamicBitmapFont = _DynamicBitmapFont;\n\nexports.DynamicBitmapFont = DynamicBitmapFont;\n//# sourceMappingURL=DynamicBitmapFont.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","Rectangle","CanvasPool","ImageSource","Texture","deprecation","CanvasTextMetrics","fontStringFromTextStyle","getCanvasFillStyle","TextStyle","AbstractBitmapFont","resolveCharacters","constructor","options","resolution","pages","_padding","_measureCache","Object","create","_currentChars","_currentY","_currentX","_currentPageIndex","_skipKerning","dynamicOptions","_DynamicBitmapFont","defaultOptions","_textureSize","textureSize","_mipmap","mipmap","style","clone","overrideFill","_fill","color","alpha","texture","WHITE","fill","applyFillAsTint","requestedFontSize","fontSize","baseMeasurementFontSize","font","overrideSize","_stroke","width","baseRenderedFontSize","_style","skipKerning","padding","fontMetrics","measureFont","lineHeight","ensureCharacters","chars","charList","filter","char","includes","index","self","indexOf","length","pageData","_nextPage","canvas","context","canvasAndContext","textureSource","source","currentX","currentY","fontScale","maxCharHeight","skipTexture","maxTextureWidth","maxTextureHeight","height","i","metrics","measureText","paddedWidth","Math","ceil","textureGlyphWidth","fontStyle","paddedHeight","max","update","pageData2","xAdvance","dropShadow","distance","id","codePointAt","xOffset","yOffset","kerning","_drawGlyph","px","py","frame","_applyKerning","v8_0_0","newChars","measureCache","first","j","second","c1","c2","total","amount","textureResolution","getOptimalCanvasAndContext","_setupContext","resource","alphaMode","autoGenerateMipmaps","scale","textBaseline","stroke","strokeThickness","lineWidth","lineJoin","join","miterLimit","strokeStyle","fillStyle","shadowOptions","rgb","shared","setValue","toArray","dropShadowBlur","blur","dropShadowDistance","shadowColor","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","x","y","text","tx","ty","descent","fontProperties","strokeText","fillText","destroy","returnCanvasAndContext","DynamicBitmapFont"]
}
