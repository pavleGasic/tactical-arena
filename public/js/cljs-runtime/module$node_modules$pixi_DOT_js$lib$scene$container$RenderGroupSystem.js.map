{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$RenderGroupSystem.js",
"lineCount":101,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/RenderGroupSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$RenderGroupSystem\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../extensions/Extensions.js');\nvar Matrix = require('../../maths/matrix/Matrix.js');\nvar TexturePool = require('../../rendering/renderers/shared/texture/TexturePool.js');\nvar Bounds = require('./bounds/Bounds.js');\nvar clearList = require('./utils/clearList.js');\nvar executeInstructions = require('./utils/executeInstructions.js');\nvar updateRenderGroupTransforms = require('./utils/updateRenderGroupTransforms.js');\nvar validateRenderables = require('./utils/validateRenderables.js');\n\n\"use strict\";\nconst tempMatrix = new Matrix.Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    this._updateCachedRenderGroups(container.renderGroup, null);\n    this._updateRenderGroups(container.renderGroup);\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions.executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCachedRenderGroups(renderGroup, closestCacheAsTexture) {\n    if (renderGroup.isCachedAsTexture) {\n      if (!renderGroup.updateCacheTexture)\n        return;\n      closestCacheAsTexture = renderGroup;\n    }\n    renderGroup._parentCacheAsTextureRenderGroup = closestCacheAsTexture;\n    for (let i = renderGroup.renderGroupChildren.length - 1; i >= 0; i--) {\n      this._updateCachedRenderGroups(renderGroup.renderGroupChildren[i], closestCacheAsTexture);\n    }\n    renderGroup.invalidateMatrices();\n    if (renderGroup.isCachedAsTexture) {\n      if (renderGroup.textureNeedsUpdate) {\n        const bounds = renderGroup.root.getLocalBounds();\n        bounds.ceil();\n        const lastTexture = renderGroup.texture;\n        if (renderGroup.texture) {\n          TexturePool.TexturePool.returnTexture(renderGroup.texture);\n        }\n        const renderer = this._renderer;\n        const resolution = renderGroup.textureOptions.resolution || renderer.view.resolution;\n        const antialias = renderGroup.textureOptions.antialias ?? renderer.view.antialias;\n        renderGroup.texture = TexturePool.TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          resolution,\n          antialias\n        );\n        renderGroup._textureBounds || (renderGroup._textureBounds = new Bounds.Bounds());\n        renderGroup._textureBounds.copyFrom(bounds);\n        if (lastTexture !== renderGroup.texture) {\n          if (renderGroup.renderGroupParent) {\n            renderGroup.renderGroupParent.structureDidChange = true;\n          }\n        }\n      }\n    } else if (renderGroup.texture) {\n      TexturePool.TexturePool.returnTexture(renderGroup.texture);\n      renderGroup.texture = null;\n    }\n  }\n  _updateRenderGroups(renderGroup) {\n    const renderer = this._renderer;\n    const renderPipes = renderer.renderPipes;\n    renderGroup.runOnRender(renderer);\n    renderGroup.instructionSet.renderPipes = renderPipes;\n    if (!renderGroup.structureDidChange) {\n      validateRenderables.validateRenderables(renderGroup, renderPipes);\n    } else {\n      clearList.clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n    }\n    updateRenderGroupTransforms.updateRenderGroupTransforms(renderGroup);\n    if (renderGroup.structureDidChange) {\n      renderGroup.structureDidChange = false;\n      this._buildInstructions(renderGroup, renderer);\n    } else {\n      this._updateRenderables(renderGroup);\n    }\n    renderGroup.childrenRenderablesToUpdate.index = 0;\n    renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    if (renderGroup.isCachedAsTexture && !renderGroup.textureNeedsUpdate)\n      return;\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      this._updateRenderGroups(renderGroup.renderGroupChildren[i]);\n    }\n  }\n  _updateRenderables(renderGroup) {\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n    for (let i = 0; i < index; i++) {\n      const container = list[i];\n      if (container.didViewUpdate) {\n        renderGroup.updateRenderable(container);\n      }\n    }\n    clearList.clearList(list, index);\n  }\n  _buildInstructions(renderGroup, rendererOrPipes) {\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n    instructionSet.reset();\n    const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n    const renderPipes = renderer.renderPipes;\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n    if (root.sortableChildren) {\n      root.sortChildren();\n    }\n    root.collectRenderablesWithEffects(instructionSet, renderer, null);\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    Extensions.ExtensionType.WebGLSystem,\n    Extensions.ExtensionType.WebGPUSystem,\n    Extensions.ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\n\nexports.RenderGroupSystem = RenderGroupSystem;\n//# sourceMappingURL=RenderGroupSystem.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Matrix","TexturePool","Bounds","clearList","executeInstructions","updateRenderGroupTransforms","validateRenderables","tempMatrix","RenderGroupSystem","constructor","renderer","_renderer","render","container","transform","parent","renderGroupParent","renderGroup","originalLocalTransform","copyFrom","localTransform","renderPipes","_updateCachedRenderGroups","_updateRenderGroups","globalUniforms","start","worldTransformMatrix","worldTransform","worldColor","worldColorAlpha","uniformBatch","renderEnd","destroy","closestCacheAsTexture","isCachedAsTexture","updateCacheTexture","_parentCacheAsTextureRenderGroup","i","renderGroupChildren","length","invalidateMatrices","textureNeedsUpdate","bounds","root","getLocalBounds","ceil","lastTexture","texture","returnTexture","getOptimalTexture","width","height","textureOptions","resolution","view","antialias","_textureBounds","structureDidChange","runOnRender","instructionSet","childrenRenderablesToUpdate","list","_buildInstructions","_updateRenderables","index","batch","upload","didViewUpdate","updateRenderable","rendererOrPipes","reset","buildStart","blendMode","colorMask","sortableChildren","sortChildren","collectRenderablesWithEffects","buildEnd","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name"]
}
