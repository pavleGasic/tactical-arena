{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$collectRenderablesMixin.js",
"lineCount":21,
"mappings":"AAAAA,cAAA,CAAA,4FAAA,GAAiH,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAkEzJA,SAAQC,CAAAA,uBAAR,GA9DgCA,CAS9BC,kBAAkB,CAACC,cAAD,EAAiBC,QAAjB,EAA2BC,YAA3B,CAAyC;AACrD,QAAKC,CAAAA,iBAAT,IAA8B,IAAKA,CAAAA,iBAAnC,KAAyDD,YAAzD,IAAoG,CAApG,GAAyE,IAAKE,CAAAA,mBAA9E,IAA+GC,CAAL,IAAKA,CAAAA,cAA/G,KAEI,IAAKC,CAAAA,gBAGT,IAFE,IAAKC,CAAAA,YAAL,EAEF,EAAI,IAAKC,CAAAA,QAAT,GACE,IAAKC,CAAAA,wBAAL,CAA8BT,cAA9B,EAA8CC,QAA9C,EAAwDC,YAAxD,CADF,GAEW,IAAKQ,CAAAA,WAAT,GACLT,QAASU,CAAAA,WAAYD,CAAAA,WAAYE,CAAAA,cAAjC,CAAgD,IAAKF,CAAAA,WAArD,EAAkEV,cAAlE,CADK,GAGL,IAAKa,CAAAA,6BAAL,CAAmCb,cAAnC,EAAmDC,QAAnD,EAA6DC,YAA7D,CAVF;AADyD,GAT7BJ,EA+B9BW,wBAAwB,CAACT,cAAD,EAAiBC,QAAjB,EAA2BC,YAA3B,CAAyC;AAC/D,UAAMY,WAAW,IAAKA,CAAAA,QAAtB,EACMC,SAASD,QAASC,CAAAA,MADxB;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,MAApB,EAA4BC,CAAA,EAA5B;AACEF,cAAA,CAASE,CAAT,CAAYjB,CAAAA,kBAAZ,CAA+BC,cAA/B,EAA+CC,QAA/C,EAAyDC,YAAzD,CAAA;AADF;AAH+D,GA/BnCJ,EA8C9Be,6BAA6B,CAACb,cAAD,EAAiBC,QAAjB,EAA2BC,YAA3B,CAAyC;AACpE,UAAM,CAAES,WAAF,CAAA,GAAkBV,QAAxB;AACA,SAAK,IAAIe,IAAI,CAAb,EAAgBA,CAAhB,GAAoB,IAAKC,CAAAA,OAAQF,CAAAA,MAAjC,EAAyCC,CAAA,EAAzC,CAA8C;AAC5C,YAAME,SAAS,IAAKD,CAAAA,OAAL,CAAaD,CAAb,CAAf;AACaL,iBAAAQ,CAAYD,MAAOC,CAAAA,IAAnBA,CACRC,CAAAA,IAAL,CAAUF,MAAV,EAAkB,IAAlB,EAAwBlB,cAAxB,CAAA;AAH4C;AAK9C,QAAKS,CAAAA,wBAAL,CAA8BT,cAA9B,EAA8CC,QAA9C,EAAwDC,YAAxD,CAAA;AACA,SAASc,QAAT,GAAa,IAAKC,CAAAA,OAAQF,CAAAA,MAA1B,GAAmC,CAAnC,EAA2C,CAA3C,IAAsCC,QAAtC,EAA8CA,QAAA,EAA9C;AACQE,kBAEN,GAFe,IAAKD,CAAAA,OAAL,CAAaD,QAAb,CAEf,EADaL,WAAAQ,CAAYD,YAAOC,CAAAA,IAAnBA,CACRE,CAAAA,GAAL,CAASH,YAAT,EAAiB,IAAjB,EAAuBlB,cAAvB,CAAA;AAHF;AARoE,GA9CxCF,CA8DhC;AAlEyJ,CAAzJ;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/container-mixins/collectRenderablesMixin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$container_mixins$collectRenderablesMixin\"] = function(global,require,module,exports) {\n'use strict';\n\n\"use strict\";\nconst collectRenderablesMixin = {\n  /**\n   * Main method to collect renderables from the container and its children.\n   * It checks the container's properties to decide whether to use a simple or advanced collection method.\n   * @param {InstructionSet} instructionSet - The set of instructions to which the renderables will be added.\n   * @param {Renderer} renderer - The renderer responsible for rendering the scene.\n   * @param {IRenderLayer} currentLayer - The current render layer being processed.\n   * @memberof scene.Container#\n   */\n  collectRenderables(instructionSet, renderer, currentLayer) {\n    if (this.parentRenderLayer && this.parentRenderLayer !== currentLayer || this.globalDisplayStatus < 7 || !this.includeInBuild)\n      return;\n    if (this.sortableChildren) {\n      this.sortChildren();\n    }\n    if (this.isSimple) {\n      this.collectRenderablesSimple(instructionSet, renderer, currentLayer);\n    } else if (this.renderGroup) {\n      renderer.renderPipes.renderGroup.addRenderGroup(this.renderGroup, instructionSet);\n    } else {\n      this.collectRenderablesWithEffects(instructionSet, renderer, currentLayer);\n    }\n  },\n  /**\n   * Simple method for collecting renderables from the container's children.\n   * This method is efficient and used when the container is marked as simple.\n   * @param {InstructionSet} instructionSet - The set of instructions to which the renderables will be added.\n   * @param {Renderer} renderer - The renderer responsible for rendering the scene.\n   * @param {IRenderLayer} currentLayer - The current render layer being processed.\n   * @memberof scene.Container#\n   */\n  collectRenderablesSimple(instructionSet, renderer, currentLayer) {\n    const children = this.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      children[i].collectRenderables(instructionSet, renderer, currentLayer);\n    }\n  },\n  /**\n   * Advanced method for collecting renderables, which handles additional effects.\n   * This method is used when the container has complex processing needs.\n   * @param {InstructionSet} instructionSet - The set of instructions to which the renderables will be added.\n   * @param {Renderer} renderer - The renderer responsible for rendering the scene.\n   * @param {IRenderLayer} currentLayer - The current render layer being processed.\n   * @memberof scene.Container#\n   */\n  collectRenderablesWithEffects(instructionSet, renderer, currentLayer) {\n    const { renderPipes } = renderer;\n    for (let i = 0; i < this.effects.length; i++) {\n      const effect = this.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, this, instructionSet);\n    }\n    this.collectRenderablesSimple(instructionSet, renderer, currentLayer);\n    for (let i = this.effects.length - 1; i >= 0; i--) {\n      const effect = this.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, this, instructionSet);\n    }\n  }\n};\n\nexports.collectRenderablesMixin = collectRenderablesMixin;\n//# sourceMappingURL=collectRenderablesMixin.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","collectRenderablesMixin","collectRenderables","instructionSet","renderer","currentLayer","parentRenderLayer","globalDisplayStatus","includeInBuild","sortableChildren","sortChildren","isSimple","collectRenderablesSimple","renderGroup","renderPipes","addRenderGroup","collectRenderablesWithEffects","children","length","i","effects","effect","pipe","push","pop"]
}
