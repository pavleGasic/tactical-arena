{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$maths$shapes$RoundedRectangle.js",
"lineCount":84,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/maths/shapes/RoundedRectangle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$maths$shapes$RoundedRectangle\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Rectangle = require('./Rectangle.js');\n\n\"use strict\";\nconst isCornerWithinStroke = (pX, pY, cornerX, cornerY, radius, strokeWidthInner, strokeWidthOuter) => {\n  const dx = pX - cornerX;\n  const dy = pY - cornerY;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance >= radius - strokeWidthInner && distance <= radius + strokeWidthOuter;\n};\nclass RoundedRectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0, radius = 20) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'roundedRectangle'\n     */\n    this.type = \"roundedRectangle\";\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n  }\n  /**\n   * Returns the framing rectangle of the rounded rectangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle.Rectangle());\n    out.x = this.x;\n    out.y = this.y;\n    out.width = this.width;\n    out.height = this.height;\n    return out;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   * @returns - A copy of the rounded rectangle.\n   */\n  clone() {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  }\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(rectangle) {\n    rectangle.copyFrom(this);\n    return rectangle;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n        let dx = x - (this.x + radius);\n        let dy = y - (this.y + radius);\n        const radius2 = radius * radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n   * @param pX - The X coordinate of the point to test\n   * @param pY - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param alignment - The alignment of the stroke, 0.5 by default\n   * @returns Whether the x/y coordinates are within this rectangle\n   */\n  strokeContains(pX, pY, strokeWidth, alignment = 0.5) {\n    const { x, y, width, height, radius } = this;\n    const strokeWidthOuter = strokeWidth * (1 - alignment);\n    const strokeWidthInner = strokeWidth - strokeWidthOuter;\n    const innerX = x + radius;\n    const innerY = y + radius;\n    const innerWidth = width - radius * 2;\n    const innerHeight = height - radius * 2;\n    const rightBound = x + width;\n    const bottomBound = y + height;\n    if ((pX >= x - strokeWidthOuter && pX <= x + strokeWidthInner || pX >= rightBound - strokeWidthInner && pX <= rightBound + strokeWidthOuter) && pY >= innerY && pY <= innerY + innerHeight) {\n      return true;\n    }\n    if ((pY >= y - strokeWidthOuter && pY <= y + strokeWidthInner || pY >= bottomBound - strokeWidthInner && pY <= bottomBound + strokeWidthOuter) && pX >= innerX && pX <= innerX + innerWidth) {\n      return true;\n    }\n    return (\n      // Top-left\n      pX < innerX && pY < innerY && isCornerWithinStroke(\n        pX,\n        pY,\n        innerX,\n        innerY,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX > rightBound - radius && pY < innerY && isCornerWithinStroke(\n        pX,\n        pY,\n        rightBound - radius,\n        innerY,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX > rightBound - radius && pY > bottomBound - radius && isCornerWithinStroke(\n        pX,\n        pY,\n        rightBound - radius,\n        bottomBound - radius,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX < innerX && pY > bottomBound - radius && isCornerWithinStroke(\n        pX,\n        pY,\n        innerX,\n        bottomBound - radius,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      )\n    );\n  }\n  toString() {\n    return `[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`;\n  }\n}\n\nexports.RoundedRectangle = RoundedRectangle;\n//# sourceMappingURL=RoundedRectangle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Rectangle","isCornerWithinStroke","pX","pY","cornerX","cornerY","radius","strokeWidthInner","strokeWidthOuter","dx","dy","distance","Math","sqrt","RoundedRectangle","constructor","x","y","width","height","type","getBounds","out","clone","copyFrom","rectangle","copyTo","contains","max","min","radius2","strokeContains","strokeWidth","alignment","innerX","innerY","rightBound","bottomBound","toString"]
}
