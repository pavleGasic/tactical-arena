{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$container$utils$updateRenderGroupTransforms.js",
"lineCount":73,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/container/utils/updateRenderGroupTransforms.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$container$utils$updateRenderGroupTransforms\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Container = require('../Container.js');\nvar clearList = require('./clearList.js');\nvar multiplyColors = require('./multiplyColors.js');\n\n\"use strict\";\nconst tempContainer = new Container.Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = Container.UPDATE_VISIBLE | Container.UPDATE_COLOR | Container.UPDATE_BLEND;\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    clearList.clearList(list, index);\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = multiplyColors.multiplyColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags |= container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    const renderable = container;\n    if (renderable.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(renderable);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & Container.UPDATE_COLOR) {\n    container.groupColor = multiplyColors.multiplyColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & Container.UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & Container.UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexports.updateRenderGroupTransform = updateRenderGroupTransform;\nexports.updateRenderGroupTransforms = updateRenderGroupTransforms;\nexports.updateTransformAndChildren = updateTransformAndChildren;\n//# sourceMappingURL=updateRenderGroupTransforms.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","updateRenderGroupTransforms","renderGroup","updateChildRenderGroups","updateRenderGroupTransform","childrenToUpdate","updateTick","j","renderGroupDepth","Number","childrenAtDepth","list","index","i","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","clearList","renderGroupChildren","length","root","renderGroupParent","worldTransform","appendFrom","relativeGroupTransform","worldColor","multiplyColors","groupColor","worldAlpha","groupAlpha","copyFrom","localTransform","localColor","localAlpha","worldColorAlpha","container","updateFlags","didChange","updateLocalTransform","parent","_updateFlags","UPDATE_BLEND_COLOR_VISIBLE","updateColorBlendVisibility","tempContainer","children","renderPipeId","structureDidChange","updateRenderable","Container","UPDATE_COLOR","groupColorAlpha","UPDATE_BLEND","groupBlendMode","localBlendMode","UPDATE_VISIBLE","globalDisplayStatus","localDisplayStatus"]
}
