{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$VideoSource.js",
"lineCount":134,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/texture/sources/VideoSource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$texture$sources$VideoSource\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../../../extensions/Extensions.js');\nvar Ticker = require('../../../../../ticker/Ticker.js');\nvar detectVideoAlphaMode = require('../../../../../utils/browser/detectVideoAlphaMode.js');\nvar TextureSource = require('./TextureSource.js');\n\n\"use strict\";\nconst _VideoSource = class _VideoSource extends TextureSource.TextureSource {\n  constructor(options) {\n    super(options);\n    // Public\n    /** Whether or not the video is ready to play. */\n    this.isReady = false;\n    /** The upload method for this texture. */\n    this.uploadMethodId = \"video\";\n    options = {\n      ..._VideoSource.defaultOptions,\n      ...options\n    };\n    this._autoUpdate = true;\n    this._isConnectedToTicker = false;\n    this._updateFPS = options.updateFPS || 0;\n    this._msToNextUpdate = 0;\n    this.autoPlay = options.autoPlay !== false;\n    this.alphaMode = options.alphaMode ?? \"premultiply-alpha-on-upload\";\n    this._videoFrameRequestCallback = this._videoFrameRequestCallback.bind(this);\n    this._videoFrameRequestCallbackHandle = null;\n    this._load = null;\n    this._resolve = null;\n    this._reject = null;\n    this._onCanPlay = this._onCanPlay.bind(this);\n    this._onCanPlayThrough = this._onCanPlayThrough.bind(this);\n    this._onError = this._onError.bind(this);\n    this._onPlayStart = this._onPlayStart.bind(this);\n    this._onPlayStop = this._onPlayStop.bind(this);\n    this._onSeeked = this._onSeeked.bind(this);\n    if (options.autoLoad !== false) {\n      void this.load();\n    }\n  }\n  /** Update the video frame if the source is not destroyed and meets certain conditions. */\n  updateFrame() {\n    if (this.destroyed) {\n      return;\n    }\n    if (this._updateFPS) {\n      const elapsedMS = Ticker.Ticker.shared.elapsedMS * this.resource.playbackRate;\n      this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n    }\n    if (!this._updateFPS || this._msToNextUpdate <= 0) {\n      this._msToNextUpdate = this._updateFPS ? Math.floor(1e3 / this._updateFPS) : 0;\n    }\n    if (this.isValid) {\n      this.update();\n    }\n  }\n  /** Callback to update the video frame and potentially request the next frame update. */\n  _videoFrameRequestCallback() {\n    this.updateFrame();\n    if (this.destroyed) {\n      this._videoFrameRequestCallbackHandle = null;\n    } else {\n      this._videoFrameRequestCallbackHandle = this.resource.requestVideoFrameCallback(\n        this._videoFrameRequestCallback\n      );\n    }\n  }\n  /**\n   * Checks if the resource has valid dimensions.\n   * @returns {boolean} True if width and height are set, otherwise false.\n   */\n  get isValid() {\n    return !!this.resource.videoWidth && !!this.resource.videoHeight;\n  }\n  /**\n   * Start preloading the video resource.\n   * @returns {Promise<this>} Handle the validate event\n   */\n  async load() {\n    if (this._load) {\n      return this._load;\n    }\n    const source = this.resource;\n    const options = this.options;\n    if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA) && source.width && source.height) {\n      source.complete = true;\n    }\n    source.addEventListener(\"play\", this._onPlayStart);\n    source.addEventListener(\"pause\", this._onPlayStop);\n    source.addEventListener(\"seeked\", this._onSeeked);\n    if (!this._isSourceReady()) {\n      if (!options.preload) {\n        source.addEventListener(\"canplay\", this._onCanPlay);\n      }\n      source.addEventListener(\"canplaythrough\", this._onCanPlayThrough);\n      source.addEventListener(\"error\", this._onError, true);\n    } else {\n      this._mediaReady();\n    }\n    this.alphaMode = await detectVideoAlphaMode.detectVideoAlphaMode();\n    this._load = new Promise((resolve, reject) => {\n      if (this.isValid) {\n        resolve(this);\n      } else {\n        this._resolve = resolve;\n        this._reject = reject;\n        if (options.preloadTimeoutMs !== void 0) {\n          this._preloadTimeout = setTimeout(() => {\n            this._onError(new ErrorEvent(`Preload exceeded timeout of ${options.preloadTimeoutMs}ms`));\n          });\n        }\n        source.load();\n      }\n    });\n    return this._load;\n  }\n  /**\n   * Handle video error events.\n   * @param event - The error event\n   */\n  _onError(event) {\n    this.resource.removeEventListener(\"error\", this._onError, true);\n    this.emit(\"error\", event);\n    if (this._reject) {\n      this._reject(event);\n      this._reject = null;\n      this._resolve = null;\n    }\n  }\n  /**\n   * Checks if the underlying source is playing.\n   * @returns True if playing.\n   */\n  _isSourcePlaying() {\n    const source = this.resource;\n    return !source.paused && !source.ended;\n  }\n  /**\n   * Checks if the underlying source is ready for playing.\n   * @returns True if ready.\n   */\n  _isSourceReady() {\n    const source = this.resource;\n    return source.readyState > 2;\n  }\n  /** Runs the update loop when the video is ready to play. */\n  _onPlayStart() {\n    if (!this.isValid) {\n      this._mediaReady();\n    }\n    this._configureAutoUpdate();\n  }\n  /** Stops the update loop when a pause event is triggered. */\n  _onPlayStop() {\n    this._configureAutoUpdate();\n  }\n  /** Handles behavior when the video completes seeking to the current playback position. */\n  _onSeeked() {\n    if (this._autoUpdate && !this._isSourcePlaying()) {\n      this._msToNextUpdate = 0;\n      this.updateFrame();\n      this._msToNextUpdate = 0;\n    }\n  }\n  _onCanPlay() {\n    const source = this.resource;\n    source.removeEventListener(\"canplay\", this._onCanPlay);\n    this._mediaReady();\n  }\n  _onCanPlayThrough() {\n    const source = this.resource;\n    source.removeEventListener(\"canplaythrough\", this._onCanPlay);\n    if (this._preloadTimeout) {\n      clearTimeout(this._preloadTimeout);\n      this._preloadTimeout = void 0;\n    }\n    this._mediaReady();\n  }\n  /** Fired when the video is loaded and ready to play. */\n  _mediaReady() {\n    const source = this.resource;\n    if (this.isValid) {\n      this.isReady = true;\n      this.resize(source.videoWidth, source.videoHeight);\n    }\n    this._msToNextUpdate = 0;\n    this.updateFrame();\n    this._msToNextUpdate = 0;\n    if (this._resolve) {\n      this._resolve(this);\n      this._resolve = null;\n      this._reject = null;\n    }\n    if (this._isSourcePlaying()) {\n      this._onPlayStart();\n    } else if (this.autoPlay) {\n      void this.resource.play();\n    }\n  }\n  /** Cleans up resources and event listeners associated with this texture. */\n  destroy() {\n    this._configureAutoUpdate();\n    const source = this.resource;\n    if (source) {\n      source.removeEventListener(\"play\", this._onPlayStart);\n      source.removeEventListener(\"pause\", this._onPlayStop);\n      source.removeEventListener(\"seeked\", this._onSeeked);\n      source.removeEventListener(\"canplay\", this._onCanPlay);\n      source.removeEventListener(\"canplaythrough\", this._onCanPlayThrough);\n      source.removeEventListener(\"error\", this._onError, true);\n      source.pause();\n      source.src = \"\";\n      source.load();\n    }\n    super.destroy();\n  }\n  /** Should the base texture automatically update itself, set to true by default. */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    if (value !== this._autoUpdate) {\n      this._autoUpdate = value;\n      this._configureAutoUpdate();\n    }\n  }\n  /**\n   * How many times a second to update the texture from the video.\n   * Leave at 0 to update at every render.\n   * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n   */\n  get updateFPS() {\n    return this._updateFPS;\n  }\n  set updateFPS(value) {\n    if (value !== this._updateFPS) {\n      this._updateFPS = value;\n      this._configureAutoUpdate();\n    }\n  }\n  /**\n   * Configures the updating mechanism based on the current state and settings.\n   *\n   * This method decides between using the browser's native video frame callback or a custom ticker\n   * for updating the video frame. It ensures optimal performance and responsiveness\n   * based on the video's state, playback status, and the desired frames-per-second setting.\n   *\n   * - If `_autoUpdate` is enabled and the video source is playing:\n   *   - It will prefer the native video frame callback if available and no specific FPS is set.\n   *   - Otherwise, it will use a custom ticker for manual updates.\n   * - If `_autoUpdate` is disabled or the video isn't playing, any active update mechanisms are halted.\n   */\n  _configureAutoUpdate() {\n    if (this._autoUpdate && this._isSourcePlaying()) {\n      if (!this._updateFPS && this.resource.requestVideoFrameCallback) {\n        if (this._isConnectedToTicker) {\n          Ticker.Ticker.shared.remove(this.updateFrame, this);\n          this._isConnectedToTicker = false;\n          this._msToNextUpdate = 0;\n        }\n        if (this._videoFrameRequestCallbackHandle === null) {\n          this._videoFrameRequestCallbackHandle = this.resource.requestVideoFrameCallback(\n            this._videoFrameRequestCallback\n          );\n        }\n      } else {\n        if (this._videoFrameRequestCallbackHandle !== null) {\n          this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n          this._videoFrameRequestCallbackHandle = null;\n        }\n        if (!this._isConnectedToTicker) {\n          Ticker.Ticker.shared.add(this.updateFrame, this);\n          this._isConnectedToTicker = true;\n          this._msToNextUpdate = 0;\n        }\n      }\n    } else {\n      if (this._videoFrameRequestCallbackHandle !== null) {\n        this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n        this._videoFrameRequestCallbackHandle = null;\n      }\n      if (this._isConnectedToTicker) {\n        Ticker.Ticker.shared.remove(this.updateFrame, this);\n        this._isConnectedToTicker = false;\n        this._msToNextUpdate = 0;\n      }\n    }\n  }\n  static test(resource) {\n    return globalThis.HTMLVideoElement && resource instanceof HTMLVideoElement;\n  }\n};\n_VideoSource.extension = Extensions.ExtensionType.TextureSource;\n/** The default options for video sources. */\n_VideoSource.defaultOptions = {\n  ...TextureSource.TextureSource.defaultOptions,\n  /** If true, the video will start loading immediately. */\n  autoLoad: true,\n  /** If true, the video will start playing as soon as it is loaded. */\n  autoPlay: true,\n  /** The number of times a second to update the texture from the video. Leave at 0 to update at every render. */\n  updateFPS: 0,\n  /** If true, the video will be loaded with the `crossorigin` attribute. */\n  crossorigin: true,\n  /** If true, the video will loop when it ends. */\n  loop: false,\n  /** If true, the video will be muted. */\n  muted: true,\n  /** If true, the video will play inline. */\n  playsinline: true,\n  /** If true, the video will be preloaded. */\n  preload: false\n};\n/**\n * Map of video MIME types that can't be directly derived from file extensions.\n * @readonly\n */\n_VideoSource.MIME_TYPES = {\n  ogv: \"video/ogg\",\n  mov: \"video/quicktime\",\n  m4v: \"video/mp4\"\n};\nlet VideoSource = _VideoSource;\n\nexports.VideoSource = VideoSource;\n//# sourceMappingURL=VideoSource.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Ticker","detectVideoAlphaMode","TextureSource","constructor","options","isReady","uploadMethodId","_VideoSource","defaultOptions","_autoUpdate","_isConnectedToTicker","_updateFPS","updateFPS","_msToNextUpdate","autoPlay","alphaMode","_videoFrameRequestCallback","bind","_reject","_resolve","_load","_videoFrameRequestCallbackHandle","_onCanPlay","_onCanPlayThrough","_onError","_onPlayStart","_onPlayStop","_onSeeked","autoLoad","load","updateFrame","destroyed","Math","floor","shared","elapsedMS","resource","playbackRate","isValid","update","requestVideoFrameCallback","videoWidth","videoHeight","source","readyState","HAVE_ENOUGH_DATA","HAVE_FUTURE_DATA","width","height","complete","addEventListener","_isSourceReady","_mediaReady","preload","Promise","resolve","reject","preloadTimeoutMs","_preloadTimeout","setTimeout","ErrorEvent","event","removeEventListener","emit","_isSourcePlaying","paused","ended","_configureAutoUpdate","clearTimeout","resize","play","destroy","pause","src","value","remove","cancelVideoFrameCallback","add","test","globalThis","HTMLVideoElement","extension","ExtensionType","crossorigin","loop","muted","playsinline","MIME_TYPES","ogv","mov","m4v","VideoSource"]
}
