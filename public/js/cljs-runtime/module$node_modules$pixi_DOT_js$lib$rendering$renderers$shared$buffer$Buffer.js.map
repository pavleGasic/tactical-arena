{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$Buffer.js",
"lineCount":60,
"mappings":"AAAAA,cAAA,CAAA,4EAAA,GAAiG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGrIC,QAAAA,GAAeH,OAAA,CAAQ,yCAAR,CAAfG;AACJ,MAAIC,MAAMJ,OAAA,CAAQ,oDAAR,CAAV,EACIK,SAASL,OAAA,CAAQ,6EAAR,CADb;AAGA,cAAA;AACA,OAAMM,OAAN,QAAqBH,OAArB;AAKEI,eAAW,CAACC,OAAD,CAAU;AACnB,UAAI,CAAEC,IAAF,EAAQC,IAAR,CAAA,GAAiBF,OAArB;AACA,YAAM,CAAEG,KAAF,EAASC,KAAT,EAAgBC,WAAhB,CAAA,GAAgCL,OAAtC;AACA,WAAA,EAAA;AAgBA,UAAKJ,CAAAA,GAAL,GAAWA,GAAIA,CAAAA,GAAJ,CAAQ,QAAR,CAAX;AAMA,UAAKU,CAAAA,aAAL,GAAqB,QAArB;AAMA,UAAKC,CAAAA,WAAL,GAAmBX,GAAIA,CAAAA,GAAJ,CAAQ,UAAR,CAAnB;AAMA,UAAKY,CAAAA,QAAL,GAAgB,CAAhB;AAKA,UAAKC,CAAAA,SAAL,GAAiB,CAAjB;AACA,UAAKC,CAAAA,UAAL,GAAkB,IAAlB;AASA,UAAKL,CAAAA,WAAL,GAAmB,CAAA,CAAnB;AAKA,UAAKM,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AACIV,UAAJ,YAAoBW,KAApB,KACEX,IADF,GACS,IAAIY,YAAJ,CAAiBZ,IAAjB,CADT;AAGA,UAAKa,CAAAA,KAAL,GAAab,IAAb;AACAC,UAAA,KAASA,IAAT,GAAgBD,IAAMc,EAAAA,UAAtB;AAEA,UAAKC,CAAAA,UAAL,GAAkB,CAChBd,IADgB,EAEhBC,KAFgB,EAGhBc,iBAJuBA,CAAC,CAAChB,IACT,EAIhBG,KAJgB,CAAlB;AAMA,UAAKC,CAAAA,WAAL,GAAmBA,WAAnB,IAAkC,CAAA,CAAlC;AAtEmB;AAyEjB,YAAO,EAAA;AACT,aAAO,IAAKS,CAAAA,KAAZ;AADS;AAGP,YAAI,CAACI,KAAD,CAAQ;AACd,UAAKC,CAAAA,eAAL,CAAqBD,KAArB,EAA4BA,KAAME,CAAAA,MAAlC,EAA0C,CAAA,CAA1C,CAAA;AADc;AAGZ,iBAAY,EAAA;AACT,UAAKV,CAAAA,UAAV,KACE,IAAKA,CAAAA,UADP,GACoB,IAAIW,UAAJ,CAAe,IAAKpB,CAAAA,IAAKqB,CAAAA,MAAzB,CADpB;AAGA,aAAO,IAAKZ,CAAAA,UAAZ;AAJc;AAOZ,cAAS,EAAA;AACX,aAAO,CAAC,EAAE,IAAKM,CAAAA,UAAWb,CAAAA,KAAlB,GAA0BN,MAAO0B,CAAAA,WAAYC,CAAAA,MAA7C,CAAR;AADW;AAGT,cAAM,CAACN,KAAD,CAAQ;AAEd,UAAKF,CAAAA,UAAWb,CAAAA,KAAhB,GADEe,KAAJ,GACE,IAAKF,CAAAA,UAAWb,CAAAA,KADlB,GAC2BN,MAAO0B,CAAAA,WAAYC,CAAAA,MAD9C,GAGE,IAAKR,CAAAA,UAAWb,CAAAA,KAHlB,GAG2B,CAACN,MAAO0B,CAAAA,WAAYC,CAAAA,MAF7C;AAFc;AAclBL,mBAAe,CAACD,KAAD,EAAQhB,IAAR,EAAcuB,OAAd,CAAuB;AACpC,UAAKhB,CAAAA,SAAL,EAAA;AACA,UAAKiB,CAAAA,WAAL,GAAmBxB,IAAnB,GAA0BgB,KAAMS,CAAAA,iBAAhC;AACI,UAAKb,CAAAA,KAAT,KAAmBI,KAAnB,GACMO,OADN,IAEI,IAAKG,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAFJ,IAKMC,IAGN,GAHgB,IAAKf,CAAAA,KAGrB,EAFA,IAAKA,CAAAA,KAEL,GAFaI,KAEb,EADA,IAAKR,CAAAA,UACL,GADkB,IAClB,EAAKmB,IAAL,IAAgBA,IAAQT,CAAAA,MAAxB,KAAmCF,KAAME,CAAAA,MAAzC,GAWIK,OAXJ,IAYE,IAAKG,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAZF,GACM,CAAC,IAAKvB,CAAAA,WAAV,IAAyBwB,IAAzB,IAAoCX,KAAMH,CAAAA,UAA1C,GAAuDc,IAAQd,CAAAA,UAA/D,GACMU,OADN,IAEI,IAAKG,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAFJ,IAIE,IAAKZ,CAAAA,UAAWd,CAAAA,IAEhB,GAFuBgB,KAAMH,CAAAA,UAE7B,EADA,IAAKR,CAAAA,WACL,GADmBX,GAAIA,CAAAA,GAAJ,CAAQ,UAAR,CACnB,EAAA,IAAKgC,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CANF,CATF,CAAA;AAHoC;AA+BtCE,UAAM,CAACC,WAAD,CAAc;AAClB,UAAKL,CAAAA,WAAL,GAAmBK,WAAnB,IAAkC,IAAKL,CAAAA,WAAvC;AACA,UAAKjB,CAAAA,SAAL,EAAA;AACA,UAAKmB,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AAHkB;AAMpBI,WAAO,EAAG;AACR,UAAKrB,CAAAA,SAAL,GAAiB,CAAA,CAAjB;AACA,UAAKiB,CAAAA,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAA;AACA,UAAKA,CAAAA,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAA;AAEA,UAAKZ,CAAAA,UAAL,GADA,IAAKF,CAAAA,KACL,GADa,IACb;AACA,UAAKmB,CAAAA,kBAAL,EAAA;AANQ;AAjJZ;AA2JAvC,SAAQI,CAAAA,MAAR,GAAiBA,MAAjB;AAnKyI,CAAzI;;",
"sources":["node_modules/pixi_DOT_js/lib/rendering/renderers/shared/buffer/Buffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$renderers$shared$buffer$Buffer\"] = function(global,require,module,exports) {\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\nvar uid = require('../../../../utils/data/uid.js');\nvar _const = require('./const.js');\n\n\"use strict\";\nclass Buffer extends EventEmitter {\n  /**\n   * Creates a new Buffer with the given options\n   * @param options - the options for the buffer\n   */\n  constructor(options) {\n    let { data, size } = options;\n    const { usage, label, shrinkToFit } = options;\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /**\n     * emits when the underlying buffer data has been updated. letting the renderer know\n     * that it needs to update the buffer on the GPU\n     * @event update\n     */\n    /**\n     * emits when the buffer is destroyed. letting the renderer know that it needs to destroy the buffer on the GPU\n     * @event destroy\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid.uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"buffer\";\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid.uid(\"resource\");\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * @internal\n     * @ignore\n     */\n    this._updateID = 1;\n    this._dataInt32 = null;\n    /**\n     * should the GPU buffer be shrunk when the data becomes smaller?\n     * changing this will cause the buffer to be destroyed and a new one created on the GPU\n     * this can be expensive, especially if the buffer is already big enough!\n     * setting this to false will prevent the buffer from being shrunk. This will yield better performance\n     * if you are constantly setting data that is changing size often.\n     * @default true\n     */\n    this.shrinkToFit = true;\n    /**\n     * Has the buffer been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    if (data instanceof Array) {\n      data = new Float32Array(data);\n    }\n    this._data = data;\n    size ?? (size = data?.byteLength);\n    const mappedAtCreation = !!data;\n    this.descriptor = {\n      size,\n      usage,\n      mappedAtCreation,\n      label\n    };\n    this.shrinkToFit = shrinkToFit ?? true;\n  }\n  /** the data in the buffer */\n  get data() {\n    return this._data;\n  }\n  set data(value) {\n    this.setDataWithSize(value, value.length, true);\n  }\n  get dataInt32() {\n    if (!this._dataInt32) {\n      this._dataInt32 = new Int32Array(this.data.buffer);\n    }\n    return this._dataInt32;\n  }\n  /** whether the buffer is static or not */\n  get static() {\n    return !!(this.descriptor.usage & _const.BufferUsage.STATIC);\n  }\n  set static(value) {\n    if (value) {\n      this.descriptor.usage |= _const.BufferUsage.STATIC;\n    } else {\n      this.descriptor.usage &= ~_const.BufferUsage.STATIC;\n    }\n  }\n  /**\n   * Sets the data in the buffer to the given value. This will immediately update the buffer on the GPU.\n   * If you only want to update a subset of the buffer, you can pass in the size of the data.\n   * @param value - the data to set\n   * @param size - the size of the data in bytes\n   * @param syncGPU - should the buffer be updated on the GPU immediately?\n   */\n  setDataWithSize(value, size, syncGPU) {\n    this._updateID++;\n    this._updateSize = size * value.BYTES_PER_ELEMENT;\n    if (this._data === value) {\n      if (syncGPU)\n        this.emit(\"update\", this);\n      return;\n    }\n    const oldData = this._data;\n    this._data = value;\n    this._dataInt32 = null;\n    if (!oldData || oldData.length !== value.length) {\n      if (!this.shrinkToFit && oldData && value.byteLength < oldData.byteLength) {\n        if (syncGPU)\n          this.emit(\"update\", this);\n      } else {\n        this.descriptor.size = value.byteLength;\n        this._resourceId = uid.uid(\"resource\");\n        this.emit(\"change\", this);\n      }\n      return;\n    }\n    if (syncGPU)\n      this.emit(\"update\", this);\n  }\n  /**\n   * updates the buffer on the GPU to reflect the data in the buffer.\n   * By default it will update the entire buffer. If you only want to update a subset of the buffer,\n   * you can pass in the size of the buffer to update.\n   * @param sizeInBytes - the new size of the buffer in bytes\n   */\n  update(sizeInBytes) {\n    this._updateSize = sizeInBytes ?? this._updateSize;\n    this._updateID++;\n    this.emit(\"update\", this);\n  }\n  /** Destroys the buffer */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    this._data = null;\n    this.descriptor = null;\n    this.removeAllListeners();\n  }\n}\n\nexports.Buffer = Buffer;\n//# sourceMappingURL=Buffer.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","EventEmitter","uid","_const","Buffer","constructor","options","data","size","usage","label","shrinkToFit","_resourceType","_resourceId","_touched","_updateID","_dataInt32","destroyed","Array","Float32Array","_data","byteLength","descriptor","mappedAtCreation","value","setDataWithSize","length","Int32Array","buffer","BufferUsage","STATIC","syncGPU","_updateSize","BYTES_PER_ELEMENT","emit","oldData","update","sizeInBytes","destroy","removeAllListeners"]
}
