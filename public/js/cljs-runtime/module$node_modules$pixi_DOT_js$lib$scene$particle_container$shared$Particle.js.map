{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle.js",
"lineCount":30,
"mappings":"AAAAA,cAAA,CAAA,4EAAA,GAAiG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGzI,MAAIC,QAAQH,OAAA,CAAQ,iDAAR,CAAZ,EACII,UAAUJ,OAAA,CAAQ,gFAAR,CADd,EAEIK,iBAAiBL,OAAA,CAAQ,qFAAR,CAFrB,EAGIM,mBAAmBN,OAAA,CAAQ,4EAAR,CAHvB;AAKA,cAAA;AACkB,QAAA,wFAAA,KAAA;AAChBO,eAAW,CAACC,OAAD,CAAU;AACfA,aAAJ,YAAuBJ,OAAQA,CAAAA,OAA/B,IACE,IAAKK,CAAAA,OACL,GADeD,OACf,EAAAF,gBAAiBA,CAAAA,gBAAjB,CAAkC,IAAlC,EAAwCI,qFAAUC,CAAAA,cAAlD,EAAkE,EAAlE,CAFF,IAKEL,gBAAiBA,CAAAA,gBAAjB,CAAkC,IAAlC,EADiBM,CAAE,GAAGF,qFAAUC,CAAAA,cAAfC,EAA+B,GAAGJ,OAAlCI,CACjB,EAAkD,EAAlD,CALF;AADmB;AAUjB,aAAQ,EAAA;AACV,aAAO,IAAKC,CAAAA,MAAZ;AADU;AAGR,aAAK,CAACC,KAAD,CAAQ;AACf,UAAKD,CAAAA,MAAL,GAAcE,IAAKC,CAAAA,GAAL,CAASD,IAAKE,CAAAA,GAAL,CAASH,KAAT,EAAgB,CAAhB,CAAT,EAA6B,CAA7B,CAAd;AACA,UAAKI,CAAAA,YAAL,EAAA;AAFe;AAKb,YAAO,EAAA;AACT,aAAOb,cAAec,CAAAA,OAAf,CAAuB,IAAKC,CAAAA,KAA5B,CAAP;AADS;AAGP,YAAI,CAACN,KAAD,CAAQ;AAEZ,UAAKM,CAAAA,KAAL,GADmB,QAArB,KAAI,MAAON,MAAX,GACeA,KADf,GAGeX,KAAMA,CAAAA,KAAMkB,CAAAA,MAAOC,CAAAA,QAAnB,CAA4BR,KAA5B,IAAqC,QAArC,CAA+CS,CAAAA,WAA/C,EAFb;AAIF,UAAKL,CAAAA,YAAL,EAAA;AANc;AAQhBA,gBAAY,EAAG;AACb,UAAKM,CAAAA,KAAL,GAAa,IAAKJ,CAAAA,KAAlB,KAA0C,GAA1C,GAA4B,IAAKP,CAAAA,MAAjC,GAAgD,CAAhD,KAAsD,EAAtD;AADa;AA9BC,GAAA;AAAZH,QAAAA,GAAY,qFAAZA;AAmCNA,QAAUC,CAAAA,cAAV,GAA2B,CACzBc,QAAS,CADgB,EAEzBC,QAAS,CAFgB,EAGzBC,EAAG,CAHsB,EAIzBC,EAAG,CAJsB,EAKzBC,OAAQ,CALiB,EAMzBC,OAAQ,CANiB,EAOzBC,SAAU,CAPe,EAQzBC,KAAM,QARmB,EASzBC,MAAO,CATkB,CAA3B;AAaA/B,SAAQgC,CAAAA,QAAR,GAFexB,MAEf;AAzDyI,CAAzI;;",
"sources":["node_modules/pixi_DOT_js/lib/scene/particle-container/shared/Particle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$particle_container$shared$Particle\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Color = require('../../../color/Color.js');\nvar Texture = require('../../../rendering/renderers/shared/texture/Texture.js');\nvar getGlobalMixin = require('../../container/container-mixins/getGlobalMixin.js');\nvar assignWithIgnore = require('../../container/utils/assignWithIgnore.js');\n\n\"use strict\";\nconst _Particle = class _Particle {\n  constructor(options) {\n    if (options instanceof Texture.Texture) {\n      this.texture = options;\n      assignWithIgnore.assignWithIgnore(this, _Particle.defaultOptions, {});\n    } else {\n      const combined = { ..._Particle.defaultOptions, ...options };\n      assignWithIgnore.assignWithIgnore(this, combined, {});\n    }\n  }\n  /** Gets or sets the alpha value of the particle. */\n  get alpha() {\n    return this._alpha;\n  }\n  set alpha(value) {\n    this._alpha = Math.min(Math.max(value, 0), 1);\n    this._updateColor();\n  }\n  /** Gets or sets the tint color of the particle. */\n  get tint() {\n    return getGlobalMixin.bgr2rgb(this._tint);\n  }\n  set tint(value) {\n    if (typeof value === \"number\") {\n      this._tint = value;\n    } else {\n      this._tint = Color.Color.shared.setValue(value ?? 16777215).toBgrNumber();\n    }\n    this._updateColor();\n  }\n  _updateColor() {\n    this.color = this._tint + ((this._alpha * 255 | 0) << 24);\n  }\n};\n/** Default options for constructing with options */\n_Particle.defaultOptions = {\n  anchorX: 0,\n  anchorY: 0,\n  x: 0,\n  y: 0,\n  scaleX: 1,\n  scaleY: 1,\n  rotation: 0,\n  tint: 16777215,\n  alpha: 1\n};\nlet Particle = _Particle;\n\nexports.Particle = Particle;\n//# sourceMappingURL=Particle.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","Texture","getGlobalMixin","assignWithIgnore","constructor","options","texture","_Particle","defaultOptions","combined","_alpha","value","Math","min","max","_updateColor","bgr2rgb","_tint","shared","setValue","toBgrNumber","color","anchorX","anchorY","x","y","scaleX","scaleY","rotation","tint","alpha","Particle"]
}
