{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$Batcher.js",
"lineCount":178,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/rendering/batcher/shared/Batcher.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$rendering$batcher$shared$Batcher\"] = function(global,require,module,exports) {\n'use strict';\n\nvar uid = require('../../../utils/data/uid.js');\nvar ViewableBuffer = require('../../../utils/data/ViewableBuffer.js');\nvar fastCopy = require('../../renderers/shared/buffer/utils/fastCopy.js');\nvar getAdjustedBlendModeBlend = require('../../renderers/shared/state/getAdjustedBlendModeBlend.js');\nvar maxRecommendedTextures = require('../gl/utils/maxRecommendedTextures.js');\nvar BatchTextureArray = require('./BatchTextureArray.js');\n\n\"use strict\";\nclass Batch {\n  constructor() {\n    this.renderPipeId = \"batch\";\n    this.action = \"startBatch\";\n    // TODO - eventually this could be useful for flagging batches as dirty and then only rebuilding those ones\n    // public elementStart = 0;\n    // public elementSize = 0;\n    // for drawing..\n    this.start = 0;\n    this.size = 0;\n    this.textures = new BatchTextureArray.BatchTextureArray();\n    this.blendMode = \"normal\";\n    this.topology = \"triangle-strip\";\n    this.canBundle = true;\n  }\n  destroy() {\n    this.textures = null;\n    this.gpuBindGroup = null;\n    this.bindGroup = null;\n    this.batcher = null;\n  }\n}\nconst batchPool = [];\nlet batchPoolIndex = 0;\nfunction getBatchFromPool() {\n  return batchPoolIndex > 0 ? batchPool[--batchPoolIndex] : new Batch();\n}\nfunction returnBatchToPool(batch) {\n  batchPool[batchPoolIndex++] = batch;\n}\nlet BATCH_TICK = 0;\nconst _Batcher = class _Batcher {\n  constructor(options = {}) {\n    /** unique id for this batcher */\n    this.uid = uid.uid(\"batcher\");\n    /** Indicates whether the batch data has been modified and needs updating. */\n    this.dirty = true;\n    /** The current index of the batch being processed. */\n    this.batchIndex = 0;\n    /** An array of all batches created during the current rendering process. */\n    this.batches = [];\n    this._elements = [];\n    _Batcher.defaultOptions.maxTextures = _Batcher.defaultOptions.maxTextures ?? maxRecommendedTextures.getMaxTexturesPerBatch();\n    options = { ..._Batcher.defaultOptions, ...options };\n    const { maxTextures, attributesInitialSize, indicesInitialSize } = options;\n    this.attributeBuffer = new ViewableBuffer.ViewableBuffer(attributesInitialSize * 4);\n    this.indexBuffer = new Uint16Array(indicesInitialSize);\n    this.maxTextures = maxTextures;\n  }\n  begin() {\n    this.elementSize = 0;\n    this.elementStart = 0;\n    this.indexSize = 0;\n    this.attributeSize = 0;\n    for (let i = 0; i < this.batchIndex; i++) {\n      returnBatchToPool(this.batches[i]);\n    }\n    this.batchIndex = 0;\n    this._batchIndexStart = 0;\n    this._batchIndexSize = 0;\n    this.dirty = true;\n  }\n  add(batchableObject) {\n    this._elements[this.elementSize++] = batchableObject;\n    batchableObject._indexStart = this.indexSize;\n    batchableObject._attributeStart = this.attributeSize;\n    batchableObject._batcher = this;\n    this.indexSize += batchableObject.indexSize;\n    this.attributeSize += batchableObject.attributeSize * this.vertexSize;\n  }\n  checkAndUpdateTexture(batchableObject, texture) {\n    const textureId = batchableObject._batch.textures.ids[texture._source.uid];\n    if (!textureId && textureId !== 0)\n      return false;\n    batchableObject._textureId = textureId;\n    batchableObject.texture = texture;\n    return true;\n  }\n  updateElement(batchableObject) {\n    this.dirty = true;\n    const attributeBuffer = this.attributeBuffer;\n    if (batchableObject.packAsQuad) {\n      this.packQuadAttributes(\n        batchableObject,\n        attributeBuffer.float32View,\n        attributeBuffer.uint32View,\n        batchableObject._attributeStart,\n        batchableObject._textureId\n      );\n    } else {\n      this.packAttributes(\n        batchableObject,\n        attributeBuffer.float32View,\n        attributeBuffer.uint32View,\n        batchableObject._attributeStart,\n        batchableObject._textureId\n      );\n    }\n  }\n  /**\n   * breaks the batcher. This happens when a batch gets too big,\n   * or we need to switch to a different type of rendering (a filter for example)\n   * @param instructionSet\n   */\n  break(instructionSet) {\n    const elements = this._elements;\n    if (!elements[this.elementStart])\n      return;\n    let batch = getBatchFromPool();\n    let textureBatch = batch.textures;\n    textureBatch.clear();\n    const firstElement = elements[this.elementStart];\n    let blendMode = getAdjustedBlendModeBlend.getAdjustedBlendModeBlend(firstElement.blendMode, firstElement.texture._source);\n    let topology = firstElement.topology;\n    if (this.attributeSize * 4 > this.attributeBuffer.size) {\n      this._resizeAttributeBuffer(this.attributeSize * 4);\n    }\n    if (this.indexSize > this.indexBuffer.length) {\n      this._resizeIndexBuffer(this.indexSize);\n    }\n    const f32 = this.attributeBuffer.float32View;\n    const u32 = this.attributeBuffer.uint32View;\n    const indexBuffer = this.indexBuffer;\n    let size = this._batchIndexSize;\n    let start = this._batchIndexStart;\n    let action = \"startBatch\";\n    const maxTextures = this.maxTextures;\n    for (let i = this.elementStart; i < this.elementSize; ++i) {\n      const element = elements[i];\n      elements[i] = null;\n      const texture = element.texture;\n      const source = texture._source;\n      const adjustedBlendMode = getAdjustedBlendModeBlend.getAdjustedBlendModeBlend(element.blendMode, source);\n      const breakRequired = blendMode !== adjustedBlendMode || topology !== element.topology;\n      if (source._batchTick === BATCH_TICK && !breakRequired) {\n        element._textureId = source._textureBindLocation;\n        size += element.indexSize;\n        if (element.packAsQuad) {\n          this.packQuadAttributes(\n            element,\n            f32,\n            u32,\n            element._attributeStart,\n            element._textureId\n          );\n          this.packQuadIndex(\n            indexBuffer,\n            element._indexStart,\n            element._attributeStart / this.vertexSize\n          );\n        } else {\n          this.packAttributes(\n            element,\n            f32,\n            u32,\n            element._attributeStart,\n            element._textureId\n          );\n          this.packIndex(\n            element,\n            indexBuffer,\n            element._indexStart,\n            element._attributeStart / this.vertexSize\n          );\n        }\n        element._batch = batch;\n        continue;\n      }\n      source._batchTick = BATCH_TICK;\n      if (textureBatch.count >= maxTextures || breakRequired) {\n        this._finishBatch(\n          batch,\n          start,\n          size - start,\n          textureBatch,\n          blendMode,\n          topology,\n          instructionSet,\n          action\n        );\n        action = \"renderBatch\";\n        start = size;\n        blendMode = adjustedBlendMode;\n        topology = element.topology;\n        batch = getBatchFromPool();\n        textureBatch = batch.textures;\n        textureBatch.clear();\n        ++BATCH_TICK;\n      }\n      element._textureId = source._textureBindLocation = textureBatch.count;\n      textureBatch.ids[source.uid] = textureBatch.count;\n      textureBatch.textures[textureBatch.count++] = source;\n      element._batch = batch;\n      size += element.indexSize;\n      if (element.packAsQuad) {\n        this.packQuadAttributes(\n          element,\n          f32,\n          u32,\n          element._attributeStart,\n          element._textureId\n        );\n        this.packQuadIndex(\n          indexBuffer,\n          element._indexStart,\n          element._attributeStart / this.vertexSize\n        );\n      } else {\n        this.packAttributes(\n          element,\n          f32,\n          u32,\n          element._attributeStart,\n          element._textureId\n        );\n        this.packIndex(\n          element,\n          indexBuffer,\n          element._indexStart,\n          element._attributeStart / this.vertexSize\n        );\n      }\n    }\n    if (textureBatch.count > 0) {\n      this._finishBatch(\n        batch,\n        start,\n        size - start,\n        textureBatch,\n        blendMode,\n        topology,\n        instructionSet,\n        action\n      );\n      start = size;\n      ++BATCH_TICK;\n    }\n    this.elementStart = this.elementSize;\n    this._batchIndexStart = start;\n    this._batchIndexSize = size;\n  }\n  _finishBatch(batch, indexStart, indexSize, textureBatch, blendMode, topology, instructionSet, action) {\n    batch.gpuBindGroup = null;\n    batch.bindGroup = null;\n    batch.action = action;\n    batch.batcher = this;\n    batch.textures = textureBatch;\n    batch.blendMode = blendMode;\n    batch.topology = topology;\n    batch.start = indexStart;\n    batch.size = indexSize;\n    ++BATCH_TICK;\n    this.batches[this.batchIndex++] = batch;\n    instructionSet.add(batch);\n  }\n  finish(instructionSet) {\n    this.break(instructionSet);\n  }\n  /**\n   * Resizes the attribute buffer to the given size (1 = 1 float32)\n   * @param size - the size in vertices to ensure (not bytes!)\n   */\n  ensureAttributeBuffer(size) {\n    if (size * 4 <= this.attributeBuffer.size)\n      return;\n    this._resizeAttributeBuffer(size * 4);\n  }\n  /**\n   * Resizes the index buffer to the given size (1 = 1 float32)\n   * @param size - the size in vertices to ensure (not bytes!)\n   */\n  ensureIndexBuffer(size) {\n    if (size <= this.indexBuffer.length)\n      return;\n    this._resizeIndexBuffer(size);\n  }\n  _resizeAttributeBuffer(size) {\n    const newSize = Math.max(size, this.attributeBuffer.size * 2);\n    const newArrayBuffer = new ViewableBuffer.ViewableBuffer(newSize);\n    fastCopy.fastCopy(this.attributeBuffer.rawBinaryData, newArrayBuffer.rawBinaryData);\n    this.attributeBuffer = newArrayBuffer;\n  }\n  _resizeIndexBuffer(size) {\n    const indexBuffer = this.indexBuffer;\n    let newSize = Math.max(size, indexBuffer.length * 1.5);\n    newSize += newSize % 2;\n    const newIndexBuffer = newSize > 65535 ? new Uint32Array(newSize) : new Uint16Array(newSize);\n    if (newIndexBuffer.BYTES_PER_ELEMENT !== indexBuffer.BYTES_PER_ELEMENT) {\n      for (let i = 0; i < indexBuffer.length; i++) {\n        newIndexBuffer[i] = indexBuffer[i];\n      }\n    } else {\n      fastCopy.fastCopy(indexBuffer.buffer, newIndexBuffer.buffer);\n    }\n    this.indexBuffer = newIndexBuffer;\n  }\n  packQuadIndex(indexBuffer, index, indicesOffset) {\n    indexBuffer[index] = indicesOffset + 0;\n    indexBuffer[index + 1] = indicesOffset + 1;\n    indexBuffer[index + 2] = indicesOffset + 2;\n    indexBuffer[index + 3] = indicesOffset + 0;\n    indexBuffer[index + 4] = indicesOffset + 2;\n    indexBuffer[index + 5] = indicesOffset + 3;\n  }\n  packIndex(element, indexBuffer, index, indicesOffset) {\n    const indices = element.indices;\n    const size = element.indexSize;\n    const indexOffset = element.indexOffset;\n    const attributeOffset = element.attributeOffset;\n    for (let i = 0; i < size; i++) {\n      indexBuffer[index++] = indicesOffset + indices[i + indexOffset] - attributeOffset;\n    }\n  }\n  destroy() {\n    for (let i = 0; i < this.batches.length; i++) {\n      returnBatchToPool(this.batches[i]);\n    }\n    this.batches = null;\n    for (let i = 0; i < this._elements.length; i++) {\n      this._elements[i]._batch = null;\n    }\n    this._elements = null;\n    this.indexBuffer = null;\n    this.attributeBuffer.destroy();\n    this.attributeBuffer = null;\n  }\n};\n_Batcher.defaultOptions = {\n  maxTextures: null,\n  attributesInitialSize: 4,\n  indicesInitialSize: 6\n};\nlet Batcher = _Batcher;\n\nexports.Batch = Batch;\nexports.Batcher = Batcher;\n//# sourceMappingURL=Batcher.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","uid","ViewableBuffer","fastCopy","getAdjustedBlendModeBlend","maxRecommendedTextures","BatchTextureArray","Batch","constructor","renderPipeId","action","size","start","textures","blendMode","topology","canBundle","destroy","batcher","bindGroup","gpuBindGroup","batchPool","batchPoolIndex","BATCH_TICK","options","dirty","batchIndex","batches","_elements","_Batcher","defaultOptions","maxTextures","getMaxTexturesPerBatch","attributesInitialSize","indicesInitialSize","attributeBuffer","indexBuffer","Uint16Array","begin","attributeSize","indexSize","elementStart","elementSize","i","batch","_batchIndexSize","_batchIndexStart","add","batchableObject","_indexStart","_attributeStart","_batcher","vertexSize","checkAndUpdateTexture","texture","textureId","_batch","ids","_source","_textureId","updateElement","packAsQuad","packQuadAttributes","float32View","uint32View","packAttributes","break","instructionSet","elements","textureBatch","clear","firstElement","_resizeAttributeBuffer","length","_resizeIndexBuffer","f32","u32","element","source","adjustedBlendMode","breakRequired","_batchTick","count","_finishBatch","_textureBindLocation","packQuadIndex","packIndex","indexStart","finish","ensureAttributeBuffer","ensureIndexBuffer","newArrayBuffer","Math","max","newSize","rawBinaryData","newIndexBuffer","Uint32Array","BYTES_PER_ELEMENT","buffer","index","indicesOffset","indices","indexOffset","attributeOffset","Batcher"]
}
