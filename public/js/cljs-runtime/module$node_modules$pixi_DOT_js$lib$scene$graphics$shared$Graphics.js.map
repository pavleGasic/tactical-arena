{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$Graphics.js",
"lineCount":224,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/graphics/shared/Graphics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$graphics$shared$Graphics\"] = function(global,require,module,exports) {\n'use strict';\n\nvar deprecation = require('../../../utils/logging/deprecation.js');\nvar ViewContainer = require('../../view/ViewContainer.js');\nvar GraphicsContext = require('./GraphicsContext.js');\n\n\"use strict\";\nclass Graphics extends ViewContainer.ViewContainer {\n  /**\n   * @param options - Options for the Graphics.\n   */\n  constructor(options) {\n    if (options instanceof GraphicsContext.GraphicsContext) {\n      options = { context: options };\n    }\n    const { context, roundPixels, ...rest } = options || {};\n    super({\n      label: \"Graphics\",\n      ...rest\n    });\n    this.renderPipeId = \"graphics\";\n    if (!context) {\n      this._context = this._ownedContext = new GraphicsContext.GraphicsContext();\n    } else {\n      this._context = context;\n    }\n    this._context.on(\"update\", this.onViewUpdate, this);\n    this.allowChildren = false;\n    this.roundPixels = roundPixels ?? false;\n  }\n  set context(context) {\n    if (context === this._context)\n      return;\n    this._context.off(\"update\", this.onViewUpdate, this);\n    this._context = context;\n    this._context.on(\"update\", this.onViewUpdate, this);\n    this.onViewUpdate();\n  }\n  get context() {\n    return this._context;\n  }\n  /**\n   * The local bounds of the graphic.\n   * @type {rendering.Bounds}\n   */\n  get bounds() {\n    return this._context.bounds;\n  }\n  /**\n   * Graphics objects do not need to update their bounds as the context handles this.\n   * @private\n   */\n  updateBounds() {\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    return this._context.containsPoint(point);\n  }\n  /**\n   * Destroys this graphics renderable and optionally its context.\n   * @param options - Options parameter. A boolean will act as if all options\n   *\n   * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n   * then the context will still be destroyed.\n   *\n   * If you want to explicitly not destroy this context that this graphics created,\n   * then you should pass destroy({ context: false })\n   *\n   * If the context was passed in as an argument to the constructor then it will not be destroyed\n   * @param {boolean} [options.texture=false] - Should destroy the texture of the graphics context\n   * @param {boolean} [options.textureSource=false] - Should destroy the texture source of the graphics context\n   * @param {boolean} [options.context=false] - Should destroy the context\n   */\n  destroy(options) {\n    if (this._ownedContext && !options) {\n      this._ownedContext.destroy(options);\n    } else if (options === true || options?.context === true) {\n      this._context.destroy(options);\n    }\n    this._ownedContext = null;\n    this._context = null;\n    super.destroy(options);\n  }\n  _callContextMethod(method, args) {\n    this.context[method](...args);\n    return this;\n  }\n  // --------------------------------------- GraphicsContext methods ---------------------------------------\n  /**\n   * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n   * pattern, or a more complex style defined by a FillStyle object.\n   * @param {FillInput} args - The fill style to apply. This can be a simple color, a gradient or\n   * pattern object, or a FillStyle or ConvertedFillStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setFillStyle(...args) {\n    return this._callContextMethod(\"setFillStyle\", args);\n  }\n  /**\n   * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n   * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   * @param {StrokeInput} args - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n   * or a StrokeStyle or ConvertedStrokeStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setStrokeStyle(...args) {\n    return this._callContextMethod(\"setStrokeStyle\", args);\n  }\n  fill(...args) {\n    return this._callContextMethod(\"fill\", args);\n  }\n  /**\n   * Strokes the current path with the current stroke style. This method can take an optional\n   * FillStyle parameter to define the stroke's appearance, including its color, width, and other properties.\n   * @param {FillStyle} args - (Optional) The stroke style to apply. Can be defined as a simple color or a more\n   * complex style object. If omitted, uses the current stroke style.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  stroke(...args) {\n    return this._callContextMethod(\"stroke\", args);\n  }\n  texture(...args) {\n    return this._callContextMethod(\"texture\", args);\n  }\n  /**\n   * Resets the current path. Any previous path and its commands are discarded and a new path is\n   * started. This is typically called before beginning a new shape or series of drawing commands.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  beginPath() {\n    return this._callContextMethod(\"beginPath\", []);\n  }\n  /**\n   * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n   * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n   * fail to cut correctly!\n   */\n  cut() {\n    return this._callContextMethod(\"cut\", []);\n  }\n  arc(...args) {\n    return this._callContextMethod(\"arc\", args);\n  }\n  arcTo(...args) {\n    return this._callContextMethod(\"arcTo\", args);\n  }\n  arcToSvg(...args) {\n    return this._callContextMethod(\"arcToSvg\", args);\n  }\n  bezierCurveTo(...args) {\n    return this._callContextMethod(\"bezierCurveTo\", args);\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    return this._callContextMethod(\"closePath\", []);\n  }\n  ellipse(...args) {\n    return this._callContextMethod(\"ellipse\", args);\n  }\n  circle(...args) {\n    return this._callContextMethod(\"circle\", args);\n  }\n  path(...args) {\n    return this._callContextMethod(\"path\", args);\n  }\n  lineTo(...args) {\n    return this._callContextMethod(\"lineTo\", args);\n  }\n  moveTo(...args) {\n    return this._callContextMethod(\"moveTo\", args);\n  }\n  quadraticCurveTo(...args) {\n    return this._callContextMethod(\"quadraticCurveTo\", args);\n  }\n  rect(...args) {\n    return this._callContextMethod(\"rect\", args);\n  }\n  roundRect(...args) {\n    return this._callContextMethod(\"roundRect\", args);\n  }\n  poly(...args) {\n    return this._callContextMethod(\"poly\", args);\n  }\n  regularPoly(...args) {\n    return this._callContextMethod(\"regularPoly\", args);\n  }\n  roundPoly(...args) {\n    return this._callContextMethod(\"roundPoly\", args);\n  }\n  roundShape(...args) {\n    return this._callContextMethod(\"roundShape\", args);\n  }\n  filletRect(...args) {\n    return this._callContextMethod(\"filletRect\", args);\n  }\n  chamferRect(...args) {\n    return this._callContextMethod(\"chamferRect\", args);\n  }\n  star(...args) {\n    return this._callContextMethod(\"star\", args);\n  }\n  svg(...args) {\n    return this._callContextMethod(\"svg\", args);\n  }\n  restore(...args) {\n    return this._callContextMethod(\"restore\", args);\n  }\n  /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n  save() {\n    return this._callContextMethod(\"save\", []);\n  }\n  /**\n   * Returns the current transformation matrix of the graphics context.\n   * @returns The current transformation matrix.\n   */\n  getTransform() {\n    return this.context.getTransform();\n  }\n  /**\n   * Resets the current transformation matrix to the identity matrix, effectively removing\n   * any transformations (rotation, scaling, translation) previously applied.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  resetTransform() {\n    return this._callContextMethod(\"resetTransform\", []);\n  }\n  rotateTransform(...args) {\n    return this._callContextMethod(\"rotate\", args);\n  }\n  scaleTransform(...args) {\n    return this._callContextMethod(\"scale\", args);\n  }\n  setTransform(...args) {\n    return this._callContextMethod(\"setTransform\", args);\n  }\n  transform(...args) {\n    return this._callContextMethod(\"transform\", args);\n  }\n  translateTransform(...args) {\n    return this._callContextMethod(\"translate\", args);\n  }\n  /**\n   * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n   * and optionally resetting transformations to the identity matrix.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  clear() {\n    return this._callContextMethod(\"clear\", []);\n  }\n  /**\n   * The fill style to use.\n   * @type {ConvertedFillStyle}\n   */\n  get fillStyle() {\n    return this._context.fillStyle;\n  }\n  set fillStyle(value) {\n    this._context.fillStyle = value;\n  }\n  /**\n   * The stroke style to use.\n   * @type {ConvertedStrokeStyle}\n   */\n  get strokeStyle() {\n    return this._context.strokeStyle;\n  }\n  set strokeStyle(value) {\n    this._context.strokeStyle = value;\n  }\n  /**\n   * Creates a new Graphics object.\n   * Note that only the context of the object is cloned, not its transform (position,scale,etc)\n   * @param deep - Whether to create a deep clone of the graphics object. If false, the context\n   * will be shared between the two objects (default false). If true, the context will be\n   * cloned (recommended if you need to modify the context in any way).\n   * @returns - A clone of the graphics object\n   */\n  clone(deep = false) {\n    if (deep) {\n      return new Graphics(this._context.clone());\n    }\n    this._ownedContext = null;\n    const clone = new Graphics(this._context);\n    return clone;\n  }\n  // -------- v7 deprecations ---------\n  /**\n   * @param width\n   * @param color\n   * @param alpha\n   * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n   */\n  lineStyle(width, color, alpha) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.\");\n    const strokeStyle = {};\n    width && (strokeStyle.width = width);\n    color && (strokeStyle.color = color);\n    alpha && (strokeStyle.alpha = alpha);\n    this.context.strokeStyle = strokeStyle;\n    return this;\n  }\n  /**\n   * @param color\n   * @param alpha\n   * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n   */\n  beginFill(color, alpha) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.\");\n    const fillStyle = {};\n    if (color !== void 0)\n      fillStyle.color = color;\n    if (alpha !== void 0)\n      fillStyle.alpha = alpha;\n    this.context.fillStyle = fillStyle;\n    return this;\n  }\n  /**\n   * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n   */\n  endFill() {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.\");\n    this.context.fill();\n    const strokeStyle = this.context.strokeStyle;\n    if (strokeStyle.width !== GraphicsContext.GraphicsContext.defaultStrokeStyle.width || strokeStyle.color !== GraphicsContext.GraphicsContext.defaultStrokeStyle.color || strokeStyle.alpha !== GraphicsContext.GraphicsContext.defaultStrokeStyle.alpha) {\n      this.context.stroke();\n    }\n    return this;\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n   */\n  drawCircle(...args) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#drawCircle has been renamed to Graphics#circle\");\n    return this._callContextMethod(\"circle\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n   */\n  drawEllipse(...args) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#drawEllipse has been renamed to Graphics#ellipse\");\n    return this._callContextMethod(\"ellipse\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n   */\n  drawPolygon(...args) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#drawPolygon has been renamed to Graphics#poly\");\n    return this._callContextMethod(\"poly\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n   */\n  drawRect(...args) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#drawRect has been renamed to Graphics#rect\");\n    return this._callContextMethod(\"rect\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n   */\n  drawRoundedRect(...args) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#drawRoundedRect has been renamed to Graphics#roundRect\");\n    return this._callContextMethod(\"roundRect\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n   */\n  drawStar(...args) {\n    deprecation.deprecation(deprecation.v8_0_0, \"Graphics#drawStar has been renamed to Graphics#star\");\n    return this._callContextMethod(\"star\", args);\n  }\n}\n\nexports.Graphics = Graphics;\n//# sourceMappingURL=Graphics.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","deprecation","ViewContainer","GraphicsContext","Graphics","constructor","options","context","roundPixels","rest","label","renderPipeId","_context","_ownedContext","on","onViewUpdate","allowChildren","off","bounds","updateBounds","containsPoint","point","destroy","_callContextMethod","method","args","setFillStyle","setStrokeStyle","fill","stroke","texture","beginPath","cut","arc","arcTo","arcToSvg","bezierCurveTo","closePath","ellipse","circle","path","lineTo","moveTo","quadraticCurveTo","rect","roundRect","poly","regularPoly","roundPoly","roundShape","filletRect","chamferRect","star","svg","restore","save","getTransform","resetTransform","rotateTransform","scaleTransform","setTransform","transform","translateTransform","clear","fillStyle","value","strokeStyle","clone","deep","lineStyle","width","color","alpha","v8_0_0","beginFill","endFill","defaultStrokeStyle","drawCircle","drawEllipse","drawPolygon","drawRect","drawRoundedRect","drawStar"]
}
