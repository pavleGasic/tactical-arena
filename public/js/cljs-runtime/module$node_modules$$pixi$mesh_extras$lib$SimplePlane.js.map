{
"version":3,
"file":"module$node_modules$$pixi$mesh_extras$lib$SimplePlane.js",
"lineCount":33,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,GAA0E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MAE9GC,OAAOH,OAAA,CAAQ,0CAAR,CAFuG,EAEhFI,OAAOJ,OAAA,CAAQ,0CAAR,CAFyE,EAElDK,gBAAgBL,OAAA,CAAQ,kEAAR,CAFkC;AAGlH,OAAMM,YAAN,QAA0BF,KAAKG,CAAAA,IAA/B;AAMEC,eAAW,CAACC,OAAD,EAAUC,SAAV,EAAqBC,SAArB,CAAgC;AACnCC,eAAAA,GAAgB,IAAIP,aAAcA,CAAAA,aAAlB,CAAgCI,OAAQI,CAAAA,KAAxC,EAA+CJ,OAAQK,CAAAA,MAAvD,EAA+DJ,SAA/D,EAA0EC,SAA1E,CAAhBC;AAAsGG,eAAAA,GAAe,IAAIX,IAAKY,CAAAA,YAAT,CAAsBb,IAAKc,CAAAA,OAAQC,CAAAA,KAAnC,CAAfH;AAC5G,WAAA,CAAMH,SAAN,EAAqBG,SAArB,CAAA;AAAoC,UAAKN,CAAAA,OAAL,GAAeA,OAAf;AAAwB,UAAKU,CAAAA,UAAL,GAAkB,CAAA,CAAlB;AAFnB;AAQ3CC,kBAAc,EAAG;AACf,UAAKC,CAAAA,UAAL,GAAkB,IAAKC,CAAAA,MAAOb,CAAAA,OAAQc,CAAAA,SAAtC;AADe,YAETC,WAAW,IAAKA,CAAAA,QAFP,EAEiB,CAAEX,KAAF,EAASC,MAAT,CAAA,GAAoB,IAAKQ,CAAAA,MAAOb,CAAAA,OAFjD;AAGf,UAAKU,CAAAA,UAAL,KAAoBK,QAASX,CAAAA,KAA7B,KAAuCA,KAAvC,IAAgDW,QAASV,CAAAA,MAAzD,KAAoEA,MAApE,MAAgFU,QAASX,CAAAA,KAAT,GAAiB,IAAKS,CAAAA,MAAOb,CAAAA,OAAQI,CAAAA,KAArC,EAA4CW,QAASV,CAAAA,MAArD,GAA8D,IAAKQ,CAAAA,MAAOb,CAAAA,OAAQK,CAAAA,MAAlF,EAA0FU,QAASC,CAAAA,KAAT,EAA1K;AAHe;AAKb,eAAO,CAACC,KAAD,CAAQ;AACjB,UAAKJ,CAAAA,MAAOb,CAAAA,OAAZ,KAAwBiB,KAAxB,KAAkC,IAAKJ,CAAAA,MAAOb,CAAAA,OAAZ,GAAsBiB,KAAtB,EAA6B,IAAKL,CAAAA,UAAlC,GAA+C,CAAC,CAAhD,EAAmDK,KAAMC,CAAAA,WAAYC,CAAAA,KAAlB,GAA0B,IAAKR,CAAAA,cAAL,EAA1B,GAAkDM,KAAMG,CAAAA,IAAN,CAAW,QAAX,EAAqB,IAAKT,CAAAA,cAA1B,EAA0C,IAA1C,CAAvI;AADiB;AAGf,eAAU,EAAA;AACZ,aAAO,IAAKE,CAAAA,MAAOb,CAAAA,OAAnB;AADY;AAGdqB,WAAO,CAACC,QAAD,CAAW;AAChB,UAAKV,CAAAA,UAAL,KAAoB,IAAKC,CAAAA,MAAOb,CAAAA,OAAQc,CAAAA,SAAxC,IAAqD,IAAKH,CAAAA,cAAL,EAArD;AAA4E,WAAMU,CAAAA,OAAN,CAAcC,QAAd,CAAA;AAD5D;AAGlBC,WAAO,CAACC,OAAD,CAAU;AACf,UAAKX,CAAAA,MAAOb,CAAAA,OAAQyB,CAAAA,GAApB,CAAwB,QAAxB,EAAkC,IAAKd,CAAAA,cAAvC,EAAuD,IAAvD,CAAA;AAA8D,WAAMY,CAAAA,OAAN,CAAcC,OAAd,CAAA;AAD/C;AA5BnB;AAgCA/B,SAAQI,CAAAA,WAAR,GAAsBA,WAAtB;AAnCkH,CAAlH;;",
"sources":["node_modules/@pixi/mesh-extras/lib/SimplePlane.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$mesh_extras$lib$SimplePlane\"] = function(global,require,module,exports) {\n\"use strict\";\nvar core = require(\"@pixi/core\"), mesh = require(\"@pixi/mesh\"), PlaneGeometry = require(\"./geometry/PlaneGeometry.js\");\nclass SimplePlane extends mesh.Mesh {\n  /**\n   * @param texture - The texture to use on the SimplePlane.\n   * @param verticesX - The number of vertices in the x-axis\n   * @param verticesY - The number of vertices in the y-axis\n   */\n  constructor(texture, verticesX, verticesY) {\n    const planeGeometry = new PlaneGeometry.PlaneGeometry(texture.width, texture.height, verticesX, verticesY), meshMaterial = new mesh.MeshMaterial(core.Texture.WHITE);\n    super(planeGeometry, meshMaterial), this.texture = texture, this.autoResize = !0;\n  }\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n  textureUpdated() {\n    this._textureID = this.shader.texture._updateID;\n    const geometry = this.geometry, { width, height } = this.shader.texture;\n    this.autoResize && (geometry.width !== width || geometry.height !== height) && (geometry.width = this.shader.texture.width, geometry.height = this.shader.texture.height, geometry.build());\n  }\n  set texture(value) {\n    this.shader.texture !== value && (this.shader.texture = value, this._textureID = -1, value.baseTexture.valid ? this.textureUpdated() : value.once(\"update\", this.textureUpdated, this));\n  }\n  get texture() {\n    return this.shader.texture;\n  }\n  _render(renderer) {\n    this._textureID !== this.shader.texture._updateID && this.textureUpdated(), super._render(renderer);\n  }\n  destroy(options) {\n    this.shader.texture.off(\"update\", this.textureUpdated, this), super.destroy(options);\n  }\n}\nexports.SimplePlane = SimplePlane;\n//# sourceMappingURL=SimplePlane.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","core","mesh","PlaneGeometry","SimplePlane","Mesh","constructor","texture","verticesX","verticesY","planeGeometry","width","height","meshMaterial","MeshMaterial","Texture","WHITE","autoResize","textureUpdated","_textureID","shader","_updateID","geometry","build","value","baseTexture","valid","once","_render","renderer","destroy","options","off"]
}
