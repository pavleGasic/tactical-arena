{
"version":3,
"file":"module$node_modules$pixi_DOT_js$lib$scene$mesh$gpu$GpuMeshAdapter.js",
"lineCount":33,
"mappings":"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",
"sources":["node_modules/pixi_DOT_js/lib/scene/mesh/gpu/GpuMeshAdapter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pixi_DOT_js$lib$scene$mesh$gpu$GpuMeshAdapter\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Extensions = require('../../../extensions/Extensions.js');\nvar Matrix = require('../../../maths/matrix/Matrix.js');\nvar compileHighShaderToProgram = require('../../../rendering/high-shader/compileHighShaderToProgram.js');\nvar localUniformBit = require('../../../rendering/high-shader/shader-bits/localUniformBit.js');\nvar roundPixelsBit = require('../../../rendering/high-shader/shader-bits/roundPixelsBit.js');\nvar textureBit = require('../../../rendering/high-shader/shader-bits/textureBit.js');\nvar Shader = require('../../../rendering/renderers/shared/shader/Shader.js');\nvar Texture = require('../../../rendering/renderers/shared/texture/Texture.js');\nvar warn = require('../../../utils/logging/warn.js');\n\n\"use strict\";\nclass GpuMeshAdapter {\n  init() {\n    const gpuProgram = compileHighShaderToProgram.compileHighShaderGpuProgram({\n      name: \"mesh\",\n      bits: [\n        localUniformBit.localUniformBit,\n        textureBit.textureBit,\n        roundPixelsBit.roundPixelsBit\n      ]\n    });\n    this._shader = new Shader.Shader({\n      gpuProgram,\n      resources: {\n        uTexture: Texture.Texture.EMPTY._source,\n        uSampler: Texture.Texture.EMPTY._source.style,\n        textureUniforms: {\n          uTextureMatrix: { type: \"mat3x3<f32>\", value: new Matrix.Matrix() }\n        }\n      }\n    });\n  }\n  execute(meshPipe, mesh) {\n    const renderer = meshPipe.renderer;\n    let shader = mesh._shader;\n    if (!shader) {\n      shader = this._shader;\n      shader.groups[2] = renderer.texture.getTextureBindGroup(mesh.texture);\n    } else if (!shader.gpuProgram) {\n      warn.warn(\"Mesh shader has no gpuProgram\", mesh.shader);\n      return;\n    }\n    const gpuProgram = shader.gpuProgram;\n    if (gpuProgram.autoAssignGlobalUniforms) {\n      shader.groups[0] = renderer.globalUniforms.bindGroup;\n    }\n    if (gpuProgram.autoAssignLocalUniforms) {\n      const localUniforms = meshPipe.localUniforms;\n      shader.groups[1] = renderer.renderPipes.uniformBatch.getUniformBindGroup(localUniforms, true);\n    }\n    renderer.encoder.draw({\n      geometry: mesh._geometry,\n      shader,\n      state: mesh.state\n    });\n  }\n  destroy() {\n    this._shader.destroy(true);\n    this._shader = null;\n  }\n}\n/** @ignore */\nGpuMeshAdapter.extension = {\n  type: [\n    Extensions.ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"mesh\"\n};\n\nexports.GpuMeshAdapter = GpuMeshAdapter;\n//# sourceMappingURL=GpuMeshAdapter.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extensions","Matrix","compileHighShaderToProgram","localUniformBit","roundPixelsBit","textureBit","Shader","Texture","warn","GpuMeshAdapter","init","gpuProgram","compileHighShaderGpuProgram","name","bits","_shader","resources","uTexture","EMPTY","_source","uSampler","style","textureUniforms","uTextureMatrix","type","value","execute","meshPipe","mesh","renderer","shader","groups","texture","getTextureBindGroup","autoAssignGlobalUniforms","globalUniforms","bindGroup","autoAssignLocalUniforms","renderPipes","uniformBatch","getUniformBindGroup","localUniforms","encoder","draw","geometry","_geometry","state","destroy","extension","ExtensionType","WebGPUPipesAdaptor"]
}
